
/Users/mitchellscott/Desktop/rufous/src/firmware/build/examples/system_graph/vector_tests.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
60001426:	4770      	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	4b66      	ldr	r3, [pc, #408]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	4a66      	ldr	r2, [pc, #408]	; (600015c8 <ResetHandler+0x1a0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	4866      	ldr	r0, [pc, #408]	; (600015cc <ResetHandler+0x1a4>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	4a65      	ldr	r2, [pc, #404]	; (600015d0 <ResetHandler+0x1a8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	f3bf 8f6f 	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	f000 f930 	bl	600016ac <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	4b61      	ldr	r3, [pc, #388]	; (600015d4 <ResetHandler+0x1ac>)
6000144e:	2008      	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	4a61      	ldr	r2, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
60001452:	4962      	ldr	r1, [pc, #392]	; (600015dc <ResetHandler+0x1b4>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	4861      	ldr	r0, [pc, #388]	; (600015e0 <ResetHandler+0x1b8>)
6000145a:	f7ff ffd1 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	4a61      	ldr	r2, [pc, #388]	; (600015e4 <ResetHandler+0x1bc>)
60001460:	4961      	ldr	r1, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001462:	4862      	ldr	r0, [pc, #392]	; (600015ec <ResetHandler+0x1c4>)
60001464:	f7ff ffcc 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	4961      	ldr	r1, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146a:	4862      	ldr	r0, [pc, #392]	; (600015f4 <ResetHandler+0x1cc>)
6000146c:	f7ff ffd4 	bl	60001418 <memory_clear>
60001470:	4c61      	ldr	r4, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	4962      	ldr	r1, [pc, #392]	; (600015fc <ResetHandler+0x1d4>)
60001474:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	2300      	movs	r3, #0
6000147a:	4a61      	ldr	r2, [pc, #388]	; (60001600 <ResetHandler+0x1d8>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	6008      	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
60001482:	3301      	adds	r3, #1
60001484:	2bb0      	cmp	r3, #176	; 0xb0
60001486:	d1fa      	bne.n	6000147e <ResetHandler+0x56>
60001488:	4b5e      	ldr	r3, [pc, #376]	; (60001604 <ResetHandler+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	2180      	movs	r1, #128	; 0x80
6000148c:	4a5e      	ldr	r2, [pc, #376]	; (60001608 <ResetHandler+0x1e0>)
6000148e:	f803 1b01 	strb.w	r1, [r3], #1
60001492:	4293      	cmp	r3, r2
60001494:	d1fb      	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	4d4f      	ldr	r5, [pc, #316]	; (600015d4 <ResetHandler+0x1ac>)
60001498:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	495b      	ldr	r1, [pc, #364]	; (6000160c <ResetHandler+0x1e4>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	4b5b      	ldr	r3, [pc, #364]	; (60001610 <ResetHandler+0x1e8>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	2600      	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000164c <ResetHandler+0x224>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 60001650 <ResetHandler+0x228>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	601c      	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	680b      	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	4f54      	ldr	r7, [pc, #336]	; (60001614 <ResetHandler+0x1ec>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014c8:	600b      	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	69fb      	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	493d      	ldr	r1, [pc, #244]	; (600015c4 <ResetHandler+0x19c>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d6:	61fb      	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014e2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	f000 f8e4 	bl	600016b8 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	4a49      	ldr	r2, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[15] = systick_isr;
600014f2:	4b4a      	ldr	r3, [pc, #296]	; (6000161c <ResetHandler+0x1f4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	2063      	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	63a2      	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	2103      	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	4a48      	ldr	r2, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
	SYST_CVR = 0;
600014fe:	4b49      	ldr	r3, [pc, #292]	; (60001624 <ResetHandler+0x1fc>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	601e      	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	f842 1c04 	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	f600 70a1 	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	4945      	ldr	r1, [pc, #276]	; (60001628 <ResetHandler+0x200>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	4a46      	ldr	r2, [pc, #280]	; (6000162c <ResetHandler+0x204>)
60001514:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	4a45      	ldr	r2, [pc, #276]	; (60001630 <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	4943      	ldr	r1, [pc, #268]	; (60001634 <ResetHandler+0x20c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	f043 0301 	orr.w	r3, r3, #1
6000152a:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	6803      	ldr	r3, [r0, #0]
6000152e:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	f000 fb12 	bl	60001b58 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	483f      	ldr	r0, [pc, #252]	; (60001638 <ResetHandler+0x210>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	f000 fc7b 	bl	60001e40 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	4a3b      	ldr	r2, [pc, #236]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	4b3b      	ldr	r3, [pc, #236]	; (60001640 <ResetHandler+0x218>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	66f9      	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	6016      	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	f8c2 6118 	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	f8c2 6128 	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	f8c2 6138 	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000156a:	07d2      	lsls	r2, r2, #31
6000156c:	d408      	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	4934      	ldr	r1, [pc, #208]	; (60001644 <ResetHandler+0x21c>)
60001574:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000157a:	f042 0201 	orr.w	r2, r2, #1
6000157e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	4a2f      	ldr	r2, [pc, #188]	; (60001640 <ResetHandler+0x218>)
60001582:	4c31      	ldr	r4, [pc, #196]	; (60001648 <ResetHandler+0x220>)
60001584:	6893      	ldr	r3, [r2, #8]
60001586:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000158a:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000158c:	f000 f906 	bl	6000179c <configure_external_ram>
#endif
	analog_init();
60001590:	f000 f860 	bl	60001654 <analog_init>
	pwm_init();
60001594:	f000 fc64 	bl	60001e60 <__pwm_init_veneer>
	tempmon_init();
60001598:	f000 fb10 	bl	60001bbc <tempmon_init>
	startup_middle_hook();
6000159c:	f000 f888 	bl	600016b0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015a0:	6823      	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015a2:	2b13      	cmp	r3, #19
600015a4:	d9fc      	bls.n	600015a0 <ResetHandler+0x178>
	usb_init();
600015a6:	f000 fb97 	bl	60001cd8 <usb_init>
600015aa:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015b0:	d3fb      	bcc.n	600015aa <ResetHandler+0x182>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015b2:	f000 f87f 	bl	600016b4 <startup_default_late_hook>
	__libc_init_array();
600015b6:	f000 fc37 	bl	60001e28 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015ba:	f000 fc4d 	bl	60001e58 <__main_veneer>
	
	while (1) asm("WFI");
600015be:	bf30      	wfi
600015c0:	e7fd      	b.n	600015be <ResetHandler+0x196>
600015c2:	bf00      	nop
600015c4:	400ac000 	.word	0x400ac000
600015c8:	aaaaaaab 	.word	0xaaaaaaab
600015cc:	00200007 	.word	0x00200007
600015d0:	20078000 	.word	0x20078000
600015d4:	400d8000 	.word	0x400d8000
600015d8:	000063d8 	.word	0x000063d8
600015dc:	60001f58 	.word	0x60001f58
600015e0:	00000000 	.word	0x00000000
600015e4:	20001ac0 	.word	0x20001ac0
600015e8:	60008334 	.word	0x60008334
600015ec:	20000000 	.word	0x20000000
600015f0:	20002000 	.word	0x20002000
600015f4:	20001ac0 	.word	0x20001ac0
600015f8:	20001800 	.word	0x20001800
600015fc:	e000ed88 	.word	0xe000ed88
60001600:	00000ecd 	.word	0x00000ecd
60001604:	e000e400 	.word	0xe000e400
60001608:	e000e4a0 	.word	0xe000e4a0
6000160c:	e000ed24 	.word	0xe000ed24
60001610:	e000ed08 	.word	0xe000ed08
60001614:	400fc000 	.word	0x400fc000
60001618:	0000202d 	.word	0x0000202d
6000161c:	00002031 	.word	0x00002031
60001620:	e000e014 	.word	0xe000e014
60001624:	e000e018 	.word	0xe000e018
60001628:	e000edfc 	.word	0xe000edfc
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	20001f40 	.word	0x20001f40
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	20001f44 	.word	0x20001f44
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001654:	4b11      	ldr	r3, [pc, #68]	; (6000169c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001656:	4912      	ldr	r1, [pc, #72]	; (600016a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001658:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000165a:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000165c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001660:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001662:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001664:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001668:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000166a:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000166c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001670:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001672:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001674:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001676:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001678:	061b      	lsls	r3, r3, #24
6000167a:	d4fc      	bmi.n	60001676 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000167c:	4b09      	ldr	r3, [pc, #36]	; (600016a4 <analog_init+0x50>)
6000167e:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001682:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001684:	461a      	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001686:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001688:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000168a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000168c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001690:	d1fb      	bne.n	6000168a <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
60001692:	4a05      	ldr	r2, [pc, #20]	; (600016a8 <analog_init+0x54>)
60001694:	7013      	strb	r3, [r2, #0]
}
60001696:	bc30      	pop	{r4, r5}
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	400fc000 	.word	0x400fc000
600016a0:	400c4000 	.word	0x400c4000
600016a4:	400c8000 	.word	0x400c8000
600016a8:	20001f56 	.word	0x20001f56

600016ac <startup_default_early_hook>:
600016ac:	4770      	bx	lr
600016ae:	bf00      	nop

600016b0 <startup_default_middle_hook>:
600016b0:	4770      	bx	lr
600016b2:	bf00      	nop

600016b4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600016b4:	4770      	bx	lr
600016b6:	bf00      	nop

600016b8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016ba:	4a24      	ldr	r2, [pc, #144]	; (6000174c <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016bc:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016be:	4b24      	ldr	r3, [pc, #144]	; (60001750 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016c0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016c4:	4c23      	ldr	r4, [pc, #140]	; (60001754 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016c6:	2611      	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001794 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016cc:	2712      	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016ce:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016d0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016d2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016d6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016dc:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 60001798 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016e0:	4e1d      	ldr	r6, [pc, #116]	; (60001758 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016e2:	f8c3 e000 	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016e6:	491d      	ldr	r1, [pc, #116]	; (6000175c <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016e8:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ea:	601e      	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ec:	f041 0115 	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f0:	4f1b      	ldr	r7, [pc, #108]	; (60001760 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f2:	4e1c      	ldr	r6, [pc, #112]	; (60001764 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016f8:	4f1b      	ldr	r7, [pc, #108]	; (60001768 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fa:	4e1c      	ldr	r6, [pc, #112]	; (6000176c <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016fc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fe:	601e      	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001700:	4f1b      	ldr	r7, [pc, #108]	; (60001770 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001702:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001704:	4e1b      	ldr	r6, [pc, #108]	; (60001774 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001706:	491c      	ldr	r1, [pc, #112]	; (60001778 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001708:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000170a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000170c:	4f1b      	ldr	r7, [pc, #108]	; (6000177c <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000170e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001710:	4e1b      	ldr	r6, [pc, #108]	; (60001780 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001712:	491c      	ldr	r1, [pc, #112]	; (60001784 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001714:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001716:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001718:	4f1b      	ldr	r7, [pc, #108]	; (60001788 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000171a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000171c:	4e1b      	ldr	r6, [pc, #108]	; (6000178c <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000171e:	491c      	ldr	r1, [pc, #112]	; (60001790 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001720:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001722:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001724:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001726:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001728:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001730:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001734:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001738:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001740:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001744:	f842 3c88 	str.w	r3, [r2, #-136]
60001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000174a:	bf00      	nop
6000174c:	e000ed9c 	.word	0xe000ed9c
60001750:	e000eda0 	.word	0xe000eda0
60001754:	e000ed94 	.word	0xe000ed94
60001758:	00100009 	.word	0x00100009
6000175c:	20002000 	.word	0x20002000
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	13100033 	.word	0x13100033
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	130b002f 	.word	0x130b002f
60001794:	1000003f 	.word	0x1000003f
60001798:	03080025 	.word	0x03080025

6000179c <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000179c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179e:	4b8d      	ldr	r3, [pc, #564]	; (600019d4 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017a0:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017a2:	4e8d      	ldr	r6, [pc, #564]	; (600019d8 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a4:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a6:	498d      	ldr	r1, [pc, #564]	; (600019dc <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017a8:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ac:	4d8c      	ldr	r5, [pc, #560]	; (600019e0 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	4c8c      	ldr	r4, [pc, #560]	; (600019e4 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600017b4:	b083      	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017b6:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ba:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600017be:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017c0:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017c4:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017c8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017cc:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017d0:	4985      	ldr	r1, [pc, #532]	; (600019e8 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d2:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d6:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017da:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017de:	4e83      	ldr	r6, [pc, #524]	; (600019ec <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017e0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017e2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017e4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017e6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017e8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600017f6:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017fe:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001802:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001806:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000180a:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
6000180e:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001812:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001814:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001816:	4876      	ldr	r0, [pc, #472]	; (600019f0 <configure_external_ram+0x254>)
60001818:	4018      	ands	r0, r3
6000181a:	4b76      	ldr	r3, [pc, #472]	; (600019f4 <configure_external_ram+0x258>)
6000181c:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000181e:	4876      	ldr	r0, [pc, #472]	; (600019f8 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001820:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001822:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001826:	f043 030c 	orr.w	r3, r3, #12
6000182a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000182e:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001830:	6803      	ldr	r3, [r0, #0]
60001832:	4333      	orrs	r3, r6
60001834:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001836:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001838:	ea03 0e0e 	and.w	lr, r3, lr
6000183c:	4b6f      	ldr	r3, [pc, #444]	; (600019fc <configure_external_ram+0x260>)
6000183e:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001842:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 60001a34 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001846:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001848:	4b6d      	ldr	r3, [pc, #436]	; (60001a00 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000184a:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000184c:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001850:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4f6c      	ldr	r7, [pc, #432]	; (60001a04 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001858:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000185a:	68c3      	ldr	r3, [r0, #12]
6000185c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001860:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001862:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001864:	401f      	ands	r7, r3
60001866:	4b68      	ldr	r3, [pc, #416]	; (60001a08 <configure_external_ram+0x26c>)
60001868:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000186a:	4f66      	ldr	r7, [pc, #408]	; (60001a04 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186c:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186e:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001870:	401f      	ands	r7, r3
60001872:	4b65      	ldr	r3, [pc, #404]	; (60001a08 <configure_external_ram+0x26c>)
60001874:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001876:	4f65      	ldr	r7, [pc, #404]	; (60001a0c <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001878:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000187a:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000187c:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000187e:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001882:	4f63      	ldr	r7, [pc, #396]	; (60001a10 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001888:	f043 0301 	orr.w	r3, r3, #1
6000188c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001890:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	f8df e184 	ldr.w	lr, [pc, #388]	; 60001a1c <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000189c:	f043 0301 	orr.w	r3, r3, #1
600018a0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600018a4:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018a6:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018a8:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018aa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ae:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b0:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018b2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018b6:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b8:	4b56      	ldr	r3, [pc, #344]	; (60001a14 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018ba:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018be:	4a56      	ldr	r2, [pc, #344]	; (60001a18 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018c0:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018c2:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018c6:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018c8:	f843 1b04 	str.w	r1, [r3], #4
600018cc:	4293      	cmp	r3, r2
600018ce:	d1fb      	bne.n	600018c8 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d0:	4b49      	ldr	r3, [pc, #292]	; (600019f8 <configure_external_ram+0x25c>)
600018d2:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018d4:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d6:	f042 0201 	orr.w	r2, r2, #1
600018da:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018dc:	680b      	ldr	r3, [r1, #0]
600018de:	4a46      	ldr	r2, [pc, #280]	; (600019f8 <configure_external_ram+0x25c>)
600018e0:	f013 0301 	ands.w	r3, r3, #1
600018e4:	d1fa      	bne.n	600018dc <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018e6:	4e4d      	ldr	r6, [pc, #308]	; (60001a1c <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018e8:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018ea:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018ee:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018f2:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f6:	4f4a      	ldr	r7, [pc, #296]	; (60001a20 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018f8:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fa:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018fe:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001904:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001908:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000190c:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001910:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001912:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001916:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001918:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000191c:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001920:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001924:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001928:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000192c:	4e3d      	ldr	r6, [pc, #244]	; (60001a24 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000192e:	4d3e      	ldr	r5, [pc, #248]	; (60001a28 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001930:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001934:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001938:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000193c:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001944:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	4a2a      	ldr	r2, [pc, #168]	; (600019f8 <configure_external_ram+0x25c>)
60001950:	07dd      	lsls	r5, r3, #31
60001952:	d5fb      	bpl.n	6000194c <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001954:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001956:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001958:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000195c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001960:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001964:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	694b      	ldr	r3, [r1, #20]
6000196e:	4a22      	ldr	r2, [pc, #136]	; (600019f8 <configure_external_ram+0x25c>)
60001970:	07dc      	lsls	r4, r3, #31
60001972:	d5fb      	bpl.n	6000196c <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001974:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001976:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000197e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001980:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001984:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001988:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198c:	694b      	ldr	r3, [r1, #20]
6000198e:	4a1a      	ldr	r2, [pc, #104]	; (600019f8 <configure_external_ram+0x25c>)
60001990:	07d8      	lsls	r0, r3, #31
60001992:	d5fb      	bpl.n	6000198c <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001994:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001996:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001998:	4824      	ldr	r0, [pc, #144]	; (60001a2c <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199a:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199c:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000199e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019a2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019aa:	694b      	ldr	r3, [r1, #20]
600019ac:	4a12      	ldr	r2, [pc, #72]	; (600019f8 <configure_external_ram+0x25c>)
600019ae:	07db      	lsls	r3, r3, #31
600019b0:	d5fb      	bpl.n	600019aa <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
600019b2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019b6:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ba:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019bc:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019be:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019c0:	428b      	cmp	r3, r1
600019c2:	d039      	beq.n	60001a38 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600019c4:	4b1a      	ldr	r3, [pc, #104]	; (60001a30 <configure_external_ram+0x294>)
600019c6:	2200      	movs	r2, #0
600019c8:	601a      	str	r2, [r3, #0]
600019ca:	605a      	str	r2, [r3, #4]
600019cc:	609a      	str	r2, [r3, #8]
600019ce:	60da      	str	r2, [r3, #12]
	}
}
600019d0:	b003      	add	sp, #12
600019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
600019d4:	401f8000 	.word	0x401f8000
600019d8:	000170f9 	.word	0x000170f9
600019dc:	0001b0f9 	.word	0x0001b0f9
600019e0:	000110f9 	.word	0x000110f9
600019e4:	000100f9 	.word	0x000100f9
600019e8:	401f8400 	.word	0x401f8400
600019ec:	400fc000 	.word	0x400fc000
600019f0:	1ffffcff 	.word	0x1ffffcff
600019f4:	a0000300 	.word	0xa0000300
600019f8:	402a4000 	.word	0x402a4000
600019fc:	ffff0012 	.word	0xffff0012
60001a00:	00f737ff 	.word	0x00f737ff
60001a04:	7cf0ff00 	.word	0x7cf0ff00
60001a08:	80000040 	.word	0x80000040
60001a0c:	830f00ff 	.word	0x830f00ff
60001a10:	00020063 	.word	0x00020063
60001a14:	402a4200 	.word	0x402a4200
60001a18:	402a4300 	.word	0x402a4300
60001a1c:	5af05af0 	.word	0x5af05af0
60001a20:	3018049f 	.word	0x3018049f
60001a24:	26013206 	.word	0x26013206
60001a28:	0a180638 	.word	0x0a180638
60001a2c:	00030004 	.word	0x00030004
60001a30:	20001fc4 	.word	0x20001fc4
60001a34:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a38:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a42:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a46:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4e:	694b      	ldr	r3, [r1, #20]
60001a50:	4a3b      	ldr	r2, [pc, #236]	; (60001b40 <configure_external_ram+0x3a4>)
60001a52:	07df      	lsls	r7, r3, #31
60001a54:	d5fb      	bpl.n	60001a4e <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a58:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a60:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a62:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a66:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a6e:	694b      	ldr	r3, [r1, #20]
60001a70:	4a33      	ldr	r2, [pc, #204]	; (60001b40 <configure_external_ram+0x3a4>)
60001a72:	07de      	lsls	r6, r3, #31
60001a74:	d5fb      	bpl.n	60001a6e <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a78:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a82:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a84:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a88:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a90:	694b      	ldr	r3, [r1, #20]
60001a92:	4a2b      	ldr	r2, [pc, #172]	; (60001b40 <configure_external_ram+0x3a4>)
60001a94:	07dd      	lsls	r5, r3, #31
60001a96:	d5fb      	bpl.n	60001a90 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a98:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a9a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa2:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aa4:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001aa6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aaa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab2:	694b      	ldr	r3, [r1, #20]
60001ab4:	4a22      	ldr	r2, [pc, #136]	; (60001b40 <configure_external_ram+0x3a4>)
60001ab6:	07dc      	lsls	r4, r3, #31
60001ab8:	d5fb      	bpl.n	60001ab2 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001abc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	4820      	ldr	r0, [pc, #128]	; (60001b44 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac2:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ac4:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001ac6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aca:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ace:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad2:	694b      	ldr	r3, [r1, #20]
60001ad4:	4a1a      	ldr	r2, [pc, #104]	; (60001b40 <configure_external_ram+0x3a4>)
60001ad6:	07d8      	lsls	r0, r3, #31
60001ad8:	d5fb      	bpl.n	60001ad2 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001ada:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ade:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae2:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae4:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae6:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae8:	428b      	cmp	r3, r1
60001aea:	d010      	beq.n	60001b0e <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001aec:	4b16      	ldr	r3, [pc, #88]	; (60001b48 <configure_external_ram+0x3ac>)
60001aee:	2208      	movs	r2, #8
60001af0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
60001af4:	701a      	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af6:	4915      	ldr	r1, [pc, #84]	; (60001b4c <configure_external_ram+0x3b0>)
60001af8:	2000      	movs	r0, #0
60001afa:	4a15      	ldr	r2, [pc, #84]	; (60001b50 <configure_external_ram+0x3b4>)
60001afc:	2301      	movs	r3, #1
60001afe:	9000      	str	r0, [sp, #0]
60001b00:	1a52      	subs	r2, r2, r1
60001b02:	4814      	ldr	r0, [pc, #80]	; (60001b54 <configure_external_ram+0x3b8>)
60001b04:	4422      	add	r2, r4
60001b06:	f000 f993 	bl	60001e30 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001b0a:	b003      	add	sp, #12
60001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b12:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b16:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b18:	4610      	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b1a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1e:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b26:	6943      	ldr	r3, [r0, #20]
60001b28:	4905      	ldr	r1, [pc, #20]	; (60001b40 <configure_external_ram+0x3a4>)
60001b2a:	07db      	lsls	r3, r3, #31
60001b2c:	d5fb      	bpl.n	60001b26 <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b2e:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b30:	4b05      	ldr	r3, [pc, #20]	; (60001b48 <configure_external_ram+0x3ac>)
60001b32:	2210      	movs	r2, #16
60001b34:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b38:	6148      	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b3a:	701a      	strb	r2, [r3, #0]
60001b3c:	e7db      	b.n	60001af6 <configure_external_ram+0x35a>
60001b3e:	bf00      	nop
60001b40:	402a4000 	.word	0x402a4000
60001b44:	00030004 	.word	0x00030004
60001b48:	20001f57 	.word	0x20001f57
60001b4c:	70000000 	.word	0x70000000
60001b50:	70000000 	.word	0x70000000
60001b54:	20001fc4 	.word	0x20001fc4

60001b58 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001b58:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b5a:	4a17      	ldr	r2, [pc, #92]	; (60001bb8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b5c:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b62:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b66:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b6a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b6e:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b72:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b74:	f013 0f02 	tst.w	r3, #2
60001b78:	d006      	beq.n	60001b88 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7a:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b7c:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b7e:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b80:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b82:	f013 0f02 	tst.w	r3, #2
60001b86:	d1f8      	bne.n	60001b7a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b8c:	d101      	bne.n	60001b92 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b8e:	6155      	str	r5, [r2, #20]
			continue;
60001b90:	e7ef      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b96:	d101      	bne.n	60001b9c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b98:	6156      	str	r6, [r2, #20]
			continue;
60001b9a:	e7ea      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9c:	2b00      	cmp	r3, #0
60001b9e:	dae8      	bge.n	60001b72 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001ba0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba4:	d001      	beq.n	60001baa <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ba6:	6191      	str	r1, [r2, #24]
			continue;
60001ba8:	e7e3      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001baa:	065b      	lsls	r3, r3, #25
60001bac:	d401      	bmi.n	60001bb2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bae:	6157      	str	r7, [r2, #20]
			continue;
60001bb0:	e7df      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001bb2:	bcf0      	pop	{r4, r5, r6, r7}
60001bb4:	4770      	bx	lr
60001bb6:	bf00      	nop
60001bb8:	400d8000 	.word	0x400d8000

60001bbc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bbc:	4a39      	ldr	r2, [pc, #228]	; (60001ca4 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bbe:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bc0:	4939      	ldr	r1, [pc, #228]	; (60001ca8 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bc2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc6:	6813      	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bc8:	ed9f 6a38 	vldr	s12, [pc, #224]	; 60001cac <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bcc:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bd0:	eddf 6a37 	vldr	s13, [pc, #220]	; 60001cb0 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001bd4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd6:	6013      	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd8:	2400      	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bda:	6110      	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bdc:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be0:	4f34      	ldr	r7, [pc, #208]	; (60001cb4 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001be2:	b2d8      	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001be4:	f3c3 210b 	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be8:	0d1b      	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bea:	4e33      	ldr	r6, [pc, #204]	; (60001cb8 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bec:	ee07 0a10 	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bf0:	ee05 1a10 	vmov	s10, r1
60001bf4:	ee07 3a90 	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf8:	4b30      	ldr	r3, [pc, #192]	; (60001cbc <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bfa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bfe:	4d30      	ldr	r5, [pc, #192]	; (60001cc0 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c04:	6030      	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c0a:	6029      	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c0c:	492d      	ldr	r1, [pc, #180]	; (60001cc4 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c0e:	ee37 6a46 	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c12:	4e2d      	ldr	r6, [pc, #180]	; (60001cc8 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c14:	ee77 7ac5 	vsub.f32	s15, s15, s10
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c18:	482c      	ldr	r0, [pc, #176]	; (60001ccc <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c1a:	ee77 6a66 	vsub.f32	s13, s14, s13
60001c1e:	4d2c      	ldr	r5, [pc, #176]	; (60001cd0 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c20:	ee37 7a65 	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c24:	ee26 6a27 	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c28:	edc7 7a00 	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c30:	6817      	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c36:	ed83 7a00 	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3a:	eec6 5a07 	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3e:	ee86 6a87 	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c42:	eec7 6a87 	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c46:	ee35 7a85 	vadd.f32	s14, s11, s10
60001c4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c4e:	ee36 7a05 	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c52:	ee17 3a90 	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c56:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c5a:	ea47 5303 	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c5e:	ee76 7a85 	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c62:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c64:	ee17 3a10 	vmov	r3, s14
60001c68:	f8d2 7110 	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c70:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c74:	4339      	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c76:	ee17 3a90 	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7a:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c82:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001c86:	430b      	orrs	r3, r1
60001c88:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c8c:	6813      	ldr	r3, [r2, #0]
60001c8e:	f043 0302 	orr.w	r3, r3, #2
60001c92:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c94:	7034      	strb	r4, [r6, #0]
60001c96:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c9a:	4b0e      	ldr	r3, [pc, #56]	; (60001cd4 <tempmon_init+0x118>)
60001c9c:	2201      	movs	r2, #1
}
60001c9e:	bcf0      	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ca0:	601a      	str	r2, [r3, #0]
}
60001ca2:	4770      	bx	lr
60001ca4:	400d8180 	.word	0x400d8180
60001ca8:	401f4400 	.word	0x401f4400
60001cac:	42aa0000 	.word	0x42aa0000
60001cb0:	42b40000 	.word	0x42b40000
60001cb4:	20001f38 	.word	0x20001f38
60001cb8:	20001f30 	.word	0x20001f30
60001cbc:	20001f34 	.word	0x20001f34
60001cc0:	20001f2c 	.word	0x20001f2c
60001cc4:	0fff0000 	.word	0x0fff0000
60001cc8:	e000e440 	.word	0xe000e440
60001ccc:	20001800 	.word	0x20001800
60001cd0:	00001091 	.word	0x00001091
60001cd4:	e000e108 	.word	0xe000e108

60001cd8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cd8:	4b30      	ldr	r3, [pc, #192]	; (60001d9c <usb_init+0xc4>)
60001cda:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001cde:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ce0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001ce4:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001ce8:	f000 f8ae 	bl	60001e48 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cec:	492c      	ldr	r1, [pc, #176]	; (60001da0 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cee:	482d      	ldr	r0, [pc, #180]	; (60001da4 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cf4:	4c2c      	ldr	r4, [pc, #176]	; (60001da8 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf6:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cfa:	4b2c      	ldr	r3, [pc, #176]	; (60001dac <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cfc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d00:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d04:	6822      	ldr	r2, [r4, #0]
60001d06:	4013      	ands	r3, r2
60001d08:	b91b      	cbnz	r3, 60001d12 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d0a:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001d0e:	079a      	lsls	r2, r3, #30
60001d10:	d01a      	beq.n	60001d48 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d12:	4b24      	ldr	r3, [pc, #144]	; (60001da4 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d18:	4a23      	ldr	r2, [pc, #140]	; (60001da8 <usb_init+0xd0>)
60001d1a:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d1c:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d1e:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001d22:	f041 0102 	orr.w	r1, r1, #2
60001d26:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d2a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d2e:	079b      	lsls	r3, r3, #30
60001d30:	d4fb      	bmi.n	60001d2a <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d36:	491e      	ldr	r1, [pc, #120]	; (60001db0 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d38:	4b1b      	ldr	r3, [pc, #108]	; (60001da8 <usb_init+0xd0>)
60001d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d3e:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d40:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d42:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d44:	f000 f878 	bl	60001e38 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d48:	4d1a      	ldr	r5, [pc, #104]	; (60001db4 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d4a:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d4c:	4b16      	ldr	r3, [pc, #88]	; (60001da8 <usb_init+0xd0>)
60001d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d52:	4c14      	ldr	r4, [pc, #80]	; (60001da4 <usb_init+0xcc>)
60001d54:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d56:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d58:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d5a:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d5c:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d5e:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d62:	f44f 7220 	mov.w	r2, #640	; 0x280
60001d66:	f000 f873 	bl	60001e50 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d6a:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d6e:	f240 1143 	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d72:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
60001d76:	4b10      	ldr	r3, [pc, #64]	; (60001db8 <usb_init+0xe0>)
60001d78:	4a10      	ldr	r2, [pc, #64]	; (60001dbc <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d7a:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001d7c:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d7e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d82:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d8a:	4a0d      	ldr	r2, [pc, #52]	; (60001dc0 <usb_init+0xe8>)
60001d8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d90:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d92:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d94:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001d98:	bd70      	pop	{r4, r5, r6, pc}
60001d9a:	bf00      	nop
60001d9c:	400d8000 	.word	0x400d8000
60001da0:	400fc000 	.word	0x400fc000
60001da4:	402e0000 	.word	0x402e0000
60001da8:	400d9000 	.word	0x400d9000
60001dac:	001e1c00 	.word	0x001e1c00
60001db0:	e000e28c 	.word	0xe000e28c
60001db4:	20000000 	.word	0x20000000
60001db8:	20001800 	.word	0x20001800
60001dbc:	0000125d 	.word	0x0000125d
60001dc0:	e000e10c 	.word	0xe000e10c

60001dc4 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001dc4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001dc6:	4b0e      	ldr	r3, [pc, #56]	; (60001e00 <_reboot_Teensyduino_+0x3c>)
60001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001dca:	079b      	lsls	r3, r3, #30
60001dcc:	d400      	bmi.n	60001dd0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dce:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dd0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dd2:	4b0c      	ldr	r3, [pc, #48]	; (60001e04 <_reboot_Teensyduino_+0x40>)
60001dd4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dd6:	4a0c      	ldr	r2, [pc, #48]	; (60001e08 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001dd8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ddc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de0:	490a      	ldr	r1, [pc, #40]	; (60001e0c <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de6:	6411      	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001dea:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dee:	4a08      	ldr	r2, [pc, #32]	; (60001e10 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001df0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
60001df4:	4907      	ldr	r1, [pc, #28]	; (60001e14 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001df6:	6812      	ldr	r2, [r2, #0]
60001df8:	4618      	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001dfa:	6019      	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dfc:	6893      	ldr	r3, [r2, #8]
60001dfe:	4798      	blx	r3
60001e00:	401f4400 	.word	0x401f4400
60001e04:	402e0000 	.word	0x402e0000
60001e08:	400ac000 	.word	0x400ac000
60001e0c:	00200003 	.word	0x00200003
60001e10:	0020001c 	.word	0x0020001c
60001e14:	eb120000 	.word	0xeb120000

60001e18 <_init>:
60001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e1a:	bf00      	nop
60001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e1e:	bc08      	pop	{r3}
60001e20:	469e      	mov	lr, r3
60001e22:	4770      	bx	lr
60001e24:	0000      	movs	r0, r0
	...

60001e28 <____libc_init_array_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <____libc_init_array_veneer+0x4>
60001e2c:	0000259d 	.word	0x0000259d

60001e30 <__sm_set_pool_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__sm_set_pool_veneer+0x4>
60001e34:	00000e3d 	.word	0x00000e3d

60001e38 <__delay_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__delay_veneer+0x4>
60001e3c:	00000911 	.word	0x00000911

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	0000064d 	.word	0x0000064d

60001e48 <__usb_init_serialnumber_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__usb_init_serialnumber_veneer+0x4>
60001e4c:	000019c1 	.word	0x000019c1

60001e50 <__memset_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__memset_veneer+0x4>
60001e54:	00002da5 	.word	0x00002da5

60001e58 <__main_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__main_veneer+0x4>
60001e5c:	00000389 	.word	0x00000389

60001e60 <__pwm_init_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__pwm_init_veneer+0x4>
60001e64:	00000b05 	.word	0x00000b05

60001e68 <__init_array_start>:
60001e68:	00000045 	.word	0x00000045
60001e6c:	00002109 	.word	0x00002109

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	b933      	.short	0xb933
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xd>
      2c:	f3af4804 	.word	0xf3af4804
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	7023      	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	bd10      	.short	0xbd10
      38:	1e68      	subs	r0, r5, #1
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	63d4      	str	r4, [r2, #60]	; 0x3c
	...

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	b5104b08 	.word	0xb5104b08
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	1e6c      	subs	r4, r5, #1
      6e:	2000      	.short	0x2000
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	63d4      	str	r4, [r2, #60]	; 0x3c
      72:	0000      	movs	r0, r0
      74:	1ac0      	subs	r0, r0, r3
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <Print::println(char const*)>:
      7c:	b538      	push	{r3, r4, r5, lr}
      7e:	4604      	mov	r4, r0
      80:	4608      	mov	r0, r1
      82:	460d      	mov	r5, r1
      84:	f8fcf003 	.word	0xf8fcf003
      88:	6823      	ldr	r3, [r4, #0]
      8a:	4602      	.short	0x4602
	Serial.print("Pre-Fill    \t"); data.print();
	data.from_array(test_data, target_length);
	Serial.print("Post-Fill    \t"); data.print();
	data.clear();
	Serial.print("Post-Clear\t"); data.print();
}
      8c:	4629      	mov	r1, r5
      8e:	4620      	.short	0x4620
      90:	685b      	ldr	r3, [r3, #4]
      92:	4798      	.short	0x4798
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
      94:	4605      	mov	r5, r0
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      96:	4620      	.short	0x4620
      98:	f002 f808 	bl	20ac <Print::println()>
      9c:	bd384428 	.word	0xbd384428

000000a0 <incremental_vector_fill(int)>:
#include <Arduino.h>
#include "utilities/blink.h"
#include "utilities/vector.h"


Vector<float> incremental_vector_fill(int target_length) {
      a0:	b570      	push	{r4, r5, r6, lr}
      a2:	460e      	mov	r6, r1
      a4:	f0004605 	.word	0xf0004605
	Vector<float> data(target_length);
      a8:	fa37 210e 			; <UNDEFINED> instruction: 0xfa37210e
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
      ac:	4812      	ldr	r0, [pc, #72]	; (f8 <incremental_vector_fill(int)+0x58>)
      ae:	f001 ff6f 	bl	1f90 <usb_seremu_write>
      b2:	4812      	.short	0x4812
      b4:	f001 fffa 	bl	20ac <Print::println()>
      b8:	210b      	movs	r1, #11
      ba:	4811      	.short	0x4811
      bc:	f001 ff68 	bl	1f90 <usb_seremu_write>
	Serial.println("Filling vector");
	Serial.print("Pre-op    \t"); data.print();
      c0:	4628      	mov	r0, r5
      c2:	f000 f9e7 	bl	494 <Vector<float>::print()>
	for (int i = 0; i < target_length; i++) {
      c6:	2e00      	cmp	r6, #0
      c8:	dd0d      	ble.n	e6 <incremental_vector_fill(int)+0x46>
      ca:	2400      	movs	r4, #0
		data[i] = i;
      cc:	4621      	mov	r1, r4
      ce:	4628      	.short	0x4628
      d0:	f000 fa9e 	bl	610 <Vector<float>::operator[](int)>
      d4:	4a90ee07 	.word	0x4a90ee07

Vector<float> incremental_vector_fill(int target_length) {
	Vector<float> data(target_length);
	Serial.println("Filling vector");
	Serial.print("Pre-op    \t"); data.print();
	for (int i = 0; i < target_length; i++) {
      d8:	3401      	adds	r4, #1
		data[i] = i;
      da:	eef8      	.short	0xeef8
      dc:	7ae7      	ldrb	r7, [r4, #11]

Vector<float> incremental_vector_fill(int target_length) {
	Vector<float> data(target_length);
	Serial.println("Filling vector");
	Serial.print("Pre-op    \t"); data.print();
	for (int i = 0; i < target_length; i++) {
      de:	42a6      	.short	0x42a6
		data[i] = i;
      e0:	edc0 7a00 	vstr	s15, [r0]

Vector<float> incremental_vector_fill(int target_length) {
	Vector<float> data(target_length);
	Serial.println("Filling vector");
	Serial.print("Pre-op    \t"); data.print();
	for (int i = 0; i < target_length; i++) {
      e4:	210cd1f2 	.word	0x210cd1f2
      e8:	4806      	ldr	r0, [pc, #24]	; (104 <incremental_vector_fill(int)+0x64>)
      ea:	f001      	.short	0xf001
      ec:	ff51 4628 	vmax.u16	d20, d1, d24
		data[i] = i;
	}
	Serial.print("Post-op    \t"); data.print();
      f0:	f9d0f000 	.word	0xf9d0f000
	return data;
}
      f4:	4628      	mov	r0, r5
      f6:	bd70      	pop	{r4, r5, r6, pc}
      f8:	082c      	lsrs	r4, r5, #32
      fa:	2000      	movs	r0, #0
      fc:	0fcc      	lsrs	r4, r1, #31
      fe:	2000      	movs	r0, #0
     100:	2000083c 	.word	0x2000083c
     104:	0848      	lsrs	r0, r1, #1
     106:	2000      	movs	r0, #0

00000108 <incremental_index_fill_test(int)>:

void incremental_index_fill_test(int target_length) {
     108:	b510      	push	{r4, lr}
     10a:	2117      	movs	r1, #23
     10c:	b082      	sub	sp, #8
     10e:	4604      	mov	r4, r0
     110:	480c      	ldr	r0, [pc, #48]	; (144 <incremental_index_fill_test(int)+0x3c>)
     112:	f001 ff3d 	bl	1f90 <usb_seremu_write>
     116:	480c      	ldr	r0, [pc, #48]	; (148 <incremental_index_fill_test(int)+0x40>)
     118:	f001 ffc8 	bl	20ac <Print::println()>
	Serial.println("Incremental Fill vector");
	Vector<float> data = incremental_vector_fill(target_length);
     11c:	4621      	mov	r1, r4
     11e:	4668      	.short	0x4668
     120:	f7ff ffbe 	bl	a0 <incremental_vector_fill(int)>
	data.clear();
     124:	4668      	mov	r0, sp
     126:	f000 f9f1 	bl	50c <Vector<float>::clear()>
     12a:	210b      	movs	r1, #11
     12c:	f0014807 	.word	0xf0014807
     130:	ff2f 4668 	vmax.u32	q2, <illegal reg q7.5>, q12
	Serial.print("Post-Clear\t"); data.print();
     134:	f9aef000 	.word	0xf9aef000
	return data;
}

void incremental_index_fill_test(int target_length) {
	Serial.println("Incremental Fill vector");
	Vector<float> data = incremental_vector_fill(target_length);
     138:	4668      	mov	r0, sp
     13a:	f000      	.short	0xf000
     13c:	f9df b002 	ldr??.w	fp, [pc, #2]	; 142 <incremental_index_fill_test(int)+0x3a>
	data.clear();
	Serial.print("Post-Clear\t"); data.print();
}
     140:	bd10      	pop	{r4, pc}
     142:	bf00      	.short	0xbf00
     144:	0858      	lsrs	r0, r3, #1
     146:	2000      	.short	0x2000
     148:	0fcc      	lsrs	r4, r1, #31
     14a:	2000      	movs	r0, #0
     14c:	20000870 	.word	0x20000870

00000150 <assign_operator_vector_test(Vector<float>, Vector<float>)>:
	Serial.print("Post-Fill    \t"); data.print();
	data.clear();
	Serial.print("Post-Clear\t"); data.print();
}

void assign_operator_vector_test(Vector<float> v1, Vector<float> v2) {
     150:	b538      	push	{r3, r4, r5, lr}
     152:	460c      	.short	0x460c
     154:	4605      	mov	r5, r0
     156:	210d      	.short	0x210d
     158:	4815      	ldr	r0, [pc, #84]	; (1b0 <assign_operator_vector_test(Vector<float>, Vector<float>)+0x60>)
     15a:	f001      	.short	0xf001
     15c:	ff19 4815 	vceq.i16	d4, d9, d5
     160:	ffa4f001 	.word	0xffa4f001
     164:	210a      	movs	r1, #10
     166:	4814      	.short	0x4814
     168:	f001 ff12 	bl	1f90 <usb_seremu_write>
	Serial.println("Assign vector");
	Serial.print("v1 Pre-op\t"); v1.print();
     16c:	f0004628 	.word	0xf0004628
     170:	f991 210a 	ldrsb.w	r2, [r1, #266]	; 0x10a
     174:	f0014811 	.word	0xf0014811
     178:	ff0b 4620 	vmax.u8	d4, d11, d16
	Serial.print("v2       \t"); v2.print();
     17c:	f98af000 	.word	0xf98af000
	v1 = v2;
     180:	4621      	mov	r1, r4
     182:	4628      	.short	0x4628
     184:	f000 fa52 	bl	62c <Vector<float>::operator=(Vector<float>&)>
	v2.reset(0);
     188:	21004620 	.word	0x21004620
     18c:	f000 f9d6 	bl	53c <Vector<float>::reset(int)>
     190:	480b210b 	.word	0x480b210b
     194:	f001 fefc 	bl	1f90 <usb_seremu_write>
	Serial.print("v1 Post-op\t"); v1.print();
     198:	f0004628 	.word	0xf0004628
     19c:	f97b 2109 	ldr??.w	r2, [fp, <undefined>]
     1a0:	f0014808 	.word	0xf0014808
     1a4:	fef5 4620 	cdp2	6, 15, cr4, cr5, cr0, {1}
	Serial.print("v2 Reset\t"); v2.print();
}
     1a8:	4038e8bd 	.word	0x4038e8bd
	Serial.print("v1 Pre-op\t"); v1.print();
	Serial.print("v2       \t"); v2.print();
	v1 = v2;
	v2.reset(0);
	Serial.print("v1 Post-op\t"); v1.print();
	Serial.print("v2 Reset\t"); v2.print();
     1ac:	f000 b972 	b.w	494 <Vector<float>::print()>
     1b0:	200008b0 	.word	0x200008b0
     1b4:	0fcc      	lsrs	r4, r1, #31
     1b6:	2000      	movs	r0, #0
     1b8:	200008c0 	.word	0x200008c0
     1bc:	08cc      	lsrs	r4, r1, #3
     1be:	2000      	.short	0x2000
     1c0:	08d8      	lsrs	r0, r3, #3
     1c2:	2000      	movs	r0, #0
     1c4:	200008e4 	.word	0x200008e4

000001c8 <reset_and_fill_test(int)>:
}

void reset_and_fill_test(int target_length) {
     1c8:	b510      	push	{r4, lr}
     1ca:	2115      	.short	0x2115
     1cc:	b082      	sub	sp, #8
     1ce:	4604      	.short	0x4604
     1d0:	480c      	ldr	r0, [pc, #48]	; (204 <reset_and_fill_test(int)+0x3c>)
     1d2:	f001      	.short	0xf001
     1d4:	fedd 480c 	cdp2	8, 13, cr4, cr13, cr12, {0}
     1d8:	ff68f001 	.word	0xff68f001
	Serial.println("Reset and Fill vector");
	Vector<float> data = incremental_vector_fill(target_length);
     1dc:	4621      	mov	r1, r4
     1de:	4668      	mov	r0, sp
     1e0:	ff5ef7ff 	.word	0xff5ef7ff
	data.reset(target_length);
     1e4:	4621      	mov	r1, r4
     1e6:	4668      	.short	0x4668
     1e8:	f000 f9a8 	bl	53c <Vector<float>::reset(int)>
     1ec:	210f      	movs	r1, #15
     1ee:	4807      	ldr	r0, [pc, #28]	; (20c <reset_and_fill_test(int)+0x44>)
     1f0:	fecef001 	.word	0xfecef001
	Serial.print("Post-Reset    \t"); data.print();
     1f4:	4668      	mov	r0, sp
     1f6:	f000      	.short	0xf000
     1f8:	f94d 4668 	vst1.16	{d20-d22}, [sp :128], r8
	Serial.print("v2 Reset\t"); v2.print();
}

void reset_and_fill_test(int target_length) {
	Serial.println("Reset and Fill vector");
	Vector<float> data = incremental_vector_fill(target_length);
     1fc:	f97ef000 	.word	0xf97ef000
	data.reset(target_length);
	Serial.print("Post-Reset    \t"); data.print();

}
     200:	b002      	add	sp, #8
     202:	bd10      	.short	0xbd10
     204:	08f0      	lsrs	r0, r6, #3
     206:	2000      	.short	0x2000
     208:	0fcc      	lsrs	r4, r1, #31
     20a:	2000      	.short	0x2000
     20c:	0908      	lsrs	r0, r1, #4
     20e:	2000      	movs	r0, #0

00000210 <vec_append_test(Vector<float>)>:

void vec_append_test(Vector<float> data) {
     210:	2113b570 	.word	0x2113b570
     214:	b084      	sub	sp, #16
     216:	4604      	mov	r4, r0
     218:	f001481e 	.word	0xf001481e
     21c:	feb9 481e 	mrc2	8, 5, r4, cr9, cr14, {0}
     220:	ff44f001 	.word	0xff44f001
     224:	2110      	movs	r1, #16
     226:	481d      	.short	0x481d
	Serial.println("Appending to vector");
	Serial.print("Pre-append dest\t"); data.print();
	Vector<float> v1 = incremental_vector_fill(data.size());
	Serial.print("Pre-append src\t"); v1.print();
	data.append(v1);
     228:	ae02      	add	r6, sp, #8
     22a:	f001 feb1 	bl	1f90 <usb_seremu_write>

}

void vec_append_test(Vector<float> data) {
	Serial.println("Appending to vector");
	Serial.print("Pre-append dest\t"); data.print();
     22e:	4620      	mov	r0, r4
     230:	f000 f930 	bl	494 <Vector<float>::print()>
	Vector<float> v1 = incremental_vector_fill(data.size());
     234:	4620      	mov	r0, r4
     236:	f000 f9a5 	bl	584 <Vector<float>::size()>
     23a:	4601      	mov	r1, r0
     23c:	4668      	mov	r0, sp
     23e:	f7ff ff2f 	bl	a0 <incremental_vector_fill(int)>
     242:	210f      	movs	r1, #15
     244:	4816      	ldr	r0, [pc, #88]	; (2a0 <vec_append_test(Vector<float>)+0x90>)
     246:	f001 fea3 	bl	1f90 <usb_seremu_write>
	Serial.print("Pre-append src\t"); v1.print();
     24a:	4668      	.short	0x4668
     24c:	f000 f922 	bl	494 <Vector<float>::print()>
	data.append(v1);
     250:	0003e89d 	.word	0x0003e89d
     254:	e886 0003 	stmia.w	r6, {r0, r1}
     258:	46204631 	.word	0x46204631
     25c:	f000 f9ac 	bl	5b8 <Vector<float>::append(Vector<float>)>
     260:	f0004630 	.word	0xf0004630
     264:	f94b 210c 	vst4.8	{d18,d20,d22,d24}, [fp], ip
     268:	f001480e 	.word	0xf001480e
     26c:	fe91 4620 	cdp2	6, 9, cr4, cr1, cr0, {1}
	Serial.print("Post-append\t"); data.print();
     270:	f910f000 	.word	0xf910f000
	data.clear();
     274:	4620      	mov	r0, r4
     276:	f000 f949 	bl	50c <Vector<float>::clear()>
     27a:	210b      	movs	r1, #11
     27c:	480a      	ldr	r0, [pc, #40]	; (2a8 <vec_append_test(Vector<float>)+0x98>)
     27e:	f001 fe87 	bl	1f90 <usb_seremu_write>
	Serial.print("Post-Clear\t"); data.print();
     282:	4620      	mov	r0, r4
     284:	f000 f906 	bl	494 <Vector<float>::print()>
}

void vec_append_test(Vector<float> data) {
	Serial.println("Appending to vector");
	Serial.print("Pre-append dest\t"); data.print();
	Vector<float> v1 = incremental_vector_fill(data.size());
     288:	4668      	mov	r0, sp
     28a:	f000 f937 	bl	4fc <Vector<float>::~Vector()>
	Serial.print("Pre-append src\t"); v1.print();
	data.append(v1);
	Serial.print("Post-append\t"); data.print();
	data.clear();
	Serial.print("Post-Clear\t"); data.print();
}
     28e:	b004      	add	sp, #16
     290:	bd70      	pop	{r4, r5, r6, pc}
     292:	bf00      	nop
     294:	20000918 	.word	0x20000918
     298:	20000fcc 	.word	0x20000fcc
     29c:	2000092c 	.word	0x2000092c
     2a0:	20000940 	.word	0x20000940
     2a4:	20000950 	.word	0x20000950
     2a8:	20000870 	.word	0x20000870

000002ac <iterative_test(int, int)>:

void iterative_test(int size, int depth) {
     2ac:	b570      	push	{r4, r5, r6, lr}
     2ae:	4605      	mov	r5, r0
     2b0:	b084      	sub	sp, #16
     2b2:	460e      	mov	r6, r1
	Vector<float> data(size);
     2b4:	4668      	mov	r0, sp
     2b6:	4629      	mov	r1, r5
     2b8:	f000 f92e 	bl	518 <Vector<float>::Vector(int)>
	for (int i = 0; i < depth; i++) {
     2bc:	2e00      	cmp	r6, #0
     2be:	dd13      	ble.n	2e8 <iterative_test(int, int)+0x3c>
     2c0:	2400      	movs	r4, #0
		Vector<float> v(size);
     2c2:	4629      	mov	r1, r5
     2c4:	a802      	add	r0, sp, #8
     2c6:	f000 f927 	bl	518 <Vector<float>::Vector(int)>
		data = v;
     2ca:	a902      	add	r1, sp, #8
     2cc:	4668      	mov	r0, sp
     2ce:	f000 f9ad 	bl	62c <Vector<float>::operator=(Vector<float>&)>
		Serial.printf("Iteration depth %i\n", i);
     2d2:	4622      	mov	r2, r4
     2d4:	4907      	ldr	r1, [pc, #28]	; (2f4 <iterative_test(int, int)+0x48>)
	Serial.print("Post-Clear\t"); data.print();
}

void iterative_test(int size, int depth) {
	Vector<float> data(size);
	for (int i = 0; i < depth; i++) {
     2d6:	3401      	adds	r4, #1
		Vector<float> v(size);
		data = v;
		Serial.printf("Iteration depth %i\n", i);
     2d8:	4807      	ldr	r0, [pc, #28]	; (2f8 <iterative_test(int, int)+0x4c>)
     2da:	f001 feff 	bl	20dc <Print::printf(char const*, ...)>
}

void iterative_test(int size, int depth) {
	Vector<float> data(size);
	for (int i = 0; i < depth; i++) {
		Vector<float> v(size);
     2de:	a802      	add	r0, sp, #8
     2e0:	f000 f90c 	bl	4fc <Vector<float>::~Vector()>
	Serial.print("Post-Clear\t"); data.print();
}

void iterative_test(int size, int depth) {
	Vector<float> data(size);
	for (int i = 0; i < depth; i++) {
     2e4:	42a6      	cmp	r6, r4
     2e6:	d1ec      	bne.n	2c2 <iterative_test(int, int)+0x16>
	data.clear();
	Serial.print("Post-Clear\t"); data.print();
}

void iterative_test(int size, int depth) {
	Vector<float> data(size);
     2e8:	4668      	mov	r0, sp
     2ea:	f000 f907 	bl	4fc <Vector<float>::~Vector()>
	for (int i = 0; i < depth; i++) {
		Vector<float> v(size);
		data = v;
		Serial.printf("Iteration depth %i\n", i);
	}
}
     2ee:	b004      	add	sp, #16
     2f0:	bd70      	pop	{r4, r5, r6, pc}
     2f2:	bf00      	nop
     2f4:	20000960 	.word	0x20000960
     2f8:	20000fcc 	.word	0x20000fcc

000002fc <recursive_test(Vector<float>*, int, int)>:

void recursive_test(Vector<float>* data, int size, int depth) {
     2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2fe:	ed2d 8b02 	vpush	{d8}
     302:	b083      	sub	sp, #12
     304:	460d      	mov	r5, r1
     306:	4607      	mov	r7, r0
     308:	4616      	mov	r6, r2
	Vector<float> v(size);
     30a:	4668      	mov	r0, sp
     30c:	f000 f904 	bl	518 <Vector<float>::Vector(int)>
	for (int i = 0; i < size; i++) {
     310:	2d00      	cmp	r5, #0
     312:	dd0d      	ble.n	330 <recursive_test(Vector<float>*, int, int)+0x34>
     314:	ee07 6a90 	vmov	s15, r6
     318:	2400      	movs	r4, #0
     31a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		v[i] = float(depth);
     31e:	4621      	mov	r1, r4
	}
}

void recursive_test(Vector<float>* data, int size, int depth) {
	Vector<float> v(size);
	for (int i = 0; i < size; i++) {
     320:	3401      	adds	r4, #1
		v[i] = float(depth);
     322:	4668      	mov	r0, sp
     324:	f000 f974 	bl	610 <Vector<float>::operator[](int)>
	}
}

void recursive_test(Vector<float>* data, int size, int depth) {
	Vector<float> v(size);
	for (int i = 0; i < size; i++) {
     328:	42a5      	cmp	r5, r4
		v[i] = float(depth);
     32a:	ed80 8a00 	vstr	s16, [r0]
	}
}

void recursive_test(Vector<float>* data, int size, int depth) {
	Vector<float> v(size);
	for (int i = 0; i < size; i++) {
     32e:	d1f6      	bne.n	31e <recursive_test(Vector<float>*, int, int)+0x22>
		v[i] = float(depth);
	}
	*data = v;
     330:	4669      	mov	r1, sp
     332:	4638      	mov	r0, r7
     334:	f000 f97a 	bl	62c <Vector<float>::operator=(Vector<float>&)>
	if (depth <= 0) {
     338:	2e00      	cmp	r6, #0
     33a:	dd15      	ble.n	368 <recursive_test(Vector<float>*, int, int)+0x6c>
		Serial.println("Recursion max depth");
		return;
	}
	Serial.printf("Recursion depth %i\n", depth);
     33c:	4632      	mov	r2, r6
     33e:	490e      	ldr	r1, [pc, #56]	; (378 <recursive_test(Vector<float>*, int, int)+0x7c>)
     340:	480e      	ldr	r0, [pc, #56]	; (37c <recursive_test(Vector<float>*, int, int)+0x80>)
     342:	f001 fecb 	bl	20dc <Print::printf(char const*, ...)>
	recursive_test(data, size, depth - 1);
     346:	4629      	mov	r1, r5
     348:	4638      	mov	r0, r7
     34a:	1e72      	subs	r2, r6, #1
     34c:	f7ff ffd6 	bl	2fc <recursive_test(Vector<float>*, int, int)>
	Serial.printf("Recursion return depth %i\n", depth);
     350:	4632      	mov	r2, r6
     352:	490b      	ldr	r1, [pc, #44]	; (380 <recursive_test(Vector<float>*, int, int)+0x84>)
     354:	4809      	ldr	r0, [pc, #36]	; (37c <recursive_test(Vector<float>*, int, int)+0x80>)
     356:	f001 fec1 	bl	20dc <Print::printf(char const*, ...)>
		Serial.printf("Iteration depth %i\n", i);
	}
}

void recursive_test(Vector<float>* data, int size, int depth) {
	Vector<float> v(size);
     35a:	4668      	mov	r0, sp
     35c:	f000 f8ce 	bl	4fc <Vector<float>::~Vector()>
	}
	Serial.printf("Recursion depth %i\n", depth);
	recursive_test(data, size, depth - 1);
	Serial.printf("Recursion return depth %i\n", depth);
	return;
}
     360:	b003      	add	sp, #12
     362:	ecbd 8b02 	vpop	{d8}
     366:	bdf0      	pop	{r4, r5, r6, r7, pc}
     368:	2113      	movs	r1, #19
     36a:	4806      	ldr	r0, [pc, #24]	; (384 <recursive_test(Vector<float>*, int, int)+0x88>)
     36c:	f001 fe10 	bl	1f90 <usb_seremu_write>
     370:	4802      	ldr	r0, [pc, #8]	; (37c <recursive_test(Vector<float>*, int, int)+0x80>)
     372:	f001 fe9b 	bl	20ac <Print::println()>
     376:	e7f0      	b.n	35a <recursive_test(Vector<float>*, int, int)+0x5e>
     378:	20000988 	.word	0x20000988
     37c:	20000fcc 	.word	0x20000fcc
     380:	2000099c 	.word	0x2000099c
     384:	20000974 	.word	0x20000974

00000388 <main>:
	Vector<float> v(9);
	v.from_array(tmp, 9);
	return v;
}

int main() {
     388:	b570      	push	{r4, r5, r6, lr}
     38a:	4c30      	ldr	r4, [pc, #192]	; (44c <main+0xc4>)
     38c:	b086      	sub	sp, #24
     38e:	4d30      	ldr	r5, [pc, #192]	; (450 <main+0xc8>)
	setup_blink();
     390:	f000 f868 	bl	464 <setup_blink()>
        uint8_t stopbits(void) { return 1; }
        uint8_t paritytype(void) { return 0; }
        uint8_t numbits(void) { return 8; }
        uint8_t dtr(void) { return 1; }
        uint8_t rts(void) { return 1; }
        operator bool() { yield(); return usb_configuration && usb_seremu_online; }
     394:	f001 fedc 	bl	2150 <yield>
     398:	7823      	ldrb	r3, [r4, #0]
     39a:	2b00      	cmp	r3, #0
     39c:	d0fa      	beq.n	394 <main+0xc>
     39e:	782b      	ldrb	r3, [r5, #0]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d0f7      	beq.n	394 <main+0xc>
	while(!Serial){}

	Serial.println("=== Starting Vector tests ===");
     3a4:	492b      	ldr	r1, [pc, #172]	; (454 <main+0xcc>)
	Serial.println("=== Incremental fill Vector tests ===");

	int n = 5;
	incremental_index_fill_test(n);
	Vector<float> v = incremental_vector_fill(n);
	assign_operator_vector_test(Vector<float>(n), v);
     3a6:	ad02      	add	r5, sp, #8

int main() {
	setup_blink();
	while(!Serial){}

	Serial.println("=== Starting Vector tests ===");
     3a8:	482b      	ldr	r0, [pc, #172]	; (458 <main+0xd0>)
	Serial.println("=== Incremental fill Vector tests ===");

	int n = 5;
	incremental_index_fill_test(n);
	Vector<float> v = incremental_vector_fill(n);
	assign_operator_vector_test(Vector<float>(n), v);
     3aa:	ac04      	add	r4, sp, #16

int main() {
	setup_blink();
	while(!Serial){}

	Serial.println("=== Starting Vector tests ===");
     3ac:	f7ff fe66 	bl	7c <Print::println(char const*)>
	Serial.println("=== Incremental fill Vector tests ===");
     3b0:	492a      	ldr	r1, [pc, #168]	; (45c <main+0xd4>)
     3b2:	4829      	ldr	r0, [pc, #164]	; (458 <main+0xd0>)
     3b4:	f7ff fe62 	bl	7c <Print::println(char const*)>

	int n = 5;
	incremental_index_fill_test(n);
     3b8:	2005      	movs	r0, #5
     3ba:	f7ff fea5 	bl	108 <incremental_index_fill_test(int)>
	Vector<float> v = incremental_vector_fill(n);
     3be:	4668      	mov	r0, sp
     3c0:	2105      	movs	r1, #5
     3c2:	f7ff fe6d 	bl	a0 <incremental_vector_fill(int)>
	assign_operator_vector_test(Vector<float>(n), v);
     3c6:	4628      	mov	r0, r5
     3c8:	2105      	movs	r1, #5
     3ca:	f000 f8a5 	bl	518 <Vector<float>::Vector(int)>
     3ce:	e89d 0003 	ldmia.w	sp, {r0, r1}
     3d2:	e884 0003 	stmia.w	r4, {r0, r1}
     3d6:	4621      	mov	r1, r4
     3d8:	4628      	mov	r0, r5
     3da:	f7ff feb9 	bl	150 <assign_operator_vector_test(Vector<float>, Vector<float>)>
     3de:	4620      	mov	r0, r4
     3e0:	f000 f88c 	bl	4fc <Vector<float>::~Vector()>
     3e4:	4628      	mov	r0, r5
     3e6:	f000 f889 	bl	4fc <Vector<float>::~Vector()>
	reset_and_fill_test(n);
     3ea:	2005      	movs	r0, #5
     3ec:	f7ff feec 	bl	1c8 <reset_and_fill_test(int)>
	Vector<float> v2 = incremental_vector_fill(n);
     3f0:	4628      	mov	r0, r5
     3f2:	2105      	movs	r1, #5
     3f4:	f7ff fe54 	bl	a0 <incremental_vector_fill(int)>
	vec_append_test(v2);
     3f8:	e895 0003 	ldmia.w	r5, {r0, r1}
     3fc:	e884 0003 	stmia.w	r4, {r0, r1}
     400:	4620      	mov	r0, r4
     402:	f7ff ff05 	bl	210 <vec_append_test(Vector<float>)>
     406:	4620      	mov	r0, r4
     408:	f000 f878 	bl	4fc <Vector<float>::~Vector()>

	iterative_test(100, 100);
     40c:	2164      	movs	r1, #100	; 0x64
     40e:	4608      	mov	r0, r1
     410:	f7ff ff4c 	bl	2ac <iterative_test(int, int)>

	Vector<float> data(0);
     414:	4620      	mov	r0, r4
     416:	2100      	movs	r1, #0
     418:	f000 f87e 	bl	518 <Vector<float>::Vector(int)>
	recursive_test(&data, 10, 100);
     41c:	2264      	movs	r2, #100	; 0x64
     41e:	4620      	mov	r0, r4
     420:	210a      	movs	r1, #10
     422:	f7ff ff6b 	bl	2fc <recursive_test(Vector<float>*, int, int)>
	data.print();
     426:	4620      	mov	r0, r4
     428:	f000 f834 	bl	494 <Vector<float>::print()>

	Serial.println("=== Finished Vector tests ===");
     42c:	490c      	ldr	r1, [pc, #48]	; (460 <main+0xd8>)
     42e:	480a      	ldr	r0, [pc, #40]	; (458 <main+0xd0>)
     430:	f7ff fe24 	bl	7c <Print::println(char const*)>
	Vector<float> v2 = incremental_vector_fill(n);
	vec_append_test(v2);

	iterative_test(100, 100);

	Vector<float> data(0);
     434:	4620      	mov	r0, r4
     436:	f000 f861 	bl	4fc <Vector<float>::~Vector()>
	int n = 5;
	incremental_index_fill_test(n);
	Vector<float> v = incremental_vector_fill(n);
	assign_operator_vector_test(Vector<float>(n), v);
	reset_and_fill_test(n);
	Vector<float> v2 = incremental_vector_fill(n);
     43a:	4628      	mov	r0, r5
     43c:	f000 f85e 	bl	4fc <Vector<float>::~Vector()>
	Serial.println("=== Starting Vector tests ===");
	Serial.println("=== Incremental fill Vector tests ===");

	int n = 5;
	incremental_index_fill_test(n);
	Vector<float> v = incremental_vector_fill(n);
     440:	4668      	mov	r0, sp
     442:	f000 f85b 	bl	4fc <Vector<float>::~Vector()>
	Vector<float> data(0);
	recursive_test(&data, 10, 100);
	data.print();

	Serial.println("=== Finished Vector tests ===");
     446:	2000      	movs	r0, #0
     448:	b006      	add	sp, #24
     44a:	bd70      	pop	{r4, r5, r6, pc}
     44c:	20001f61 	.word	0x20001f61
     450:	20001f64 	.word	0x20001f64
     454:	200009b8 	.word	0x200009b8
     458:	20000fcc 	.word	0x20000fcc
     45c:	200009d8 	.word	0x200009d8
     460:	20000a00 	.word	0x20000a00

00000464 <setup_blink()>:
bool blinker_status;

/*
	Easy use blinker implementation
*/
void setup_blink() {
     464:	b510      	push	{r4, lr}
	// Hardware setup
	blinker_status = false;
     466:	2200      	movs	r2, #0
     468:	4c07      	ldr	r4, [pc, #28]	; (488 <setup_blink()+0x24>)
	blinker_timer_mark = ARM_DWT_CYCCNT;
     46a:	4b08      	ldr	r3, [pc, #32]	; (48c <setup_blink()+0x28>)

	pinMode(BLINK_PIN, OUTPUT);
     46c:	2101      	movs	r1, #1
/*
	Easy use blinker implementation
*/
void setup_blink() {
	// Hardware setup
	blinker_status = false;
     46e:	7022      	strb	r2, [r4, #0]
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
     470:	200d      	movs	r0, #13
	Easy use blinker implementation
*/
void setup_blink() {
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;
     472:	681a      	ldr	r2, [r3, #0]
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <setup_blink()+0x2c>)
     476:	601a      	str	r2, [r3, #0]

	pinMode(BLINK_PIN, OUTPUT);
     478:	f000 fadc 	bl	a34 <pinMode>
	digitalWrite(BLINK_PIN, blinker_status);
     47c:	7821      	ldrb	r1, [r4, #0]
     47e:	200d      	movs	r0, #13
}
     480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
	digitalWrite(BLINK_PIN, blinker_status);
     484:	f000 bad0 	b.w	a28 <digitalWrite>
     488:	20001f55 	.word	0x20001f55
     48c:	e0001004 	.word	0xe0001004
     490:	20001ee8 	.word	0x20001ee8

00000494 <Vector<float>::print()>:
		Serial.printf("%i, ", buffer[i]);
	}
	Serial.printf("%i]\n", buffer[length-1]);
}

template <> void Vector<float>::print() {
     494:	b570      	push	{r4, r5, r6, lr}
     496:	4605      	mov	r5, r0
	Serial.printf("Vectorf [%i]: [", length);
     498:	4914      	ldr	r1, [pc, #80]	; (4ec <Vector<float>::print()+0x58>)
     49a:	4815      	ldr	r0, [pc, #84]	; (4f0 <Vector<float>::print()+0x5c>)
     49c:	682a      	ldr	r2, [r5, #0]
     49e:	f001 fe1d 	bl	20dc <Print::printf(char const*, ...)>
	for (int i = 0; i < length-1; i++) {
     4a2:	682b      	ldr	r3, [r5, #0]
     4a4:	2b01      	cmp	r3, #1
     4a6:	dd12      	ble.n	4ce <Vector<float>::print()+0x3a>
     4a8:	2400      	movs	r4, #0
		Serial.printf("%f, ", buffer[i]);
     4aa:	686b      	ldr	r3, [r5, #4]
     4ac:	4911      	ldr	r1, [pc, #68]	; (4f4 <Vector<float>::print()+0x60>)
     4ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     4b2:	480f      	ldr	r0, [pc, #60]	; (4f0 <Vector<float>::print()+0x5c>)
	Serial.printf("%i]\n", buffer[length-1]);
}

template <> void Vector<float>::print() {
	Serial.printf("Vectorf [%i]: [", length);
	for (int i = 0; i < length-1; i++) {
     4b4:	3401      	adds	r4, #1
		Serial.printf("%f, ", buffer[i]);
     4b6:	edd3 7a00 	vldr	s15, [r3]
     4ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     4be:	ec53 2b17 	vmov	r2, r3, d7
     4c2:	f001 fe0b 	bl	20dc <Print::printf(char const*, ...)>
	Serial.printf("%i]\n", buffer[length-1]);
}

template <> void Vector<float>::print() {
	Serial.printf("Vectorf [%i]: [", length);
	for (int i = 0; i < length-1; i++) {
     4c6:	682b      	ldr	r3, [r5, #0]
     4c8:	1e5a      	subs	r2, r3, #1
     4ca:	42a2      	cmp	r2, r4
     4cc:	dced      	bgt.n	4aa <Vector<float>::print()+0x16>
		Serial.printf("%f, ", buffer[i]);
	}
	Serial.printf("%f]\n", buffer[length-1]);
     4ce:	686a      	ldr	r2, [r5, #4]
     4d0:	4909      	ldr	r1, [pc, #36]	; (4f8 <Vector<float>::print()+0x64>)
     4d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     4d6:	4806      	ldr	r0, [pc, #24]	; (4f0 <Vector<float>::print()+0x5c>)
     4d8:	ed53 7a01 	vldr	s15, [r3, #-4]
     4dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
     4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
template <> void Vector<float>::print() {
	Serial.printf("Vectorf [%i]: [", length);
	for (int i = 0; i < length-1; i++) {
		Serial.printf("%f, ", buffer[i]);
	}
	Serial.printf("%f]\n", buffer[length-1]);
     4e4:	ec53 2b17 	vmov	r2, r3, d7
     4e8:	f001 bdf8 	b.w	20dc <Print::printf(char const*, ...)>
     4ec:	20000a40 	.word	0x20000a40
     4f0:	20000fcc 	.word	0x20000fcc
     4f4:	20000a50 	.word	0x20000a50
     4f8:	20000a58 	.word	0x20000a58

000004fc <Vector<float>::~Vector()>:
template <typename T> Vector<T>::Vector() {
	length = 0;
	buffer = NULL;
}

template <typename T> Vector<T>::~Vector() {
     4fc:	b510      	push	{r4, lr}
     4fe:	4604      	mov	r4, r0
	delete buffer;
     500:	2104      	movs	r1, #4
     502:	6840      	ldr	r0, [r0, #4]
     504:	f001 fe0e 	bl	2124 <operator delete(void*, unsigned int)>
}
     508:	4620      	mov	r0, r4
     50a:	bd10      	pop	{r4, pc}

0000050c <Vector<float>::clear()>:

template <typename T> void Vector<T>::clear() {
	/*
		  Clear data in the buffer (set to 0).
	*/
	memset(buffer, 0, length * sizeof(T));
     50c:	6802      	ldr	r2, [r0, #0]
     50e:	2100      	movs	r1, #0
     510:	6840      	ldr	r0, [r0, #4]
     512:	0092      	lsls	r2, r2, #2
     514:	f002 bc46 	b.w	2da4 <memset>

00000518 <Vector<float>::Vector(int)>:
		  Constructor for Vector with length = size.
		@param:
			size: (int) length of the buffer with type T
	*/
	length = size;
	buffer = new T[size];
     518:	f1b1 5ffe 	cmp.w	r1, #532676608	; 0x1fc00000

template <typename T> Vector<T>::~Vector() {
	delete buffer;
}

template <typename T> Vector<T>::Vector(int size) {
     51c:	b510      	push	{r4, lr}
     51e:	4604      	mov	r4, r0
	/*
		  Constructor for Vector with length = size.
		@param:
			size: (int) length of the buffer with type T
	*/
	length = size;
     520:	6001      	str	r1, [r0, #0]
	buffer = new T[size];
     522:	bf94      	ite	ls
     524:	0088      	lslls	r0, r1, #2
     526:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
     52a:	f001 fdf9 	bl	2120 <operator new[](unsigned int)>
     52e:	6060      	str	r0, [r4, #4]
	clear();
     530:	4620      	mov	r0, r4
     532:	f7ff ffeb 	bl	50c <Vector<float>::clear()>
}
     536:	4620      	mov	r0, r4
     538:	bd10      	pop	{r4, pc}
     53a:	bf00      	nop

0000053c <Vector<float>::reset(int)>:
	memcpy(tmp, buffer, length * sizeof(T));
	tmp[length] = item;
	from_array(tmp, length+1);
}

template <typename T> void Vector<T>::reset(int size) {
     53c:	b538      	push	{r3, r4, r5, lr}
     53e:	4605      	mov	r5, r0
		  Resize buffer and set data to zero.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
     540:	6840      	ldr	r0, [r0, #4]
	memcpy(tmp, buffer, length * sizeof(T));
	tmp[length] = item;
	from_array(tmp, length+1);
}

template <typename T> void Vector<T>::reset(int size) {
     542:	460c      	mov	r4, r1
		  Resize buffer and set data to zero.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
     544:	b110      	cbz	r0, 54c <Vector<float>::reset(int)+0x10>
		delete buffer;
     546:	2104      	movs	r1, #4
     548:	f001 fdec 	bl	2124 <operator delete(void*, unsigned int)>
	}
	length = size;
	buffer = new T[size];
     54c:	f1b4 5ffe 	cmp.w	r4, #532676608	; 0x1fc00000
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
		delete buffer;
	}
	length = size;
     550:	602c      	str	r4, [r5, #0]
	buffer = new T[size];
     552:	bf94      	ite	ls
     554:	00a0      	lslls	r0, r4, #2
     556:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
     55a:	f001 fde1 	bl	2120 <operator new[](unsigned int)>
     55e:	6068      	str	r0, [r5, #4]
	clear();
     560:	4628      	mov	r0, r5
     562:	f7ff ffd3 	bl	50c <Vector<float>::clear()>
     566:	bd38      	pop	{r3, r4, r5, pc}

00000568 <Vector<float>::from_array(float*, int)>:
}

template <typename T> void Vector<T>::from_array(T* data, int size) {
     568:	b570      	push	{r4, r5, r6, lr}
     56a:	4614      	mov	r4, r2
     56c:	460e      	mov	r6, r1
     56e:	4605      	mov	r5, r0
		  reset the buffer to size n with data T*.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	reset(size);
     570:	4611      	mov	r1, r2
     572:	f7ff ffe3 	bl	53c <Vector<float>::reset(int)>
	memcpy(buffer, data, size * sizeof(T));
     576:	4631      	mov	r1, r6
     578:	00a2      	lsls	r2, r4, #2
     57a:	6868      	ldr	r0, [r5, #4]
}
     57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	reset(size);
	memcpy(buffer, data, size * sizeof(T));
     580:	f002 bb12 	b.w	2ba8 <memcpy>

00000584 <Vector<float>::size()>:
		  Get the size of buffer (not necessarily elements available)
		@return
			length: (int) size of buffer
	*/
	return length;
}
     584:	6800      	ldr	r0, [r0, #0]
     586:	4770      	bx	lr

00000588 <Vector<float>::as_array()>:
	return -1;
}

template <typename T> T* Vector<T>::as_array() {
	return buffer;
}
     588:	6840      	ldr	r0, [r0, #4]
     58a:	4770      	bx	lr

0000058c <Vector<float>::slice(float*, int, int)>:

template <typename T> void Vector<T>::slice(T* data, int start, int n) {
     58c:	b430      	push	{r4, r5}
		@return
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
     58e:	1e14      	subs	r4, r2, #0
     590:	db03      	blt.n	59a <Vector<float>::slice(float*, int, int)+0xe>
     592:	18e2      	adds	r2, r4, r3
     594:	6805      	ldr	r5, [r0, #0]
     596:	42aa      	cmp	r2, r5
     598:	dd05      	ble.n	5a6 <Vector<float>::slice(float*, int, int)+0x1a>
		memcpy(data, &buffer[start], n * sizeof(T));
	}
	else {
		memset(data, 0, n * sizeof(T));
     59a:	4608      	mov	r0, r1
     59c:	009a      	lsls	r2, r3, #2
     59e:	2100      	movs	r1, #0
	}
}
     5a0:	bc30      	pop	{r4, r5}
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
	}
	else {
		memset(data, 0, n * sizeof(T));
     5a2:	f002 bbff 	b.w	2da4 <memset>
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
     5a6:	6845      	ldr	r5, [r0, #4]
     5a8:	009a      	lsls	r2, r3, #2
     5aa:	4608      	mov	r0, r1
     5ac:	eb05 0184 	add.w	r1, r5, r4, lsl #2
	}
	else {
		memset(data, 0, n * sizeof(T));
	}
}
     5b0:	bc30      	pop	{r4, r5}
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
     5b2:	f002 baf9 	b.w	2ba8 <memcpy>
     5b6:	bf00      	nop

000005b8 <Vector<float>::append(Vector<float>)>:
	reset(length + n);
	memcpy(buffer, tmp, (length - n) * sizeof(T));
	memcpy(&buffer[(length - n)], data, n * sizeof(T));
}

template <typename T> void Vector<T>::append(Vector<T> data) {
     5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5bc:	4604      	mov	r4, r0
     5be:	af00      	add	r7, sp, #0
		  Add n values to the buffer. Stores the current buffer and
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
     5c0:	4608      	mov	r0, r1
	reset(length + n);
	memcpy(buffer, tmp, (length - n) * sizeof(T));
	memcpy(&buffer[(length - n)], data, n * sizeof(T));
}

template <typename T> void Vector<T>::append(Vector<T> data) {
     5c2:	4688      	mov	r8, r1
		  Add n values to the buffer. Stores the current buffer and
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
     5c4:	f7ff ffde 	bl	584 <Vector<float>::size()>
	T tmp[length + n];
     5c8:	6825      	ldr	r5, [r4, #0]
		  Add n values to the buffer. Stores the current buffer and
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
     5ca:	4606      	mov	r6, r0
	T tmp[length + n];
	memcpy(tmp, buffer, length * sizeof(T));
     5cc:	6861      	ldr	r1, [r4, #4]
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
	T tmp[length + n];
     5ce:	1943      	adds	r3, r0, r5
	memcpy(tmp, buffer, length * sizeof(T));
     5d0:	00ad      	lsls	r5, r5, #2
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
	T tmp[length + n];
     5d2:	009b      	lsls	r3, r3, #2
	memcpy(tmp, buffer, length * sizeof(T));
     5d4:	462a      	mov	r2, r5
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = data.size();
	T tmp[length + n];
     5d6:	330a      	adds	r3, #10
     5d8:	f023 0307 	bic.w	r3, r3, #7
     5dc:	ebad 0d03 	sub.w	sp, sp, r3
	memcpy(tmp, buffer, length * sizeof(T));
     5e0:	4668      	mov	r0, sp
     5e2:	f002 fae1 	bl	2ba8 <memcpy>
	data.slice(&tmp[length], 0, n);
     5e6:	4633      	mov	r3, r6
     5e8:	eb0d 0105 	add.w	r1, sp, r5
     5ec:	4640      	mov	r0, r8
     5ee:	2200      	movs	r2, #0
     5f0:	f7ff ffcc 	bl	58c <Vector<float>::slice(float*, int, int)>
	reset(length + n);
     5f4:	6821      	ldr	r1, [r4, #0]
     5f6:	4620      	mov	r0, r4
     5f8:	4431      	add	r1, r6
     5fa:	f7ff ff9f 	bl	53c <Vector<float>::reset(int)>
	memcpy(buffer, tmp, length * sizeof(T));
     5fe:	6822      	ldr	r2, [r4, #0]
     600:	4669      	mov	r1, sp
     602:	6860      	ldr	r0, [r4, #4]
     604:	0092      	lsls	r2, r2, #2
     606:	f002 facf 	bl	2ba8 <memcpy>
}
     60a:	46bd      	mov	sp, r7
     60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000610 <Vector<float>::operator[](int)>:
	}
}

///// operators /////

template <typename T> T& Vector<T>::operator[](int index) {
     610:	b508      	push	{r3, lr}
		@return
			item: (T&) item at index
		@exit
			when index is invalid 
	*/
	if (length > index && index >= 0) {
     612:	6803      	ldr	r3, [r0, #0]
     614:	428b      	cmp	r3, r1
     616:	dd05      	ble.n	624 <Vector<float>::operator[](int)+0x14>
     618:	2900      	cmp	r1, #0
     61a:	db03      	blt.n	624 <Vector<float>::operator[](int)+0x14>
		return buffer[index];
     61c:	6840      	ldr	r0, [r0, #4]
     61e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	}
	exit(0);
}
     622:	bd08      	pop	{r3, pc}
			when index is invalid 
	*/
	if (length > index && index >= 0) {
		return buffer[index];
	}
	exit(0);
     624:	2000      	movs	r0, #0
     626:	f001 ffa9 	bl	257c <exit>
     62a:	bf00      	nop

0000062c <Vector<float>::operator=(Vector<float>&)>:
}

template <typename T> void Vector<T>::operator=(Vector<T>& data) {
     62c:	b570      	push	{r4, r5, r6, lr}
     62e:	460c      	mov	r4, r1
     630:	4605      	mov	r5, r0
		  = Operator overload. Will reset this vector to the
		same size as data.
		@param
			data: (Vector<T>&) data to copy
	*/
	from_array(data.as_array(), data.size());
     632:	4608      	mov	r0, r1
     634:	f7ff ffa8 	bl	588 <Vector<float>::as_array()>
     638:	4606      	mov	r6, r0
     63a:	4620      	mov	r0, r4
     63c:	f7ff ffa2 	bl	584 <Vector<float>::size()>
     640:	4631      	mov	r1, r6
     642:	4602      	mov	r2, r0
     644:	4628      	mov	r0, r5
     646:	f7ff ff8f 	bl	568 <Vector<float>::from_array(float*, int)>
     64a:	bd70      	pop	{r4, r5, r6, pc}

0000064c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     64c:	4a96      	ldr	r2, [pc, #600]	; (8a8 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     64e:	4b97      	ldr	r3, [pc, #604]	; (8ac <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     650:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     656:	4c96      	ldr	r4, [pc, #600]	; (8b0 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     658:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     65c:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     65e:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     660:	d91c      	bls.n	69c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     662:	4b94      	ldr	r3, [pc, #592]	; (8b4 <set_arm_clock+0x268>)
     664:	4298      	cmp	r0, r3
     666:	f240 8115 	bls.w	894 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     66a:	4b93      	ldr	r3, [pc, #588]	; (8b8 <set_arm_clock+0x26c>)
     66c:	f240 6527 	movw	r5, #1575	; 0x627
     670:	4f92      	ldr	r7, [pc, #584]	; (8bc <set_arm_clock+0x270>)
     672:	4403      	add	r3, r0
     674:	4c92      	ldr	r4, [pc, #584]	; (8c0 <set_arm_clock+0x274>)
     676:	0a1a      	lsrs	r2, r3, #8
     678:	fba7 3202 	umull	r3, r2, r7, r2
     67c:	09d3      	lsrs	r3, r2, #7
     67e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     682:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     686:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
     68a:	42ab      	cmp	r3, r5
     68c:	bf28      	it	cs
     68e:	462b      	movcs	r3, r5
     690:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
     694:	fba4 3503 	umull	r3, r5, r4, r3
     698:	08ed      	lsrs	r5, r5, #3
     69a:	e004      	b.n	6a6 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     69c:	4d89      	ldr	r5, [pc, #548]	; (8c4 <set_arm_clock+0x278>)
     69e:	42a8      	cmp	r0, r5
     6a0:	bf94      	ite	ls
     6a2:	2506      	movls	r5, #6
     6a4:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     6a6:	4a81      	ldr	r2, [pc, #516]	; (8ac <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     6a8:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     6ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     6b0:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     6b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     6b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     6ba:	d20a      	bcs.n	6d2 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     6bc:	4b7c      	ldr	r3, [pc, #496]	; (8b0 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     6be:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     6c2:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     6c4:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     6c6:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     6c8:	6813      	ldr	r3, [r2, #0]
     6ca:	2b00      	cmp	r3, #0
     6cc:	dafc      	bge.n	6c8 <set_arm_clock+0x7c>
     6ce:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     6d2:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
     6d6:	d131      	bne.n	73c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     6d8:	4c7b      	ldr	r4, [pc, #492]	; (8c8 <set_arm_clock+0x27c>)
     6da:	4a7c      	ldr	r2, [pc, #496]	; (8cc <set_arm_clock+0x280>)
     6dc:	f8d4 c010 	ldr.w	ip, [r4, #16]
     6e0:	4614      	mov	r4, r2
     6e2:	ea0c 0202 	and.w	r2, ip, r2
     6e6:	42a2      	cmp	r2, r4
     6e8:	bf0a      	itet	eq
     6ea:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
     6ee:	f44f 5280 	movne.w	r2, #4096	; 0x1000
     6f2:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     6f4:	ea8e 0403 	eor.w	r4, lr, r3
     6f8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     6fc:	d008      	beq.n	710 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     6fe:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     702:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     706:	4c69      	ldr	r4, [pc, #420]	; (8ac <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     708:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     70c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     710:	ea81 0302 	eor.w	r3, r1, r2
     714:	f413 5f40 	tst.w	r3, #12288	; 0x3000
     718:	d008      	beq.n	72c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     71a:	4b64      	ldr	r3, [pc, #400]	; (8ac <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     71c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     720:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     722:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     724:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     726:	6c93      	ldr	r3, [r2, #72]	; 0x48
     728:	071c      	lsls	r4, r3, #28
     72a:	d4fc      	bmi.n	726 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     72c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     730:	4a5e      	ldr	r2, [pc, #376]	; (8ac <set_arm_clock+0x260>)
     732:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     736:	6c93      	ldr	r3, [r2, #72]	; 0x48
     738:	0699      	lsls	r1, r3, #26
     73a:	d4fc      	bmi.n	736 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     73c:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     73e:	4c64      	ldr	r4, [pc, #400]	; (8d0 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     740:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     742:	fb01 f302 	mul.w	r3, r1, r2
     746:	fb00 f303 	mul.w	r3, r0, r3
     74a:	42a3      	cmp	r3, r4
     74c:	d809      	bhi.n	762 <set_arm_clock+0x116>
		if (div_arm < 8) {
     74e:	2a07      	cmp	r2, #7
     750:	f200 8095 	bhi.w	87e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     754:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     756:	fb01 f302 	mul.w	r3, r1, r2
     75a:	fb00 f303 	mul.w	r3, r0, r3
     75e:	42a3      	cmp	r3, r4
     760:	d9f5      	bls.n	74e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     762:	485c      	ldr	r0, [pc, #368]	; (8d4 <set_arm_clock+0x288>)
     764:	4c5c      	ldr	r4, [pc, #368]	; (8d8 <set_arm_clock+0x28c>)
     766:	4418      	add	r0, r3
     768:	fba4 0300 	umull	r0, r3, r4, r0
     76c:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     76e:	2b6c      	cmp	r3, #108	; 0x6c
     770:	f200 808b 	bhi.w	88a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     774:	2b35      	cmp	r3, #53	; 0x35
     776:	f200 808f 	bhi.w	898 <set_arm_clock+0x24c>
     77a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 904 <set_arm_clock+0x2b8>
     77e:	2336      	movs	r3, #54	; 0x36
     780:	4856      	ldr	r0, [pc, #344]	; (8dc <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     782:	f8df c144 	ldr.w	ip, [pc, #324]	; 8c8 <set_arm_clock+0x27c>
     786:	4c56      	ldr	r4, [pc, #344]	; (8e0 <set_arm_clock+0x294>)
     788:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     78c:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     790:	ea09 0404 	and.w	r4, r9, r4
     794:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     796:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     79a:	d00b      	beq.n	7b4 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     79c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     7a0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     7a4:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     7a6:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     7aa:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     7ae:	6823      	ldr	r3, [r4, #0]
     7b0:	2b00      	cmp	r3, #0
     7b2:	dafc      	bge.n	7ae <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     7b4:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8ac <set_arm_clock+0x260>
     7b8:	3a01      	subs	r2, #1
     7ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
     7be:	f003 0307 	and.w	r3, r3, #7
     7c2:	4293      	cmp	r3, r2
     7c4:	d007      	beq.n	7d6 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     7c6:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     7ca:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     7cc:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     7d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     7d2:	03db      	lsls	r3, r3, #15
     7d4:	d4fc      	bmi.n	7d0 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     7d6:	3901      	subs	r1, #1
     7d8:	0289      	lsls	r1, r1, #10
     7da:	ea8e 0301 	eor.w	r3, lr, r1
     7de:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
     7e2:	d00c      	beq.n	7fe <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     7e4:	4b31      	ldr	r3, [pc, #196]	; (8ac <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     7e6:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     7ea:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     7ee:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     7f0:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     7f4:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     7f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
     7fa:	0799      	lsls	r1, r3, #30
     7fc:	d4fc      	bmi.n	7f8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     7fe:	4b39      	ldr	r3, [pc, #228]	; (8e4 <set_arm_clock+0x298>)
     800:	4939      	ldr	r1, [pc, #228]	; (8e8 <set_arm_clock+0x29c>)
     802:	4403      	add	r3, r0
     804:	09db      	lsrs	r3, r3, #7
     806:	fba1 3103 	umull	r3, r1, r1, r3
     80a:	0b09      	lsrs	r1, r1, #12
     80c:	2904      	cmp	r1, #4
     80e:	bf28      	it	cs
     810:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     812:	1e4b      	subs	r3, r1, #1
     814:	021b      	lsls	r3, r3, #8
     816:	ea8e 0203 	eor.w	r2, lr, r3
     81a:	f412 7f40 	tst.w	r2, #768	; 0x300
     81e:	d007      	beq.n	830 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     820:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     824:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     828:	4a20      	ldr	r2, [pc, #128]	; (8ac <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     82a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     82e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     830:	4b1e      	ldr	r3, [pc, #120]	; (8ac <set_arm_clock+0x260>)
     832:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     834:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     836:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
     83a:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     83c:	6c93      	ldr	r3, [r2, #72]	; 0x48
     83e:	069b      	lsls	r3, r3, #26
     840:	d4fc      	bmi.n	83c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     842:	4b2a      	ldr	r3, [pc, #168]	; (8ec <set_arm_clock+0x2a0>)
     844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     848:	4c29      	ldr	r4, [pc, #164]	; (8f0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     84a:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     84c:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     850:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     852:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     856:	4c27      	ldr	r4, [pc, #156]	; (8f4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     858:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     85c:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     860:	4a25      	ldr	r2, [pc, #148]	; (8f8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     862:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     864:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     866:	d208      	bcs.n	87a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     868:	4b11      	ldr	r3, [pc, #68]	; (8b0 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     86a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     86e:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     870:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     872:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     874:	6813      	ldr	r3, [r2, #0]
     876:	2b00      	cmp	r3, #0
     878:	dafc      	bge.n	874 <set_arm_clock+0x228>
	}

	return frequency;
}
     87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     87e:	2904      	cmp	r1, #4
     880:	f63f af6f 	bhi.w	762 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     884:	3101      	adds	r1, #1
				div_arm = 1;
     886:	2201      	movs	r2, #1
     888:	e75b      	b.n	742 <set_arm_clock+0xf6>
     88a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 908 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     88e:	236c      	movs	r3, #108	; 0x6c
     890:	481a      	ldr	r0, [pc, #104]	; (8fc <set_arm_clock+0x2b0>)
     892:	e776      	b.n	782 <set_arm_clock+0x136>
     894:	2512      	movs	r5, #18
     896:	e706      	b.n	6a6 <set_arm_clock+0x5a>
     898:	4819      	ldr	r0, [pc, #100]	; (900 <set_arm_clock+0x2b4>)
     89a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 90c <set_arm_clock+0x2c0>
     89e:	fb00 f003 	mul.w	r0, r0, r3
     8a2:	ea43 0808 	orr.w	r8, r3, r8
     8a6:	e76c      	b.n	782 <set_arm_clock+0x136>
     8a8:	1f78a400 	.word	0x1f78a400
     8ac:	400fc000 	.word	0x400fc000
     8b0:	40080000 	.word	0x40080000
     8b4:	23c34600 	.word	0x23c34600
     8b8:	dc3cba00 	.word	0xdc3cba00
     8bc:	004cb223 	.word	0x004cb223
     8c0:	51eb851f 	.word	0x51eb851f
     8c4:	016e3600 	.word	0x016e3600
     8c8:	400d8000 	.word	0x400d8000
     8cc:	80003040 	.word	0x80003040
     8d0:	269fb1ff 	.word	0x269fb1ff
     8d4:	005b8d80 	.word	0x005b8d80
     8d8:	165e9f81 	.word	0x165e9f81
     8dc:	269fb200 	.word	0x269fb200
     8e0:	8001307f 	.word	0x8001307f
     8e4:	08f0d17f 	.word	0x08f0d17f
     8e8:	00e5109f 	.word	0x00e5109f
     8ec:	431bde83 	.word	0x431bde83
     8f0:	20000fc8 	.word	0x20000fc8
     8f4:	20000fc4 	.word	0x20000fc4
     8f8:	20001f3c 	.word	0x20001f3c
     8fc:	4d3f6400 	.word	0x4d3f6400
     900:	00b71b00 	.word	0x00b71b00
     904:	80002036 	.word	0x80002036
     908:	8000206c 	.word	0x8000206c
     90c:	80002000 	.word	0x80002000

00000910 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     910:	2800      	cmp	r0, #0
     912:	d057      	beq.n	9c4 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     914:	2201      	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
     916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     91a:	b085      	sub	sp, #20
     91c:	4683      	mov	fp, r0
     91e:	4c2a      	ldr	r4, [pc, #168]	; (9c8 <delay+0xb8>)
     920:	4d2a      	ldr	r5, [pc, #168]	; (9cc <delay+0xbc>)
     922:	4e2b      	ldr	r6, [pc, #172]	; (9d0 <delay+0xc0>)
     924:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     928:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     92c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     92e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     930:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     934:	2900      	cmp	r1, #0
     936:	d1f7      	bne.n	928 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     938:	4f26      	ldr	r7, [pc, #152]	; (9d4 <delay+0xc4>)
     93a:	e9cd 8902 	strd	r8, r9, [sp, #8]
     93e:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     940:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     942:	4a25      	ldr	r2, [pc, #148]	; (9d8 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     944:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     948:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     94a:	6812      	ldr	r2, [r2, #0]
     94c:	2701      	movs	r7, #1
     94e:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     956:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     958:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     95a:	428b      	cmp	r3, r1
     95c:	bf08      	it	eq
     95e:	4542      	cmpeq	r2, r8
     960:	bf2c      	ite	cs
     962:	46c2      	movcs	sl, r8
     964:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     966:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     96a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     96e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     970:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     972:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     976:	2b00      	cmp	r3, #0
     978:	d1f7      	bne.n	96a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     97a:	9801      	ldr	r0, [sp, #4]
     97c:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     97e:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     980:	4815      	ldr	r0, [pc, #84]	; (9d8 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     982:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     986:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     988:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     98c:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     994:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     998:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     99a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     99c:	4299      	cmp	r1, r3
     99e:	bf08      	it	eq
     9a0:	4540      	cmpeq	r0, r8
     9a2:	bf2c      	ite	cs
     9a4:	4643      	movcs	r3, r8
     9a6:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     9a8:	441a      	add	r2, r3
     9aa:	4572      	cmp	r2, lr
     9ac:	d307      	bcc.n	9be <delay+0xae>
			if (--msec == 0) return;
     9ae:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     9b2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     9b6:	d1d8      	bne.n	96a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     9b8:	b005      	add	sp, #20
     9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     9be:	f001 fbc7 	bl	2150 <yield>
	}
     9c2:	e7d2      	b.n	96a <delay+0x5a>
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop
     9c8:	20001fc0 	.word	0x20001fc0
     9cc:	20001f44 	.word	0x20001f44
     9d0:	20001f40 	.word	0x20001f40
     9d4:	e0001004 	.word	0xe0001004
     9d8:	20001f3c 	.word	0x20001f3c

000009dc <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     9dc:	0100      	lsls	r0, r0, #4
     9de:	4b0f      	ldr	r3, [pc, #60]	; (a1c <digitalWrite.part.0+0x40>)
     9e0:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     9e2:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
     9e4:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     9e6:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     9e8:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     9ea:	4204      	tst	r4, r0
     9ec:	d005      	beq.n	9fa <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
     9ee:	b159      	cbz	r1, a08 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
     9f0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9f8:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     9fa:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     9fc:	b949      	cbnz	r1, a12 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     9fe:	4a08      	ldr	r2, [pc, #32]	; (a20 <digitalWrite.part.0+0x44>)
		}
	}
}
     a00:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     a04:	601a      	str	r2, [r3, #0]
		}
	}
}
     a06:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     a08:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a10:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a12:	4a04      	ldr	r2, [pc, #16]	; (a24 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     a14:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a18:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     a1a:	4770      	bx	lr
     a1c:	200004b0 	.word	0x200004b0
     a20:	00013038 	.word	0x00013038
     a24:	0001f038 	.word	0x0001f038

00000a28 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     a28:	2836      	cmp	r0, #54	; 0x36
     a2a:	d801      	bhi.n	a30 <digitalWrite+0x8>
     a2c:	f7ff bfd6 	b.w	9dc <digitalWrite.part.0>
     a30:	4770      	bx	lr
     a32:	bf00      	nop

00000a34 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     a34:	2836      	cmp	r0, #54	; 0x36
     a36:	d81c      	bhi.n	a72 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     a38:	0100      	lsls	r0, r0, #4
     a3a:	4a1a      	ldr	r2, [pc, #104]	; (aa4 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     a3c:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     a3e:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     a42:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     a44:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     a46:	d015      	beq.n	a74 <pinMode+0x40>
     a48:	2904      	cmp	r1, #4
     a4a:	d013      	beq.n	a74 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     a4c:	68dc      	ldr	r4, [r3, #12]
     a4e:	6842      	ldr	r2, [r0, #4]
     a50:	ea22 0204 	bic.w	r2, r2, r4
     a54:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     a56:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     a58:	b1e9      	cbz	r1, a96 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     a5a:	2902      	cmp	r1, #2
     a5c:	d01e      	beq.n	a9c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     a5e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     a60:	685b      	ldr	r3, [r3, #4]
}
     a62:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     a66:	bf0c      	ite	eq
     a68:	490f      	ldreq	r1, [pc, #60]	; (aa8 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     a6a:	4910      	ldrne	r1, [pc, #64]	; (aac <pinMode+0x78>)
     a6c:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     a6e:	2215      	movs	r2, #21
     a70:	601a      	str	r2, [r3, #0]
}
     a72:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     a74:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     a76:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     a78:	6844      	ldr	r4, [r0, #4]
     a7a:	ea42 0204 	orr.w	r2, r2, r4
     a7e:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     a80:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     a82:	d008      	beq.n	a96 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     a84:	f640 0138 	movw	r1, #2104	; 0x838
     a88:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     a8a:	685b      	ldr	r3, [r3, #4]
     a8c:	2215      	movs	r2, #21
}
     a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     a92:	601a      	str	r2, [r3, #0]
}
     a94:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     a96:	2138      	movs	r1, #56	; 0x38
     a98:	6011      	str	r1, [r2, #0]
     a9a:	e7f6      	b.n	a8a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     a9c:	4904      	ldr	r1, [pc, #16]	; (ab0 <pinMode+0x7c>)
     a9e:	6011      	str	r1, [r2, #0]
     aa0:	e7f3      	b.n	a8a <pinMode+0x56>
     aa2:	bf00      	nop
     aa4:	200004b0 	.word	0x200004b0
     aa8:	00013038 	.word	0x00013038
     aac:	00010038 	.word	0x00010038
     ab0:	0001f038 	.word	0x0001f038

00000ab4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     ab4:	b4f0      	push	{r4, r5, r6, r7}
     ab6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
     ab8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     aba:	4637      	mov	r7, r6
     abc:	e000      	b.n	ac0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
     abe:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
     ac0:	fbb0 f3f2 	udiv	r3, r0, r2
     ac4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     ac8:	f100 0437 	add.w	r4, r0, #55	; 0x37
     acc:	2809      	cmp	r0, #9
     ace:	f100 0030 	add.w	r0, r0, #48	; 0x30
     ad2:	b2e4      	uxtb	r4, r4
     ad4:	bf98      	it	ls
     ad6:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
     ad8:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     ada:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
     ade:	2b00      	cmp	r3, #0
     ae0:	d1ed      	bne.n	abe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
     ae2:	194a      	adds	r2, r1, r5
     ae4:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
     ae6:	b14d      	cbz	r5, afc <ultoa+0x48>
     ae8:	3301      	adds	r3, #1
		t = buf[j];
     aea:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
     aee:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     af0:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
     af2:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     af4:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
     af6:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     afa:	dbf5      	blt.n	ae8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
     afc:	4608      	mov	r0, r1
     afe:	bcf0      	pop	{r4, r5, r6, r7}
     b00:	4770      	bx	lr
     b02:	bf00      	nop

00000b04 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b04:	48a4      	ldr	r0, [pc, #656]	; (d98 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     b06:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b0a:	4ba4      	ldr	r3, [pc, #656]	; (d9c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b0c:	6f82      	ldr	r2, [r0, #120]	; 0x78
     b0e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
     b12:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b14:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     b16:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b18:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b1c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b20:	4c9f      	ldr	r4, [pc, #636]	; (da0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b22:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b26:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b28:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b2c:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b2e:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b30:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b34:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     b38:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     b3c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     b40:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     b44:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     b48:	b280      	uxth	r0, r0
     b4a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     b4e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     b52:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     b56:	4b91      	ldr	r3, [pc, #580]	; (d9c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
     b58:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b5a:	2500      	movs	r5, #0
     b5c:	0140      	lsls	r0, r0, #5
     b5e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b60:	2904      	cmp	r1, #4
     b62:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b64:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b68:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
     b6a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     b6c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     b6e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     b70:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     b72:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     b74:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     b76:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     b78:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     b7a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b7c:	d1e9      	bne.n	b52 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b7e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     b82:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b86:	4b87      	ldr	r3, [pc, #540]	; (da4 <pwm_init+0x2a0>)
     b88:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b8c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b8e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b90:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b94:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b96:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b9a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b9e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     ba2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     ba6:	b280      	uxth	r0, r0
     ba8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     bac:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     bb0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     bb4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     bb8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     bbc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     bc0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     bc4:	b280      	uxth	r0, r0
     bc6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     bca:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     bce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     bd2:	4b74      	ldr	r3, [pc, #464]	; (da4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
     bd4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     bd6:	2500      	movs	r5, #0
     bd8:	0140      	lsls	r0, r0, #5
     bda:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     bdc:	2904      	cmp	r1, #4
     bde:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     be0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     be2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     be6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     be8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     bea:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     bec:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     bee:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     bf0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     bf2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     bf4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     bf6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     bf8:	d1e9      	bne.n	bce <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     bfa:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     bfe:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     c02:	4b69      	ldr	r3, [pc, #420]	; (da8 <pwm_init+0x2a4>)
     c04:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c08:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     c0a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     c0c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     c10:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c12:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     c16:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c1a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     c1e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     c22:	b280      	uxth	r0, r0
     c24:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     c28:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     c2c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     c30:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     c34:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     c38:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     c3c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     c40:	b280      	uxth	r0, r0
     c42:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     c46:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     c4a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     c4e:	4b56      	ldr	r3, [pc, #344]	; (da8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
     c50:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     c52:	2500      	movs	r5, #0
     c54:	0140      	lsls	r0, r0, #5
     c56:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     c58:	2904      	cmp	r1, #4
     c5a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     c5c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     c5e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     c62:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     c64:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     c66:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     c68:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     c6a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     c6c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     c6e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     c70:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     c72:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     c74:	d1e9      	bne.n	c4a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c76:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     c7a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     c7e:	4b4b      	ldr	r3, [pc, #300]	; (dac <pwm_init+0x2a8>)
     c80:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c84:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     c86:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     c88:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     c8c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c8e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     c92:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c96:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     c9a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     c9e:	b280      	uxth	r0, r0
     ca0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     ca4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ca8:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     cac:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     cb0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     cb4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     cb8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     cbc:	b280      	uxth	r0, r0
     cbe:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     cc2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     cc6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     cca:	4b38      	ldr	r3, [pc, #224]	; (dac <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
     ccc:	3101      	adds	r1, #1
     cce:	0140      	lsls	r0, r0, #5
     cd0:	461c      	mov	r4, r3
     cd2:	2904      	cmp	r1, #4
     cd4:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     cd6:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     cd8:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     cdc:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     cde:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     ce0:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     ce2:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     ce4:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
     ce6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     ce8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     cea:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     cec:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     cee:	d1ea      	bne.n	cc6 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     cf0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     cf4:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     cf6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     cf8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     cfc:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     cfe:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d02:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d04:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     d08:	433b      	orrs	r3, r7
     d0a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     d0e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
     d12:	b29b      	uxth	r3, r3
     d14:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     d18:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d1c:	0150      	lsls	r0, r2, #5
     d1e:	4b24      	ldr	r3, [pc, #144]	; (db0 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d20:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     d22:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d24:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     d26:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     d28:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     d2a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     d2c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     d2e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     d32:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     d34:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d36:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d38:	d1f0      	bne.n	d1c <pwm_init+0x218>
     d3a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     d3c:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     d3e:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     d42:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d46:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d48:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d4c:	0150      	lsls	r0, r2, #5
     d4e:	4b19      	ldr	r3, [pc, #100]	; (db4 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d50:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     d52:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d54:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     d56:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     d58:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     d5a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     d5c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     d5e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     d60:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     d62:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d64:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d66:	d1f1      	bne.n	d4c <pwm_init+0x248>
     d68:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     d6a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     d6c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     d70:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d74:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d76:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     d7a:	0150      	lsls	r0, r2, #5
     d7c:	4b0e      	ldr	r3, [pc, #56]	; (db8 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d7e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     d80:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d82:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     d84:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     d86:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     d88:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     d8a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     d8c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     d8e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     d90:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     d92:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     d94:	d1f1      	bne.n	d7a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d98:	400fc000 	.word	0x400fc000
     d9c:	403dc000 	.word	0x403dc000
     da0:	fc030000 	.word	0xfc030000
     da4:	403e0000 	.word	0x403e0000
     da8:	403e4000 	.word	0x403e4000
     dac:	403e8000 	.word	0x403e8000
     db0:	401dc000 	.word	0x401dc000
     db4:	401e0000 	.word	0x401e0000
     db8:	401e4000 	.word	0x401e4000

00000dbc <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
     dbc:	4b0a      	ldr	r3, [pc, #40]	; (de8 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
     dbe:	b430      	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
     dc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     dc2:	461c      	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
     dc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
     dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
     dca:	4299      	cmp	r1, r3
     dcc:	bf08      	it	eq
     dce:	4290      	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     dd0:	4610      	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
     dd2:	4619      	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
     dd4:	bf0c      	ite	eq
     dd6:	2501      	moveq	r5, #1
     dd8:	2500      	movne	r5, #0
     dda:	2d00      	cmp	r5, #0
     ddc:	d0f3      	beq.n	dc6 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
     dde:	0bd9      	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
     de0:	bc30      	pop	{r4, r5}
     de2:	ea41 4042 	orr.w	r0, r1, r2, lsl #17
     de6:	4770      	bx	lr
     de8:	400d4000 	.word	0x400d4000

00000dec <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
     dec:	b508      	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     dee:	6803      	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
     df0:	6842      	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     df2:	b1bb      	cbz	r3, e24 <sm_align_pool+0x38>
     df4:	b17a      	cbz	r2, e16 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
     df6:	4b10      	ldr	r3, [pc, #64]	; (e38 <sm_align_pool+0x4c>)
     df8:	fba3 1302 	umull	r1, r3, r3, r2
     dfc:	08db      	lsrs	r3, r3, #3
     dfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e02:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
     e06:	d003      	beq.n	e10 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
     e08:	1ad2      	subs	r2, r2, r3
     e0a:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
     e0c:	2af0      	cmp	r2, #240	; 0xf0
     e0e:	d902      	bls.n	e16 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
     e10:	2301      	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
     e12:	4618      	mov	r0, r3
     e14:	bd08      	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
     e16:	f001 fbab 	bl	2570 <__errno>
     e1a:	221c      	movs	r2, #28
     e1c:	2300      	movs	r3, #0
     e1e:	6002      	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
     e20:	4618      	mov	r0, r3
     e22:	bd08      	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
     e24:	4b04      	ldr	r3, [pc, #16]	; (e38 <sm_align_pool+0x4c>)
     e26:	fba3 1302 	umull	r1, r3, r3, r2
     e2a:	08db      	lsrs	r3, r3, #3
     e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
     e30:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
     e34:	d1e8      	bne.n	e08 <sm_align_pool+0x1c>
     e36:	e7e9      	b.n	e0c <sm_align_pool+0x20>
     e38:	aaaaaaab 	.word	0xaaaaaaab

00000e3c <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
     e3c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
     e3e:	4604      	mov	r4, r0
     e40:	2800      	cmp	r0, #0
     e42:	d03a      	beq.n	eba <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
     e44:	b119      	cbz	r1, e4e <sm_set_pool+0x12>
     e46:	fab2 f582 	clz	r5, r2
     e4a:	096d      	lsrs	r5, r5, #5
     e4c:	b1fd      	cbz	r5, e8e <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     e4e:	6820      	ldr	r0, [r4, #0]
     e50:	b108      	cbz	r0, e56 <sm_set_pool+0x1a>
     e52:	6862      	ldr	r2, [r4, #4]
     e54:	b932      	cbnz	r2, e64 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
     e56:	f001 fb8b 	bl	2570 <__errno>
     e5a:	2316      	movs	r3, #22
		return 0;
     e5c:	2200      	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
     e5e:	6003      	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     e60:	4610      	mov	r0, r2
     e62:	bd70      	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
     e64:	4918      	ldr	r1, [pc, #96]	; (ec8 <sm_set_pool+0x8c>)
     e66:	fba1 3102 	umull	r3, r1, r1, r2
     e6a:	08c9      	lsrs	r1, r1, #3
     e6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e70:	ebb2 0181 	subs.w	r1, r2, r1, lsl #2
     e74:	d1ef      	bne.n	e56 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
     e76:	68a3      	ldr	r3, [r4, #8]
     e78:	b10b      	cbz	r3, e7e <sm_set_pool+0x42>
     e7a:	f001 ff93 	bl	2da4 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
     e7e:	2300      	movs	r3, #0
			return 1;
     e80:	2201      	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
     e82:	6023      	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     e84:	4610      	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
     e86:	6063      	str	r3, [r4, #4]
     e88:	60a3      	str	r3, [r4, #8]
     e8a:	60e3      	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     e8c:	bd70      	pop	{r4, r5, r6, pc}
     e8e:	461e      	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
     e90:	9b04      	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
     e92:	e880 0006 	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
     e96:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
     e98:	f7ff ffa8 	bl	dec <sm_align_pool>
     e9c:	4602      	mov	r2, r0
     e9e:	2800      	cmp	r0, #0
     ea0:	d0de      	beq.n	e60 <sm_set_pool+0x24>

	if (do_zero) {
     ea2:	b916      	cbnz	r6, eaa <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
     ea4:	2201      	movs	r2, #1
}
     ea6:	4610      	mov	r0, r2
     ea8:	bd70      	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
     eaa:	e894 0005 	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
     eae:	60a6      	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
     eb0:	4629      	mov	r1, r5
     eb2:	f001 ff77 	bl	2da4 <memset>
	}

	return 1;
     eb6:	2201      	movs	r2, #1
     eb8:	e7d2      	b.n	e60 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
     eba:	f001 fb59 	bl	2570 <__errno>
     ebe:	2316      	movs	r3, #22
		return 0;
     ec0:	4622      	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
     ec2:	6003      	str	r3, [r0, #0]
		return 0;
     ec4:	e7cc      	b.n	e60 <sm_set_pool+0x24>
     ec6:	bf00      	nop
     ec8:	aaaaaaab 	.word	0xaaaaaaab

00000ecc <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
     ecc:	b672      	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     ece:	f3ef 8305 	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
     ed2:	4d49      	ldr	r5, [pc, #292]	; (ff8 <unused_interrupt_vector+0x12c>)
     ed4:	606b      	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
     ed6:	f3ef 8308 	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
     eda:	4c48      	ldr	r4, [pc, #288]	; (ffc <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
     edc:	462e      	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
     ede:	4848      	ldr	r0, [pc, #288]	; (1000 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
     ee0:	4948      	ldr	r1, [pc, #288]	; (1004 <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
     ee2:	4a49      	ldr	r2, [pc, #292]	; (1008 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
     ee4:	6824      	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
     ee6:	6800      	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
     ee8:	6809      	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
     eea:	6812      	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
     eec:	6129      	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
     eee:	60ac      	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
     ef0:	60e8      	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
     ef2:	616a      	str	r2, [r5, #20]
	info->ret = stack[6];
     ef4:	699a      	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     ef6:	4c45      	ldr	r4, [pc, #276]	; (100c <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
     ef8:	61aa      	str	r2, [r5, #24]
	info->xpsr = stack[7];
     efa:	69db      	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
     efc:	4f44      	ldr	r7, [pc, #272]	; (1010 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
     efe:	61eb      	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
     f00:	f000 f8c8 	bl	1094 <tempmonGetTemp>
     f04:	ed85 0a08 	vstr	s0, [r5, #32]
	info->time = rtc_get();
     f08:	f7ff ff58 	bl	dbc <rtc_get>
	info->len = sizeof(*info) / 4;
     f0c:	230b      	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
     f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
     f12:	6268      	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
     f14:	4619      	mov	r1, r3
     f16:	602b      	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
     f18:	404a      	eors	r2, r1
     f1a:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     f1c:	f002 0301 	and.w	r3, r2, #1
     f20:	3901      	subs	r1, #1
     f22:	fb04 f303 	mul.w	r3, r4, r3
     f26:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     f2a:	d1f7      	bne.n	f1c <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
     f2c:	42be      	cmp	r6, r7
     f2e:	d002      	beq.n	f36 <unused_interrupt_vector+0x6a>
     f30:	f856 1f04 	ldr.w	r1, [r6, #4]!
     f34:	e7f0      	b.n	f18 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
     f36:	4930      	ldr	r1, [pc, #192]	; (ff8 <unused_interrupt_vector+0x12c>)
     f38:	628a      	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     f3a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     f3e:	4b35      	ldr	r3, [pc, #212]	; (1014 <unused_interrupt_vector+0x148>)
     f40:	4a35      	ldr	r2, [pc, #212]	; (1018 <unused_interrupt_vector+0x14c>)
     f42:	6019      	str	r1, [r3, #0]
     f44:	601a      	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     f46:	f3bf 8f4f 	dsb	sy
	asm("isb");
     f4a:	f3bf 8f6f 	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     f4e:	4a33      	ldr	r2, [pc, #204]	; (101c <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
     f50:	2502      	movs	r5, #2
     f52:	4c33      	ldr	r4, [pc, #204]	; (1020 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     f54:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     f56:	4933      	ldr	r1, [pc, #204]	; (1024 <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     f58:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     f5c:	4832      	ldr	r0, [pc, #200]	; (1028 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     f5e:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     f60:	6025      	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     f62:	69d3      	ldr	r3, [r2, #28]
     f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f6c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     f6e:	680b      	ldr	r3, [r1, #0]
     f70:	4283      	cmp	r3, r0
     f72:	d83e      	bhi.n	ff2 <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
     f74:	4a2a      	ldr	r2, [pc, #168]	; (1020 <unused_interrupt_vector+0x154>)
     f76:	2100      	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     f78:	2001      	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     f7a:	4e2c      	ldr	r6, [pc, #176]	; (102c <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
     f7c:	6011      	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
     f82:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
     f86:	460c      	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     f88:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
     f8c:	4615      	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     f8e:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
     f92:	4607      	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     f94:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1058 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
     f98:	4e25      	ldr	r6, [pc, #148]	; (1030 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
     f9a:	4826      	ldr	r0, [pc, #152]	; (1034 <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
     f9c:	4926      	ldr	r1, [pc, #152]	; (1038 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
     f9e:	4a27      	ldr	r2, [pc, #156]	; (103c <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     fa0:	f8ce 3000 	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
     fa4:	6033      	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
     fa6:	6003      	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
     fa8:	600b      	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
     faa:	6013      	str	r3, [r2, #0]
     fac:	e001      	b.n	fb2 <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
     fae:	f000 f955 	bl	125c <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
     fb2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
     fb6:	4b1a      	ldr	r3, [pc, #104]	; (1020 <unused_interrupt_vector+0x154>)
     fb8:	2a00      	cmp	r2, #0
     fba:	d0f8      	beq.n	fae <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
     fbc:	3401      	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
     fbe:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     fc2:	2c4f      	cmp	r4, #79	; 0x4f
     fc4:	d9f3      	bls.n	fae <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     fc6:	4a1e      	ldr	r2, [pc, #120]	; (1040 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
     fc8:	2402      	movs	r4, #2
     fca:	481e      	ldr	r0, [pc, #120]	; (1044 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     fcc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
     fd0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     fd4:	6351      	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     fd6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
     fda:	b932      	cbnz	r2, fea <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
     fdc:	491a      	ldr	r1, [pc, #104]	; (1048 <unused_interrupt_vector+0x17c>)
     fde:	4a1b      	ldr	r2, [pc, #108]	; (104c <unused_interrupt_vector+0x180>)
     fe0:	630a      	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     fe2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     fe6:	2800      	cmp	r0, #0
     fe8:	d0fa      	beq.n	fe0 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
     fea:	4b19      	ldr	r3, [pc, #100]	; (1050 <unused_interrupt_vector+0x184>)
     fec:	4a19      	ldr	r2, [pc, #100]	; (1054 <unused_interrupt_vector+0x188>)
     fee:	601a      	str	r2, [r3, #0]
     ff0:	e7fe      	b.n	ff0 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     ff2:	f7ff fb2b 	bl	64c <set_arm_clock>
     ff6:	e7bd      	b.n	f74 <unused_interrupt_vector+0xa8>
     ff8:	2027ff80 	.word	0x2027ff80
     ffc:	e000ed28 	.word	0xe000ed28
    1000:	e000ed2c 	.word	0xe000ed2c
    1004:	e000ed34 	.word	0xe000ed34
    1008:	e000ed38 	.word	0xe000ed38
    100c:	edb88320 	.word	0xedb88320
    1010:	2027ffa4 	.word	0x2027ffa4
    1014:	e000ef70 	.word	0xe000ef70
    1018:	2027ffa0 	.word	0x2027ffa0
    101c:	400fc000 	.word	0x400fc000
    1020:	40084000 	.word	0x40084000
    1024:	20000fc8 	.word	0x20000fc8
    1028:	0bcd3d80 	.word	0x0bcd3d80
    102c:	00249f00 	.word	0x00249f00
    1030:	e000e184 	.word	0xe000e184
    1034:	e000e188 	.word	0xe000e188
    1038:	e000e18c 	.word	0xe000e18c
    103c:	e000e190 	.word	0xe000e190
    1040:	400d9000 	.word	0x400d9000
    1044:	402e0000 	.word	0x402e0000
    1048:	400f8000 	.word	0x400f8000
    104c:	0bad00f1 	.word	0x0bad00f1
    1050:	e000ed0c 	.word	0xe000ed0c
    1054:	05fa0004 	.word	0x05fa0004
    1058:	e000e180 	.word	0xe000e180

0000105c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    105c:	4a09      	ldr	r2, [pc, #36]	; (1084 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    105e:	b508      	push	{r3, lr}
        char *prev = __brkval;
    1060:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    1062:	b120      	cbz	r0, 106e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    1064:	4418      	add	r0, r3
    1066:	4908      	ldr	r1, [pc, #32]	; (1088 <_sbrk+0x2c>)
    1068:	4288      	cmp	r0, r1
    106a:	d802      	bhi.n	1072 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    106c:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    106e:	4618      	mov	r0, r3
    1070:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1072:	f001 fa7d 	bl	2570 <__errno>
    1076:	220c      	movs	r2, #12
                        return (void *)-1;
    1078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    107c:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    107e:	4618      	mov	r0, r3
    1080:	bd08      	pop	{r3, pc}
    1082:	bf00      	nop
    1084:	20000fe8 	.word	0x20000fe8
    1088:	20280000 	.word	0x20280000

0000108c <_exit>:
}

__attribute__((weak))
void _exit(int status)
{
	while (1) asm ("WFI");
    108c:	bf30      	wfi
    108e:	e7fd      	b.n	108c <_exit>

00001090 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    1090:	f7ff bf1c 	b.w	ecc <unused_interrupt_vector>

00001094 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1094:	4912      	ldr	r1, [pc, #72]	; (10e0 <tempmonGetTemp+0x4c>)
    1096:	680b      	ldr	r3, [r1, #0]
    1098:	4a11      	ldr	r2, [pc, #68]	; (10e0 <tempmonGetTemp+0x4c>)
    109a:	075b      	lsls	r3, r3, #29
    109c:	d5fb      	bpl.n	1096 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    109e:	6813      	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    10a0:	4910      	ldr	r1, [pc, #64]	; (10e4 <tempmonGetTemp+0x50>)

    return tmeas;
    10a2:	f3c3 230b 	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    10a6:	4a10      	ldr	r2, [pc, #64]	; (10e8 <tempmonGetTemp+0x54>)

    return tmeas;
    10a8:	ee07 3a90 	vmov	s15, r3
    10ac:	680b      	ldr	r3, [r1, #0]
    10ae:	ed92 6a00 	vldr	s12, [r2]
    10b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    10b6:	ee07 3a90 	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    10ba:	4a0c      	ldr	r2, [pc, #48]	; (10ec <tempmonGetTemp+0x58>)

    return tmeas;
    10bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    10c0:	4b0b      	ldr	r3, [pc, #44]	; (10f0 <tempmonGetTemp+0x5c>)

    return tmeas;
    10c2:	edd2 6a00 	vldr	s13, [r2]
    10c6:	ee77 7a67 	vsub.f32	s15, s14, s15
    10ca:	ed93 7a00 	vldr	s14, [r3]
    10ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    10d2:	ee67 7a86 	vmul.f32	s15, s15, s12
    10d6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
}
    10da:	ee37 0a40 	vsub.f32	s0, s14, s0
    10de:	4770      	bx	lr
    10e0:	400d8180 	.word	0x400d8180
    10e4:	20001f2c 	.word	0x20001f2c
    10e8:	20001f34 	.word	0x20001f34
    10ec:	20001f38 	.word	0x20001f38
    10f0:	20001f30 	.word	0x20001f30

000010f4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    10f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    10f6:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    10f8:	b11b      	cbz	r3, 1102 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    10fa:	6853      	ldr	r3, [r2, #4]
    10fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1100:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1102:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1104:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    1106:	b35c      	cbz	r4, 1160 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    1108:	4b1c      	ldr	r3, [pc, #112]	; (117c <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    110a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    110c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1110:	420c      	tst	r4, r1
    1112:	d115      	bne.n	1140 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1114:	4e1a      	ldr	r6, [pc, #104]	; (1180 <schedule_transfer+0x8c>)
    1116:	6837      	ldr	r7, [r6, #0]
    1118:	e004      	b.n	1124 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    111a:	6834      	ldr	r4, [r6, #0]
    111c:	1be4      	subs	r4, r4, r7
    111e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1122:	d20b      	bcs.n	113c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1124:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1128:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    112c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1130:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1134:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1138:	0464      	lsls	r4, r4, #17
    113a:	d5ee      	bpl.n	111a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    113c:	400d      	ands	r5, r1
    113e:	d003      	beq.n	1148 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1140:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1142:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1144:	bcf0      	pop	{r4, r5, r6, r7}
    1146:	4770      	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1148:	4c0c      	ldr	r4, [pc, #48]	; (117c <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    114a:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    114c:	60c5      	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    114e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1152:	4319      	orrs	r1, r3
    1154:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1158:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    115a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    115c:	bcf0      	pop	{r4, r5, r6, r7}
    115e:	4770      	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    1160:	4d06      	ldr	r5, [pc, #24]	; (117c <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1162:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    1164:	60c4      	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    1166:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    116a:	4319      	orrs	r1, r3
    116c:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1170:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    1172:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1174:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1176:	bcf0      	pop	{r4, r5, r6, r7}
    1178:	4770      	bx	lr
    117a:	bf00      	nop
    117c:	402e0000 	.word	0x402e0000
    1180:	e0001004 	.word	0xe0001004

00001184 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1184:	b570      	push	{r4, r5, r6, lr}
    1186:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1188:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    118a:	b190      	cbz	r0, 11b2 <run_callbacks+0x2e>
    118c:	4602      	mov	r2, r0
    118e:	2400      	movs	r4, #0
    1190:	e003      	b.n	119a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1192:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1194:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1196:	2a01      	cmp	r2, #1
    1198:	d00c      	beq.n	11b4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    119a:	6853      	ldr	r3, [r2, #4]
    119c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    11a0:	d0f7      	beq.n	1192 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    11a2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11a4:	b12c      	cbz	r4, 11b2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    11a6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    11a8:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    11aa:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11ac:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    11ae:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    11b0:	d1f9      	bne.n	11a6 <run_callbacks+0x22>
    11b2:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    11b4:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    11b6:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    11b8:	e7f4      	b.n	11a4 <run_callbacks+0x20>
    11ba:	bf00      	nop

000011bc <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    11bc:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    11be:	b9e1      	cbnz	r1, 11fa <endpoint0_transmit.constprop.1+0x3e>
    11c0:	4c21      	ldr	r4, [pc, #132]	; (1248 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11c2:	4922      	ldr	r1, [pc, #136]	; (124c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    11c4:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    11c6:	4b22      	ldr	r3, [pc, #136]	; (1250 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11c8:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    11ca:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11ce:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11d0:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    11d2:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    11d4:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11d6:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    11d8:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    11da:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    11de:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    11e2:	4d1c      	ldr	r5, [pc, #112]	; (1254 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    11e4:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    11e8:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    11ea:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    11ee:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    11f0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    11f4:	2b00      	cmp	r3, #0
    11f6:	d1fb      	bne.n	11f0 <endpoint0_transmit.constprop.1+0x34>
}
    11f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    11fa:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    11fc:	4b16      	ldr	r3, [pc, #88]	; (1258 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    11fe:	4d14      	ldr	r5, [pc, #80]	; (1250 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1200:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1202:	4c11      	ldr	r4, [pc, #68]	; (1248 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1204:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1208:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    120a:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    120c:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    120e:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1212:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1214:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1218:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    121a:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    121e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1222:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    1226:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1228:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    122a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    122e:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1232:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1236:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1238:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    123a:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    123e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1242:	2b00      	cmp	r3, #0
    1244:	d1fb      	bne.n	123e <endpoint0_transmit.constprop.1+0x82>
    1246:	e7bc      	b.n	11c2 <endpoint0_transmit.constprop.1+0x6>
    1248:	20000000 	.word	0x20000000
    124c:	20001fa0 	.word	0x20001fa0
    1250:	402e0000 	.word	0x402e0000
    1254:	20001ef4 	.word	0x20001ef4
    1258:	20001f80 	.word	0x20001f80

0000125c <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1260:	4cb0      	ldr	r4, [pc, #704]	; (1524 <usb_isr+0x2c8>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    1262:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1264:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1268:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    126c:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1270:	d06f      	beq.n	1352 <usb_isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1272:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1276:	2b00      	cmp	r3, #0
    1278:	d066      	beq.n	1348 <usb_isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    127a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    127e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1548 <usb_isr+0x2ec>
    1282:	4fa9      	ldr	r7, [pc, #676]	; (1528 <usb_isr+0x2cc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1284:	4626      	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1286:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1288:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    128c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    128e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1290:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1298:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    129c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    12a0:	049d      	lsls	r5, r3, #18
    12a2:	d5f5      	bpl.n	1290 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    12a4:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
    12a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    12ac:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    12b0:	f8c6 a1b4 	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    12b4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    12b8:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    12bc:	d1fa      	bne.n	12b4 <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    12be:	b281      	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    12c0:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    12c4:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    12c8:	f000 8148 	beq.w	155c <usb_isr+0x300>
    12cc:	f200 80bb 	bhi.w	1446 <usb_isr+0x1ea>
    12d0:	2982      	cmp	r1, #130	; 0x82
    12d2:	f000 8193 	beq.w	15fc <usb_isr+0x3a0>
    12d6:	f240 80cf 	bls.w	1478 <usb_isr+0x21c>
    12da:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    12de:	f000 815d 	beq.w	159c <usb_isr+0x340>
    12e2:	f240 3302 	movw	r3, #770	; 0x302
    12e6:	4299      	cmp	r1, r3
    12e8:	f040 80be 	bne.w	1468 <usb_isr+0x20c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    12ec:	b292      	uxth	r2, r2
    12ee:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    12f2:	2b07      	cmp	r3, #7
    12f4:	f200 80b8 	bhi.w	1468 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    12f8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    12fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1300:	4a8a      	ldr	r2, [pc, #552]	; (152c <usb_isr+0x2d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1302:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1306:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    130a:	441a      	add	r2, r3
    130c:	6813      	ldr	r3, [r2, #0]
    130e:	bf14      	ite	ne
    1310:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1314:	f043 0301 	orreq.w	r3, r3, #1
    1318:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    131a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    131c:	4b84      	ldr	r3, [pc, #528]	; (1530 <usb_isr+0x2d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    131e:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1320:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1322:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1324:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1326:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    132a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    132e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1330:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1334:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1338:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    133c:	2b00      	cmp	r3, #0
    133e:	d1fb      	bne.n	1338 <usb_isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1340:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1344:	2b00      	cmp	r3, #0
    1346:	d19f      	bne.n	1288 <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1348:	4a76      	ldr	r2, [pc, #472]	; (1524 <usb_isr+0x2c8>)
    134a:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    134e:	2b00      	cmp	r3, #0
    1350:	d147      	bne.n	13e2 <usb_isr+0x186>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1352:	f018 0f40 	tst.w	r8, #64	; 0x40
    1356:	d016      	beq.n	1386 <usb_isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1358:	4b72      	ldr	r3, [pc, #456]	; (1524 <usb_isr+0x2c8>)
    135a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    135e:	4619      	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1360:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1364:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1368:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    136c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    1370:	4a6c      	ldr	r2, [pc, #432]	; (1524 <usb_isr+0x2c8>)
    1372:	2b00      	cmp	r3, #0
    1374:	d1fa      	bne.n	136c <usb_isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    137a:	496e      	ldr	r1, [pc, #440]	; (1534 <usb_isr+0x2d8>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    137c:	f8c2 01b4 	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1380:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    1384:	600b      	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1386:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    138a:	d003      	beq.n	1394 <usb_isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    138c:	4b6a      	ldr	r3, [pc, #424]	; (1538 <usb_isr+0x2dc>)
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	b103      	cbz	r3, 1394 <usb_isr+0x138>
    1392:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    1394:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1398:	d003      	beq.n	13a2 <usb_isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    139a:	4b68      	ldr	r3, [pc, #416]	; (153c <usb_isr+0x2e0>)
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	b103      	cbz	r3, 13a2 <usb_isr+0x146>
    13a0:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    13a2:	f018 0f04 	tst.w	r8, #4
    13a6:	d008      	beq.n	13ba <usb_isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    13a8:	4b5e      	ldr	r3, [pc, #376]	; (1524 <usb_isr+0x2c8>)
    13aa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    13ae:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    13b2:	d045      	beq.n	1440 <usb_isr+0x1e4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    13b4:	4b62      	ldr	r3, [pc, #392]	; (1540 <usb_isr+0x2e4>)
    13b6:	2201      	movs	r2, #1
    13b8:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    13ba:	4b5a      	ldr	r3, [pc, #360]	; (1524 <usb_isr+0x2c8>)
    13bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    13c0:	0612      	lsls	r2, r2, #24
    13c2:	d50b      	bpl.n	13dc <usb_isr+0x180>
    13c4:	f018 0f80 	tst.w	r8, #128	; 0x80
    13c8:	d008      	beq.n	13dc <usb_isr+0x180>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    13ca:	495e      	ldr	r1, [pc, #376]	; (1544 <usb_isr+0x2e8>)
    13cc:	780a      	ldrb	r2, [r1, #0]
    13ce:	b12a      	cbz	r2, 13dc <usb_isr+0x180>
			if (--usb_reboot_timer == 0) {
    13d0:	3a01      	subs	r2, #1
    13d2:	b2d2      	uxtb	r2, r2
    13d4:	700a      	strb	r2, [r1, #0]
    13d6:	2a00      	cmp	r2, #0
    13d8:	f000 8217 	beq.w	180a <usb_isr+0x5ae>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    13dc:	b003      	add	sp, #12
    13de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    13e2:	4959      	ldr	r1, [pc, #356]	; (1548 <usb_isr+0x2ec>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    13e4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    13e8:	6808      	ldr	r0, [r1, #0]
    13ea:	4203      	tst	r3, r0
    13ec:	f040 81b1 	bne.w	1752 <usb_isr+0x4f6>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    13f0:	4a50      	ldr	r2, [pc, #320]	; (1534 <usb_isr+0x2d8>)
    13f2:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    13f4:	401d      	ands	r5, r3
    13f6:	d0ac      	beq.n	1352 <usb_isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    13f8:	0c2e      	lsrs	r6, r5, #16
    13fa:	d00f      	beq.n	141c <usb_isr+0x1c0>
    13fc:	4f4a      	ldr	r7, [pc, #296]	; (1528 <usb_isr+0x2cc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    13fe:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    1402:	fa96 f4a6 	rbit	r4, r6
    1406:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    140a:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    140e:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1412:	3040      	adds	r0, #64	; 0x40
    1414:	f7ff feb6 	bl	1184 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1418:	43a6      	bics	r6, r4
    141a:	d1f2      	bne.n	1402 <usb_isr+0x1a6>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    141c:	b2ad      	uxth	r5, r5
				while(rx) {
    141e:	2d00      	cmp	r5, #0
    1420:	d097      	beq.n	1352 <usb_isr+0xf6>
    1422:	4f41      	ldr	r7, [pc, #260]	; (1528 <usb_isr+0x2cc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1424:	2601      	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    1426:	fa95 f4a5 	rbit	r4, r5
    142a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    142e:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    1432:	fa06 f404 	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    1436:	f7ff fea5 	bl	1184 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    143a:	43a5      	bics	r5, r4
    143c:	d1f3      	bne.n	1426 <usb_isr+0x1ca>
    143e:	e788      	b.n	1352 <usb_isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1440:	4a3f      	ldr	r2, [pc, #252]	; (1540 <usb_isr+0x2e4>)
    1442:	7013      	strb	r3, [r2, #0]
    1444:	e7b9      	b.n	13ba <usb_isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1446:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    144a:	f000 80f5 	beq.w	1638 <usb_isr+0x3dc>
    144e:	d922      	bls.n	1496 <usb_isr+0x23a>
    1450:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1454:	f000 80fe 	beq.w	1654 <usb_isr+0x3f8>
    1458:	f640 1521 	movw	r5, #2337	; 0x921
    145c:	42a9      	cmp	r1, r5
    145e:	d103      	bne.n	1468 <usb_isr+0x20c>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    1460:	0c11      	lsrs	r1, r2, #16
    1462:	2908      	cmp	r1, #8
    1464:	f240 8126 	bls.w	16b4 <usb_isr+0x458>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1468:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    146c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1470:	2b00      	cmp	r3, #0
    1472:	f47f af09 	bne.w	1288 <usb_isr+0x2c>
    1476:	e767      	b.n	1348 <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1478:	2980      	cmp	r1, #128	; 0x80
    147a:	d1f5      	bne.n	1468 <usb_isr+0x20c>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    147c:	4a33      	ldr	r2, [pc, #204]	; (154c <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    147e:	2102      	movs	r1, #2
    1480:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1482:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1484:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1486:	f7ff fe99 	bl	11bc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    148a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    148e:	2b00      	cmp	r3, #0
    1490:	f47f aefa 	bne.w	1288 <usb_isr+0x2c>
    1494:	e758      	b.n	1348 <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1496:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    149a:	2901      	cmp	r1, #1
    149c:	d8e4      	bhi.n	1468 <usb_isr+0x20c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    149e:	4b2c      	ldr	r3, [pc, #176]	; (1550 <usb_isr+0x2f4>)
    14a0:	6859      	ldr	r1, [r3, #4]
    14a2:	2900      	cmp	r1, #0
    14a4:	d0e0      	beq.n	1468 <usb_isr+0x20c>
    14a6:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    14a8:	fa1f fe82 	uxth.w	lr, r2
    14ac:	e003      	b.n	14b6 <usb_isr+0x25a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    14ae:	330c      	adds	r3, #12
    14b0:	6859      	ldr	r1, [r3, #4]
    14b2:	2900      	cmp	r1, #0
    14b4:	d0d8      	beq.n	1468 <usb_isr+0x20c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    14b6:	881d      	ldrh	r5, [r3, #0]
    14b8:	4285      	cmp	r5, r0
    14ba:	d1f8      	bne.n	14ae <usb_isr+0x252>
    14bc:	885d      	ldrh	r5, [r3, #2]
    14be:	4575      	cmp	r5, lr
    14c0:	d1f5      	bne.n	14ae <usb_isr+0x252>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    14c2:	0a05      	lsrs	r5, r0, #8
    14c4:	2d03      	cmp	r5, #3
    14c6:	f000 817b 	beq.w	17c0 <usb_isr+0x564>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    14ca:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    14cc:	0c12      	lsrs	r2, r2, #16
    14ce:	4293      	cmp	r3, r2
    14d0:	bf28      	it	cs
    14d2:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    14d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    14d8:	f000 8163 	beq.w	17a2 <usb_isr+0x546>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    14dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    14e0:	f000 814c 	beq.w	177c <usb_isr+0x520>
    14e4:	4d1b      	ldr	r5, [pc, #108]	; (1554 <usb_isr+0x2f8>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    14e6:	461a      	mov	r2, r3
    14e8:	9301      	str	r3, [sp, #4]
    14ea:	4628      	mov	r0, r5
    14ec:	f001 fb5c 	bl	2ba8 <memcpy>
    14f0:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    14f2:	f025 021f 	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    14f6:	441d      	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
    14f8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    14fc:	4916      	ldr	r1, [pc, #88]	; (1558 <usb_isr+0x2fc>)
    14fe:	600a      	str	r2, [r1, #0]
		location += 32;
    1500:	3220      	adds	r2, #32
	} while (location < end_addr);
    1502:	4295      	cmp	r5, r2
    1504:	d8fa      	bhi.n	14fc <usb_isr+0x2a0>
	asm("dsb");
    1506:	f3bf 8f4f 	dsb	sy
	asm("isb");
    150a:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    150e:	4811      	ldr	r0, [pc, #68]	; (1554 <usb_isr+0x2f8>)
    1510:	4619      	mov	r1, r3
    1512:	f7ff fe53 	bl	11bc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1516:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    151a:	2b00      	cmp	r3, #0
    151c:	f47f aeb4 	bne.w	1288 <usb_isr+0x2c>
    1520:	e712      	b.n	1348 <usb_isr+0xec>
    1522:	bf00      	nop
    1524:	402e0000 	.word	0x402e0000
    1528:	20000000 	.word	0x20000000
    152c:	402e01c0 	.word	0x402e01c0
    1530:	20001fa0 	.word	0x20001fa0
    1534:	20001ef8 	.word	0x20001ef8
    1538:	20001f48 	.word	0x20001f48
    153c:	20001f4c 	.word	0x20001f4c
    1540:	20001f62 	.word	0x20001f62
    1544:	20001f63 	.word	0x20001f63
    1548:	20001ef4 	.word	0x20001ef4
    154c:	20001efc 	.word	0x20001efc
    1550:	20000aec 	.word	0x20000aec
    1554:	20200000 	.word	0x20200000
    1558:	e000ef70 	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    155c:	4ab2      	ldr	r2, [pc, #712]	; (1828 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    155e:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1560:	2501      	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1562:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1564:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1566:	6015      	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1568:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    156a:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    156e:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1572:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1574:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    1578:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    157c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1580:	2b00      	cmp	r3, #0
    1582:	d1fb      	bne.n	157c <usb_isr+0x320>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1584:	0c03      	lsrs	r3, r0, #16
    1586:	065b      	lsls	r3, r3, #25
    1588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    158c:	f8c6 3154 	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1590:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1594:	2b00      	cmp	r3, #0
    1596:	f47f ae77 	bne.w	1288 <usb_isr+0x2c>
    159a:	e6d5      	b.n	1348 <usb_isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    159c:	b292      	uxth	r2, r2
    159e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    15a2:	2b07      	cmp	r3, #7
    15a4:	f63f af60 	bhi.w	1468 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    15a8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    15ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    15b0:	4a9e      	ldr	r2, [pc, #632]	; (182c <usb_isr+0x5d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15b2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15b6:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    15ba:	441a      	add	r2, r3
    15bc:	6813      	ldr	r3, [r2, #0]
    15be:	bf14      	ite	ne
    15c0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    15c4:	f023 0301 	biceq.w	r3, r3, #1
    15c8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15ca:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15cc:	4b96      	ldr	r3, [pc, #600]	; (1828 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15ce:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15d0:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15d2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15d4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    15d6:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15da:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15de:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    15e0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    15e4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    15e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    15ec:	2b00      	cmp	r3, #0
    15ee:	d1fb      	bne.n	15e8 <usb_isr+0x38c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15f0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15f4:	2b00      	cmp	r3, #0
    15f6:	f47f ae47 	bne.w	1288 <usb_isr+0x2c>
    15fa:	e6a5      	b.n	1348 <usb_isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    15fc:	b292      	uxth	r2, r2
    15fe:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1602:	2907      	cmp	r1, #7
    1604:	f63f af30 	bhi.w	1468 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1608:	0089      	lsls	r1, r1, #2
    160a:	4888      	ldr	r0, [pc, #544]	; (182c <usb_isr+0x5d0>)
		reply_buffer[0] = 0;
    160c:	4d88      	ldr	r5, [pc, #544]	; (1830 <usb_isr+0x5d4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    160e:	4408      	add	r0, r1
    1610:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1612:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1614:	702b      	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    1616:	706b      	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1618:	f140 8097 	bpl.w	174a <usb_isr+0x4ee>
    161c:	03ca      	lsls	r2, r1, #15
    161e:	d501      	bpl.n	1624 <usb_isr+0x3c8>
			reply_buffer[0] = 1;
    1620:	2301      	movs	r3, #1
    1622:	702b      	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1624:	2102      	movs	r1, #2
    1626:	4882      	ldr	r0, [pc, #520]	; (1830 <usb_isr+0x5d4>)
    1628:	f7ff fdc8 	bl	11bc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    162c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1630:	2b00      	cmp	r3, #0
    1632:	f47f ae29 	bne.w	1288 <usb_isr+0x2c>
    1636:	e687      	b.n	1348 <usb_isr+0xec>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1638:	4a7e      	ldr	r2, [pc, #504]	; (1834 <usb_isr+0x5d8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    163a:	2101      	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    163c:	4b7c      	ldr	r3, [pc, #496]	; (1830 <usb_isr+0x5d4>)
    163e:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1640:	4618      	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1642:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1644:	f7ff fdba 	bl	11bc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1648:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    164c:	2b00      	cmp	r3, #0
    164e:	f47f ae1b 	bne.w	1288 <usb_isr+0x2c>
    1652:	e679      	b.n	1348 <usb_isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1654:	f3c0 4007 	ubfx	r0, r0, #16, #8
    1658:	4a76      	ldr	r2, [pc, #472]	; (1834 <usb_isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    165a:	4977      	ldr	r1, [pc, #476]	; (1838 <usb_isr+0x5dc>)
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    165c:	f04f 15cc 	mov.w	r5, #13369548	; 0xcc00cc
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1660:	7010      	strb	r0, [r2, #0]
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1662:	4a76      	ldr	r2, [pc, #472]	; (183c <usb_isr+0x5e0>)
    1664:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1666:	f8c6 51c8 	str.w	r5, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    166a:	f8c6 11cc 	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    166e:	f8c6 21d0 	str.w	r2, [r6, #464]	; 0x1d0
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
    1672:	f000 fab3 	bl	1bdc <usb_seremu_configure>
		#endif
		#if defined(CDC3_STATUS_INTERFACE) && defined(CDC3_DATA_INTERFACE)
		usb_serial3_configure();
		#endif
		#if defined(RAWHID_INTERFACE)
		usb_rawhid_configure();
    1676:	f000 fa19 	bl	1aac <usb_rawhid_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    167a:	4a6b      	ldr	r2, [pc, #428]	; (1828 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    167c:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    167e:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1680:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1682:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1684:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1686:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1688:	64fb      	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    168a:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    168e:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1692:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1694:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    1698:	f8c6 21b0 	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    169c:	4a68      	ldr	r2, [pc, #416]	; (1840 <usb_isr+0x5e4>)
    169e:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    16a0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16a4:	2b00      	cmp	r3, #0
    16a6:	d1fb      	bne.n	16a0 <usb_isr+0x444>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    16a8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    16ac:	2b00      	cmp	r3, #0
    16ae:	f47f adeb 	bne.w	1288 <usb_isr+0x2c>
    16b2:	e649      	b.n	1348 <usb_isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    16b4:	f8df e194 	ldr.w	lr, [pc, #404]	; 184c <usb_isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
    16b8:	f04f 0ce9 	mov.w	ip, #233	; 0xe9
    16bc:	4d61      	ldr	r5, [pc, #388]	; (1844 <usb_isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    16be:	e88e 0005 	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
    16c2:	f885 c000 	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
    16c6:	b301      	cbz	r1, 170a <usb_isr+0x4ae>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16c8:	0409      	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16ca:	4a5f      	ldr	r2, [pc, #380]	; (1848 <usb_isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    16cc:	60fb      	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16ce:	2001      	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16d0:	f041 0380 	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    16d4:	60ba      	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    16d6:	6010      	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    16d8:	f505 5e00 	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    16dc:	6053      	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16de:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    16e2:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16e6:	f505 5140 	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    16ea:	6095      	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    16ec:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    16f0:	f043 0301 	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    16f4:	60d0      	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    16f6:	f8c2 e010 	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    16fa:	6151      	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    16fc:	6195      	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    16fe:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1702:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1706:	2b00      	cmp	r3, #0
    1708:	d1fb      	bne.n	1702 <usb_isr+0x4a6>
	}
	endpoint0_transfer_ack.next = 1;
    170a:	4b47      	ldr	r3, [pc, #284]	; (1828 <usb_isr+0x5cc>)
    170c:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    170e:	f248 0280 	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
    1712:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1714:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1716:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    171a:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    171c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    171e:	64f9      	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1720:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1724:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1728:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    172a:	ea42 0300 	orr.w	r3, r2, r0
    172e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1732:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1736:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    173a:	2b00      	cmp	r3, #0
    173c:	d1fb      	bne.n	1736 <usb_isr+0x4da>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    173e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1742:	2b00      	cmp	r3, #0
    1744:	f47f ada0 	bne.w	1288 <usb_isr+0x2c>
    1748:	e5fe      	b.n	1348 <usb_isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    174a:	07cb      	lsls	r3, r1, #31
    174c:	f57f af6a 	bpl.w	1624 <usb_isr+0x3c8>
    1750:	e766      	b.n	1620 <usb_isr+0x3c4>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1752:	483e      	ldr	r0, [pc, #248]	; (184c <usb_isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1754:	2600      	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1756:	4c3e      	ldr	r4, [pc, #248]	; (1850 <usb_isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1758:	6805      	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    175a:	600e      	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    175c:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    175e:	6840      	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1760:	f47f ae46 	bne.w	13f0 <usb_isr+0x194>
    1764:	493b      	ldr	r1, [pc, #236]	; (1854 <usb_isr+0x5f8>)
    1766:	4288      	cmp	r0, r1
    1768:	f47f ae42 	bne.w	13f0 <usb_isr+0x194>
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    176c:	4935      	ldr	r1, [pc, #212]	; (1844 <usb_isr+0x5e8>)
    176e:	7808      	ldrb	r0, [r1, #0]
    1770:	28a9      	cmp	r0, #169	; 0xa9
    1772:	d02b      	beq.n	17cc <usb_isr+0x570>
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
		} else {
			// any other feature report means Arduino Serial Monitor is open
			usb_seremu_online = 1;
    1774:	4a38      	ldr	r2, [pc, #224]	; (1858 <usb_isr+0x5fc>)
    1776:	2101      	movs	r1, #1
    1778:	7011      	strb	r1, [r2, #0]
    177a:	e639      	b.n	13f0 <usb_isr+0x194>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    177c:	4837      	ldr	r0, [pc, #220]	; (185c <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    177e:	461a      	mov	r2, r3
    1780:	4d37      	ldr	r5, [pc, #220]	; (1860 <usb_isr+0x604>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1782:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1786:	4937      	ldr	r1, [pc, #220]	; (1864 <usb_isr+0x608>)
    1788:	4837      	ldr	r0, [pc, #220]	; (1868 <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    178a:	9301      	str	r3, [sp, #4]
    178c:	f1be 0f00 	cmp.w	lr, #0
    1790:	bf08      	it	eq
    1792:	4601      	moveq	r1, r0
    1794:	4628      	mov	r0, r5
    1796:	f001 fa07 	bl	2ba8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    179a:	2207      	movs	r2, #7
    179c:	9b01      	ldr	r3, [sp, #4]
    179e:	706a      	strb	r2, [r5, #1]
    17a0:	e6a7      	b.n	14f2 <usb_isr+0x296>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    17a2:	482e      	ldr	r0, [pc, #184]	; (185c <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    17a4:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    17a6:	4930      	ldr	r1, [pc, #192]	; (1868 <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    17a8:	7805      	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    17aa:	482e      	ldr	r0, [pc, #184]	; (1864 <usb_isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    17ac:	9301      	str	r3, [sp, #4]
    17ae:	2d00      	cmp	r5, #0
    17b0:	bf08      	it	eq
    17b2:	4601      	moveq	r1, r0
    17b4:	482a      	ldr	r0, [pc, #168]	; (1860 <usb_isr+0x604>)
    17b6:	f001 f9f7 	bl	2ba8 <memcpy>
    17ba:	4d29      	ldr	r5, [pc, #164]	; (1860 <usb_isr+0x604>)
    17bc:	9b01      	ldr	r3, [sp, #4]
    17be:	e698      	b.n	14f2 <usb_isr+0x296>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    17c0:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    17c2:	780b      	ldrb	r3, [r1, #0]
    17c4:	4293      	cmp	r3, r2
    17c6:	bf28      	it	cs
    17c8:	4613      	movcs	r3, r2
    17ca:	e687      	b.n	14dc <usb_isr+0x280>
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    17cc:	7848      	ldrb	r0, [r1, #1]
    17ce:	2845      	cmp	r0, #69	; 0x45
    17d0:	d1d0      	bne.n	1774 <usb_isr+0x518>
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
    17d2:	7888      	ldrb	r0, [r1, #2]
    17d4:	28c2      	cmp	r0, #194	; 0xc2
    17d6:	d1cd      	bne.n	1774 <usb_isr+0x518>
    17d8:	78c9      	ldrb	r1, [r1, #3]
    17da:	296b      	cmp	r1, #107	; 0x6b
    17dc:	d1ca      	bne.n	1774 <usb_isr+0x518>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    17de:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    17e0:	4822      	ldr	r0, [pc, #136]	; (186c <usb_isr+0x610>)
    17e2:	7801      	ldrb	r1, [r0, #0]
    17e4:	f041 0104 	orr.w	r1, r1, #4
    17e8:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    17ea:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    17ee:	0608      	lsls	r0, r1, #24
    17f0:	d406      	bmi.n	1800 <usb_isr+0x5a4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    17f2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    17f6:	2080      	movs	r0, #128	; 0x80
    17f8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    17fc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1800:	b662      	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1802:	4a1b      	ldr	r2, [pc, #108]	; (1870 <usb_isr+0x614>)
    1804:	2150      	movs	r1, #80	; 0x50
    1806:	7011      	strb	r1, [r2, #0]
    1808:	e5f2      	b.n	13f0 <usb_isr+0x194>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    180a:	4918      	ldr	r1, [pc, #96]	; (186c <usb_isr+0x610>)
    180c:	780a      	ldrb	r2, [r1, #0]
    180e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1812:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1814:	b92a      	cbnz	r2, 1822 <usb_isr+0x5c6>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1816:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    181a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    181e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    1822:	f004 fdc9 	bl	63b8 <___reboot_Teensyduino__veneer>
    1826:	bf00      	nop
    1828:	20001fa0 	.word	0x20001fa0
    182c:	402e01c0 	.word	0x402e01c0
    1830:	20001efc 	.word	0x20001efc
    1834:	20001f61 	.word	0x20001f61
    1838:	00cc0002 	.word	0x00cc0002
    183c:	000200cc 	.word	0x000200cc
    1840:	20001ef4 	.word	0x20001ef4
    1844:	20001eec 	.word	0x20001eec
    1848:	20001f80 	.word	0x20001f80
    184c:	20001e60 	.word	0x20001e60
    1850:	03000921 	.word	0x03000921
    1854:	00040001 	.word	0x00040001
    1858:	20001f64 	.word	0x20001f64
    185c:	20001f62 	.word	0x20001f62
    1860:	20200000 	.word	0x20200000
    1864:	60001eb4 	.word	0x60001eb4
    1868:	60001f00 	.word	0x60001f00
    186c:	20001f5c 	.word	0x20001f5c
    1870:	20001f63 	.word	0x20001f63

00001874 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1874:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1876:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    187a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    187e:	bf14      	ite	ne
    1880:	2700      	movne	r7, #0
    1882:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1886:	2a02      	cmp	r2, #2
    1888:	d901      	bls.n	188e <usb_config_rx+0x1a>
    188a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    188e:	ea4f 19c0 	mov.w	r9, r0, lsl #7
    1892:	f8df a040 	ldr.w	sl, [pc, #64]	; 18d4 <usb_config_rx+0x60>
    1896:	460d      	mov	r5, r1
    1898:	4604      	mov	r4, r0
    189a:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    189e:	2100      	movs	r1, #0
    18a0:	2240      	movs	r2, #64	; 0x40
    18a2:	4698      	mov	r8, r3
    18a4:	4630      	mov	r0, r6
    18a6:	f001 fa7d 	bl	2da4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    18aa:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    18ac:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    18b0:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    18b4:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    18b8:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    18ba:	f1b8 0f00 	cmp.w	r8, #0
    18be:	d0e4      	beq.n	188a <usb_config_rx+0x16>
    18c0:	4b03      	ldr	r3, [pc, #12]	; (18d0 <usb_config_rx+0x5c>)
    18c2:	40a0      	lsls	r0, r4
    18c4:	681c      	ldr	r4, [r3, #0]
    18c6:	4320      	orrs	r0, r4
    18c8:	6018      	str	r0, [r3, #0]
    18ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18ce:	bf00      	nop
    18d0:	20001ef8 	.word	0x20001ef8
    18d4:	20000000 	.word	0x20000000

000018d8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    18d8:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    18da:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    18de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    18e2:	bf14      	ite	ne
    18e4:	2700      	movne	r7, #0
    18e6:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    18ea:	2a02      	cmp	r2, #2
    18ec:	d901      	bls.n	18f2 <usb_config_tx+0x1a>
    18ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    18f2:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    18f4:	01c5      	lsls	r5, r0, #7
    18f6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 193c <usb_config_tx+0x64>
    18fa:	4688      	mov	r8, r1
    18fc:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    18fe:	2100      	movs	r1, #0
    1900:	4604      	mov	r4, r0
    1902:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1904:	eb09 0a05 	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1908:	4650      	mov	r0, sl
    190a:	f001 fa4b 	bl	2da4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    190e:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1910:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    1914:	f849 1005 	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1918:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    191c:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1920:	2e00      	cmp	r6, #0
    1922:	d0e4      	beq.n	18ee <usb_config_tx+0x16>
    1924:	f104 0010 	add.w	r0, r4, #16
    1928:	4b03      	ldr	r3, [pc, #12]	; (1938 <usb_config_tx+0x60>)
    192a:	4082      	lsls	r2, r0
    192c:	6818      	ldr	r0, [r3, #0]
    192e:	4302      	orrs	r2, r0
    1930:	601a      	str	r2, [r3, #0]
    1932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1936:	bf00      	nop
    1938:	20001ef8 	.word	0x20001ef8
    193c:	20000000 	.word	0x20000000

00001940 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1940:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1942:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1944:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    194a:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    194c:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    194e:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1950:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1954:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1958:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    195c:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1960:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1962:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1964:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1966:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1968:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    196a:	bcf0      	pop	{r4, r5, r6, r7}
    196c:	4770      	bx	lr
    196e:	bf00      	nop

00001970 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1970:	1e83      	subs	r3, r0, #2
    1972:	2b02      	cmp	r3, #2
    1974:	d900      	bls.n	1978 <usb_transmit+0x8>
    1976:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1978:	4b06      	ldr	r3, [pc, #24]	; (1994 <usb_transmit+0x24>)
    197a:	460a      	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    197c:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    197e:	f100 0410 	add.w	r4, r0, #16
    1982:	2501      	movs	r5, #1
    1984:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1988:	fa05 f104 	lsl.w	r1, r5, r4
    198c:	3040      	adds	r0, #64	; 0x40
}
    198e:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1990:	f7ff bbb0 	b.w	10f4 <schedule_transfer>
    1994:	20000000 	.word	0x20000000

00001998 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1998:	1e83      	subs	r3, r0, #2
    199a:	2b02      	cmp	r3, #2
    199c:	d900      	bls.n	19a0 <usb_receive+0x8>
    199e:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    19a0:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    19a2:	4b05      	ldr	r3, [pc, #20]	; (19b8 <usb_receive+0x20>)
    19a4:	2401      	movs	r4, #1
    19a6:	460a      	mov	r2, r1
    19a8:	fa04 f100 	lsl.w	r1, r4, r0
    19ac:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    19b0:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    19b4:	f7ff bb9e 	b.w	10f4 <schedule_transfer>
    19b8:	20000000 	.word	0x20000000

000019bc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    19bc:	6840      	ldr	r0, [r0, #4]
#endif
}
    19be:	4770      	bx	lr

000019c0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    19c0:	4a12      	ldr	r2, [pc, #72]	; (1a0c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19c2:	4b13      	ldr	r3, [pc, #76]	; (1a10 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    19c4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    19c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19cc:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    19ce:	b510      	push	{r4, lr}
    19d0:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    19d2:	d802      	bhi.n	19da <usb_init_serialnumber+0x1a>
    19d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    19d8:	0040      	lsls	r0, r0, #1
    19da:	4c0e      	ldr	r4, [pc, #56]	; (1a14 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    19dc:	a901      	add	r1, sp, #4
    19de:	220a      	movs	r2, #10
    19e0:	f7ff f868 	bl	ab4 <ultoa>
    19e4:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    19e6:	2300      	movs	r3, #0
    19e8:	4620      	mov	r0, r4
		char c = buf[i];
    19ea:	f811 2b01 	ldrb.w	r2, [r1], #1
    19ee:	3301      	adds	r3, #1
		if (!c) break;
    19f0:	b13a      	cbz	r2, 1a02 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    19f2:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    19f4:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    19f8:	d1f7      	bne.n	19ea <usb_init_serialnumber+0x2a>
    19fa:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    19fc:	7023      	strb	r3, [r4, #0]
}
    19fe:	b004      	add	sp, #16
    1a00:	bd10      	pop	{r4, pc}
    1a02:	005b      	lsls	r3, r3, #1
    1a04:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1a06:	7023      	strb	r3, [r4, #0]
}
    1a08:	b004      	add	sp, #16
    1a0a:	bd10      	pop	{r4, pc}
    1a0c:	401f4400 	.word	0x401f4400
    1a10:	0098967f 	.word	0x0098967f
    1a14:	200015c0 	.word	0x200015c0

00001a18 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    1a18:	4a0a      	ldr	r2, [pc, #40]	; (1a44 <rx_event+0x2c>)
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    1a1a:	b410      	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    1a1c:	7813      	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    1a1e:	69c4      	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    1a20:	3301      	adds	r3, #1
    1a22:	2b04      	cmp	r3, #4
    1a24:	d907      	bls.n	1a36 <rx_event+0x1e>
    1a26:	2100      	movs	r1, #0
	rx_list[head] = i;
    1a28:	4807      	ldr	r0, [pc, #28]	; (1a48 <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    1a2a:	460b      	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    1a2c:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1a2e:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    1a30:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a34:	4770      	bx	lr
    1a36:	b2d9      	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1a38:	4803      	ldr	r0, [pc, #12]	; (1a48 <rx_event+0x30>)
	rx_head = head;
    1a3a:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1a3c:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    1a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a42:	4770      	bx	lr
    1a44:	20001f58 	.word	0x20001f58
    1a48:	20001f18 	.word	0x20001f18

00001a4c <rx_queue_transfer>:
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
    1a4c:	4912      	ldr	r1, [pc, #72]	; (1a98 <rx_queue_transfer+0x4c>)
    1a4e:	eb01 1180 	add.w	r1, r1, r0, lsl #6
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1a52:	b538      	push	{r3, r4, r5, lr}
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a54:	f021 021f 	bic.w	r2, r1, #31
    1a58:	4603      	mov	r3, r0
	uint32_t end_addr = (uint32_t)addr + size;
    1a5a:	f101 0540 	add.w	r5, r1, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    1a5e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1a62:	4c0e      	ldr	r4, [pc, #56]	; (1a9c <rx_queue_transfer+0x50>)
    1a64:	6022      	str	r2, [r4, #0]
		location += 32;
    1a66:	3220      	adds	r2, #32
	} while (location < end_addr);
    1a68:	4295      	cmp	r5, r2
    1a6a:	d8fb      	bhi.n	1a64 <rx_queue_transfer+0x18>
	asm("dsb");
    1a6c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a70:	f3bf 8f6f 	isb	sy
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    1a74:	4c0a      	ldr	r4, [pc, #40]	; (1aa0 <rx_queue_transfer+0x54>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a76:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    1a7a:	4a0a      	ldr	r2, [pc, #40]	; (1aa4 <rx_queue_transfer+0x58>)
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    1a7c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a80:	6015      	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    1a82:	2240      	movs	r2, #64	; 0x40
    1a84:	4620      	mov	r0, r4
    1a86:	f7ff ff5b 	bl	1940 <usb_prepare_transfer>
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
    1a8a:	4621      	mov	r1, r4
    1a8c:	2004      	movs	r0, #4
    1a8e:	f7ff ff83 	bl	1998 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1a92:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <rx_queue_transfer+0x5c>)
    1a94:	601d      	str	r5, [r3, #0]
    1a96:	bd38      	pop	{r3, r4, r5, pc}
    1a98:	20200060 	.word	0x20200060
    1a9c:	e000ef5c 	.word	0xe000ef5c
    1aa0:	20001ae0 	.word	0x20001ae0
    1aa4:	e000e18c 	.word	0xe000e18c
    1aa8:	e000e10c 	.word	0xe000e10c

00001aac <usb_rawhid_configure>:


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1aac:	2100      	movs	r1, #0
    1aae:	4816      	ldr	r0, [pc, #88]	; (1b08 <usb_rawhid_configure+0x5c>)
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_rawhid_configure(void)
{
    1ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1ab2:	2580      	movs	r5, #128	; 0x80
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    1ab4:	460c      	mov	r4, r1
	rx_head = 0;
    1ab6:	4f15      	ldr	r7, [pc, #84]	; (1b0c <usb_rawhid_configure+0x60>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1ab8:	462a      	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    1aba:	4e15      	ldr	r6, [pc, #84]	; (1b10 <usb_rawhid_configure+0x64>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1abc:	f001 f972 	bl	2da4 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1ac0:	462a      	mov	r2, r5
    1ac2:	4621      	mov	r1, r4
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    1ac4:	4d13      	ldr	r5, [pc, #76]	; (1b14 <usb_rawhid_configure+0x68>)

void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1ac6:	4814      	ldr	r0, [pc, #80]	; (1b18 <usb_rawhid_configure+0x6c>)
    1ac8:	f001 f96c 	bl	2da4 <memset>
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    1acc:	4623      	mov	r3, r4
    1ace:	4622      	mov	r2, r4
    1ad0:	2140      	movs	r1, #64	; 0x40
    1ad2:	2003      	movs	r0, #3
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    1ad4:	703c      	strb	r4, [r7, #0]
void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    1ad6:	7034      	strb	r4, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
    1ad8:	702c      	strb	r4, [r5, #0]
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    1ada:	f7ff fefd 	bl	18d8 <usb_config_tx>
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
    1ade:	4622      	mov	r2, r4
    1ae0:	4b0e      	ldr	r3, [pc, #56]	; (1b1c <usb_rawhid_configure+0x70>)
    1ae2:	2140      	movs	r1, #64	; 0x40
    1ae4:	2004      	movs	r0, #4
    1ae6:	f7ff fec5 	bl	1874 <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1aea:	4620      	mov	r0, r4
    1aec:	f7ff ffae 	bl	1a4c <rx_queue_transfer>
    1af0:	2001      	movs	r0, #1
    1af2:	f7ff ffab 	bl	1a4c <rx_queue_transfer>
    1af6:	2002      	movs	r0, #2
    1af8:	f7ff ffa8 	bl	1a4c <rx_queue_transfer>
    1afc:	2003      	movs	r0, #3
}
    1afe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b02:	f7ff bfa3 	b.w	1a4c <rx_queue_transfer>
    1b06:	bf00      	nop
    1b08:	20001c60 	.word	0x20001c60
    1b0c:	20001f58 	.word	0x20001f58
    1b10:	20001f5e 	.word	0x20001f5e
    1b14:	20001f5a 	.word	0x20001f5a
    1b18:	20001ae0 	.word	0x20001ae0
    1b1c:	00001a19 	.word	0x00001a19

00001b20 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    1b22:	0141      	lsls	r1, r0, #5
    1b24:	4c12      	ldr	r4, [pc, #72]	; (1b70 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1b26:	4d13      	ldr	r5, [pc, #76]	; (1b74 <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1b28:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    1b2a:	440c      	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b2c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1b30:	440d      	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b32:	4811      	ldr	r0, [pc, #68]	; (1b78 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1b34:	4621      	mov	r1, r4
    1b36:	2220      	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b38:	6006      	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1b3a:	4628      	mov	r0, r5
    1b3c:	f7ff ff00 	bl	1940 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1b40:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1b44:	f104 0120 	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
    1b48:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1b4c:	4a0b      	ldr	r2, [pc, #44]	; (1b7c <rx_queue_transfer+0x5c>)
    1b4e:	6013      	str	r3, [r2, #0]
		location += 32;
    1b50:	3320      	adds	r3, #32
	} while (location < end_addr);
    1b52:	4299      	cmp	r1, r3
    1b54:	d8fb      	bhi.n	1b4e <rx_queue_transfer+0x2e>
	asm("dsb");
    1b56:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1b5a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
    1b5e:	2002      	movs	r0, #2
    1b60:	4629      	mov	r1, r5
    1b62:	f7ff ff19 	bl	1998 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <rx_queue_transfer+0x60>)
    1b68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b6c:	601a      	str	r2, [r3, #0]
    1b6e:	bd70      	pop	{r4, r5, r6, pc}
    1b70:	20200260 	.word	0x20200260
    1b74:	20001b60 	.word	0x20001b60
    1b78:	e000e18c 	.word	0xe000e18c
    1b7c:	e000ef5c 	.word	0xe000ef5c
    1b80:	e000e10c 	.word	0xe000e10c

00001b84 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    1b84:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    1b86:	69c0      	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    1b88:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1b8c:	b10b      	cbz	r3, 1b92 <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
    1b8e:	f7ff bfc7 	b.w	1b20 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    1b92:	490d      	ldr	r1, [pc, #52]	; (1bc8 <rx_event+0x44>)
    1b94:	0142      	lsls	r2, r0, #5
    1b96:	5c8a      	ldrb	r2, [r1, r2]
    1b98:	2a00      	cmp	r2, #0
    1b9a:	d0f8      	beq.n	1b8e <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
    1b9c:	490b      	ldr	r1, [pc, #44]	; (1bcc <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1b9e:	b410      	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1ba0:	4c0b      	ldr	r4, [pc, #44]	; (1bd0 <rx_event+0x4c>)
		rx_index[i] = 0;
    1ba2:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1ba6:	7822      	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1ba8:	490a      	ldr	r1, [pc, #40]	; (1bd4 <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1baa:	3201      	adds	r2, #1
    1bac:	2a08      	cmp	r2, #8
    1bae:	bf94      	ite	ls
    1bb0:	b2d3      	uxtbls	r3, r2
    1bb2:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    1bb4:	7023      	strb	r3, [r4, #0]
		rx_available += len;
    1bb6:	680b      	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1bb8:	4c07      	ldr	r4, [pc, #28]	; (1bd8 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
    1bba:	3320      	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1bbc:	54a0      	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
    1bbe:	600b      	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
    1bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bc4:	4770      	bx	lr
    1bc6:	bf00      	nop
    1bc8:	20200260 	.word	0x20200260
    1bcc:	20001f08 	.word	0x20001f08
    1bd0:	20001f59 	.word	0x20001f59
    1bd4:	20001f04 	.word	0x20001f04
    1bd8:	20001f20 	.word	0x20001f20

00001bdc <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1bdc:	2100      	movs	r1, #0
    1bde:	f44f 72c0 	mov.w	r2, #384	; 0x180
    1be2:	481f      	ldr	r0, [pc, #124]	; (1c60 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
    1be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1be6:	460d      	mov	r5, r1
    1be8:	4c1e      	ldr	r4, [pc, #120]	; (1c64 <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1bea:	f001 f8db 	bl	2da4 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1bee:	4e1e      	ldr	r6, [pc, #120]	; (1c68 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1bf0:	4b1e      	ldr	r3, [pc, #120]	; (1c6c <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1bf2:	4629      	mov	r1, r5
    1bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    1bf8:	481d      	ldr	r0, [pc, #116]	; (1c70 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1bfa:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1bfc:	462c      	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1bfe:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1c00:	f001 f8d0 	bl	2da4 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1c04:	7035      	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1c06:	462a      	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1c08:	4e1a      	ldr	r6, [pc, #104]	; (1c74 <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1c0a:	2120      	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1c0c:	4b1a      	ldr	r3, [pc, #104]	; (1c78 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1c0e:	2002      	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1c10:	4f1a      	ldr	r7, [pc, #104]	; (1c7c <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1c12:	701d      	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1c14:	6035      	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1c16:	4b1a      	ldr	r3, [pc, #104]	; (1c80 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1c18:	6075      	str	r5, [r6, #4]
    1c1a:	60b5      	str	r5, [r6, #8]
    1c1c:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1c1e:	603d      	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1c20:	f7ff fe28 	bl	1874 <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
    1c24:	462b      	mov	r3, r5
    1c26:	462a      	mov	r2, r5
    1c28:	2140      	movs	r1, #64	; 0x40
    1c2a:	2002      	movs	r0, #2
    1c2c:	f7ff fe54 	bl	18d8 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1c30:	4620      	mov	r0, r4
    1c32:	3401      	adds	r4, #1
    1c34:	f7ff ff74 	bl	1b20 <rx_queue_transfer>
    1c38:	2c08      	cmp	r4, #8
    1c3a:	d1f9      	bne.n	1c30 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1c3c:	4b11      	ldr	r3, [pc, #68]	; (1c84 <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    1c3e:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1c40:	4811      	ldr	r0, [pc, #68]	; (1c88 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
    1c42:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1c44:	4c11      	ldr	r4, [pc, #68]	; (1c8c <usb_seremu_configure+0xb0>)
    1c46:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1c48:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1c50:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1c54:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1c58:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c5e:	bf00      	nop
    1c60:	20001ce0 	.word	0x20001ce0
    1c64:	20001f5f 	.word	0x20001f5f
    1c68:	20001f59 	.word	0x20001f59
    1c6c:	20001f50 	.word	0x20001f50
    1c70:	20001b60 	.word	0x20001b60
    1c74:	20001f08 	.word	0x20001f08
    1c78:	20001f5b 	.word	0x20001f5b
    1c7c:	20001f04 	.word	0x20001f04
    1c80:	00001b85 	.word	0x00001b85
    1c84:	402e0000 	.word	0x402e0000
    1c88:	20001f48 	.word	0x20001f48
    1c8c:	00001df9 	.word	0x00001df9

00001c90 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
    1c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    1c92:	4d14      	ldr	r5, [pc, #80]	; (1ce4 <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
    1c94:	4a14      	ldr	r2, [pc, #80]	; (1ce8 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    1c96:	782b      	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
    1c98:	7812      	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    1c9a:	b2db      	uxtb	r3, r3

	if (tail == rx_head) return -1;
    1c9c:	4293      	cmp	r3, r2
    1c9e:	d01d      	beq.n	1cdc <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
    1ca0:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1ca2:	4a12      	ldr	r2, [pc, #72]	; (1cec <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
    1ca4:	4e12      	ldr	r6, [pc, #72]	; (1cf0 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1ca6:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1ca8:	4c12      	ldr	r4, [pc, #72]	; (1cf4 <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1caa:	bf28      	it	cs
    1cac:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1cae:	5cd0      	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
    1cb0:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1cb4:	eb02 1140 	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    1cb8:	3201      	adds	r2, #1
    1cba:	2a1f      	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1cbc:	eb04 0701 	add.w	r7, r4, r1
	int c = *p;
    1cc0:	5c64      	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    1cc2:	d805      	bhi.n	1cd0 <usb_seremu_getchar+0x40>
    1cc4:	7879      	ldrb	r1, [r7, #1]
    1cc6:	b119      	cbz	r1, 1cd0 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
    1cc8:	f826 2010 	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
    1ccc:	4620      	mov	r0, r4
    1cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
    1cd0:	b2db      	uxtb	r3, r3
    1cd2:	702b      	strb	r3, [r5, #0]
		rx_queue_transfer(i);
    1cd4:	f7ff ff24 	bl	1b20 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
    1cd8:	4620      	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
    1cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
    1cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
    1ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ce2:	bf00      	nop
    1ce4:	20001f5b 	.word	0x20001f5b
    1ce8:	20001f59 	.word	0x20001f59
    1cec:	20001f20 	.word	0x20001f20
    1cf0:	20001f08 	.word	0x20001f08
    1cf4:	20200260 	.word	0x20200260

00001cf8 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1cf8:	4b0b      	ldr	r3, [pc, #44]	; (1d28 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1cfa:	4a0c      	ldr	r2, [pc, #48]	; (1d2c <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1cfc:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1cfe:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1d00:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1d02:	4293      	cmp	r3, r2
    1d04:	d00d      	beq.n	1d22 <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1d06:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1d08:	4a09      	ldr	r2, [pc, #36]	; (1d30 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1d0a:	480a      	ldr	r0, [pc, #40]	; (1d34 <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1d0c:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1d0e:	490a      	ldr	r1, [pc, #40]	; (1d38 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1d10:	bf28      	it	cs
    1d12:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1d14:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1d16:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    1d1a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1d1e:	5cc8      	ldrb	r0, [r1, r3]
    1d20:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
    1d26:	4770      	bx	lr
    1d28:	20001f5b 	.word	0x20001f5b
    1d2c:	20001f59 	.word	0x20001f59
    1d30:	20001f20 	.word	0x20001f20
    1d34:	20001f08 	.word	0x20001f08
    1d38:	20200260 	.word	0x20200260

00001d3c <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
    1d3c:	b508      	push	{r3, lr}
	uint32_t tail = rx_tail;
    1d3e:	4a06      	ldr	r2, [pc, #24]	; (1d58 <usb_seremu_available+0x1c>)
	if (tail == rx_head) {
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <usb_seremu_available+0x20>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
    1d42:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) {
    1d44:	781b      	ldrb	r3, [r3, #0]
    1d46:	429a      	cmp	r2, r3
    1d48:	d001      	beq.n	1d4e <usb_seremu_available+0x12>
		yield();
		return 0;
	}
	// TODO: how much is actually available?
	return 1;
    1d4a:	2001      	movs	r0, #1
}
    1d4c:	bd08      	pop	{r3, pc}
// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) {
		yield();
    1d4e:	f000 f9ff 	bl	2150 <yield>
		return 0;
    1d52:	2000      	movs	r0, #0
    1d54:	bd08      	pop	{r3, pc}
    1d56:	bf00      	nop
    1d58:	20001f5b 	.word	0x20001f5b
    1d5c:	20001f59 	.word	0x20001f59

00001d60 <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
    1d60:	b538      	push	{r3, r4, r5, lr}
	if (!tx_available) return;
    1d62:	4c08      	ldr	r4, [pc, #32]	; (1d84 <tx_zero_pad+0x24>)
    1d64:	8822      	ldrh	r2, [r4, #0]
    1d66:	b162      	cbz	r2, 1d82 <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1d68:	4907      	ldr	r1, [pc, #28]	; (1d88 <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
    1d6a:	f1c2 0340 	rsb	r3, r2, #64	; 0x40
    1d6e:	4807      	ldr	r0, [pc, #28]	; (1d8c <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1d70:	780d      	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
    1d72:	2100      	movs	r1, #0
    1d74:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    1d78:	4418      	add	r0, r3
    1d7a:	f001 f813 	bl	2da4 <memset>
	tx_available = 0;
    1d7e:	2300      	movs	r3, #0
    1d80:	8023      	strh	r3, [r4, #0]
    1d82:	bd38      	pop	{r3, r4, r5, pc}
    1d84:	20001f50 	.word	0x20001f50
    1d88:	20001f5f 	.word	0x20001f5f
    1d8c:	20200360 	.word	0x20200360

00001d90 <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
    1d90:	b570      	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    1d92:	4e15      	ldr	r6, [pc, #84]	; (1de8 <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1d94:	2300      	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1d96:	4d15      	ldr	r5, [pc, #84]	; (1dec <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1d98:	2240      	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1d9a:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    1d9c:	4c14      	ldr	r4, [pc, #80]	; (1df0 <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1d9e:	eb05 1541 	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    1da2:	eb04 1481 	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1da6:	4628      	mov	r0, r5
    1da8:	4621      	mov	r1, r4
    1daa:	f7ff fdc9 	bl	1940 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1dae:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1db2:	f104 0140 	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    1db6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1dba:	4a0e      	ldr	r2, [pc, #56]	; (1df4 <tx_queue_transfer+0x64>)
    1dbc:	6013      	str	r3, [r2, #0]
		location += 32;
    1dbe:	3320      	adds	r3, #32
	} while (location < end_addr);
    1dc0:	4299      	cmp	r1, r3
    1dc2:	d8fb      	bhi.n	1dbc <tx_queue_transfer+0x2c>
	asm("dsb");
    1dc4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1dc8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
    1dcc:	2002      	movs	r0, #2
    1dce:	4629      	mov	r1, r5
    1dd0:	f7ff fdce 	bl	1970 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1dd4:	7833      	ldrb	r3, [r6, #0]
    1dd6:	4a04      	ldr	r2, [pc, #16]	; (1de8 <tx_queue_transfer+0x58>)
    1dd8:	3301      	adds	r3, #1
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	2b0b      	cmp	r3, #11
    1dde:	bf88      	it	hi
    1de0:	2300      	movhi	r3, #0
    1de2:	7013      	strb	r3, [r2, #0]
    1de4:	bd70      	pop	{r4, r5, r6, pc}
    1de6:	bf00      	nop
    1de8:	20001f5f 	.word	0x20001f5f
    1dec:	20001ce0 	.word	0x20001ce0
    1df0:	20200360 	.word	0x20200360
    1df4:	e000ef70 	.word	0xe000ef70

00001df8 <usb_seremu_flush_callback>:
	timer_stop();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
    1df8:	b508      	push	{r3, lr}
	if (tx_noautoflush) return;
    1dfa:	4b08      	ldr	r3, [pc, #32]	; (1e1c <usb_seremu_flush_callback+0x24>)
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	b92b      	cbnz	r3, 1e0c <usb_seremu_flush_callback+0x14>
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
    1e00:	4b07      	ldr	r3, [pc, #28]	; (1e20 <usb_seremu_flush_callback+0x28>)
    1e02:	881b      	ldrh	r3, [r3, #0]
    1e04:	3b01      	subs	r3, #1
    1e06:	b29b      	uxth	r3, r3
    1e08:	2b3e      	cmp	r3, #62	; 0x3e
    1e0a:	d900      	bls.n	1e0e <usb_seremu_flush_callback+0x16>
    1e0c:	bd08      	pop	{r3, pc}
	tx_zero_pad();
    1e0e:	f7ff ffa7 	bl	1d60 <tx_zero_pad>
	tx_queue_transfer();
}
    1e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
	tx_zero_pad();
	tx_queue_transfer();
    1e16:	f7ff bfbb 	b.w	1d90 <tx_queue_transfer>
    1e1a:	bf00      	nop
    1e1c:	20001f60 	.word	0x20001f60
    1e20:	20001f50 	.word	0x20001f50

00001e24 <usb_seremu_write.part.1>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
    1e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e28:	b085      	sub	sp, #20
    1e2a:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1e2c:	9100      	str	r1, [sp, #0]
    1e2e:	2900      	cmp	r1, #0
    1e30:	f000 8084 	beq.w	1f3c <usb_seremu_write.part.1+0x118>
    1e34:	2300      	movs	r3, #0
    1e36:	4f42      	ldr	r7, [pc, #264]	; (1f40 <usb_seremu_write.part.1+0x11c>)
    1e38:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1f5c <usb_seremu_write.part.1+0x138>
    1e3c:	f8df a110 	ldr.w	sl, [pc, #272]	; 1f50 <usb_seremu_write.part.1+0x12c>
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1e40:	4e40      	ldr	r6, [pc, #256]	; (1f44 <usb_seremu_write.part.1+0x120>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    1e42:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1f60 <usb_seremu_write.part.1+0x13c>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1e46:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    1e48:	2101      	movs	r1, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1e4a:	4b3f      	ldr	r3, [pc, #252]	; (1f48 <usb_seremu_write.part.1+0x124>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    1e4c:	7039      	strb	r1, [r7, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1e4e:	781a      	ldrb	r2, [r3, #0]
    1e50:	493e      	ldr	r1, [pc, #248]	; (1f4c <usb_seremu_write.part.1+0x128>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1e52:	f8b8 3000 	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    1e56:	eb01 1942 	add.w	r9, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1e5a:	bb0b      	cbnz	r3, 1ea0 <usb_seremu_write.part.1+0x7c>
    1e5c:	461d      	mov	r5, r3
    1e5e:	461c      	mov	r4, r3
			uint32_t status = usb_transfer_status(xfer);
    1e60:	4648      	mov	r0, r9
    1e62:	f7ff fdab 	bl	19bc <usb_transfer_status>
			if (!(status & 0x80)) {
    1e66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    1e6a:	f04f 0300 	mov.w	r3, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1e6e:	4938      	ldr	r1, [pc, #224]	; (1f50 <usb_seremu_write.part.1+0x12c>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1e70:	d056      	beq.n	1f20 <usb_seremu_write.part.1+0xfc>
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1e72:	f89a 2000 	ldrb.w	r2, [sl]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    1e76:	703b      	strb	r3, [r7, #0]
			if (!waiting) {
    1e78:	b904      	cbnz	r4, 1e7c <usb_seremu_write.part.1+0x58>
				wait_begin_at = systick_millis_count;
    1e7a:	6835      	ldr	r5, [r6, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1e7c:	2a00      	cmp	r2, #0
    1e7e:	d134      	bne.n	1eea <usb_seremu_write.part.1+0xc6>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1e80:	6833      	ldr	r3, [r6, #0]
    1e82:	2401      	movs	r4, #1
    1e84:	1b5b      	subs	r3, r3, r5
    1e86:	2b32      	cmp	r3, #50	; 0x32
    1e88:	d853      	bhi.n	1f32 <usb_seremu_write.part.1+0x10e>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    1e8a:	f89b 3000 	ldrb.w	r3, [fp]
    1e8e:	b363      	cbz	r3, 1eea <usb_seremu_write.part.1+0xc6>
			yield();
    1e90:	f000 f95e 	bl	2150 <yield>
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1e94:	f8b8 3000 	ldrh.w	r3, [r8]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d0e1      	beq.n	1e60 <usb_seremu_write.part.1+0x3c>
    1e9c:	4a2a      	ldr	r2, [pc, #168]	; (1f48 <usb_seremu_write.part.1+0x124>)
    1e9e:	7812      	ldrb	r2, [r2, #0]
    1ea0:	461c      	mov	r4, r3
    1ea2:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1ea6:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    1eaa:	4a2a      	ldr	r2, [pc, #168]	; (1f54 <usb_seremu_write.part.1+0x130>)
    1eac:	4410      	add	r0, r2
		if (size >= tx_available) {
    1eae:	9a00      	ldr	r2, [sp, #0]
    1eb0:	42a2      	cmp	r2, r4
    1eb2:	d31e      	bcc.n	1ef2 <usb_seremu_write.part.1+0xce>
			memcpy(txdata, data, tx_available);
			size -= tx_available;
    1eb4:	9b00      	ldr	r3, [sp, #0]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1eb6:	2500      	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1eb8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1ebc:	4622      	mov	r2, r4
			size -= tx_available;
    1ebe:	1b1b      	subs	r3, r3, r4
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1ec0:	4649      	mov	r1, r9
			size -= tx_available;
    1ec2:	9300      	str	r3, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1ec4:	f000 fe70 	bl	2ba8 <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1ec8:	f8a8 5000 	strh.w	r5, [r8]
			tx_queue_transfer();
    1ecc:	f7ff ff60 	bl	1d90 <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    1ed0:	9a01      	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1ed2:	4b21      	ldr	r3, [pc, #132]	; (1f58 <usb_seremu_write.part.1+0x134>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    1ed4:	4422      	add	r2, r4
    1ed6:	9201      	str	r2, [sp, #4]
			data += tx_available;
    1ed8:	464a      	mov	r2, r9
    1eda:	4422      	add	r2, r4
    1edc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1ede:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1ee2:	9b00      	ldr	r3, [sp, #0]
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1ee4:	703d      	strb	r5, [r7, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d1ae      	bne.n	1e48 <usb_seremu_write.part.1+0x24>
    1eea:	9801      	ldr	r0, [sp, #4]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1eec:	b005      	add	sp, #20
    1eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1ef2:	9d00      	ldr	r5, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1ef4:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1ef8:	9902      	ldr	r1, [sp, #8]
    1efa:	462a      	mov	r2, r5
    1efc:	9303      	str	r3, [sp, #12]
    1efe:	f000 fe53 	bl	2ba8 <memcpy>
			tx_available -= size;
    1f02:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1f04:	4914      	ldr	r1, [pc, #80]	; (1f58 <usb_seremu_write.part.1+0x134>)
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1f06:	2200      	movs	r2, #0
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1f08:	1b5b      	subs	r3, r3, r5
    1f0a:	f8a8 3000 	strh.w	r3, [r8]
    1f0e:	9b01      	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1f10:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1f14:	4618      	mov	r0, r3
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1f16:	703a      	strb	r2, [r7, #0]
    1f18:	4428      	add	r0, r5
	}
	return sent;
}
    1f1a:	b005      	add	sp, #20
    1f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    1f20:	2340      	movs	r3, #64	; 0x40
    1f22:	4a09      	ldr	r2, [pc, #36]	; (1f48 <usb_seremu_write.part.1+0x124>)
				transmit_previous_timeout = 0;
    1f24:	f88a 0000 	strb.w	r0, [sl]
    1f28:	7812      	ldrb	r2, [r2, #0]
    1f2a:	461c      	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    1f2c:	f8a8 3000 	strh.w	r3, [r8]
    1f30:	e7b9      	b.n	1ea6 <usb_seremu_write.part.1+0x82>
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
    1f32:	9801      	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1f34:	700c      	strb	r4, [r1, #0]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1f36:	b005      	add	sp, #20
    1f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1f3c:	9800      	ldr	r0, [sp, #0]
    1f3e:	e7d5      	b.n	1eec <usb_seremu_write.part.1+0xc8>
    1f40:	20001f60 	.word	0x20001f60
    1f44:	20001f44 	.word	0x20001f44
    1f48:	20001f5f 	.word	0x20001f5f
    1f4c:	20001ce0 	.word	0x20001ce0
    1f50:	20001f5d 	.word	0x20001f5d
    1f54:	20200360 	.word	0x20200360
    1f58:	402e0000 	.word	0x402e0000
    1f5c:	20001f50 	.word	0x20001f50
    1f60:	20001f61 	.word	0x20001f61

00001f64 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1f64:	4b09      	ldr	r3, [pc, #36]	; (1f8c <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    1f66:	b500      	push	{lr}
    1f68:	b083      	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1f6a:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    1f6c:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1f70:	b923      	cbnz	r3, 1f7c <usb_seremu_putchar+0x18>
    1f72:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
    1f76:	b003      	add	sp, #12
    1f78:	f85d fb04 	ldr.w	pc, [sp], #4
    1f7c:	2101      	movs	r1, #1
    1f7e:	f10d 0007 	add.w	r0, sp, #7
    1f82:	f7ff ff4f 	bl	1e24 <usb_seremu_write.part.1>
    1f86:	b003      	add	sp, #12
    1f88:	f85d fb04 	ldr.w	pc, [sp], #4
    1f8c:	20001f61 	.word	0x20001f61

00001f90 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1f90:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <usb_seremu_write+0x14>)
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1f98:	b10b      	cbz	r3, 1f9e <usb_seremu_write+0xe>
    1f9a:	f7ff bf43 	b.w	1e24 <usb_seremu_write.part.1>
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1f9e:	4610      	mov	r0, r2
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	20001f61 	.word	0x20001f61

00001fa8 <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
    1fa8:	2001      	movs	r0, #1
    1faa:	4770      	bx	lr

00001fac <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
    1fac:	4b0a      	ldr	r3, [pc, #40]	; (1fd8 <usb_seremu_flush_output+0x2c>)
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	b113      	cbz	r3, 1fb8 <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <usb_seremu_flush_output+0x30>)
    1fb4:	881b      	ldrh	r3, [r3, #0]
    1fb6:	b903      	cbnz	r3, 1fba <usb_seremu_flush_output+0xe>
    1fb8:	4770      	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
    1fba:	b510      	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1fbc:	2301      	movs	r3, #1
    1fbe:	4c08      	ldr	r4, [pc, #32]	; (1fe0 <usb_seremu_flush_output+0x34>)
    1fc0:	7023      	strb	r3, [r4, #0]
	tx_zero_pad();
    1fc2:	f7ff fecd 	bl	1d60 <tx_zero_pad>
	tx_queue_transfer();
    1fc6:	f7ff fee3 	bl	1d90 <tx_queue_transfer>
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1fca:	2300      	movs	r3, #0
    1fcc:	4a05      	ldr	r2, [pc, #20]	; (1fe4 <usb_seremu_flush_output+0x38>)
    1fce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	tx_zero_pad();
	tx_queue_transfer();
	timer_stop();
	tx_noautoflush = 0;
    1fd2:	7023      	strb	r3, [r4, #0]
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	bf00      	nop
    1fd8:	20001f61 	.word	0x20001f61
    1fdc:	20001f50 	.word	0x20001f50
    1fe0:	20001f60 	.word	0x20001f60
    1fe4:	402e0000 	.word	0x402e0000

00001fe8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1fea:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1fee:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1ff0:	4c0c      	ldr	r4, [pc, #48]	; (2024 <EventResponder::runFromInterrupt()+0x3c>)
    1ff2:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1ff4:	b18b      	cbz	r3, 201a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1ff6:	4e0c      	ldr	r6, [pc, #48]	; (2028 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1ff8:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1ffa:	695a      	ldr	r2, [r3, #20]
    1ffc:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    1ffe:	b17a      	cbz	r2, 2020 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    2000:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2002:	b901      	cbnz	r1, 2006 <EventResponder::runFromInterrupt()+0x1e>
    2004:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2006:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2008:	4618      	mov	r0, r3
    200a:	689b      	ldr	r3, [r3, #8]
    200c:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    200e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    2012:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2014:	6823      	ldr	r3, [r4, #0]
		if (first) {
    2016:	2b00      	cmp	r3, #0
    2018:	d1ef      	bne.n	1ffa <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    201a:	b901      	cbnz	r1, 201e <EventResponder::runFromInterrupt()+0x36>
    201c:	b662      	cpsie	i
    201e:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2020:	6032      	str	r2, [r6, #0]
    2022:	e7ee      	b.n	2002 <EventResponder::runFromInterrupt()+0x1a>
    2024:	20001e8c 	.word	0x20001e8c
    2028:	20001e88 	.word	0x20001e88

0000202c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    202c:	f7ff bfdc 	b.w	1fe8 <EventResponder::runFromInterrupt()>

00002030 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2030:	4a04      	ldr	r2, [pc, #16]	; (2044 <systick_isr+0x14>)
    2032:	4b05      	ldr	r3, [pc, #20]	; (2048 <systick_isr+0x18>)
    2034:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    2036:	4a05      	ldr	r2, [pc, #20]	; (204c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2038:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    203a:	6813      	ldr	r3, [r2, #0]
    203c:	3301      	adds	r3, #1
    203e:	6013      	str	r3, [r2, #0]
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	e0001004 	.word	0xe0001004
    2048:	20001f40 	.word	0x20001f40
    204c:	20001f44 	.word	0x20001f44

00002050 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    2050:	6802      	ldr	r2, [r0, #0]
    2052:	b30a      	cbz	r2, 2098 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    2054:	4b11      	ldr	r3, [pc, #68]	; (209c <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2056:	4912      	ldr	r1, [pc, #72]	; (20a0 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2058:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    205a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    205c:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    205e:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2060:	2400      	movs	r4, #0
    2062:	f8df e044 	ldr.w	lr, [pc, #68]	; 20a8 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2066:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2068:	780e      	ldrb	r6, [r1, #0]
    206a:	784d      	ldrb	r5, [r1, #1]
    206c:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    206e:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2070:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    2074:	bf28      	it	cs
    2076:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2078:	788a      	ldrb	r2, [r1, #2]
    207a:	78c9      	ldrb	r1, [r1, #3]
    207c:	42ae      	cmp	r6, r5
    207e:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    2080:	4f08      	ldr	r7, [pc, #32]	; (20a4 <IntervalTimer::end()+0x54>)
    2082:	bf28      	it	cs
    2084:	462b      	movcs	r3, r5
    2086:	4293      	cmp	r3, r2
    2088:	bf28      	it	cs
    208a:	4613      	movcs	r3, r2
    208c:	428b      	cmp	r3, r1
    208e:	bf28      	it	cs
    2090:	460b      	movcs	r3, r1
    2092:	703b      	strb	r3, [r7, #0]
		channel = 0;
    2094:	6004      	str	r4, [r0, #0]
    2096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	bff7bf00 	.word	0xbff7bf00
    20a0:	20000fe4 	.word	0x20000fe4
    20a4:	e000e47a 	.word	0xe000e47a
    20a8:	20001ac0 	.word	0x20001ac0

000020ac <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    20ac:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    20ae:	4c06      	ldr	r4, [pc, #24]	; (20c8 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    20b0:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    20b2:	6803      	ldr	r3, [r0, #0]
    20b4:	2202      	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    20b6:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    20b8:	a901      	add	r1, sp, #4
    20ba:	685b      	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    20bc:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    20c0:	4798      	blx	r3
}
    20c2:	b002      	add	sp, #8
    20c4:	bd10      	pop	{r4, pc}
    20c6:	bf00      	nop
    20c8:	20000370 	.word	0x20000370

000020cc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    20cc:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    20ce:	b510      	push	{r4, lr}
    20d0:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    20d2:	685b      	ldr	r3, [r3, #4]
    20d4:	4798      	blx	r3
	return len;
}
    20d6:	4620      	mov	r0, r4
    20d8:	bd10      	pop	{r4, pc}
    20da:	bf00      	nop

000020dc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    20dc:	b40e      	push	{r1, r2, r3}
    20de:	b500      	push	{lr}
    20e0:	b082      	sub	sp, #8
    20e2:	ab03      	add	r3, sp, #12
    20e4:	f853 1b04 	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    20e8:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    20ea:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    20ec:	f001 f95c 	bl	33a8 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    20f0:	b002      	add	sp, #8
    20f2:	f85d eb04 	ldr.w	lr, [sp], #4
    20f6:	b003      	add	sp, #12
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop

000020fc <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    20fc:	b510      	push	{r4, lr}
    20fe:	4604      	mov	r4, r0
		end();
    2100:	f7ff ffa6 	bl	2050 <IntervalTimer::end()>
	}
    2104:	4620      	mov	r0, r4
    2106:	bd10      	pop	{r4, pc}

00002108 <_GLOBAL__sub_I__Z4tonehtm>:
static uint32_t tone_toggle_count;
static volatile uint32_t *tone_reg;
static uint32_t tone_mask;
static float tone_usec=0.0;
static uint32_t tone_new_count=0;
static IntervalTimer tone_timer;
    2108:	4a02      	ldr	r2, [pc, #8]	; (2114 <_GLOBAL__sub_I__Z4tonehtm+0xc>)
    210a:	4903      	ldr	r1, [pc, #12]	; (2118 <_GLOBAL__sub_I__Z4tonehtm+0x10>)
    210c:	4803      	ldr	r0, [pc, #12]	; (211c <_GLOBAL__sub_I__Z4tonehtm+0x14>)
    210e:	f000 b897 	b.w	2240 <__aeabi_atexit>
    2112:	bf00      	nop
    2114:	20000fc0 	.word	0x20000fc0
    2118:	000020fd 	.word	0x000020fd
    211c:	20000fdc 	.word	0x20000fdc

00002120 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    2120:	f000 ba64 	b.w	25ec <malloc>

00002124 <operator delete(void*, unsigned int)>:
    2124:	f000 ba6a 	b.w	25fc <free>

00002128 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    2128:	4770      	bx	lr
    212a:	bf00      	nop

0000212c <usb_seremu_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
    212c:	f7ff bde4 	b.w	1cf8 <usb_seremu_peekchar>

00002130 <usb_seremu_class::read()>:
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
    2130:	f7ff bdae 	b.w	1c90 <usb_seremu_getchar>

00002134 <usb_seremu_class::available()>:
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    2134:	f7ff be02 	b.w	1d3c <usb_seremu_available>

00002138 <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
    2138:	f7ff bf38 	b.w	1fac <usb_seremu_flush_output>

0000213c <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
    213c:	f7ff bf34 	b.w	1fa8 <usb_seremu_write_buffer_free>

00002140 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    2140:	4608      	mov	r0, r1
    2142:	4611      	mov	r1, r2
    2144:	f7ff bf24 	b.w	1f90 <usb_seremu_write>

00002148 <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
    2148:	4608      	mov	r0, r1
    214a:	f7ff bf0b 	b.w	1f64 <usb_seremu_putchar>
    214e:	bf00      	nop

00002150 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2154:	4e32      	ldr	r6, [pc, #200]	; (2220 <yield+0xd0>)
    2156:	7833      	ldrb	r3, [r6, #0]
    2158:	b193      	cbz	r3, 2180 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    215a:	4f32      	ldr	r7, [pc, #200]	; (2224 <yield+0xd4>)
    215c:	783a      	ldrb	r2, [r7, #0]
    215e:	b97a      	cbnz	r2, 2180 <yield+0x30>
	running = 1;
    2160:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2162:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2164:	703a      	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2166:	d437      	bmi.n	21d8 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2168:	079a      	lsls	r2, r3, #30
    216a:	d419      	bmi.n	21a0 <yield+0x50>

	running = 0;
    216c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    216e:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2170:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2172:	d505      	bpl.n	2180 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2174:	4b2c      	ldr	r3, [pc, #176]	; (2228 <yield+0xd8>)
    2176:	681a      	ldr	r2, [r3, #0]
    2178:	b112      	cbz	r2, 2180 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    217a:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    217e:	b10a      	cbz	r2, 2184 <yield+0x34>
    2180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2184:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2188:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    218a:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    218c:	b11a      	cbz	r2, 2196 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    218e:	4c27      	ldr	r4, [pc, #156]	; (222c <yield+0xdc>)
    2190:	7821      	ldrb	r1, [r4, #0]
    2192:	2900      	cmp	r1, #0
    2194:	d02f      	beq.n	21f6 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2196:	2800      	cmp	r0, #0
    2198:	d1f2      	bne.n	2180 <yield+0x30>
    219a:	b662      	cpsie	i
    219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    21a0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2238 <yield+0xe8>
    21a4:	f898 2000 	ldrb.w	r2, [r8]
    21a8:	2a00      	cmp	r2, #0
    21aa:	d0df      	beq.n	216c <yield+0x1c>
    21ac:	2400      	movs	r4, #0
    21ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 223c <yield+0xec>
    21b2:	e005      	b.n	21c0 <yield+0x70>
    21b4:	3401      	adds	r4, #1
    21b6:	f898 3000 	ldrb.w	r3, [r8]
    21ba:	b2e4      	uxtb	r4, r4
    21bc:	42a3      	cmp	r3, r4
    21be:	d913      	bls.n	21e8 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    21c0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    21c4:	682b      	ldr	r3, [r5, #0]
    21c6:	4628      	mov	r0, r5
    21c8:	691b      	ldr	r3, [r3, #16]
    21ca:	4798      	blx	r3
    21cc:	2800      	cmp	r0, #0
    21ce:	d0f1      	beq.n	21b4 <yield+0x64>
    21d0:	696b      	ldr	r3, [r5, #20]
    21d2:	689b      	ldr	r3, [r3, #8]
    21d4:	4798      	blx	r3
    21d6:	e7ed      	b.n	21b4 <yield+0x64>
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    21d8:	f7ff fdb0 	bl	1d3c <usb_seremu_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    21dc:	b9d0      	cbnz	r0, 2214 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    21de:	4b14      	ldr	r3, [pc, #80]	; (2230 <yield+0xe0>)
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	b91b      	cbnz	r3, 21ec <yield+0x9c>
    21e4:	7833      	ldrb	r3, [r6, #0]
    21e6:	e7bf      	b.n	2168 <yield+0x18>
    21e8:	7833      	ldrb	r3, [r6, #0]
    21ea:	e7bf      	b.n	216c <yield+0x1c>
    21ec:	7833      	ldrb	r3, [r6, #0]
    21ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    21f2:	7033      	strb	r3, [r6, #0]
    21f4:	e7b8      	b.n	2168 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    21f6:	2601      	movs	r6, #1
		firstYield = first->_next;
    21f8:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    21fa:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    21fc:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    21fe:	b165      	cbz	r5, 221a <yield+0xca>
			firstYield->_prev = nullptr;
    2200:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2202:	b900      	cbnz	r0, 2206 <yield+0xb6>
    2204:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2206:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2208:	6893      	ldr	r3, [r2, #8]
    220a:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    220c:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    220e:	4798      	blx	r3
		runningFromYield = false;
    2210:	7025      	strb	r5, [r4, #0]
    2212:	e7b5      	b.n	2180 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2214:	f7ff ff88 	bl	2128 <serialEvent()>
    2218:	e7e1      	b.n	21de <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    221a:	4b06      	ldr	r3, [pc, #24]	; (2234 <yield+0xe4>)
    221c:	601d      	str	r5, [r3, #0]
    221e:	e7f0      	b.n	2202 <yield+0xb2>
    2220:	200015d6 	.word	0x200015d6
    2224:	20001f54 	.word	0x20001f54
    2228:	20001e84 	.word	0x20001e84
    222c:	20001f52 	.word	0x20001f52
    2230:	60001f56 	.word	0x60001f56
    2234:	20001e90 	.word	0x20001e90
    2238:	20001f53 	.word	0x20001f53
    223c:	20001e94 	.word	0x20001e94

00002240 <__aeabi_atexit>:
    2240:	460b      	mov	r3, r1
    2242:	4601      	mov	r1, r0
    2244:	4618      	mov	r0, r3
    2246:	f000 b98d 	b.w	2564 <__cxa_atexit>
    224a:	bf00      	nop

0000224c <__aeabi_uldivmod>:
    224c:	b953      	cbnz	r3, 2264 <__aeabi_uldivmod+0x18>
    224e:	b94a      	cbnz	r2, 2264 <__aeabi_uldivmod+0x18>
    2250:	2900      	cmp	r1, #0
    2252:	bf08      	it	eq
    2254:	2800      	cmpeq	r0, #0
    2256:	bf1c      	itt	ne
    2258:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    225c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2260:	f000 b97e 	b.w	2560 <__aeabi_idiv0>
    2264:	f1ad 0c08 	sub.w	ip, sp, #8
    2268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    226c:	f000 f806 	bl	227c <__udivmoddi4>
    2270:	f8dd e004 	ldr.w	lr, [sp, #4]
    2274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2278:	b004      	add	sp, #16
    227a:	4770      	bx	lr

0000227c <__udivmoddi4>:
    227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2280:	468c      	mov	ip, r1
    2282:	460e      	mov	r6, r1
    2284:	4604      	mov	r4, r0
    2286:	9d08      	ldr	r5, [sp, #32]
    2288:	2b00      	cmp	r3, #0
    228a:	d150      	bne.n	232e <__udivmoddi4+0xb2>
    228c:	428a      	cmp	r2, r1
    228e:	4617      	mov	r7, r2
    2290:	d96c      	bls.n	236c <__udivmoddi4+0xf0>
    2292:	fab2 fe82 	clz	lr, r2
    2296:	f1be 0f00 	cmp.w	lr, #0
    229a:	d00b      	beq.n	22b4 <__udivmoddi4+0x38>
    229c:	f1ce 0420 	rsb	r4, lr, #32
    22a0:	fa20 f404 	lsr.w	r4, r0, r4
    22a4:	fa01 f60e 	lsl.w	r6, r1, lr
    22a8:	ea44 0c06 	orr.w	ip, r4, r6
    22ac:	fa02 f70e 	lsl.w	r7, r2, lr
    22b0:	fa00 f40e 	lsl.w	r4, r0, lr
    22b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
    22b8:	0c22      	lsrs	r2, r4, #16
    22ba:	fbbc f0f9 	udiv	r0, ip, r9
    22be:	fa1f f887 	uxth.w	r8, r7
    22c2:	fb09 c610 	mls	r6, r9, r0, ip
    22c6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    22ca:	fb00 f308 	mul.w	r3, r0, r8
    22ce:	42b3      	cmp	r3, r6
    22d0:	d909      	bls.n	22e6 <__udivmoddi4+0x6a>
    22d2:	19f6      	adds	r6, r6, r7
    22d4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    22d8:	f080 8122 	bcs.w	2520 <__udivmoddi4+0x2a4>
    22dc:	42b3      	cmp	r3, r6
    22de:	f240 811f 	bls.w	2520 <__udivmoddi4+0x2a4>
    22e2:	3802      	subs	r0, #2
    22e4:	443e      	add	r6, r7
    22e6:	1af6      	subs	r6, r6, r3
    22e8:	b2a2      	uxth	r2, r4
    22ea:	fbb6 f3f9 	udiv	r3, r6, r9
    22ee:	fb09 6613 	mls	r6, r9, r3, r6
    22f2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    22f6:	fb03 f808 	mul.w	r8, r3, r8
    22fa:	45a0      	cmp	r8, r4
    22fc:	d909      	bls.n	2312 <__udivmoddi4+0x96>
    22fe:	19e4      	adds	r4, r4, r7
    2300:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2304:	f080 810a 	bcs.w	251c <__udivmoddi4+0x2a0>
    2308:	45a0      	cmp	r8, r4
    230a:	f240 8107 	bls.w	251c <__udivmoddi4+0x2a0>
    230e:	3b02      	subs	r3, #2
    2310:	443c      	add	r4, r7
    2312:	ebc8 0404 	rsb	r4, r8, r4
    2316:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    231a:	2100      	movs	r1, #0
    231c:	2d00      	cmp	r5, #0
    231e:	d062      	beq.n	23e6 <__udivmoddi4+0x16a>
    2320:	fa24 f40e 	lsr.w	r4, r4, lr
    2324:	2300      	movs	r3, #0
    2326:	602c      	str	r4, [r5, #0]
    2328:	606b      	str	r3, [r5, #4]
    232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    232e:	428b      	cmp	r3, r1
    2330:	d907      	bls.n	2342 <__udivmoddi4+0xc6>
    2332:	2d00      	cmp	r5, #0
    2334:	d055      	beq.n	23e2 <__udivmoddi4+0x166>
    2336:	2100      	movs	r1, #0
    2338:	e885 0041 	stmia.w	r5, {r0, r6}
    233c:	4608      	mov	r0, r1
    233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2342:	fab3 f183 	clz	r1, r3
    2346:	2900      	cmp	r1, #0
    2348:	f040 8090 	bne.w	246c <__udivmoddi4+0x1f0>
    234c:	42b3      	cmp	r3, r6
    234e:	d302      	bcc.n	2356 <__udivmoddi4+0xda>
    2350:	4282      	cmp	r2, r0
    2352:	f200 80f8 	bhi.w	2546 <__udivmoddi4+0x2ca>
    2356:	1a84      	subs	r4, r0, r2
    2358:	eb66 0603 	sbc.w	r6, r6, r3
    235c:	2001      	movs	r0, #1
    235e:	46b4      	mov	ip, r6
    2360:	2d00      	cmp	r5, #0
    2362:	d040      	beq.n	23e6 <__udivmoddi4+0x16a>
    2364:	e885 1010 	stmia.w	r5, {r4, ip}
    2368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    236c:	b912      	cbnz	r2, 2374 <__udivmoddi4+0xf8>
    236e:	2701      	movs	r7, #1
    2370:	fbb7 f7f2 	udiv	r7, r7, r2
    2374:	fab7 fe87 	clz	lr, r7
    2378:	f1be 0f00 	cmp.w	lr, #0
    237c:	d135      	bne.n	23ea <__udivmoddi4+0x16e>
    237e:	1bf3      	subs	r3, r6, r7
    2380:	ea4f 4817 	mov.w	r8, r7, lsr #16
    2384:	fa1f fc87 	uxth.w	ip, r7
    2388:	2101      	movs	r1, #1
    238a:	fbb3 f0f8 	udiv	r0, r3, r8
    238e:	0c22      	lsrs	r2, r4, #16
    2390:	fb08 3610 	mls	r6, r8, r0, r3
    2394:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    2398:	fb0c f300 	mul.w	r3, ip, r0
    239c:	42b3      	cmp	r3, r6
    239e:	d907      	bls.n	23b0 <__udivmoddi4+0x134>
    23a0:	19f6      	adds	r6, r6, r7
    23a2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    23a6:	d202      	bcs.n	23ae <__udivmoddi4+0x132>
    23a8:	42b3      	cmp	r3, r6
    23aa:	f200 80ce 	bhi.w	254a <__udivmoddi4+0x2ce>
    23ae:	4610      	mov	r0, r2
    23b0:	1af6      	subs	r6, r6, r3
    23b2:	b2a2      	uxth	r2, r4
    23b4:	fbb6 f3f8 	udiv	r3, r6, r8
    23b8:	fb08 6613 	mls	r6, r8, r3, r6
    23bc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    23c0:	fb0c fc03 	mul.w	ip, ip, r3
    23c4:	45a4      	cmp	ip, r4
    23c6:	d907      	bls.n	23d8 <__udivmoddi4+0x15c>
    23c8:	19e4      	adds	r4, r4, r7
    23ca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    23ce:	d202      	bcs.n	23d6 <__udivmoddi4+0x15a>
    23d0:	45a4      	cmp	ip, r4
    23d2:	f200 80b5 	bhi.w	2540 <__udivmoddi4+0x2c4>
    23d6:	4613      	mov	r3, r2
    23d8:	ebcc 0404 	rsb	r4, ip, r4
    23dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    23e0:	e79c      	b.n	231c <__udivmoddi4+0xa0>
    23e2:	4629      	mov	r1, r5
    23e4:	4628      	mov	r0, r5
    23e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23ea:	f1ce 0120 	rsb	r1, lr, #32
    23ee:	fa06 f30e 	lsl.w	r3, r6, lr
    23f2:	fa07 f70e 	lsl.w	r7, r7, lr
    23f6:	fa20 f901 	lsr.w	r9, r0, r1
    23fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
    23fe:	40ce      	lsrs	r6, r1
    2400:	ea49 0903 	orr.w	r9, r9, r3
    2404:	fbb6 faf8 	udiv	sl, r6, r8
    2408:	ea4f 4419 	mov.w	r4, r9, lsr #16
    240c:	fb08 661a 	mls	r6, r8, sl, r6
    2410:	fa1f fc87 	uxth.w	ip, r7
    2414:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    2418:	fb0a f20c 	mul.w	r2, sl, ip
    241c:	429a      	cmp	r2, r3
    241e:	fa00 f40e 	lsl.w	r4, r0, lr
    2422:	d90a      	bls.n	243a <__udivmoddi4+0x1be>
    2424:	19db      	adds	r3, r3, r7
    2426:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    242a:	f080 8087 	bcs.w	253c <__udivmoddi4+0x2c0>
    242e:	429a      	cmp	r2, r3
    2430:	f240 8084 	bls.w	253c <__udivmoddi4+0x2c0>
    2434:	f1aa 0a02 	sub.w	sl, sl, #2
    2438:	443b      	add	r3, r7
    243a:	1a9b      	subs	r3, r3, r2
    243c:	fa1f f989 	uxth.w	r9, r9
    2440:	fbb3 f1f8 	udiv	r1, r3, r8
    2444:	fb08 3311 	mls	r3, r8, r1, r3
    2448:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    244c:	fb01 f60c 	mul.w	r6, r1, ip
    2450:	429e      	cmp	r6, r3
    2452:	d907      	bls.n	2464 <__udivmoddi4+0x1e8>
    2454:	19db      	adds	r3, r3, r7
    2456:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    245a:	d26b      	bcs.n	2534 <__udivmoddi4+0x2b8>
    245c:	429e      	cmp	r6, r3
    245e:	d969      	bls.n	2534 <__udivmoddi4+0x2b8>
    2460:	3902      	subs	r1, #2
    2462:	443b      	add	r3, r7
    2464:	1b9b      	subs	r3, r3, r6
    2466:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    246a:	e78e      	b.n	238a <__udivmoddi4+0x10e>
    246c:	f1c1 0e20 	rsb	lr, r1, #32
    2470:	fa22 f40e 	lsr.w	r4, r2, lr
    2474:	408b      	lsls	r3, r1
    2476:	4323      	orrs	r3, r4
    2478:	fa20 f70e 	lsr.w	r7, r0, lr
    247c:	fa06 f401 	lsl.w	r4, r6, r1
    2480:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    2484:	fa26 f60e 	lsr.w	r6, r6, lr
    2488:	433c      	orrs	r4, r7
    248a:	fbb6 f9fc 	udiv	r9, r6, ip
    248e:	0c27      	lsrs	r7, r4, #16
    2490:	fb0c 6619 	mls	r6, ip, r9, r6
    2494:	fa1f f883 	uxth.w	r8, r3
    2498:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    249c:	fb09 f708 	mul.w	r7, r9, r8
    24a0:	42b7      	cmp	r7, r6
    24a2:	fa02 f201 	lsl.w	r2, r2, r1
    24a6:	fa00 fa01 	lsl.w	sl, r0, r1
    24aa:	d908      	bls.n	24be <__udivmoddi4+0x242>
    24ac:	18f6      	adds	r6, r6, r3
    24ae:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    24b2:	d241      	bcs.n	2538 <__udivmoddi4+0x2bc>
    24b4:	42b7      	cmp	r7, r6
    24b6:	d93f      	bls.n	2538 <__udivmoddi4+0x2bc>
    24b8:	f1a9 0902 	sub.w	r9, r9, #2
    24bc:	441e      	add	r6, r3
    24be:	1bf6      	subs	r6, r6, r7
    24c0:	b2a0      	uxth	r0, r4
    24c2:	fbb6 f4fc 	udiv	r4, r6, ip
    24c6:	fb0c 6614 	mls	r6, ip, r4, r6
    24ca:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    24ce:	fb04 f808 	mul.w	r8, r4, r8
    24d2:	45b8      	cmp	r8, r7
    24d4:	d907      	bls.n	24e6 <__udivmoddi4+0x26a>
    24d6:	18ff      	adds	r7, r7, r3
    24d8:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    24dc:	d228      	bcs.n	2530 <__udivmoddi4+0x2b4>
    24de:	45b8      	cmp	r8, r7
    24e0:	d926      	bls.n	2530 <__udivmoddi4+0x2b4>
    24e2:	3c02      	subs	r4, #2
    24e4:	441f      	add	r7, r3
    24e6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    24ea:	ebc8 0707 	rsb	r7, r8, r7
    24ee:	fba0 8902 	umull	r8, r9, r0, r2
    24f2:	454f      	cmp	r7, r9
    24f4:	4644      	mov	r4, r8
    24f6:	464e      	mov	r6, r9
    24f8:	d314      	bcc.n	2524 <__udivmoddi4+0x2a8>
    24fa:	d029      	beq.n	2550 <__udivmoddi4+0x2d4>
    24fc:	b365      	cbz	r5, 2558 <__udivmoddi4+0x2dc>
    24fe:	ebba 0304 	subs.w	r3, sl, r4
    2502:	eb67 0706 	sbc.w	r7, r7, r6
    2506:	fa07 fe0e 	lsl.w	lr, r7, lr
    250a:	40cb      	lsrs	r3, r1
    250c:	40cf      	lsrs	r7, r1
    250e:	ea4e 0303 	orr.w	r3, lr, r3
    2512:	e885 0088 	stmia.w	r5, {r3, r7}
    2516:	2100      	movs	r1, #0
    2518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    251c:	4613      	mov	r3, r2
    251e:	e6f8      	b.n	2312 <__udivmoddi4+0x96>
    2520:	4610      	mov	r0, r2
    2522:	e6e0      	b.n	22e6 <__udivmoddi4+0x6a>
    2524:	ebb8 0402 	subs.w	r4, r8, r2
    2528:	eb69 0603 	sbc.w	r6, r9, r3
    252c:	3801      	subs	r0, #1
    252e:	e7e5      	b.n	24fc <__udivmoddi4+0x280>
    2530:	4604      	mov	r4, r0
    2532:	e7d8      	b.n	24e6 <__udivmoddi4+0x26a>
    2534:	4611      	mov	r1, r2
    2536:	e795      	b.n	2464 <__udivmoddi4+0x1e8>
    2538:	4681      	mov	r9, r0
    253a:	e7c0      	b.n	24be <__udivmoddi4+0x242>
    253c:	468a      	mov	sl, r1
    253e:	e77c      	b.n	243a <__udivmoddi4+0x1be>
    2540:	3b02      	subs	r3, #2
    2542:	443c      	add	r4, r7
    2544:	e748      	b.n	23d8 <__udivmoddi4+0x15c>
    2546:	4608      	mov	r0, r1
    2548:	e70a      	b.n	2360 <__udivmoddi4+0xe4>
    254a:	3802      	subs	r0, #2
    254c:	443e      	add	r6, r7
    254e:	e72f      	b.n	23b0 <__udivmoddi4+0x134>
    2550:	45c2      	cmp	sl, r8
    2552:	d3e7      	bcc.n	2524 <__udivmoddi4+0x2a8>
    2554:	463e      	mov	r6, r7
    2556:	e7d1      	b.n	24fc <__udivmoddi4+0x280>
    2558:	4629      	mov	r1, r5
    255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    255e:	bf00      	nop

00002560 <__aeabi_idiv0>:
    2560:	4770      	bx	lr
    2562:	bf00      	nop

00002564 <__cxa_atexit>:
    2564:	4613      	mov	r3, r2
    2566:	460a      	mov	r2, r1
    2568:	4601      	mov	r1, r0
    256a:	2002      	movs	r0, #2
    256c:	f000 bf4c 	b.w	3408 <__register_exitproc>

00002570 <__errno>:
    2570:	4b01      	ldr	r3, [pc, #4]	; (2578 <__errno+0x8>)
    2572:	6818      	ldr	r0, [r3, #0]
    2574:	4770      	bx	lr
    2576:	bf00      	nop
    2578:	20001568 	.word	0x20001568

0000257c <exit>:
    257c:	b508      	push	{r3, lr}
    257e:	2100      	movs	r1, #0
    2580:	4604      	mov	r4, r0
    2582:	f000 ff93 	bl	34ac <__call_exitprocs>
    2586:	4b04      	ldr	r3, [pc, #16]	; (2598 <exit+0x1c>)
    2588:	6818      	ldr	r0, [r3, #0]
    258a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    258c:	b103      	cbz	r3, 2590 <exit+0x14>
    258e:	4798      	blx	r3
    2590:	4620      	mov	r0, r4
    2592:	f7fe fd7b 	bl	108c <_exit>
    2596:	bf00      	nop
    2598:	2000049c 	.word	0x2000049c

0000259c <__libc_init_array>:
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	4e0f      	ldr	r6, [pc, #60]	; (25dc <__libc_init_array+0x40>)
    25a0:	4d0f      	ldr	r5, [pc, #60]	; (25e0 <__libc_init_array+0x44>)
    25a2:	1b76      	subs	r6, r6, r5
    25a4:	10b6      	asrs	r6, r6, #2
    25a6:	bf18      	it	ne
    25a8:	2400      	movne	r4, #0
    25aa:	d005      	beq.n	25b8 <__libc_init_array+0x1c>
    25ac:	3401      	adds	r4, #1
    25ae:	f855 3b04 	ldr.w	r3, [r5], #4
    25b2:	4798      	blx	r3
    25b4:	42a6      	cmp	r6, r4
    25b6:	d1f9      	bne.n	25ac <__libc_init_array+0x10>
    25b8:	4e0a      	ldr	r6, [pc, #40]	; (25e4 <__libc_init_array+0x48>)
    25ba:	4d0b      	ldr	r5, [pc, #44]	; (25e8 <__libc_init_array+0x4c>)
    25bc:	1b76      	subs	r6, r6, r5
    25be:	f003 feff 	bl	63c0 <___init_veneer>
    25c2:	10b6      	asrs	r6, r6, #2
    25c4:	bf18      	it	ne
    25c6:	2400      	movne	r4, #0
    25c8:	d006      	beq.n	25d8 <__libc_init_array+0x3c>
    25ca:	3401      	adds	r4, #1
    25cc:	f855 3b04 	ldr.w	r3, [r5], #4
    25d0:	4798      	blx	r3
    25d2:	42a6      	cmp	r6, r4
    25d4:	d1f9      	bne.n	25ca <__libc_init_array+0x2e>
    25d6:	bd70      	pop	{r4, r5, r6, pc}
    25d8:	bd70      	pop	{r4, r5, r6, pc}
    25da:	bf00      	nop
    25dc:	60001e68 	.word	0x60001e68
    25e0:	60001e68 	.word	0x60001e68
    25e4:	60001e70 	.word	0x60001e70
    25e8:	60001e68 	.word	0x60001e68

000025ec <malloc>:
    25ec:	4b02      	ldr	r3, [pc, #8]	; (25f8 <malloc+0xc>)
    25ee:	4601      	mov	r1, r0
    25f0:	6818      	ldr	r0, [r3, #0]
    25f2:	f000 b80b 	b.w	260c <_malloc_r>
    25f6:	bf00      	nop
    25f8:	20001568 	.word	0x20001568

000025fc <free>:
    25fc:	4b02      	ldr	r3, [pc, #8]	; (2608 <free+0xc>)
    25fe:	4601      	mov	r1, r0
    2600:	6818      	ldr	r0, [r3, #0]
    2602:	f001 b80d 	b.w	3620 <_free_r>
    2606:	bf00      	nop
    2608:	20001568 	.word	0x20001568

0000260c <_malloc_r>:
    260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2610:	f101 050b 	add.w	r5, r1, #11
    2614:	2d16      	cmp	r5, #22
    2616:	b083      	sub	sp, #12
    2618:	4606      	mov	r6, r0
    261a:	f240 809f 	bls.w	275c <_malloc_r+0x150>
    261e:	f035 0507 	bics.w	r5, r5, #7
    2622:	f100 80bf 	bmi.w	27a4 <_malloc_r+0x198>
    2626:	42a9      	cmp	r1, r5
    2628:	f200 80bc 	bhi.w	27a4 <_malloc_r+0x198>
    262c:	f000 fc08 	bl	2e40 <__malloc_lock>
    2630:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    2634:	f0c0 829c 	bcc.w	2b70 <_malloc_r+0x564>
    2638:	0a6b      	lsrs	r3, r5, #9
    263a:	f000 80ba 	beq.w	27b2 <_malloc_r+0x1a6>
    263e:	2b04      	cmp	r3, #4
    2640:	f200 8183 	bhi.w	294a <_malloc_r+0x33e>
    2644:	09a8      	lsrs	r0, r5, #6
    2646:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    264a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    264e:	3038      	adds	r0, #56	; 0x38
    2650:	4fc4      	ldr	r7, [pc, #784]	; (2964 <_malloc_r+0x358>)
    2652:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2656:	f1a3 0108 	sub.w	r1, r3, #8
    265a:	685c      	ldr	r4, [r3, #4]
    265c:	42a1      	cmp	r1, r4
    265e:	d107      	bne.n	2670 <_malloc_r+0x64>
    2660:	e0ac      	b.n	27bc <_malloc_r+0x1b0>
    2662:	2a00      	cmp	r2, #0
    2664:	f280 80ac 	bge.w	27c0 <_malloc_r+0x1b4>
    2668:	68e4      	ldr	r4, [r4, #12]
    266a:	42a1      	cmp	r1, r4
    266c:	f000 80a6 	beq.w	27bc <_malloc_r+0x1b0>
    2670:	6863      	ldr	r3, [r4, #4]
    2672:	f023 0303 	bic.w	r3, r3, #3
    2676:	1b5a      	subs	r2, r3, r5
    2678:	2a0f      	cmp	r2, #15
    267a:	ddf2      	ble.n	2662 <_malloc_r+0x56>
    267c:	49b9      	ldr	r1, [pc, #740]	; (2964 <_malloc_r+0x358>)
    267e:	693c      	ldr	r4, [r7, #16]
    2680:	f101 0e08 	add.w	lr, r1, #8
    2684:	4574      	cmp	r4, lr
    2686:	f000 81b3 	beq.w	29f0 <_malloc_r+0x3e4>
    268a:	6863      	ldr	r3, [r4, #4]
    268c:	f023 0303 	bic.w	r3, r3, #3
    2690:	1b5a      	subs	r2, r3, r5
    2692:	2a0f      	cmp	r2, #15
    2694:	f300 8199 	bgt.w	29ca <_malloc_r+0x3be>
    2698:	2a00      	cmp	r2, #0
    269a:	f8c1 e014 	str.w	lr, [r1, #20]
    269e:	f8c1 e010 	str.w	lr, [r1, #16]
    26a2:	f280 809e 	bge.w	27e2 <_malloc_r+0x1d6>
    26a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26aa:	f080 8167 	bcs.w	297c <_malloc_r+0x370>
    26ae:	08db      	lsrs	r3, r3, #3
    26b0:	f103 0c01 	add.w	ip, r3, #1
    26b4:	2201      	movs	r2, #1
    26b6:	109b      	asrs	r3, r3, #2
    26b8:	fa02 f303 	lsl.w	r3, r2, r3
    26bc:	684a      	ldr	r2, [r1, #4]
    26be:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    26c2:	f8c4 8008 	str.w	r8, [r4, #8]
    26c6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    26ca:	431a      	orrs	r2, r3
    26cc:	f1a9 0308 	sub.w	r3, r9, #8
    26d0:	60e3      	str	r3, [r4, #12]
    26d2:	604a      	str	r2, [r1, #4]
    26d4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    26d8:	f8c8 400c 	str.w	r4, [r8, #12]
    26dc:	1083      	asrs	r3, r0, #2
    26de:	2401      	movs	r4, #1
    26e0:	409c      	lsls	r4, r3
    26e2:	4294      	cmp	r4, r2
    26e4:	f200 808a 	bhi.w	27fc <_malloc_r+0x1f0>
    26e8:	4214      	tst	r4, r2
    26ea:	d106      	bne.n	26fa <_malloc_r+0xee>
    26ec:	f020 0003 	bic.w	r0, r0, #3
    26f0:	0064      	lsls	r4, r4, #1
    26f2:	4214      	tst	r4, r2
    26f4:	f100 0004 	add.w	r0, r0, #4
    26f8:	d0fa      	beq.n	26f0 <_malloc_r+0xe4>
    26fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    26fe:	46cc      	mov	ip, r9
    2700:	4680      	mov	r8, r0
    2702:	f8dc 100c 	ldr.w	r1, [ip, #12]
    2706:	458c      	cmp	ip, r1
    2708:	d107      	bne.n	271a <_malloc_r+0x10e>
    270a:	e173      	b.n	29f4 <_malloc_r+0x3e8>
    270c:	2a00      	cmp	r2, #0
    270e:	f280 8181 	bge.w	2a14 <_malloc_r+0x408>
    2712:	68c9      	ldr	r1, [r1, #12]
    2714:	458c      	cmp	ip, r1
    2716:	f000 816d 	beq.w	29f4 <_malloc_r+0x3e8>
    271a:	684b      	ldr	r3, [r1, #4]
    271c:	f023 0303 	bic.w	r3, r3, #3
    2720:	1b5a      	subs	r2, r3, r5
    2722:	2a0f      	cmp	r2, #15
    2724:	ddf2      	ble.n	270c <_malloc_r+0x100>
    2726:	460c      	mov	r4, r1
    2728:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    272c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    2730:	194b      	adds	r3, r1, r5
    2732:	f045 0501 	orr.w	r5, r5, #1
    2736:	604d      	str	r5, [r1, #4]
    2738:	f042 0101 	orr.w	r1, r2, #1
    273c:	f8c8 c00c 	str.w	ip, [r8, #12]
    2740:	4630      	mov	r0, r6
    2742:	f8cc 8008 	str.w	r8, [ip, #8]
    2746:	617b      	str	r3, [r7, #20]
    2748:	613b      	str	r3, [r7, #16]
    274a:	f8c3 e00c 	str.w	lr, [r3, #12]
    274e:	f8c3 e008 	str.w	lr, [r3, #8]
    2752:	6059      	str	r1, [r3, #4]
    2754:	509a      	str	r2, [r3, r2]
    2756:	f000 fb75 	bl	2e44 <__malloc_unlock>
    275a:	e01f      	b.n	279c <_malloc_r+0x190>
    275c:	2910      	cmp	r1, #16
    275e:	d821      	bhi.n	27a4 <_malloc_r+0x198>
    2760:	f000 fb6e 	bl	2e40 <__malloc_lock>
    2764:	2510      	movs	r5, #16
    2766:	2306      	movs	r3, #6
    2768:	2002      	movs	r0, #2
    276a:	4f7e      	ldr	r7, [pc, #504]	; (2964 <_malloc_r+0x358>)
    276c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2770:	f1a3 0208 	sub.w	r2, r3, #8
    2774:	685c      	ldr	r4, [r3, #4]
    2776:	4294      	cmp	r4, r2
    2778:	f000 8145 	beq.w	2a06 <_malloc_r+0x3fa>
    277c:	6863      	ldr	r3, [r4, #4]
    277e:	68e1      	ldr	r1, [r4, #12]
    2780:	68a5      	ldr	r5, [r4, #8]
    2782:	f023 0303 	bic.w	r3, r3, #3
    2786:	4423      	add	r3, r4
    2788:	4630      	mov	r0, r6
    278a:	685a      	ldr	r2, [r3, #4]
    278c:	60e9      	str	r1, [r5, #12]
    278e:	f042 0201 	orr.w	r2, r2, #1
    2792:	608d      	str	r5, [r1, #8]
    2794:	605a      	str	r2, [r3, #4]
    2796:	f000 fb55 	bl	2e44 <__malloc_unlock>
    279a:	3408      	adds	r4, #8
    279c:	4620      	mov	r0, r4
    279e:	b003      	add	sp, #12
    27a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a4:	2400      	movs	r4, #0
    27a6:	230c      	movs	r3, #12
    27a8:	4620      	mov	r0, r4
    27aa:	6033      	str	r3, [r6, #0]
    27ac:	b003      	add	sp, #12
    27ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27b2:	2380      	movs	r3, #128	; 0x80
    27b4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    27b8:	203f      	movs	r0, #63	; 0x3f
    27ba:	e749      	b.n	2650 <_malloc_r+0x44>
    27bc:	4670      	mov	r0, lr
    27be:	e75d      	b.n	267c <_malloc_r+0x70>
    27c0:	4423      	add	r3, r4
    27c2:	68e1      	ldr	r1, [r4, #12]
    27c4:	685a      	ldr	r2, [r3, #4]
    27c6:	68a5      	ldr	r5, [r4, #8]
    27c8:	f042 0201 	orr.w	r2, r2, #1
    27cc:	60e9      	str	r1, [r5, #12]
    27ce:	4630      	mov	r0, r6
    27d0:	608d      	str	r5, [r1, #8]
    27d2:	605a      	str	r2, [r3, #4]
    27d4:	f000 fb36 	bl	2e44 <__malloc_unlock>
    27d8:	3408      	adds	r4, #8
    27da:	4620      	mov	r0, r4
    27dc:	b003      	add	sp, #12
    27de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e2:	4423      	add	r3, r4
    27e4:	4630      	mov	r0, r6
    27e6:	685a      	ldr	r2, [r3, #4]
    27e8:	f042 0201 	orr.w	r2, r2, #1
    27ec:	605a      	str	r2, [r3, #4]
    27ee:	f000 fb29 	bl	2e44 <__malloc_unlock>
    27f2:	3408      	adds	r4, #8
    27f4:	4620      	mov	r0, r4
    27f6:	b003      	add	sp, #12
    27f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27fc:	68bc      	ldr	r4, [r7, #8]
    27fe:	6863      	ldr	r3, [r4, #4]
    2800:	f023 0803 	bic.w	r8, r3, #3
    2804:	45a8      	cmp	r8, r5
    2806:	d304      	bcc.n	2812 <_malloc_r+0x206>
    2808:	ebc5 0308 	rsb	r3, r5, r8
    280c:	2b0f      	cmp	r3, #15
    280e:	f300 808c 	bgt.w	292a <_malloc_r+0x31e>
    2812:	4b55      	ldr	r3, [pc, #340]	; (2968 <_malloc_r+0x35c>)
    2814:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2978 <_malloc_r+0x36c>
    2818:	681a      	ldr	r2, [r3, #0]
    281a:	f8d9 3000 	ldr.w	r3, [r9]
    281e:	3301      	adds	r3, #1
    2820:	442a      	add	r2, r5
    2822:	eb04 0a08 	add.w	sl, r4, r8
    2826:	f000 8160 	beq.w	2aea <_malloc_r+0x4de>
    282a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    282e:	320f      	adds	r2, #15
    2830:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    2834:	f022 020f 	bic.w	r2, r2, #15
    2838:	4611      	mov	r1, r2
    283a:	4630      	mov	r0, r6
    283c:	9201      	str	r2, [sp, #4]
    283e:	f000 fcf3 	bl	3228 <_sbrk_r>
    2842:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2846:	4683      	mov	fp, r0
    2848:	9a01      	ldr	r2, [sp, #4]
    284a:	f000 8158 	beq.w	2afe <_malloc_r+0x4f2>
    284e:	4582      	cmp	sl, r0
    2850:	f200 80fc 	bhi.w	2a4c <_malloc_r+0x440>
    2854:	4b45      	ldr	r3, [pc, #276]	; (296c <_malloc_r+0x360>)
    2856:	6819      	ldr	r1, [r3, #0]
    2858:	45da      	cmp	sl, fp
    285a:	4411      	add	r1, r2
    285c:	6019      	str	r1, [r3, #0]
    285e:	f000 8153 	beq.w	2b08 <_malloc_r+0x4fc>
    2862:	f8d9 0000 	ldr.w	r0, [r9]
    2866:	f8df e110 	ldr.w	lr, [pc, #272]	; 2978 <_malloc_r+0x36c>
    286a:	3001      	adds	r0, #1
    286c:	bf1b      	ittet	ne
    286e:	ebca 0a0b 	rsbne	sl, sl, fp
    2872:	4451      	addne	r1, sl
    2874:	f8ce b000 	streq.w	fp, [lr]
    2878:	6019      	strne	r1, [r3, #0]
    287a:	f01b 0107 	ands.w	r1, fp, #7
    287e:	f000 8117 	beq.w	2ab0 <_malloc_r+0x4a4>
    2882:	f1c1 0008 	rsb	r0, r1, #8
    2886:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    288a:	4483      	add	fp, r0
    288c:	3108      	adds	r1, #8
    288e:	445a      	add	r2, fp
    2890:	f3c2 020b 	ubfx	r2, r2, #0, #12
    2894:	ebc2 0901 	rsb	r9, r2, r1
    2898:	4649      	mov	r1, r9
    289a:	4630      	mov	r0, r6
    289c:	9301      	str	r3, [sp, #4]
    289e:	f000 fcc3 	bl	3228 <_sbrk_r>
    28a2:	1c43      	adds	r3, r0, #1
    28a4:	9b01      	ldr	r3, [sp, #4]
    28a6:	f000 813f 	beq.w	2b28 <_malloc_r+0x51c>
    28aa:	ebcb 0200 	rsb	r2, fp, r0
    28ae:	444a      	add	r2, r9
    28b0:	f042 0201 	orr.w	r2, r2, #1
    28b4:	6819      	ldr	r1, [r3, #0]
    28b6:	f8c7 b008 	str.w	fp, [r7, #8]
    28ba:	4449      	add	r1, r9
    28bc:	42bc      	cmp	r4, r7
    28be:	f8cb 2004 	str.w	r2, [fp, #4]
    28c2:	6019      	str	r1, [r3, #0]
    28c4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 296c <_malloc_r+0x360>
    28c8:	d016      	beq.n	28f8 <_malloc_r+0x2ec>
    28ca:	f1b8 0f0f 	cmp.w	r8, #15
    28ce:	f240 80fd 	bls.w	2acc <_malloc_r+0x4c0>
    28d2:	6862      	ldr	r2, [r4, #4]
    28d4:	f1a8 030c 	sub.w	r3, r8, #12
    28d8:	f023 0307 	bic.w	r3, r3, #7
    28dc:	18e0      	adds	r0, r4, r3
    28de:	f002 0201 	and.w	r2, r2, #1
    28e2:	f04f 0e05 	mov.w	lr, #5
    28e6:	431a      	orrs	r2, r3
    28e8:	2b0f      	cmp	r3, #15
    28ea:	6062      	str	r2, [r4, #4]
    28ec:	f8c0 e004 	str.w	lr, [r0, #4]
    28f0:	f8c0 e008 	str.w	lr, [r0, #8]
    28f4:	f200 811c 	bhi.w	2b30 <_malloc_r+0x524>
    28f8:	4b1d      	ldr	r3, [pc, #116]	; (2970 <_malloc_r+0x364>)
    28fa:	68bc      	ldr	r4, [r7, #8]
    28fc:	681a      	ldr	r2, [r3, #0]
    28fe:	4291      	cmp	r1, r2
    2900:	bf88      	it	hi
    2902:	6019      	strhi	r1, [r3, #0]
    2904:	4b1b      	ldr	r3, [pc, #108]	; (2974 <_malloc_r+0x368>)
    2906:	681a      	ldr	r2, [r3, #0]
    2908:	4291      	cmp	r1, r2
    290a:	6862      	ldr	r2, [r4, #4]
    290c:	bf88      	it	hi
    290e:	6019      	strhi	r1, [r3, #0]
    2910:	f022 0203 	bic.w	r2, r2, #3
    2914:	4295      	cmp	r5, r2
    2916:	eba2 0305 	sub.w	r3, r2, r5
    291a:	d801      	bhi.n	2920 <_malloc_r+0x314>
    291c:	2b0f      	cmp	r3, #15
    291e:	dc04      	bgt.n	292a <_malloc_r+0x31e>
    2920:	4630      	mov	r0, r6
    2922:	f000 fa8f 	bl	2e44 <__malloc_unlock>
    2926:	2400      	movs	r4, #0
    2928:	e738      	b.n	279c <_malloc_r+0x190>
    292a:	1962      	adds	r2, r4, r5
    292c:	f043 0301 	orr.w	r3, r3, #1
    2930:	f045 0501 	orr.w	r5, r5, #1
    2934:	6065      	str	r5, [r4, #4]
    2936:	4630      	mov	r0, r6
    2938:	60ba      	str	r2, [r7, #8]
    293a:	6053      	str	r3, [r2, #4]
    293c:	f000 fa82 	bl	2e44 <__malloc_unlock>
    2940:	3408      	adds	r4, #8
    2942:	4620      	mov	r0, r4
    2944:	b003      	add	sp, #12
    2946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    294a:	2b14      	cmp	r3, #20
    294c:	d971      	bls.n	2a32 <_malloc_r+0x426>
    294e:	2b54      	cmp	r3, #84	; 0x54
    2950:	f200 80a4 	bhi.w	2a9c <_malloc_r+0x490>
    2954:	0b28      	lsrs	r0, r5, #12
    2956:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    295a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    295e:	306e      	adds	r0, #110	; 0x6e
    2960:	e676      	b.n	2650 <_malloc_r+0x44>
    2962:	bf00      	nop
    2964:	20001158 	.word	0x20001158
    2968:	20001ee4 	.word	0x20001ee4
    296c:	20001eb4 	.word	0x20001eb4
    2970:	20001edc 	.word	0x20001edc
    2974:	20001ee0 	.word	0x20001ee0
    2978:	20001560 	.word	0x20001560
    297c:	0a5a      	lsrs	r2, r3, #9
    297e:	2a04      	cmp	r2, #4
    2980:	d95e      	bls.n	2a40 <_malloc_r+0x434>
    2982:	2a14      	cmp	r2, #20
    2984:	f200 80b3 	bhi.w	2aee <_malloc_r+0x4e2>
    2988:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    298c:	0049      	lsls	r1, r1, #1
    298e:	325b      	adds	r2, #91	; 0x5b
    2990:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    2994:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    2998:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2b78 <_malloc_r+0x56c>
    299c:	f1ac 0c08 	sub.w	ip, ip, #8
    29a0:	458c      	cmp	ip, r1
    29a2:	f000 8088 	beq.w	2ab6 <_malloc_r+0x4aa>
    29a6:	684a      	ldr	r2, [r1, #4]
    29a8:	f022 0203 	bic.w	r2, r2, #3
    29ac:	4293      	cmp	r3, r2
    29ae:	d202      	bcs.n	29b6 <_malloc_r+0x3aa>
    29b0:	6889      	ldr	r1, [r1, #8]
    29b2:	458c      	cmp	ip, r1
    29b4:	d1f7      	bne.n	29a6 <_malloc_r+0x39a>
    29b6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    29ba:	687a      	ldr	r2, [r7, #4]
    29bc:	f8c4 c00c 	str.w	ip, [r4, #12]
    29c0:	60a1      	str	r1, [r4, #8]
    29c2:	f8cc 4008 	str.w	r4, [ip, #8]
    29c6:	60cc      	str	r4, [r1, #12]
    29c8:	e688      	b.n	26dc <_malloc_r+0xd0>
    29ca:	1963      	adds	r3, r4, r5
    29cc:	f042 0701 	orr.w	r7, r2, #1
    29d0:	f045 0501 	orr.w	r5, r5, #1
    29d4:	6065      	str	r5, [r4, #4]
    29d6:	4630      	mov	r0, r6
    29d8:	614b      	str	r3, [r1, #20]
    29da:	610b      	str	r3, [r1, #16]
    29dc:	f8c3 e00c 	str.w	lr, [r3, #12]
    29e0:	f8c3 e008 	str.w	lr, [r3, #8]
    29e4:	605f      	str	r7, [r3, #4]
    29e6:	509a      	str	r2, [r3, r2]
    29e8:	3408      	adds	r4, #8
    29ea:	f000 fa2b 	bl	2e44 <__malloc_unlock>
    29ee:	e6d5      	b.n	279c <_malloc_r+0x190>
    29f0:	684a      	ldr	r2, [r1, #4]
    29f2:	e673      	b.n	26dc <_malloc_r+0xd0>
    29f4:	f108 0801 	add.w	r8, r8, #1
    29f8:	f018 0f03 	tst.w	r8, #3
    29fc:	f10c 0c08 	add.w	ip, ip, #8
    2a00:	f47f ae7f 	bne.w	2702 <_malloc_r+0xf6>
    2a04:	e030      	b.n	2a68 <_malloc_r+0x45c>
    2a06:	68dc      	ldr	r4, [r3, #12]
    2a08:	42a3      	cmp	r3, r4
    2a0a:	bf08      	it	eq
    2a0c:	3002      	addeq	r0, #2
    2a0e:	f43f ae35 	beq.w	267c <_malloc_r+0x70>
    2a12:	e6b3      	b.n	277c <_malloc_r+0x170>
    2a14:	440b      	add	r3, r1
    2a16:	460c      	mov	r4, r1
    2a18:	685a      	ldr	r2, [r3, #4]
    2a1a:	68c9      	ldr	r1, [r1, #12]
    2a1c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    2a20:	f042 0201 	orr.w	r2, r2, #1
    2a24:	605a      	str	r2, [r3, #4]
    2a26:	4630      	mov	r0, r6
    2a28:	60e9      	str	r1, [r5, #12]
    2a2a:	608d      	str	r5, [r1, #8]
    2a2c:	f000 fa0a 	bl	2e44 <__malloc_unlock>
    2a30:	e6b4      	b.n	279c <_malloc_r+0x190>
    2a32:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    2a36:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    2a3a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2a3e:	e607      	b.n	2650 <_malloc_r+0x44>
    2a40:	099a      	lsrs	r2, r3, #6
    2a42:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2a46:	0049      	lsls	r1, r1, #1
    2a48:	3238      	adds	r2, #56	; 0x38
    2a4a:	e7a1      	b.n	2990 <_malloc_r+0x384>
    2a4c:	42bc      	cmp	r4, r7
    2a4e:	4b4a      	ldr	r3, [pc, #296]	; (2b78 <_malloc_r+0x56c>)
    2a50:	f43f af00 	beq.w	2854 <_malloc_r+0x248>
    2a54:	689c      	ldr	r4, [r3, #8]
    2a56:	6862      	ldr	r2, [r4, #4]
    2a58:	f022 0203 	bic.w	r2, r2, #3
    2a5c:	e75a      	b.n	2914 <_malloc_r+0x308>
    2a5e:	f859 3908 	ldr.w	r3, [r9], #-8
    2a62:	4599      	cmp	r9, r3
    2a64:	f040 8082 	bne.w	2b6c <_malloc_r+0x560>
    2a68:	f010 0f03 	tst.w	r0, #3
    2a6c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    2a70:	d1f5      	bne.n	2a5e <_malloc_r+0x452>
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	ea23 0304 	bic.w	r3, r3, r4
    2a78:	607b      	str	r3, [r7, #4]
    2a7a:	0064      	lsls	r4, r4, #1
    2a7c:	429c      	cmp	r4, r3
    2a7e:	f63f aebd 	bhi.w	27fc <_malloc_r+0x1f0>
    2a82:	2c00      	cmp	r4, #0
    2a84:	f43f aeba 	beq.w	27fc <_malloc_r+0x1f0>
    2a88:	421c      	tst	r4, r3
    2a8a:	4640      	mov	r0, r8
    2a8c:	f47f ae35 	bne.w	26fa <_malloc_r+0xee>
    2a90:	0064      	lsls	r4, r4, #1
    2a92:	421c      	tst	r4, r3
    2a94:	f100 0004 	add.w	r0, r0, #4
    2a98:	d0fa      	beq.n	2a90 <_malloc_r+0x484>
    2a9a:	e62e      	b.n	26fa <_malloc_r+0xee>
    2a9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2aa0:	d818      	bhi.n	2ad4 <_malloc_r+0x4c8>
    2aa2:	0be8      	lsrs	r0, r5, #15
    2aa4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2aa8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2aac:	3077      	adds	r0, #119	; 0x77
    2aae:	e5cf      	b.n	2650 <_malloc_r+0x44>
    2ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2ab4:	e6eb      	b.n	288e <_malloc_r+0x282>
    2ab6:	2101      	movs	r1, #1
    2ab8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2abc:	1092      	asrs	r2, r2, #2
    2abe:	fa01 f202 	lsl.w	r2, r1, r2
    2ac2:	431a      	orrs	r2, r3
    2ac4:	f8c8 2004 	str.w	r2, [r8, #4]
    2ac8:	4661      	mov	r1, ip
    2aca:	e777      	b.n	29bc <_malloc_r+0x3b0>
    2acc:	2301      	movs	r3, #1
    2ace:	f8cb 3004 	str.w	r3, [fp, #4]
    2ad2:	e725      	b.n	2920 <_malloc_r+0x314>
    2ad4:	f240 5254 	movw	r2, #1364	; 0x554
    2ad8:	4293      	cmp	r3, r2
    2ada:	d820      	bhi.n	2b1e <_malloc_r+0x512>
    2adc:	0ca8      	lsrs	r0, r5, #18
    2ade:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    2ae2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2ae6:	307c      	adds	r0, #124	; 0x7c
    2ae8:	e5b2      	b.n	2650 <_malloc_r+0x44>
    2aea:	3210      	adds	r2, #16
    2aec:	e6a4      	b.n	2838 <_malloc_r+0x22c>
    2aee:	2a54      	cmp	r2, #84	; 0x54
    2af0:	d826      	bhi.n	2b40 <_malloc_r+0x534>
    2af2:	0b1a      	lsrs	r2, r3, #12
    2af4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2af8:	0049      	lsls	r1, r1, #1
    2afa:	326e      	adds	r2, #110	; 0x6e
    2afc:	e748      	b.n	2990 <_malloc_r+0x384>
    2afe:	68bc      	ldr	r4, [r7, #8]
    2b00:	6862      	ldr	r2, [r4, #4]
    2b02:	f022 0203 	bic.w	r2, r2, #3
    2b06:	e705      	b.n	2914 <_malloc_r+0x308>
    2b08:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2b0c:	2800      	cmp	r0, #0
    2b0e:	f47f aea8 	bne.w	2862 <_malloc_r+0x256>
    2b12:	4442      	add	r2, r8
    2b14:	68bb      	ldr	r3, [r7, #8]
    2b16:	f042 0201 	orr.w	r2, r2, #1
    2b1a:	605a      	str	r2, [r3, #4]
    2b1c:	e6ec      	b.n	28f8 <_malloc_r+0x2ec>
    2b1e:	23fe      	movs	r3, #254	; 0xfe
    2b20:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    2b24:	207e      	movs	r0, #126	; 0x7e
    2b26:	e593      	b.n	2650 <_malloc_r+0x44>
    2b28:	2201      	movs	r2, #1
    2b2a:	f04f 0900 	mov.w	r9, #0
    2b2e:	e6c1      	b.n	28b4 <_malloc_r+0x2a8>
    2b30:	f104 0108 	add.w	r1, r4, #8
    2b34:	4630      	mov	r0, r6
    2b36:	f000 fd73 	bl	3620 <_free_r>
    2b3a:	f8d9 1000 	ldr.w	r1, [r9]
    2b3e:	e6db      	b.n	28f8 <_malloc_r+0x2ec>
    2b40:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2b44:	d805      	bhi.n	2b52 <_malloc_r+0x546>
    2b46:	0bda      	lsrs	r2, r3, #15
    2b48:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2b4c:	0049      	lsls	r1, r1, #1
    2b4e:	3277      	adds	r2, #119	; 0x77
    2b50:	e71e      	b.n	2990 <_malloc_r+0x384>
    2b52:	f240 5154 	movw	r1, #1364	; 0x554
    2b56:	428a      	cmp	r2, r1
    2b58:	d805      	bhi.n	2b66 <_malloc_r+0x55a>
    2b5a:	0c9a      	lsrs	r2, r3, #18
    2b5c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2b60:	0049      	lsls	r1, r1, #1
    2b62:	327c      	adds	r2, #124	; 0x7c
    2b64:	e714      	b.n	2990 <_malloc_r+0x384>
    2b66:	21fe      	movs	r1, #254	; 0xfe
    2b68:	227e      	movs	r2, #126	; 0x7e
    2b6a:	e711      	b.n	2990 <_malloc_r+0x384>
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	e784      	b.n	2a7a <_malloc_r+0x46e>
    2b70:	08e8      	lsrs	r0, r5, #3
    2b72:	1c43      	adds	r3, r0, #1
    2b74:	005b      	lsls	r3, r3, #1
    2b76:	e5f8      	b.n	276a <_malloc_r+0x15e>
    2b78:	20001158 	.word	0x20001158

00002b7c <__ascii_mbtowc>:
    2b7c:	b082      	sub	sp, #8
    2b7e:	b149      	cbz	r1, 2b94 <__ascii_mbtowc+0x18>
    2b80:	b15a      	cbz	r2, 2b9a <__ascii_mbtowc+0x1e>
    2b82:	b16b      	cbz	r3, 2ba0 <__ascii_mbtowc+0x24>
    2b84:	7813      	ldrb	r3, [r2, #0]
    2b86:	600b      	str	r3, [r1, #0]
    2b88:	7812      	ldrb	r2, [r2, #0]
    2b8a:	1c10      	adds	r0, r2, #0
    2b8c:	bf18      	it	ne
    2b8e:	2001      	movne	r0, #1
    2b90:	b002      	add	sp, #8
    2b92:	4770      	bx	lr
    2b94:	a901      	add	r1, sp, #4
    2b96:	2a00      	cmp	r2, #0
    2b98:	d1f3      	bne.n	2b82 <__ascii_mbtowc+0x6>
    2b9a:	4610      	mov	r0, r2
    2b9c:	b002      	add	sp, #8
    2b9e:	4770      	bx	lr
    2ba0:	f06f 0001 	mvn.w	r0, #1
    2ba4:	e7f4      	b.n	2b90 <__ascii_mbtowc+0x14>
    2ba6:	bf00      	nop

00002ba8 <memcpy>:
    2ba8:	4684      	mov	ip, r0
    2baa:	ea41 0300 	orr.w	r3, r1, r0
    2bae:	f013 0303 	ands.w	r3, r3, #3
    2bb2:	d16d      	bne.n	2c90 <memcpy+0xe8>
    2bb4:	3a40      	subs	r2, #64	; 0x40
    2bb6:	d341      	bcc.n	2c3c <memcpy+0x94>
    2bb8:	f851 3b04 	ldr.w	r3, [r1], #4
    2bbc:	f840 3b04 	str.w	r3, [r0], #4
    2bc0:	f851 3b04 	ldr.w	r3, [r1], #4
    2bc4:	f840 3b04 	str.w	r3, [r0], #4
    2bc8:	f851 3b04 	ldr.w	r3, [r1], #4
    2bcc:	f840 3b04 	str.w	r3, [r0], #4
    2bd0:	f851 3b04 	ldr.w	r3, [r1], #4
    2bd4:	f840 3b04 	str.w	r3, [r0], #4
    2bd8:	f851 3b04 	ldr.w	r3, [r1], #4
    2bdc:	f840 3b04 	str.w	r3, [r0], #4
    2be0:	f851 3b04 	ldr.w	r3, [r1], #4
    2be4:	f840 3b04 	str.w	r3, [r0], #4
    2be8:	f851 3b04 	ldr.w	r3, [r1], #4
    2bec:	f840 3b04 	str.w	r3, [r0], #4
    2bf0:	f851 3b04 	ldr.w	r3, [r1], #4
    2bf4:	f840 3b04 	str.w	r3, [r0], #4
    2bf8:	f851 3b04 	ldr.w	r3, [r1], #4
    2bfc:	f840 3b04 	str.w	r3, [r0], #4
    2c00:	f851 3b04 	ldr.w	r3, [r1], #4
    2c04:	f840 3b04 	str.w	r3, [r0], #4
    2c08:	f851 3b04 	ldr.w	r3, [r1], #4
    2c0c:	f840 3b04 	str.w	r3, [r0], #4
    2c10:	f851 3b04 	ldr.w	r3, [r1], #4
    2c14:	f840 3b04 	str.w	r3, [r0], #4
    2c18:	f851 3b04 	ldr.w	r3, [r1], #4
    2c1c:	f840 3b04 	str.w	r3, [r0], #4
    2c20:	f851 3b04 	ldr.w	r3, [r1], #4
    2c24:	f840 3b04 	str.w	r3, [r0], #4
    2c28:	f851 3b04 	ldr.w	r3, [r1], #4
    2c2c:	f840 3b04 	str.w	r3, [r0], #4
    2c30:	f851 3b04 	ldr.w	r3, [r1], #4
    2c34:	f840 3b04 	str.w	r3, [r0], #4
    2c38:	3a40      	subs	r2, #64	; 0x40
    2c3a:	d2bd      	bcs.n	2bb8 <memcpy+0x10>
    2c3c:	3230      	adds	r2, #48	; 0x30
    2c3e:	d311      	bcc.n	2c64 <memcpy+0xbc>
    2c40:	f851 3b04 	ldr.w	r3, [r1], #4
    2c44:	f840 3b04 	str.w	r3, [r0], #4
    2c48:	f851 3b04 	ldr.w	r3, [r1], #4
    2c4c:	f840 3b04 	str.w	r3, [r0], #4
    2c50:	f851 3b04 	ldr.w	r3, [r1], #4
    2c54:	f840 3b04 	str.w	r3, [r0], #4
    2c58:	f851 3b04 	ldr.w	r3, [r1], #4
    2c5c:	f840 3b04 	str.w	r3, [r0], #4
    2c60:	3a10      	subs	r2, #16
    2c62:	d2ed      	bcs.n	2c40 <memcpy+0x98>
    2c64:	320c      	adds	r2, #12
    2c66:	d305      	bcc.n	2c74 <memcpy+0xcc>
    2c68:	f851 3b04 	ldr.w	r3, [r1], #4
    2c6c:	f840 3b04 	str.w	r3, [r0], #4
    2c70:	3a04      	subs	r2, #4
    2c72:	d2f9      	bcs.n	2c68 <memcpy+0xc0>
    2c74:	3204      	adds	r2, #4
    2c76:	d008      	beq.n	2c8a <memcpy+0xe2>
    2c78:	07d2      	lsls	r2, r2, #31
    2c7a:	bf1c      	itt	ne
    2c7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2c80:	f800 3b01 	strbne.w	r3, [r0], #1
    2c84:	d301      	bcc.n	2c8a <memcpy+0xe2>
    2c86:	880b      	ldrh	r3, [r1, #0]
    2c88:	8003      	strh	r3, [r0, #0]
    2c8a:	4660      	mov	r0, ip
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	2a08      	cmp	r2, #8
    2c92:	d313      	bcc.n	2cbc <memcpy+0x114>
    2c94:	078b      	lsls	r3, r1, #30
    2c96:	d08d      	beq.n	2bb4 <memcpy+0xc>
    2c98:	f010 0303 	ands.w	r3, r0, #3
    2c9c:	d08a      	beq.n	2bb4 <memcpy+0xc>
    2c9e:	f1c3 0304 	rsb	r3, r3, #4
    2ca2:	1ad2      	subs	r2, r2, r3
    2ca4:	07db      	lsls	r3, r3, #31
    2ca6:	bf1c      	itt	ne
    2ca8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2cac:	f800 3b01 	strbne.w	r3, [r0], #1
    2cb0:	d380      	bcc.n	2bb4 <memcpy+0xc>
    2cb2:	f831 3b02 	ldrh.w	r3, [r1], #2
    2cb6:	f820 3b02 	strh.w	r3, [r0], #2
    2cba:	e77b      	b.n	2bb4 <memcpy+0xc>
    2cbc:	3a04      	subs	r2, #4
    2cbe:	d3d9      	bcc.n	2c74 <memcpy+0xcc>
    2cc0:	3a01      	subs	r2, #1
    2cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
    2cc6:	f800 3b01 	strb.w	r3, [r0], #1
    2cca:	d2f9      	bcs.n	2cc0 <memcpy+0x118>
    2ccc:	780b      	ldrb	r3, [r1, #0]
    2cce:	7003      	strb	r3, [r0, #0]
    2cd0:	784b      	ldrb	r3, [r1, #1]
    2cd2:	7043      	strb	r3, [r0, #1]
    2cd4:	788b      	ldrb	r3, [r1, #2]
    2cd6:	7083      	strb	r3, [r0, #2]
    2cd8:	4660      	mov	r0, ip
    2cda:	4770      	bx	lr

00002cdc <memmove>:
    2cdc:	4288      	cmp	r0, r1
    2cde:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce0:	d90d      	bls.n	2cfe <memmove+0x22>
    2ce2:	188b      	adds	r3, r1, r2
    2ce4:	4298      	cmp	r0, r3
    2ce6:	d20a      	bcs.n	2cfe <memmove+0x22>
    2ce8:	1881      	adds	r1, r0, r2
    2cea:	2a00      	cmp	r2, #0
    2cec:	d051      	beq.n	2d92 <memmove+0xb6>
    2cee:	1a9a      	subs	r2, r3, r2
    2cf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    2cf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    2cf8:	4293      	cmp	r3, r2
    2cfa:	d1f9      	bne.n	2cf0 <memmove+0x14>
    2cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfe:	2a0f      	cmp	r2, #15
    2d00:	d948      	bls.n	2d94 <memmove+0xb8>
    2d02:	ea41 0300 	orr.w	r3, r1, r0
    2d06:	079b      	lsls	r3, r3, #30
    2d08:	d146      	bne.n	2d98 <memmove+0xbc>
    2d0a:	f100 0410 	add.w	r4, r0, #16
    2d0e:	f101 0310 	add.w	r3, r1, #16
    2d12:	4615      	mov	r5, r2
    2d14:	f853 6c10 	ldr.w	r6, [r3, #-16]
    2d18:	f844 6c10 	str.w	r6, [r4, #-16]
    2d1c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    2d20:	f844 6c0c 	str.w	r6, [r4, #-12]
    2d24:	f853 6c08 	ldr.w	r6, [r3, #-8]
    2d28:	f844 6c08 	str.w	r6, [r4, #-8]
    2d2c:	3d10      	subs	r5, #16
    2d2e:	f853 6c04 	ldr.w	r6, [r3, #-4]
    2d32:	f844 6c04 	str.w	r6, [r4, #-4]
    2d36:	2d0f      	cmp	r5, #15
    2d38:	f103 0310 	add.w	r3, r3, #16
    2d3c:	f104 0410 	add.w	r4, r4, #16
    2d40:	d8e8      	bhi.n	2d14 <memmove+0x38>
    2d42:	f1a2 0310 	sub.w	r3, r2, #16
    2d46:	f023 030f 	bic.w	r3, r3, #15
    2d4a:	f002 0e0f 	and.w	lr, r2, #15
    2d4e:	3310      	adds	r3, #16
    2d50:	f1be 0f03 	cmp.w	lr, #3
    2d54:	4419      	add	r1, r3
    2d56:	4403      	add	r3, r0
    2d58:	d921      	bls.n	2d9e <memmove+0xc2>
    2d5a:	1f1e      	subs	r6, r3, #4
    2d5c:	460d      	mov	r5, r1
    2d5e:	4674      	mov	r4, lr
    2d60:	3c04      	subs	r4, #4
    2d62:	f855 7b04 	ldr.w	r7, [r5], #4
    2d66:	f846 7f04 	str.w	r7, [r6, #4]!
    2d6a:	2c03      	cmp	r4, #3
    2d6c:	d8f8      	bhi.n	2d60 <memmove+0x84>
    2d6e:	f1ae 0404 	sub.w	r4, lr, #4
    2d72:	f024 0403 	bic.w	r4, r4, #3
    2d76:	3404      	adds	r4, #4
    2d78:	4423      	add	r3, r4
    2d7a:	4421      	add	r1, r4
    2d7c:	f002 0203 	and.w	r2, r2, #3
    2d80:	b162      	cbz	r2, 2d9c <memmove+0xc0>
    2d82:	3b01      	subs	r3, #1
    2d84:	440a      	add	r2, r1
    2d86:	f811 4b01 	ldrb.w	r4, [r1], #1
    2d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
    2d8e:	428a      	cmp	r2, r1
    2d90:	d1f9      	bne.n	2d86 <memmove+0xaa>
    2d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d94:	4603      	mov	r3, r0
    2d96:	e7f3      	b.n	2d80 <memmove+0xa4>
    2d98:	4603      	mov	r3, r0
    2d9a:	e7f2      	b.n	2d82 <memmove+0xa6>
    2d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d9e:	4672      	mov	r2, lr
    2da0:	e7ee      	b.n	2d80 <memmove+0xa4>
    2da2:	bf00      	nop

00002da4 <memset>:
    2da4:	b470      	push	{r4, r5, r6}
    2da6:	0784      	lsls	r4, r0, #30
    2da8:	d046      	beq.n	2e38 <memset+0x94>
    2daa:	1e54      	subs	r4, r2, #1
    2dac:	2a00      	cmp	r2, #0
    2dae:	d041      	beq.n	2e34 <memset+0x90>
    2db0:	b2cd      	uxtb	r5, r1
    2db2:	4603      	mov	r3, r0
    2db4:	e002      	b.n	2dbc <memset+0x18>
    2db6:	1e62      	subs	r2, r4, #1
    2db8:	b3e4      	cbz	r4, 2e34 <memset+0x90>
    2dba:	4614      	mov	r4, r2
    2dbc:	f803 5b01 	strb.w	r5, [r3], #1
    2dc0:	079a      	lsls	r2, r3, #30
    2dc2:	d1f8      	bne.n	2db6 <memset+0x12>
    2dc4:	2c03      	cmp	r4, #3
    2dc6:	d92e      	bls.n	2e26 <memset+0x82>
    2dc8:	b2cd      	uxtb	r5, r1
    2dca:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2dce:	2c0f      	cmp	r4, #15
    2dd0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2dd4:	d919      	bls.n	2e0a <memset+0x66>
    2dd6:	f103 0210 	add.w	r2, r3, #16
    2dda:	4626      	mov	r6, r4
    2ddc:	3e10      	subs	r6, #16
    2dde:	2e0f      	cmp	r6, #15
    2de0:	f842 5c10 	str.w	r5, [r2, #-16]
    2de4:	f842 5c0c 	str.w	r5, [r2, #-12]
    2de8:	f842 5c08 	str.w	r5, [r2, #-8]
    2dec:	f842 5c04 	str.w	r5, [r2, #-4]
    2df0:	f102 0210 	add.w	r2, r2, #16
    2df4:	d8f2      	bhi.n	2ddc <memset+0x38>
    2df6:	f1a4 0210 	sub.w	r2, r4, #16
    2dfa:	f022 020f 	bic.w	r2, r2, #15
    2dfe:	f004 040f 	and.w	r4, r4, #15
    2e02:	3210      	adds	r2, #16
    2e04:	2c03      	cmp	r4, #3
    2e06:	4413      	add	r3, r2
    2e08:	d90d      	bls.n	2e26 <memset+0x82>
    2e0a:	461e      	mov	r6, r3
    2e0c:	4622      	mov	r2, r4
    2e0e:	3a04      	subs	r2, #4
    2e10:	2a03      	cmp	r2, #3
    2e12:	f846 5b04 	str.w	r5, [r6], #4
    2e16:	d8fa      	bhi.n	2e0e <memset+0x6a>
    2e18:	1f22      	subs	r2, r4, #4
    2e1a:	f022 0203 	bic.w	r2, r2, #3
    2e1e:	3204      	adds	r2, #4
    2e20:	4413      	add	r3, r2
    2e22:	f004 0403 	and.w	r4, r4, #3
    2e26:	b12c      	cbz	r4, 2e34 <memset+0x90>
    2e28:	b2c9      	uxtb	r1, r1
    2e2a:	441c      	add	r4, r3
    2e2c:	f803 1b01 	strb.w	r1, [r3], #1
    2e30:	42a3      	cmp	r3, r4
    2e32:	d1fb      	bne.n	2e2c <memset+0x88>
    2e34:	bc70      	pop	{r4, r5, r6}
    2e36:	4770      	bx	lr
    2e38:	4614      	mov	r4, r2
    2e3a:	4603      	mov	r3, r0
    2e3c:	e7c2      	b.n	2dc4 <memset+0x20>
    2e3e:	bf00      	nop

00002e40 <__malloc_lock>:
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop

00002e44 <__malloc_unlock>:
    2e44:	4770      	bx	lr
    2e46:	bf00      	nop

00002e48 <_realloc_r>:
    2e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e4c:	4617      	mov	r7, r2
    2e4e:	b083      	sub	sp, #12
    2e50:	2900      	cmp	r1, #0
    2e52:	f000 80c1 	beq.w	2fd8 <_realloc_r+0x190>
    2e56:	460e      	mov	r6, r1
    2e58:	4681      	mov	r9, r0
    2e5a:	f107 050b 	add.w	r5, r7, #11
    2e5e:	f7ff ffef 	bl	2e40 <__malloc_lock>
    2e62:	f856 ec04 	ldr.w	lr, [r6, #-4]
    2e66:	2d16      	cmp	r5, #22
    2e68:	f02e 0403 	bic.w	r4, lr, #3
    2e6c:	f1a6 0808 	sub.w	r8, r6, #8
    2e70:	d840      	bhi.n	2ef4 <_realloc_r+0xac>
    2e72:	2210      	movs	r2, #16
    2e74:	4615      	mov	r5, r2
    2e76:	42af      	cmp	r7, r5
    2e78:	d841      	bhi.n	2efe <_realloc_r+0xb6>
    2e7a:	4294      	cmp	r4, r2
    2e7c:	da75      	bge.n	2f6a <_realloc_r+0x122>
    2e7e:	4bc9      	ldr	r3, [pc, #804]	; (31a4 <_realloc_r+0x35c>)
    2e80:	6899      	ldr	r1, [r3, #8]
    2e82:	eb08 0004 	add.w	r0, r8, r4
    2e86:	4288      	cmp	r0, r1
    2e88:	6841      	ldr	r1, [r0, #4]
    2e8a:	f000 80d9 	beq.w	3040 <_realloc_r+0x1f8>
    2e8e:	f021 0301 	bic.w	r3, r1, #1
    2e92:	4403      	add	r3, r0
    2e94:	685b      	ldr	r3, [r3, #4]
    2e96:	07db      	lsls	r3, r3, #31
    2e98:	d57d      	bpl.n	2f96 <_realloc_r+0x14e>
    2e9a:	f01e 0f01 	tst.w	lr, #1
    2e9e:	d035      	beq.n	2f0c <_realloc_r+0xc4>
    2ea0:	4639      	mov	r1, r7
    2ea2:	4648      	mov	r0, r9
    2ea4:	f7ff fbb2 	bl	260c <_malloc_r>
    2ea8:	4607      	mov	r7, r0
    2eaa:	b1e0      	cbz	r0, 2ee6 <_realloc_r+0x9e>
    2eac:	f856 3c04 	ldr.w	r3, [r6, #-4]
    2eb0:	f023 0301 	bic.w	r3, r3, #1
    2eb4:	4443      	add	r3, r8
    2eb6:	f1a0 0208 	sub.w	r2, r0, #8
    2eba:	429a      	cmp	r2, r3
    2ebc:	f000 8144 	beq.w	3148 <_realloc_r+0x300>
    2ec0:	1f22      	subs	r2, r4, #4
    2ec2:	2a24      	cmp	r2, #36	; 0x24
    2ec4:	f200 8131 	bhi.w	312a <_realloc_r+0x2e2>
    2ec8:	2a13      	cmp	r2, #19
    2eca:	f200 8104 	bhi.w	30d6 <_realloc_r+0x28e>
    2ece:	4603      	mov	r3, r0
    2ed0:	4632      	mov	r2, r6
    2ed2:	6811      	ldr	r1, [r2, #0]
    2ed4:	6019      	str	r1, [r3, #0]
    2ed6:	6851      	ldr	r1, [r2, #4]
    2ed8:	6059      	str	r1, [r3, #4]
    2eda:	6892      	ldr	r2, [r2, #8]
    2edc:	609a      	str	r2, [r3, #8]
    2ede:	4631      	mov	r1, r6
    2ee0:	4648      	mov	r0, r9
    2ee2:	f000 fb9d 	bl	3620 <_free_r>
    2ee6:	4648      	mov	r0, r9
    2ee8:	f7ff ffac 	bl	2e44 <__malloc_unlock>
    2eec:	4638      	mov	r0, r7
    2eee:	b003      	add	sp, #12
    2ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ef4:	f025 0507 	bic.w	r5, r5, #7
    2ef8:	2d00      	cmp	r5, #0
    2efa:	462a      	mov	r2, r5
    2efc:	dabb      	bge.n	2e76 <_realloc_r+0x2e>
    2efe:	230c      	movs	r3, #12
    2f00:	2000      	movs	r0, #0
    2f02:	f8c9 3000 	str.w	r3, [r9]
    2f06:	b003      	add	sp, #12
    2f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f0c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    2f10:	ebc3 0a08 	rsb	sl, r3, r8
    2f14:	f8da 3004 	ldr.w	r3, [sl, #4]
    2f18:	f023 0c03 	bic.w	ip, r3, #3
    2f1c:	eb04 030c 	add.w	r3, r4, ip
    2f20:	4293      	cmp	r3, r2
    2f22:	dbbd      	blt.n	2ea0 <_realloc_r+0x58>
    2f24:	4657      	mov	r7, sl
    2f26:	f8da 100c 	ldr.w	r1, [sl, #12]
    2f2a:	f857 0f08 	ldr.w	r0, [r7, #8]!
    2f2e:	1f22      	subs	r2, r4, #4
    2f30:	2a24      	cmp	r2, #36	; 0x24
    2f32:	60c1      	str	r1, [r0, #12]
    2f34:	6088      	str	r0, [r1, #8]
    2f36:	f200 8117 	bhi.w	3168 <_realloc_r+0x320>
    2f3a:	2a13      	cmp	r2, #19
    2f3c:	f240 8112 	bls.w	3164 <_realloc_r+0x31c>
    2f40:	6831      	ldr	r1, [r6, #0]
    2f42:	f8ca 1008 	str.w	r1, [sl, #8]
    2f46:	6871      	ldr	r1, [r6, #4]
    2f48:	f8ca 100c 	str.w	r1, [sl, #12]
    2f4c:	2a1b      	cmp	r2, #27
    2f4e:	f200 812b 	bhi.w	31a8 <_realloc_r+0x360>
    2f52:	3608      	adds	r6, #8
    2f54:	f10a 0210 	add.w	r2, sl, #16
    2f58:	6831      	ldr	r1, [r6, #0]
    2f5a:	6011      	str	r1, [r2, #0]
    2f5c:	6871      	ldr	r1, [r6, #4]
    2f5e:	6051      	str	r1, [r2, #4]
    2f60:	68b1      	ldr	r1, [r6, #8]
    2f62:	6091      	str	r1, [r2, #8]
    2f64:	463e      	mov	r6, r7
    2f66:	461c      	mov	r4, r3
    2f68:	46d0      	mov	r8, sl
    2f6a:	1b63      	subs	r3, r4, r5
    2f6c:	2b0f      	cmp	r3, #15
    2f6e:	d81d      	bhi.n	2fac <_realloc_r+0x164>
    2f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2f74:	f003 0301 	and.w	r3, r3, #1
    2f78:	4323      	orrs	r3, r4
    2f7a:	4444      	add	r4, r8
    2f7c:	f8c8 3004 	str.w	r3, [r8, #4]
    2f80:	6863      	ldr	r3, [r4, #4]
    2f82:	f043 0301 	orr.w	r3, r3, #1
    2f86:	6063      	str	r3, [r4, #4]
    2f88:	4648      	mov	r0, r9
    2f8a:	f7ff ff5b 	bl	2e44 <__malloc_unlock>
    2f8e:	4630      	mov	r0, r6
    2f90:	b003      	add	sp, #12
    2f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f96:	f021 0103 	bic.w	r1, r1, #3
    2f9a:	4421      	add	r1, r4
    2f9c:	4291      	cmp	r1, r2
    2f9e:	db21      	blt.n	2fe4 <_realloc_r+0x19c>
    2fa0:	68c3      	ldr	r3, [r0, #12]
    2fa2:	6882      	ldr	r2, [r0, #8]
    2fa4:	460c      	mov	r4, r1
    2fa6:	60d3      	str	r3, [r2, #12]
    2fa8:	609a      	str	r2, [r3, #8]
    2faa:	e7de      	b.n	2f6a <_realloc_r+0x122>
    2fac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2fb0:	eb08 0105 	add.w	r1, r8, r5
    2fb4:	f002 0201 	and.w	r2, r2, #1
    2fb8:	4315      	orrs	r5, r2
    2fba:	f043 0201 	orr.w	r2, r3, #1
    2fbe:	440b      	add	r3, r1
    2fc0:	f8c8 5004 	str.w	r5, [r8, #4]
    2fc4:	604a      	str	r2, [r1, #4]
    2fc6:	685a      	ldr	r2, [r3, #4]
    2fc8:	f042 0201 	orr.w	r2, r2, #1
    2fcc:	3108      	adds	r1, #8
    2fce:	605a      	str	r2, [r3, #4]
    2fd0:	4648      	mov	r0, r9
    2fd2:	f000 fb25 	bl	3620 <_free_r>
    2fd6:	e7d7      	b.n	2f88 <_realloc_r+0x140>
    2fd8:	4611      	mov	r1, r2
    2fda:	b003      	add	sp, #12
    2fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fe0:	f7ff bb14 	b.w	260c <_malloc_r>
    2fe4:	f01e 0f01 	tst.w	lr, #1
    2fe8:	f47f af5a 	bne.w	2ea0 <_realloc_r+0x58>
    2fec:	f856 3c08 	ldr.w	r3, [r6, #-8]
    2ff0:	ebc3 0a08 	rsb	sl, r3, r8
    2ff4:	f8da 3004 	ldr.w	r3, [sl, #4]
    2ff8:	f023 0c03 	bic.w	ip, r3, #3
    2ffc:	eb01 0e0c 	add.w	lr, r1, ip
    3000:	4596      	cmp	lr, r2
    3002:	db8b      	blt.n	2f1c <_realloc_r+0xd4>
    3004:	68c3      	ldr	r3, [r0, #12]
    3006:	6882      	ldr	r2, [r0, #8]
    3008:	4657      	mov	r7, sl
    300a:	60d3      	str	r3, [r2, #12]
    300c:	609a      	str	r2, [r3, #8]
    300e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3012:	f8da 300c 	ldr.w	r3, [sl, #12]
    3016:	60cb      	str	r3, [r1, #12]
    3018:	1f22      	subs	r2, r4, #4
    301a:	2a24      	cmp	r2, #36	; 0x24
    301c:	6099      	str	r1, [r3, #8]
    301e:	f200 8099 	bhi.w	3154 <_realloc_r+0x30c>
    3022:	2a13      	cmp	r2, #19
    3024:	d962      	bls.n	30ec <_realloc_r+0x2a4>
    3026:	6833      	ldr	r3, [r6, #0]
    3028:	f8ca 3008 	str.w	r3, [sl, #8]
    302c:	6873      	ldr	r3, [r6, #4]
    302e:	f8ca 300c 	str.w	r3, [sl, #12]
    3032:	2a1b      	cmp	r2, #27
    3034:	f200 80a0 	bhi.w	3178 <_realloc_r+0x330>
    3038:	3608      	adds	r6, #8
    303a:	f10a 0310 	add.w	r3, sl, #16
    303e:	e056      	b.n	30ee <_realloc_r+0x2a6>
    3040:	f021 0b03 	bic.w	fp, r1, #3
    3044:	44a3      	add	fp, r4
    3046:	f105 0010 	add.w	r0, r5, #16
    304a:	4583      	cmp	fp, r0
    304c:	da59      	bge.n	3102 <_realloc_r+0x2ba>
    304e:	f01e 0f01 	tst.w	lr, #1
    3052:	f47f af25 	bne.w	2ea0 <_realloc_r+0x58>
    3056:	f856 1c08 	ldr.w	r1, [r6, #-8]
    305a:	ebc1 0a08 	rsb	sl, r1, r8
    305e:	f8da 1004 	ldr.w	r1, [sl, #4]
    3062:	f021 0c03 	bic.w	ip, r1, #3
    3066:	44e3      	add	fp, ip
    3068:	4558      	cmp	r0, fp
    306a:	f73f af57 	bgt.w	2f1c <_realloc_r+0xd4>
    306e:	4657      	mov	r7, sl
    3070:	f8da 100c 	ldr.w	r1, [sl, #12]
    3074:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3078:	1f22      	subs	r2, r4, #4
    307a:	2a24      	cmp	r2, #36	; 0x24
    307c:	60c1      	str	r1, [r0, #12]
    307e:	6088      	str	r0, [r1, #8]
    3080:	f200 80b4 	bhi.w	31ec <_realloc_r+0x3a4>
    3084:	2a13      	cmp	r2, #19
    3086:	f240 80a5 	bls.w	31d4 <_realloc_r+0x38c>
    308a:	6831      	ldr	r1, [r6, #0]
    308c:	f8ca 1008 	str.w	r1, [sl, #8]
    3090:	6871      	ldr	r1, [r6, #4]
    3092:	f8ca 100c 	str.w	r1, [sl, #12]
    3096:	2a1b      	cmp	r2, #27
    3098:	f200 80af 	bhi.w	31fa <_realloc_r+0x3b2>
    309c:	3608      	adds	r6, #8
    309e:	f10a 0210 	add.w	r2, sl, #16
    30a2:	6831      	ldr	r1, [r6, #0]
    30a4:	6011      	str	r1, [r2, #0]
    30a6:	6871      	ldr	r1, [r6, #4]
    30a8:	6051      	str	r1, [r2, #4]
    30aa:	68b1      	ldr	r1, [r6, #8]
    30ac:	6091      	str	r1, [r2, #8]
    30ae:	eb0a 0105 	add.w	r1, sl, r5
    30b2:	ebc5 020b 	rsb	r2, r5, fp
    30b6:	f042 0201 	orr.w	r2, r2, #1
    30ba:	6099      	str	r1, [r3, #8]
    30bc:	604a      	str	r2, [r1, #4]
    30be:	f8da 3004 	ldr.w	r3, [sl, #4]
    30c2:	f003 0301 	and.w	r3, r3, #1
    30c6:	431d      	orrs	r5, r3
    30c8:	4648      	mov	r0, r9
    30ca:	f8ca 5004 	str.w	r5, [sl, #4]
    30ce:	f7ff feb9 	bl	2e44 <__malloc_unlock>
    30d2:	4638      	mov	r0, r7
    30d4:	e75c      	b.n	2f90 <_realloc_r+0x148>
    30d6:	6833      	ldr	r3, [r6, #0]
    30d8:	6003      	str	r3, [r0, #0]
    30da:	6873      	ldr	r3, [r6, #4]
    30dc:	6043      	str	r3, [r0, #4]
    30de:	2a1b      	cmp	r2, #27
    30e0:	d827      	bhi.n	3132 <_realloc_r+0x2ea>
    30e2:	f100 0308 	add.w	r3, r0, #8
    30e6:	f106 0208 	add.w	r2, r6, #8
    30ea:	e6f2      	b.n	2ed2 <_realloc_r+0x8a>
    30ec:	463b      	mov	r3, r7
    30ee:	6832      	ldr	r2, [r6, #0]
    30f0:	601a      	str	r2, [r3, #0]
    30f2:	6872      	ldr	r2, [r6, #4]
    30f4:	605a      	str	r2, [r3, #4]
    30f6:	68b2      	ldr	r2, [r6, #8]
    30f8:	609a      	str	r2, [r3, #8]
    30fa:	463e      	mov	r6, r7
    30fc:	4674      	mov	r4, lr
    30fe:	46d0      	mov	r8, sl
    3100:	e733      	b.n	2f6a <_realloc_r+0x122>
    3102:	eb08 0105 	add.w	r1, r8, r5
    3106:	ebc5 0b0b 	rsb	fp, r5, fp
    310a:	f04b 0201 	orr.w	r2, fp, #1
    310e:	6099      	str	r1, [r3, #8]
    3110:	604a      	str	r2, [r1, #4]
    3112:	f856 3c04 	ldr.w	r3, [r6, #-4]
    3116:	f003 0301 	and.w	r3, r3, #1
    311a:	431d      	orrs	r5, r3
    311c:	4648      	mov	r0, r9
    311e:	f846 5c04 	str.w	r5, [r6, #-4]
    3122:	f7ff fe8f 	bl	2e44 <__malloc_unlock>
    3126:	4630      	mov	r0, r6
    3128:	e732      	b.n	2f90 <_realloc_r+0x148>
    312a:	4631      	mov	r1, r6
    312c:	f7ff fdd6 	bl	2cdc <memmove>
    3130:	e6d5      	b.n	2ede <_realloc_r+0x96>
    3132:	68b3      	ldr	r3, [r6, #8]
    3134:	6083      	str	r3, [r0, #8]
    3136:	68f3      	ldr	r3, [r6, #12]
    3138:	60c3      	str	r3, [r0, #12]
    313a:	2a24      	cmp	r2, #36	; 0x24
    313c:	d028      	beq.n	3190 <_realloc_r+0x348>
    313e:	f100 0310 	add.w	r3, r0, #16
    3142:	f106 0210 	add.w	r2, r6, #16
    3146:	e6c4      	b.n	2ed2 <_realloc_r+0x8a>
    3148:	f850 3c04 	ldr.w	r3, [r0, #-4]
    314c:	f023 0303 	bic.w	r3, r3, #3
    3150:	441c      	add	r4, r3
    3152:	e70a      	b.n	2f6a <_realloc_r+0x122>
    3154:	4631      	mov	r1, r6
    3156:	4638      	mov	r0, r7
    3158:	4674      	mov	r4, lr
    315a:	46d0      	mov	r8, sl
    315c:	f7ff fdbe 	bl	2cdc <memmove>
    3160:	463e      	mov	r6, r7
    3162:	e702      	b.n	2f6a <_realloc_r+0x122>
    3164:	463a      	mov	r2, r7
    3166:	e6f7      	b.n	2f58 <_realloc_r+0x110>
    3168:	4631      	mov	r1, r6
    316a:	4638      	mov	r0, r7
    316c:	461c      	mov	r4, r3
    316e:	46d0      	mov	r8, sl
    3170:	f7ff fdb4 	bl	2cdc <memmove>
    3174:	463e      	mov	r6, r7
    3176:	e6f8      	b.n	2f6a <_realloc_r+0x122>
    3178:	68b3      	ldr	r3, [r6, #8]
    317a:	f8ca 3010 	str.w	r3, [sl, #16]
    317e:	68f3      	ldr	r3, [r6, #12]
    3180:	f8ca 3014 	str.w	r3, [sl, #20]
    3184:	2a24      	cmp	r2, #36	; 0x24
    3186:	d01b      	beq.n	31c0 <_realloc_r+0x378>
    3188:	3610      	adds	r6, #16
    318a:	f10a 0318 	add.w	r3, sl, #24
    318e:	e7ae      	b.n	30ee <_realloc_r+0x2a6>
    3190:	6933      	ldr	r3, [r6, #16]
    3192:	6103      	str	r3, [r0, #16]
    3194:	6973      	ldr	r3, [r6, #20]
    3196:	6143      	str	r3, [r0, #20]
    3198:	f106 0218 	add.w	r2, r6, #24
    319c:	f100 0318 	add.w	r3, r0, #24
    31a0:	e697      	b.n	2ed2 <_realloc_r+0x8a>
    31a2:	bf00      	nop
    31a4:	20001158 	.word	0x20001158
    31a8:	68b1      	ldr	r1, [r6, #8]
    31aa:	f8ca 1010 	str.w	r1, [sl, #16]
    31ae:	68f1      	ldr	r1, [r6, #12]
    31b0:	f8ca 1014 	str.w	r1, [sl, #20]
    31b4:	2a24      	cmp	r2, #36	; 0x24
    31b6:	d00f      	beq.n	31d8 <_realloc_r+0x390>
    31b8:	3610      	adds	r6, #16
    31ba:	f10a 0218 	add.w	r2, sl, #24
    31be:	e6cb      	b.n	2f58 <_realloc_r+0x110>
    31c0:	6933      	ldr	r3, [r6, #16]
    31c2:	f8ca 3018 	str.w	r3, [sl, #24]
    31c6:	6973      	ldr	r3, [r6, #20]
    31c8:	f8ca 301c 	str.w	r3, [sl, #28]
    31cc:	3618      	adds	r6, #24
    31ce:	f10a 0320 	add.w	r3, sl, #32
    31d2:	e78c      	b.n	30ee <_realloc_r+0x2a6>
    31d4:	463a      	mov	r2, r7
    31d6:	e764      	b.n	30a2 <_realloc_r+0x25a>
    31d8:	6932      	ldr	r2, [r6, #16]
    31da:	f8ca 2018 	str.w	r2, [sl, #24]
    31de:	6972      	ldr	r2, [r6, #20]
    31e0:	f8ca 201c 	str.w	r2, [sl, #28]
    31e4:	3618      	adds	r6, #24
    31e6:	f10a 0220 	add.w	r2, sl, #32
    31ea:	e6b5      	b.n	2f58 <_realloc_r+0x110>
    31ec:	4631      	mov	r1, r6
    31ee:	4638      	mov	r0, r7
    31f0:	9301      	str	r3, [sp, #4]
    31f2:	f7ff fd73 	bl	2cdc <memmove>
    31f6:	9b01      	ldr	r3, [sp, #4]
    31f8:	e759      	b.n	30ae <_realloc_r+0x266>
    31fa:	68b1      	ldr	r1, [r6, #8]
    31fc:	f8ca 1010 	str.w	r1, [sl, #16]
    3200:	68f1      	ldr	r1, [r6, #12]
    3202:	f8ca 1014 	str.w	r1, [sl, #20]
    3206:	2a24      	cmp	r2, #36	; 0x24
    3208:	d003      	beq.n	3212 <_realloc_r+0x3ca>
    320a:	3610      	adds	r6, #16
    320c:	f10a 0218 	add.w	r2, sl, #24
    3210:	e747      	b.n	30a2 <_realloc_r+0x25a>
    3212:	6932      	ldr	r2, [r6, #16]
    3214:	f8ca 2018 	str.w	r2, [sl, #24]
    3218:	6972      	ldr	r2, [r6, #20]
    321a:	f8ca 201c 	str.w	r2, [sl, #28]
    321e:	3618      	adds	r6, #24
    3220:	f10a 0220 	add.w	r2, sl, #32
    3224:	e73d      	b.n	30a2 <_realloc_r+0x25a>
    3226:	bf00      	nop

00003228 <_sbrk_r>:
    3228:	b538      	push	{r3, r4, r5, lr}
    322a:	4c07      	ldr	r4, [pc, #28]	; (3248 <_sbrk_r+0x20>)
    322c:	2300      	movs	r3, #0
    322e:	4605      	mov	r5, r0
    3230:	4608      	mov	r0, r1
    3232:	6023      	str	r3, [r4, #0]
    3234:	f7fd ff12 	bl	105c <_sbrk>
    3238:	1c43      	adds	r3, r0, #1
    323a:	d000      	beq.n	323e <_sbrk_r+0x16>
    323c:	bd38      	pop	{r3, r4, r5, pc}
    323e:	6823      	ldr	r3, [r4, #0]
    3240:	2b00      	cmp	r3, #0
    3242:	d0fb      	beq.n	323c <_sbrk_r+0x14>
    3244:	602b      	str	r3, [r5, #0]
    3246:	bd38      	pop	{r3, r4, r5, pc}
    3248:	20001fd4 	.word	0x20001fd4
	...

00003280 <strlen>:
    3280:	f890 f000 	pld	[r0]
    3284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3288:	f020 0107 	bic.w	r1, r0, #7
    328c:	f06f 0c00 	mvn.w	ip, #0
    3290:	f010 0407 	ands.w	r4, r0, #7
    3294:	f891 f020 	pld	[r1, #32]
    3298:	f040 8049 	bne.w	332e <strlen+0xae>
    329c:	f04f 0400 	mov.w	r4, #0
    32a0:	f06f 0007 	mvn.w	r0, #7
    32a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    32a8:	f891 f040 	pld	[r1, #64]	; 0x40
    32ac:	f100 0008 	add.w	r0, r0, #8
    32b0:	fa82 f24c 	uadd8	r2, r2, ip
    32b4:	faa4 f28c 	sel	r2, r4, ip
    32b8:	fa83 f34c 	uadd8	r3, r3, ip
    32bc:	faa2 f38c 	sel	r3, r2, ip
    32c0:	bb4b      	cbnz	r3, 3316 <strlen+0x96>
    32c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    32c6:	fa82 f24c 	uadd8	r2, r2, ip
    32ca:	f100 0008 	add.w	r0, r0, #8
    32ce:	faa4 f28c 	sel	r2, r4, ip
    32d2:	fa83 f34c 	uadd8	r3, r3, ip
    32d6:	faa2 f38c 	sel	r3, r2, ip
    32da:	b9e3      	cbnz	r3, 3316 <strlen+0x96>
    32dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    32e0:	fa82 f24c 	uadd8	r2, r2, ip
    32e4:	f100 0008 	add.w	r0, r0, #8
    32e8:	faa4 f28c 	sel	r2, r4, ip
    32ec:	fa83 f34c 	uadd8	r3, r3, ip
    32f0:	faa2 f38c 	sel	r3, r2, ip
    32f4:	b97b      	cbnz	r3, 3316 <strlen+0x96>
    32f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    32fa:	f101 0120 	add.w	r1, r1, #32
    32fe:	fa82 f24c 	uadd8	r2, r2, ip
    3302:	f100 0008 	add.w	r0, r0, #8
    3306:	faa4 f28c 	sel	r2, r4, ip
    330a:	fa83 f34c 	uadd8	r3, r3, ip
    330e:	faa2 f38c 	sel	r3, r2, ip
    3312:	2b00      	cmp	r3, #0
    3314:	d0c6      	beq.n	32a4 <strlen+0x24>
    3316:	2a00      	cmp	r2, #0
    3318:	bf04      	itt	eq
    331a:	3004      	addeq	r0, #4
    331c:	461a      	moveq	r2, r3
    331e:	ba12      	rev	r2, r2
    3320:	fab2 f282 	clz	r2, r2
    3324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    332c:	4770      	bx	lr
    332e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3332:	f004 0503 	and.w	r5, r4, #3
    3336:	f1c4 0000 	rsb	r0, r4, #0
    333a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    333e:	f014 0f04 	tst.w	r4, #4
    3342:	f891 f040 	pld	[r1, #64]	; 0x40
    3346:	fa0c f505 	lsl.w	r5, ip, r5
    334a:	ea62 0205 	orn	r2, r2, r5
    334e:	bf1c      	itt	ne
    3350:	ea63 0305 	ornne	r3, r3, r5
    3354:	4662      	movne	r2, ip
    3356:	f04f 0400 	mov.w	r4, #0
    335a:	e7a9      	b.n	32b0 <strlen+0x30>

0000335c <_vdprintf_r>:
    335c:	b5f0      	push	{r4, r5, r6, r7, lr}
    335e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    3362:	ad04      	add	r5, sp, #16
    3364:	9300      	str	r3, [sp, #0]
    3366:	460f      	mov	r7, r1
    3368:	4613      	mov	r3, r2
    336a:	f44f 7400 	mov.w	r4, #512	; 0x200
    336e:	aa03      	add	r2, sp, #12
    3370:	4629      	mov	r1, r5
    3372:	9403      	str	r4, [sp, #12]
    3374:	4606      	mov	r6, r0
    3376:	f000 fdad 	bl	3ed4 <_vasnprintf_r>
    337a:	b188      	cbz	r0, 33a0 <_vdprintf_r+0x44>
    337c:	4604      	mov	r4, r0
    337e:	4602      	mov	r2, r0
    3380:	4639      	mov	r1, r7
    3382:	9b03      	ldr	r3, [sp, #12]
    3384:	4630      	mov	r0, r6
    3386:	f000 f829 	bl	33dc <_write_r>
    338a:	42ac      	cmp	r4, r5
    338c:	9003      	str	r0, [sp, #12]
    338e:	d004      	beq.n	339a <_vdprintf_r+0x3e>
    3390:	4630      	mov	r0, r6
    3392:	4621      	mov	r1, r4
    3394:	f000 f944 	bl	3620 <_free_r>
    3398:	9803      	ldr	r0, [sp, #12]
    339a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33a4:	e7f9      	b.n	339a <_vdprintf_r+0x3e>
    33a6:	bf00      	nop

000033a8 <vdprintf>:
    33a8:	b410      	push	{r4}
    33aa:	4c04      	ldr	r4, [pc, #16]	; (33bc <vdprintf+0x14>)
    33ac:	4613      	mov	r3, r2
    33ae:	460a      	mov	r2, r1
    33b0:	4601      	mov	r1, r0
    33b2:	6820      	ldr	r0, [r4, #0]
    33b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    33b8:	f7ff bfd0 	b.w	335c <_vdprintf_r>
    33bc:	20001568 	.word	0x20001568

000033c0 <__ascii_wctomb>:
    33c0:	b121      	cbz	r1, 33cc <__ascii_wctomb+0xc>
    33c2:	2aff      	cmp	r2, #255	; 0xff
    33c4:	d804      	bhi.n	33d0 <__ascii_wctomb+0x10>
    33c6:	700a      	strb	r2, [r1, #0]
    33c8:	2001      	movs	r0, #1
    33ca:	4770      	bx	lr
    33cc:	4608      	mov	r0, r1
    33ce:	4770      	bx	lr
    33d0:	238a      	movs	r3, #138	; 0x8a
    33d2:	6003      	str	r3, [r0, #0]
    33d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33d8:	4770      	bx	lr
    33da:	bf00      	nop

000033dc <_write_r>:
    33dc:	b570      	push	{r4, r5, r6, lr}
    33de:	460d      	mov	r5, r1
    33e0:	4c08      	ldr	r4, [pc, #32]	; (3404 <_write_r+0x28>)
    33e2:	4611      	mov	r1, r2
    33e4:	4606      	mov	r6, r0
    33e6:	461a      	mov	r2, r3
    33e8:	4628      	mov	r0, r5
    33ea:	2300      	movs	r3, #0
    33ec:	6023      	str	r3, [r4, #0]
    33ee:	f7fe fe6d 	bl	20cc <_write>
    33f2:	1c43      	adds	r3, r0, #1
    33f4:	d000      	beq.n	33f8 <_write_r+0x1c>
    33f6:	bd70      	pop	{r4, r5, r6, pc}
    33f8:	6823      	ldr	r3, [r4, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d0fb      	beq.n	33f6 <_write_r+0x1a>
    33fe:	6033      	str	r3, [r6, #0]
    3400:	bd70      	pop	{r4, r5, r6, pc}
    3402:	bf00      	nop
    3404:	20001fd4 	.word	0x20001fd4

00003408 <__register_exitproc>:
    3408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    340c:	4c25      	ldr	r4, [pc, #148]	; (34a4 <__register_exitproc+0x9c>)
    340e:	6825      	ldr	r5, [r4, #0]
    3410:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    3414:	4606      	mov	r6, r0
    3416:	4688      	mov	r8, r1
    3418:	4692      	mov	sl, r2
    341a:	4699      	mov	r9, r3
    341c:	b3c4      	cbz	r4, 3490 <__register_exitproc+0x88>
    341e:	6860      	ldr	r0, [r4, #4]
    3420:	281f      	cmp	r0, #31
    3422:	dc17      	bgt.n	3454 <__register_exitproc+0x4c>
    3424:	1c43      	adds	r3, r0, #1
    3426:	b176      	cbz	r6, 3446 <__register_exitproc+0x3e>
    3428:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    342c:	2201      	movs	r2, #1
    342e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    3432:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    3436:	4082      	lsls	r2, r0
    3438:	4311      	orrs	r1, r2
    343a:	2e02      	cmp	r6, #2
    343c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    3440:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    3444:	d01e      	beq.n	3484 <__register_exitproc+0x7c>
    3446:	3002      	adds	r0, #2
    3448:	6063      	str	r3, [r4, #4]
    344a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    344e:	2000      	movs	r0, #0
    3450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3454:	4b14      	ldr	r3, [pc, #80]	; (34a8 <__register_exitproc+0xa0>)
    3456:	b303      	cbz	r3, 349a <__register_exitproc+0x92>
    3458:	f44f 70c8 	mov.w	r0, #400	; 0x190
    345c:	f7ff f8c6 	bl	25ec <malloc>
    3460:	4604      	mov	r4, r0
    3462:	b1d0      	cbz	r0, 349a <__register_exitproc+0x92>
    3464:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    3468:	2700      	movs	r7, #0
    346a:	e880 0088 	stmia.w	r0, {r3, r7}
    346e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3472:	4638      	mov	r0, r7
    3474:	2301      	movs	r3, #1
    3476:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    347a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    347e:	2e00      	cmp	r6, #0
    3480:	d0e1      	beq.n	3446 <__register_exitproc+0x3e>
    3482:	e7d1      	b.n	3428 <__register_exitproc+0x20>
    3484:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    3488:	430a      	orrs	r2, r1
    348a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    348e:	e7da      	b.n	3446 <__register_exitproc+0x3e>
    3490:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    3494:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3498:	e7c1      	b.n	341e <__register_exitproc+0x16>
    349a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34a2:	bf00      	nop
    34a4:	2000049c 	.word	0x2000049c
    34a8:	000025ed 	.word	0x000025ed

000034ac <__call_exitprocs>:
    34ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b0:	4b32      	ldr	r3, [pc, #200]	; (357c <__call_exitprocs+0xd0>)
    34b2:	b085      	sub	sp, #20
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	9302      	str	r3, [sp, #8]
    34b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    34bc:	9001      	str	r0, [sp, #4]
    34be:	460e      	mov	r6, r1
    34c0:	9303      	str	r3, [sp, #12]
    34c2:	9b02      	ldr	r3, [sp, #8]
    34c4:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
    34c8:	b33f      	cbz	r7, 351a <__call_exitprocs+0x6e>
    34ca:	f8dd a00c 	ldr.w	sl, [sp, #12]
    34ce:	f04f 0901 	mov.w	r9, #1
    34d2:	46d3      	mov	fp, sl
    34d4:	687c      	ldr	r4, [r7, #4]
    34d6:	1e65      	subs	r5, r4, #1
    34d8:	d40e      	bmi.n	34f8 <__call_exitprocs+0x4c>
    34da:	3401      	adds	r4, #1
    34dc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    34e0:	f04f 0800 	mov.w	r8, #0
    34e4:	b1e6      	cbz	r6, 3520 <__call_exitprocs+0x74>
    34e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    34ea:	429e      	cmp	r6, r3
    34ec:	d018      	beq.n	3520 <__call_exitprocs+0x74>
    34ee:	3d01      	subs	r5, #1
    34f0:	1c6b      	adds	r3, r5, #1
    34f2:	f1a4 0404 	sub.w	r4, r4, #4
    34f6:	d1f5      	bne.n	34e4 <__call_exitprocs+0x38>
    34f8:	4b21      	ldr	r3, [pc, #132]	; (3580 <__call_exitprocs+0xd4>)
    34fa:	b173      	cbz	r3, 351a <__call_exitprocs+0x6e>
    34fc:	687b      	ldr	r3, [r7, #4]
    34fe:	2b00      	cmp	r3, #0
    3500:	d136      	bne.n	3570 <__call_exitprocs+0xc4>
    3502:	683b      	ldr	r3, [r7, #0]
    3504:	2b00      	cmp	r3, #0
    3506:	d034      	beq.n	3572 <__call_exitprocs+0xc6>
    3508:	4638      	mov	r0, r7
    350a:	f8cb 3000 	str.w	r3, [fp]
    350e:	f7ff f875 	bl	25fc <free>
    3512:	f8db 7000 	ldr.w	r7, [fp]
    3516:	2f00      	cmp	r7, #0
    3518:	d1dc      	bne.n	34d4 <__call_exitprocs+0x28>
    351a:	b005      	add	sp, #20
    351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	6822      	ldr	r2, [r4, #0]
    3524:	3b01      	subs	r3, #1
    3526:	42ab      	cmp	r3, r5
    3528:	bf0c      	ite	eq
    352a:	607d      	streq	r5, [r7, #4]
    352c:	f8c4 8000 	strne.w	r8, [r4]
    3530:	2a00      	cmp	r2, #0
    3532:	d0dc      	beq.n	34ee <__call_exitprocs+0x42>
    3534:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
    3538:	f8d7 a004 	ldr.w	sl, [r7, #4]
    353c:	fa09 f305 	lsl.w	r3, r9, r5
    3540:	420b      	tst	r3, r1
    3542:	d00f      	beq.n	3564 <__call_exitprocs+0xb8>
    3544:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
    3548:	420b      	tst	r3, r1
    354a:	d10d      	bne.n	3568 <__call_exitprocs+0xbc>
    354c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    3550:	9801      	ldr	r0, [sp, #4]
    3552:	4790      	blx	r2
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	4553      	cmp	r3, sl
    3558:	d1b3      	bne.n	34c2 <__call_exitprocs+0x16>
    355a:	f8db 3000 	ldr.w	r3, [fp]
    355e:	42bb      	cmp	r3, r7
    3560:	d0c5      	beq.n	34ee <__call_exitprocs+0x42>
    3562:	e7ae      	b.n	34c2 <__call_exitprocs+0x16>
    3564:	4790      	blx	r2
    3566:	e7f5      	b.n	3554 <__call_exitprocs+0xa8>
    3568:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    356c:	4790      	blx	r2
    356e:	e7f1      	b.n	3554 <__call_exitprocs+0xa8>
    3570:	683b      	ldr	r3, [r7, #0]
    3572:	46bb      	mov	fp, r7
    3574:	461f      	mov	r7, r3
    3576:	2f00      	cmp	r7, #0
    3578:	d1ac      	bne.n	34d4 <__call_exitprocs+0x28>
    357a:	e7ce      	b.n	351a <__call_exitprocs+0x6e>
    357c:	2000049c 	.word	0x2000049c
    3580:	000025fd 	.word	0x000025fd

00003584 <_malloc_trim_r>:
    3584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3586:	4f23      	ldr	r7, [pc, #140]	; (3614 <_malloc_trim_r+0x90>)
    3588:	460c      	mov	r4, r1
    358a:	4606      	mov	r6, r0
    358c:	f7ff fc58 	bl	2e40 <__malloc_lock>
    3590:	68bb      	ldr	r3, [r7, #8]
    3592:	685d      	ldr	r5, [r3, #4]
    3594:	f025 0503 	bic.w	r5, r5, #3
    3598:	1b29      	subs	r1, r5, r4
    359a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    359e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    35a2:	f021 010f 	bic.w	r1, r1, #15
    35a6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    35aa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    35ae:	db07      	blt.n	35c0 <_malloc_trim_r+0x3c>
    35b0:	2100      	movs	r1, #0
    35b2:	4630      	mov	r0, r6
    35b4:	f7ff fe38 	bl	3228 <_sbrk_r>
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	442b      	add	r3, r5
    35bc:	4298      	cmp	r0, r3
    35be:	d004      	beq.n	35ca <_malloc_trim_r+0x46>
    35c0:	4630      	mov	r0, r6
    35c2:	f7ff fc3f 	bl	2e44 <__malloc_unlock>
    35c6:	2000      	movs	r0, #0
    35c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35ca:	4261      	negs	r1, r4
    35cc:	4630      	mov	r0, r6
    35ce:	f7ff fe2b 	bl	3228 <_sbrk_r>
    35d2:	3001      	adds	r0, #1
    35d4:	d00d      	beq.n	35f2 <_malloc_trim_r+0x6e>
    35d6:	4b10      	ldr	r3, [pc, #64]	; (3618 <_malloc_trim_r+0x94>)
    35d8:	68ba      	ldr	r2, [r7, #8]
    35da:	6819      	ldr	r1, [r3, #0]
    35dc:	1b2d      	subs	r5, r5, r4
    35de:	f045 0501 	orr.w	r5, r5, #1
    35e2:	4630      	mov	r0, r6
    35e4:	1b09      	subs	r1, r1, r4
    35e6:	6055      	str	r5, [r2, #4]
    35e8:	6019      	str	r1, [r3, #0]
    35ea:	f7ff fc2b 	bl	2e44 <__malloc_unlock>
    35ee:	2001      	movs	r0, #1
    35f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f2:	2100      	movs	r1, #0
    35f4:	4630      	mov	r0, r6
    35f6:	f7ff fe17 	bl	3228 <_sbrk_r>
    35fa:	68ba      	ldr	r2, [r7, #8]
    35fc:	1a83      	subs	r3, r0, r2
    35fe:	2b0f      	cmp	r3, #15
    3600:	ddde      	ble.n	35c0 <_malloc_trim_r+0x3c>
    3602:	4c06      	ldr	r4, [pc, #24]	; (361c <_malloc_trim_r+0x98>)
    3604:	4904      	ldr	r1, [pc, #16]	; (3618 <_malloc_trim_r+0x94>)
    3606:	6824      	ldr	r4, [r4, #0]
    3608:	f043 0301 	orr.w	r3, r3, #1
    360c:	1b00      	subs	r0, r0, r4
    360e:	6053      	str	r3, [r2, #4]
    3610:	6008      	str	r0, [r1, #0]
    3612:	e7d5      	b.n	35c0 <_malloc_trim_r+0x3c>
    3614:	20001158 	.word	0x20001158
    3618:	20001eb4 	.word	0x20001eb4
    361c:	20001560 	.word	0x20001560

00003620 <_free_r>:
    3620:	2900      	cmp	r1, #0
    3622:	d045      	beq.n	36b0 <_free_r+0x90>
    3624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3628:	460d      	mov	r5, r1
    362a:	4680      	mov	r8, r0
    362c:	f7ff fc08 	bl	2e40 <__malloc_lock>
    3630:	f855 7c04 	ldr.w	r7, [r5, #-4]
    3634:	496a      	ldr	r1, [pc, #424]	; (37e0 <_free_r+0x1c0>)
    3636:	f027 0301 	bic.w	r3, r7, #1
    363a:	f1a5 0408 	sub.w	r4, r5, #8
    363e:	18e2      	adds	r2, r4, r3
    3640:	688e      	ldr	r6, [r1, #8]
    3642:	6850      	ldr	r0, [r2, #4]
    3644:	42b2      	cmp	r2, r6
    3646:	f020 0003 	bic.w	r0, r0, #3
    364a:	d062      	beq.n	3712 <_free_r+0xf2>
    364c:	07fe      	lsls	r6, r7, #31
    364e:	6050      	str	r0, [r2, #4]
    3650:	d40b      	bmi.n	366a <_free_r+0x4a>
    3652:	f855 7c08 	ldr.w	r7, [r5, #-8]
    3656:	1be4      	subs	r4, r4, r7
    3658:	f101 0e08 	add.w	lr, r1, #8
    365c:	68a5      	ldr	r5, [r4, #8]
    365e:	4575      	cmp	r5, lr
    3660:	443b      	add	r3, r7
    3662:	d06f      	beq.n	3744 <_free_r+0x124>
    3664:	68e7      	ldr	r7, [r4, #12]
    3666:	60ef      	str	r7, [r5, #12]
    3668:	60bd      	str	r5, [r7, #8]
    366a:	1815      	adds	r5, r2, r0
    366c:	686d      	ldr	r5, [r5, #4]
    366e:	07ed      	lsls	r5, r5, #31
    3670:	d542      	bpl.n	36f8 <_free_r+0xd8>
    3672:	f043 0201 	orr.w	r2, r3, #1
    3676:	6062      	str	r2, [r4, #4]
    3678:	50e3      	str	r3, [r4, r3]
    367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    367e:	d218      	bcs.n	36b2 <_free_r+0x92>
    3680:	08db      	lsrs	r3, r3, #3
    3682:	1c5a      	adds	r2, r3, #1
    3684:	684d      	ldr	r5, [r1, #4]
    3686:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    368a:	60a7      	str	r7, [r4, #8]
    368c:	2001      	movs	r0, #1
    368e:	109b      	asrs	r3, r3, #2
    3690:	fa00 f303 	lsl.w	r3, r0, r3
    3694:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3698:	431d      	orrs	r5, r3
    369a:	3808      	subs	r0, #8
    369c:	60e0      	str	r0, [r4, #12]
    369e:	604d      	str	r5, [r1, #4]
    36a0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    36a4:	60fc      	str	r4, [r7, #12]
    36a6:	4640      	mov	r0, r8
    36a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36ac:	f7ff bbca 	b.w	2e44 <__malloc_unlock>
    36b0:	4770      	bx	lr
    36b2:	0a5a      	lsrs	r2, r3, #9
    36b4:	2a04      	cmp	r2, #4
    36b6:	d853      	bhi.n	3760 <_free_r+0x140>
    36b8:	099a      	lsrs	r2, r3, #6
    36ba:	f102 0739 	add.w	r7, r2, #57	; 0x39
    36be:	007f      	lsls	r7, r7, #1
    36c0:	f102 0538 	add.w	r5, r2, #56	; 0x38
    36c4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    36c8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    36cc:	4944      	ldr	r1, [pc, #272]	; (37e0 <_free_r+0x1c0>)
    36ce:	3808      	subs	r0, #8
    36d0:	4290      	cmp	r0, r2
    36d2:	d04d      	beq.n	3770 <_free_r+0x150>
    36d4:	6851      	ldr	r1, [r2, #4]
    36d6:	f021 0103 	bic.w	r1, r1, #3
    36da:	428b      	cmp	r3, r1
    36dc:	d202      	bcs.n	36e4 <_free_r+0xc4>
    36de:	6892      	ldr	r2, [r2, #8]
    36e0:	4290      	cmp	r0, r2
    36e2:	d1f7      	bne.n	36d4 <_free_r+0xb4>
    36e4:	68d0      	ldr	r0, [r2, #12]
    36e6:	60e0      	str	r0, [r4, #12]
    36e8:	60a2      	str	r2, [r4, #8]
    36ea:	6084      	str	r4, [r0, #8]
    36ec:	60d4      	str	r4, [r2, #12]
    36ee:	4640      	mov	r0, r8
    36f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36f4:	f7ff bba6 	b.w	2e44 <__malloc_unlock>
    36f8:	6895      	ldr	r5, [r2, #8]
    36fa:	4f3a      	ldr	r7, [pc, #232]	; (37e4 <_free_r+0x1c4>)
    36fc:	42bd      	cmp	r5, r7
    36fe:	4403      	add	r3, r0
    3700:	d03f      	beq.n	3782 <_free_r+0x162>
    3702:	68d0      	ldr	r0, [r2, #12]
    3704:	60e8      	str	r0, [r5, #12]
    3706:	f043 0201 	orr.w	r2, r3, #1
    370a:	6085      	str	r5, [r0, #8]
    370c:	6062      	str	r2, [r4, #4]
    370e:	50e3      	str	r3, [r4, r3]
    3710:	e7b3      	b.n	367a <_free_r+0x5a>
    3712:	07ff      	lsls	r7, r7, #31
    3714:	4403      	add	r3, r0
    3716:	d407      	bmi.n	3728 <_free_r+0x108>
    3718:	f855 2c08 	ldr.w	r2, [r5, #-8]
    371c:	1aa4      	subs	r4, r4, r2
    371e:	4413      	add	r3, r2
    3720:	68a0      	ldr	r0, [r4, #8]
    3722:	68e2      	ldr	r2, [r4, #12]
    3724:	60c2      	str	r2, [r0, #12]
    3726:	6090      	str	r0, [r2, #8]
    3728:	4a2f      	ldr	r2, [pc, #188]	; (37e8 <_free_r+0x1c8>)
    372a:	6812      	ldr	r2, [r2, #0]
    372c:	f043 0001 	orr.w	r0, r3, #1
    3730:	4293      	cmp	r3, r2
    3732:	6060      	str	r0, [r4, #4]
    3734:	608c      	str	r4, [r1, #8]
    3736:	d3b6      	bcc.n	36a6 <_free_r+0x86>
    3738:	4b2c      	ldr	r3, [pc, #176]	; (37ec <_free_r+0x1cc>)
    373a:	4640      	mov	r0, r8
    373c:	6819      	ldr	r1, [r3, #0]
    373e:	f7ff ff21 	bl	3584 <_malloc_trim_r>
    3742:	e7b0      	b.n	36a6 <_free_r+0x86>
    3744:	1811      	adds	r1, r2, r0
    3746:	6849      	ldr	r1, [r1, #4]
    3748:	07c9      	lsls	r1, r1, #31
    374a:	d444      	bmi.n	37d6 <_free_r+0x1b6>
    374c:	6891      	ldr	r1, [r2, #8]
    374e:	68d2      	ldr	r2, [r2, #12]
    3750:	60ca      	str	r2, [r1, #12]
    3752:	4403      	add	r3, r0
    3754:	f043 0001 	orr.w	r0, r3, #1
    3758:	6091      	str	r1, [r2, #8]
    375a:	6060      	str	r0, [r4, #4]
    375c:	50e3      	str	r3, [r4, r3]
    375e:	e7a2      	b.n	36a6 <_free_r+0x86>
    3760:	2a14      	cmp	r2, #20
    3762:	d817      	bhi.n	3794 <_free_r+0x174>
    3764:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    3768:	007f      	lsls	r7, r7, #1
    376a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    376e:	e7a9      	b.n	36c4 <_free_r+0xa4>
    3770:	10aa      	asrs	r2, r5, #2
    3772:	684b      	ldr	r3, [r1, #4]
    3774:	2501      	movs	r5, #1
    3776:	fa05 f202 	lsl.w	r2, r5, r2
    377a:	4313      	orrs	r3, r2
    377c:	604b      	str	r3, [r1, #4]
    377e:	4602      	mov	r2, r0
    3780:	e7b1      	b.n	36e6 <_free_r+0xc6>
    3782:	f043 0201 	orr.w	r2, r3, #1
    3786:	614c      	str	r4, [r1, #20]
    3788:	610c      	str	r4, [r1, #16]
    378a:	60e5      	str	r5, [r4, #12]
    378c:	60a5      	str	r5, [r4, #8]
    378e:	6062      	str	r2, [r4, #4]
    3790:	50e3      	str	r3, [r4, r3]
    3792:	e788      	b.n	36a6 <_free_r+0x86>
    3794:	2a54      	cmp	r2, #84	; 0x54
    3796:	d806      	bhi.n	37a6 <_free_r+0x186>
    3798:	0b1a      	lsrs	r2, r3, #12
    379a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    379e:	007f      	lsls	r7, r7, #1
    37a0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    37a4:	e78e      	b.n	36c4 <_free_r+0xa4>
    37a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    37aa:	d806      	bhi.n	37ba <_free_r+0x19a>
    37ac:	0bda      	lsrs	r2, r3, #15
    37ae:	f102 0778 	add.w	r7, r2, #120	; 0x78
    37b2:	007f      	lsls	r7, r7, #1
    37b4:	f102 0577 	add.w	r5, r2, #119	; 0x77
    37b8:	e784      	b.n	36c4 <_free_r+0xa4>
    37ba:	f240 5054 	movw	r0, #1364	; 0x554
    37be:	4282      	cmp	r2, r0
    37c0:	d806      	bhi.n	37d0 <_free_r+0x1b0>
    37c2:	0c9a      	lsrs	r2, r3, #18
    37c4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    37c8:	007f      	lsls	r7, r7, #1
    37ca:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    37ce:	e779      	b.n	36c4 <_free_r+0xa4>
    37d0:	27fe      	movs	r7, #254	; 0xfe
    37d2:	257e      	movs	r5, #126	; 0x7e
    37d4:	e776      	b.n	36c4 <_free_r+0xa4>
    37d6:	f043 0201 	orr.w	r2, r3, #1
    37da:	6062      	str	r2, [r4, #4]
    37dc:	50e3      	str	r3, [r4, r3]
    37de:	e762      	b.n	36a6 <_free_r+0x86>
    37e0:	20001158 	.word	0x20001158
    37e4:	20001160 	.word	0x20001160
    37e8:	20001564 	.word	0x20001564
    37ec:	20001ee4 	.word	0x20001ee4

000037f0 <_localeconv_r>:
    37f0:	4a04      	ldr	r2, [pc, #16]	; (3804 <_localeconv_r+0x14>)
    37f2:	4b05      	ldr	r3, [pc, #20]	; (3808 <_localeconv_r+0x18>)
    37f4:	6812      	ldr	r2, [r2, #0]
    37f6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    37f8:	2800      	cmp	r0, #0
    37fa:	bf08      	it	eq
    37fc:	4618      	moveq	r0, r3
    37fe:	30f0      	adds	r0, #240	; 0xf0
    3800:	4770      	bx	lr
    3802:	bf00      	nop
    3804:	20001568 	.word	0x20001568
    3808:	20000fec 	.word	0x20000fec
    380c:	00000000 	.word	0x00000000

00003810 <memchr>:
    3810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3814:	2a10      	cmp	r2, #16
    3816:	db2b      	blt.n	3870 <memchr+0x60>
    3818:	f010 0f07 	tst.w	r0, #7
    381c:	d008      	beq.n	3830 <memchr+0x20>
    381e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3822:	3a01      	subs	r2, #1
    3824:	428b      	cmp	r3, r1
    3826:	d02d      	beq.n	3884 <memchr+0x74>
    3828:	f010 0f07 	tst.w	r0, #7
    382c:	b342      	cbz	r2, 3880 <memchr+0x70>
    382e:	d1f6      	bne.n	381e <memchr+0xe>
    3830:	b4f0      	push	{r4, r5, r6, r7}
    3832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    383a:	f022 0407 	bic.w	r4, r2, #7
    383e:	f07f 0700 	mvns.w	r7, #0
    3842:	2300      	movs	r3, #0
    3844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3848:	3c08      	subs	r4, #8
    384a:	ea85 0501 	eor.w	r5, r5, r1
    384e:	ea86 0601 	eor.w	r6, r6, r1
    3852:	fa85 f547 	uadd8	r5, r5, r7
    3856:	faa3 f587 	sel	r5, r3, r7
    385a:	fa86 f647 	uadd8	r6, r6, r7
    385e:	faa5 f687 	sel	r6, r5, r7
    3862:	b98e      	cbnz	r6, 3888 <memchr+0x78>
    3864:	d1ee      	bne.n	3844 <memchr+0x34>
    3866:	bcf0      	pop	{r4, r5, r6, r7}
    3868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    386c:	f002 0207 	and.w	r2, r2, #7
    3870:	b132      	cbz	r2, 3880 <memchr+0x70>
    3872:	f810 3b01 	ldrb.w	r3, [r0], #1
    3876:	3a01      	subs	r2, #1
    3878:	ea83 0301 	eor.w	r3, r3, r1
    387c:	b113      	cbz	r3, 3884 <memchr+0x74>
    387e:	d1f8      	bne.n	3872 <memchr+0x62>
    3880:	2000      	movs	r0, #0
    3882:	4770      	bx	lr
    3884:	3801      	subs	r0, #1
    3886:	4770      	bx	lr
    3888:	2d00      	cmp	r5, #0
    388a:	bf06      	itte	eq
    388c:	4635      	moveq	r5, r6
    388e:	3803      	subeq	r0, #3
    3890:	3807      	subne	r0, #7
    3892:	f015 0f01 	tst.w	r5, #1
    3896:	d107      	bne.n	38a8 <memchr+0x98>
    3898:	3001      	adds	r0, #1
    389a:	f415 7f80 	tst.w	r5, #256	; 0x100
    389e:	bf02      	ittt	eq
    38a0:	3001      	addeq	r0, #1
    38a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    38a6:	3001      	addeq	r0, #1
    38a8:	bcf0      	pop	{r4, r5, r6, r7}
    38aa:	3801      	subs	r0, #1
    38ac:	4770      	bx	lr
    38ae:	bf00      	nop

000038b0 <_Balloc>:
    38b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    38b2:	b570      	push	{r4, r5, r6, lr}
    38b4:	4605      	mov	r5, r0
    38b6:	460c      	mov	r4, r1
    38b8:	b14b      	cbz	r3, 38ce <_Balloc+0x1e>
    38ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    38be:	b180      	cbz	r0, 38e2 <_Balloc+0x32>
    38c0:	6802      	ldr	r2, [r0, #0]
    38c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    38c6:	2300      	movs	r3, #0
    38c8:	6103      	str	r3, [r0, #16]
    38ca:	60c3      	str	r3, [r0, #12]
    38cc:	bd70      	pop	{r4, r5, r6, pc}
    38ce:	2221      	movs	r2, #33	; 0x21
    38d0:	2104      	movs	r1, #4
    38d2:	f000 fb2f 	bl	3f34 <_calloc_r>
    38d6:	64e8      	str	r0, [r5, #76]	; 0x4c
    38d8:	4603      	mov	r3, r0
    38da:	2800      	cmp	r0, #0
    38dc:	d1ed      	bne.n	38ba <_Balloc+0xa>
    38de:	2000      	movs	r0, #0
    38e0:	bd70      	pop	{r4, r5, r6, pc}
    38e2:	2101      	movs	r1, #1
    38e4:	fa01 f604 	lsl.w	r6, r1, r4
    38e8:	1d72      	adds	r2, r6, #5
    38ea:	4628      	mov	r0, r5
    38ec:	0092      	lsls	r2, r2, #2
    38ee:	f000 fb21 	bl	3f34 <_calloc_r>
    38f2:	2800      	cmp	r0, #0
    38f4:	d0f3      	beq.n	38de <_Balloc+0x2e>
    38f6:	6044      	str	r4, [r0, #4]
    38f8:	6086      	str	r6, [r0, #8]
    38fa:	e7e4      	b.n	38c6 <_Balloc+0x16>

000038fc <_Bfree>:
    38fc:	b131      	cbz	r1, 390c <_Bfree+0x10>
    38fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3900:	684a      	ldr	r2, [r1, #4]
    3902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3906:	6008      	str	r0, [r1, #0]
    3908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    390c:	4770      	bx	lr
    390e:	bf00      	nop

00003910 <__multadd>:
    3910:	b5f0      	push	{r4, r5, r6, r7, lr}
    3912:	690c      	ldr	r4, [r1, #16]
    3914:	b083      	sub	sp, #12
    3916:	460d      	mov	r5, r1
    3918:	4606      	mov	r6, r0
    391a:	f101 0e14 	add.w	lr, r1, #20
    391e:	2700      	movs	r7, #0
    3920:	f8de 0000 	ldr.w	r0, [lr]
    3924:	b281      	uxth	r1, r0
    3926:	fb02 3101 	mla	r1, r2, r1, r3
    392a:	0c0b      	lsrs	r3, r1, #16
    392c:	0c00      	lsrs	r0, r0, #16
    392e:	fb02 3300 	mla	r3, r2, r0, r3
    3932:	b289      	uxth	r1, r1
    3934:	3701      	adds	r7, #1
    3936:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    393a:	42bc      	cmp	r4, r7
    393c:	f84e 1b04 	str.w	r1, [lr], #4
    3940:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3944:	dcec      	bgt.n	3920 <__multadd+0x10>
    3946:	b13b      	cbz	r3, 3958 <__multadd+0x48>
    3948:	68aa      	ldr	r2, [r5, #8]
    394a:	4294      	cmp	r4, r2
    394c:	da07      	bge.n	395e <__multadd+0x4e>
    394e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    3952:	3401      	adds	r4, #1
    3954:	6153      	str	r3, [r2, #20]
    3956:	612c      	str	r4, [r5, #16]
    3958:	4628      	mov	r0, r5
    395a:	b003      	add	sp, #12
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395e:	6869      	ldr	r1, [r5, #4]
    3960:	9301      	str	r3, [sp, #4]
    3962:	3101      	adds	r1, #1
    3964:	4630      	mov	r0, r6
    3966:	f7ff ffa3 	bl	38b0 <_Balloc>
    396a:	692a      	ldr	r2, [r5, #16]
    396c:	3202      	adds	r2, #2
    396e:	f105 010c 	add.w	r1, r5, #12
    3972:	4607      	mov	r7, r0
    3974:	0092      	lsls	r2, r2, #2
    3976:	300c      	adds	r0, #12
    3978:	f7ff f916 	bl	2ba8 <memcpy>
    397c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    397e:	6869      	ldr	r1, [r5, #4]
    3980:	9b01      	ldr	r3, [sp, #4]
    3982:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    3986:	6028      	str	r0, [r5, #0]
    3988:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    398c:	463d      	mov	r5, r7
    398e:	e7de      	b.n	394e <__multadd+0x3e>

00003990 <__hi0bits>:
    3990:	0c03      	lsrs	r3, r0, #16
    3992:	041b      	lsls	r3, r3, #16
    3994:	b9b3      	cbnz	r3, 39c4 <__hi0bits+0x34>
    3996:	0400      	lsls	r0, r0, #16
    3998:	2310      	movs	r3, #16
    399a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    399e:	bf04      	itt	eq
    39a0:	0200      	lsleq	r0, r0, #8
    39a2:	3308      	addeq	r3, #8
    39a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    39a8:	bf04      	itt	eq
    39aa:	0100      	lsleq	r0, r0, #4
    39ac:	3304      	addeq	r3, #4
    39ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    39b2:	bf04      	itt	eq
    39b4:	0080      	lsleq	r0, r0, #2
    39b6:	3302      	addeq	r3, #2
    39b8:	2800      	cmp	r0, #0
    39ba:	db07      	blt.n	39cc <__hi0bits+0x3c>
    39bc:	0042      	lsls	r2, r0, #1
    39be:	d403      	bmi.n	39c8 <__hi0bits+0x38>
    39c0:	2020      	movs	r0, #32
    39c2:	4770      	bx	lr
    39c4:	2300      	movs	r3, #0
    39c6:	e7e8      	b.n	399a <__hi0bits+0xa>
    39c8:	1c58      	adds	r0, r3, #1
    39ca:	4770      	bx	lr
    39cc:	4618      	mov	r0, r3
    39ce:	4770      	bx	lr

000039d0 <__lo0bits>:
    39d0:	6803      	ldr	r3, [r0, #0]
    39d2:	f013 0207 	ands.w	r2, r3, #7
    39d6:	d007      	beq.n	39e8 <__lo0bits+0x18>
    39d8:	07d9      	lsls	r1, r3, #31
    39da:	d420      	bmi.n	3a1e <__lo0bits+0x4e>
    39dc:	079a      	lsls	r2, r3, #30
    39de:	d420      	bmi.n	3a22 <__lo0bits+0x52>
    39e0:	089b      	lsrs	r3, r3, #2
    39e2:	6003      	str	r3, [r0, #0]
    39e4:	2002      	movs	r0, #2
    39e6:	4770      	bx	lr
    39e8:	b299      	uxth	r1, r3
    39ea:	b909      	cbnz	r1, 39f0 <__lo0bits+0x20>
    39ec:	0c1b      	lsrs	r3, r3, #16
    39ee:	2210      	movs	r2, #16
    39f0:	f013 0fff 	tst.w	r3, #255	; 0xff
    39f4:	bf04      	itt	eq
    39f6:	0a1b      	lsreq	r3, r3, #8
    39f8:	3208      	addeq	r2, #8
    39fa:	0719      	lsls	r1, r3, #28
    39fc:	bf04      	itt	eq
    39fe:	091b      	lsreq	r3, r3, #4
    3a00:	3204      	addeq	r2, #4
    3a02:	0799      	lsls	r1, r3, #30
    3a04:	bf04      	itt	eq
    3a06:	089b      	lsreq	r3, r3, #2
    3a08:	3202      	addeq	r2, #2
    3a0a:	07d9      	lsls	r1, r3, #31
    3a0c:	d404      	bmi.n	3a18 <__lo0bits+0x48>
    3a0e:	085b      	lsrs	r3, r3, #1
    3a10:	d101      	bne.n	3a16 <__lo0bits+0x46>
    3a12:	2020      	movs	r0, #32
    3a14:	4770      	bx	lr
    3a16:	3201      	adds	r2, #1
    3a18:	6003      	str	r3, [r0, #0]
    3a1a:	4610      	mov	r0, r2
    3a1c:	4770      	bx	lr
    3a1e:	2000      	movs	r0, #0
    3a20:	4770      	bx	lr
    3a22:	085b      	lsrs	r3, r3, #1
    3a24:	6003      	str	r3, [r0, #0]
    3a26:	2001      	movs	r0, #1
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop

00003a2c <__i2b>:
    3a2c:	b510      	push	{r4, lr}
    3a2e:	460c      	mov	r4, r1
    3a30:	2101      	movs	r1, #1
    3a32:	f7ff ff3d 	bl	38b0 <_Balloc>
    3a36:	2201      	movs	r2, #1
    3a38:	6144      	str	r4, [r0, #20]
    3a3a:	6102      	str	r2, [r0, #16]
    3a3c:	bd10      	pop	{r4, pc}
    3a3e:	bf00      	nop

00003a40 <__multiply>:
    3a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a44:	690d      	ldr	r5, [r1, #16]
    3a46:	6917      	ldr	r7, [r2, #16]
    3a48:	42bd      	cmp	r5, r7
    3a4a:	b083      	sub	sp, #12
    3a4c:	460c      	mov	r4, r1
    3a4e:	4616      	mov	r6, r2
    3a50:	da04      	bge.n	3a5c <__multiply+0x1c>
    3a52:	462a      	mov	r2, r5
    3a54:	4634      	mov	r4, r6
    3a56:	463d      	mov	r5, r7
    3a58:	460e      	mov	r6, r1
    3a5a:	4617      	mov	r7, r2
    3a5c:	68a3      	ldr	r3, [r4, #8]
    3a5e:	6861      	ldr	r1, [r4, #4]
    3a60:	eb05 0807 	add.w	r8, r5, r7
    3a64:	4598      	cmp	r8, r3
    3a66:	bfc8      	it	gt
    3a68:	3101      	addgt	r1, #1
    3a6a:	f7ff ff21 	bl	38b0 <_Balloc>
    3a6e:	f100 0c14 	add.w	ip, r0, #20
    3a72:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    3a76:	45cc      	cmp	ip, r9
    3a78:	9000      	str	r0, [sp, #0]
    3a7a:	d205      	bcs.n	3a88 <__multiply+0x48>
    3a7c:	4663      	mov	r3, ip
    3a7e:	2100      	movs	r1, #0
    3a80:	f843 1b04 	str.w	r1, [r3], #4
    3a84:	4599      	cmp	r9, r3
    3a86:	d8fb      	bhi.n	3a80 <__multiply+0x40>
    3a88:	f106 0214 	add.w	r2, r6, #20
    3a8c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    3a90:	f104 0314 	add.w	r3, r4, #20
    3a94:	4552      	cmp	r2, sl
    3a96:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    3a9a:	d254      	bcs.n	3b46 <__multiply+0x106>
    3a9c:	f8cd 9004 	str.w	r9, [sp, #4]
    3aa0:	4699      	mov	r9, r3
    3aa2:	f852 3b04 	ldr.w	r3, [r2], #4
    3aa6:	fa1f fb83 	uxth.w	fp, r3
    3aaa:	f1bb 0f00 	cmp.w	fp, #0
    3aae:	d020      	beq.n	3af2 <__multiply+0xb2>
    3ab0:	2000      	movs	r0, #0
    3ab2:	464f      	mov	r7, r9
    3ab4:	4666      	mov	r6, ip
    3ab6:	4605      	mov	r5, r0
    3ab8:	e000      	b.n	3abc <__multiply+0x7c>
    3aba:	461e      	mov	r6, r3
    3abc:	f857 4b04 	ldr.w	r4, [r7], #4
    3ac0:	6830      	ldr	r0, [r6, #0]
    3ac2:	b2a1      	uxth	r1, r4
    3ac4:	b283      	uxth	r3, r0
    3ac6:	fb0b 3101 	mla	r1, fp, r1, r3
    3aca:	0c24      	lsrs	r4, r4, #16
    3acc:	0c00      	lsrs	r0, r0, #16
    3ace:	194b      	adds	r3, r1, r5
    3ad0:	fb0b 0004 	mla	r0, fp, r4, r0
    3ad4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    3ad8:	b299      	uxth	r1, r3
    3ada:	4633      	mov	r3, r6
    3adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    3ae0:	45be      	cmp	lr, r7
    3ae2:	ea4f 4510 	mov.w	r5, r0, lsr #16
    3ae6:	f843 1b04 	str.w	r1, [r3], #4
    3aea:	d8e6      	bhi.n	3aba <__multiply+0x7a>
    3aec:	6075      	str	r5, [r6, #4]
    3aee:	f852 3c04 	ldr.w	r3, [r2, #-4]
    3af2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    3af6:	d020      	beq.n	3b3a <__multiply+0xfa>
    3af8:	f8dc 3000 	ldr.w	r3, [ip]
    3afc:	4667      	mov	r7, ip
    3afe:	4618      	mov	r0, r3
    3b00:	464d      	mov	r5, r9
    3b02:	2100      	movs	r1, #0
    3b04:	e000      	b.n	3b08 <__multiply+0xc8>
    3b06:	4637      	mov	r7, r6
    3b08:	882c      	ldrh	r4, [r5, #0]
    3b0a:	0c00      	lsrs	r0, r0, #16
    3b0c:	fb0b 0004 	mla	r0, fp, r4, r0
    3b10:	4401      	add	r1, r0
    3b12:	b29c      	uxth	r4, r3
    3b14:	463e      	mov	r6, r7
    3b16:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    3b1a:	f846 3b04 	str.w	r3, [r6], #4
    3b1e:	6878      	ldr	r0, [r7, #4]
    3b20:	f855 4b04 	ldr.w	r4, [r5], #4
    3b24:	b283      	uxth	r3, r0
    3b26:	0c24      	lsrs	r4, r4, #16
    3b28:	fb0b 3404 	mla	r4, fp, r4, r3
    3b2c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    3b30:	45ae      	cmp	lr, r5
    3b32:	ea4f 4113 	mov.w	r1, r3, lsr #16
    3b36:	d8e6      	bhi.n	3b06 <__multiply+0xc6>
    3b38:	607b      	str	r3, [r7, #4]
    3b3a:	4592      	cmp	sl, r2
    3b3c:	f10c 0c04 	add.w	ip, ip, #4
    3b40:	d8af      	bhi.n	3aa2 <__multiply+0x62>
    3b42:	f8dd 9004 	ldr.w	r9, [sp, #4]
    3b46:	f1b8 0f00 	cmp.w	r8, #0
    3b4a:	dd0b      	ble.n	3b64 <__multiply+0x124>
    3b4c:	f859 3c04 	ldr.w	r3, [r9, #-4]
    3b50:	f1a9 0904 	sub.w	r9, r9, #4
    3b54:	b11b      	cbz	r3, 3b5e <__multiply+0x11e>
    3b56:	e005      	b.n	3b64 <__multiply+0x124>
    3b58:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    3b5c:	b913      	cbnz	r3, 3b64 <__multiply+0x124>
    3b5e:	f1b8 0801 	subs.w	r8, r8, #1
    3b62:	d1f9      	bne.n	3b58 <__multiply+0x118>
    3b64:	9800      	ldr	r0, [sp, #0]
    3b66:	f8c0 8010 	str.w	r8, [r0, #16]
    3b6a:	b003      	add	sp, #12
    3b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003b70 <__pow5mult>:
    3b70:	f012 0303 	ands.w	r3, r2, #3
    3b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b78:	4614      	mov	r4, r2
    3b7a:	4607      	mov	r7, r0
    3b7c:	d12e      	bne.n	3bdc <__pow5mult+0x6c>
    3b7e:	460e      	mov	r6, r1
    3b80:	10a4      	asrs	r4, r4, #2
    3b82:	d01c      	beq.n	3bbe <__pow5mult+0x4e>
    3b84:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    3b86:	b395      	cbz	r5, 3bee <__pow5mult+0x7e>
    3b88:	07e3      	lsls	r3, r4, #31
    3b8a:	f04f 0800 	mov.w	r8, #0
    3b8e:	d406      	bmi.n	3b9e <__pow5mult+0x2e>
    3b90:	1064      	asrs	r4, r4, #1
    3b92:	d014      	beq.n	3bbe <__pow5mult+0x4e>
    3b94:	6828      	ldr	r0, [r5, #0]
    3b96:	b1a8      	cbz	r0, 3bc4 <__pow5mult+0x54>
    3b98:	4605      	mov	r5, r0
    3b9a:	07e3      	lsls	r3, r4, #31
    3b9c:	d5f8      	bpl.n	3b90 <__pow5mult+0x20>
    3b9e:	462a      	mov	r2, r5
    3ba0:	4631      	mov	r1, r6
    3ba2:	4638      	mov	r0, r7
    3ba4:	f7ff ff4c 	bl	3a40 <__multiply>
    3ba8:	b1b6      	cbz	r6, 3bd8 <__pow5mult+0x68>
    3baa:	6872      	ldr	r2, [r6, #4]
    3bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bae:	1064      	asrs	r4, r4, #1
    3bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3bb4:	6031      	str	r1, [r6, #0]
    3bb6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    3bba:	4606      	mov	r6, r0
    3bbc:	d1ea      	bne.n	3b94 <__pow5mult+0x24>
    3bbe:	4630      	mov	r0, r6
    3bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc4:	462a      	mov	r2, r5
    3bc6:	4629      	mov	r1, r5
    3bc8:	4638      	mov	r0, r7
    3bca:	f7ff ff39 	bl	3a40 <__multiply>
    3bce:	6028      	str	r0, [r5, #0]
    3bd0:	f8c0 8000 	str.w	r8, [r0]
    3bd4:	4605      	mov	r5, r0
    3bd6:	e7e0      	b.n	3b9a <__pow5mult+0x2a>
    3bd8:	4606      	mov	r6, r0
    3bda:	e7d9      	b.n	3b90 <__pow5mult+0x20>
    3bdc:	1e5a      	subs	r2, r3, #1
    3bde:	4d0b      	ldr	r5, [pc, #44]	; (3c0c <__pow5mult+0x9c>)
    3be0:	2300      	movs	r3, #0
    3be2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3be6:	f7ff fe93 	bl	3910 <__multadd>
    3bea:	4606      	mov	r6, r0
    3bec:	e7c8      	b.n	3b80 <__pow5mult+0x10>
    3bee:	2101      	movs	r1, #1
    3bf0:	4638      	mov	r0, r7
    3bf2:	f7ff fe5d 	bl	38b0 <_Balloc>
    3bf6:	f240 2171 	movw	r1, #625	; 0x271
    3bfa:	2201      	movs	r2, #1
    3bfc:	2300      	movs	r3, #0
    3bfe:	6141      	str	r1, [r0, #20]
    3c00:	6102      	str	r2, [r0, #16]
    3c02:	4605      	mov	r5, r0
    3c04:	64b8      	str	r0, [r7, #72]	; 0x48
    3c06:	6003      	str	r3, [r0, #0]
    3c08:	e7be      	b.n	3b88 <__pow5mult+0x18>
    3c0a:	bf00      	nop
    3c0c:	20000820 	.word	0x20000820

00003c10 <__lshift>:
    3c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c14:	4691      	mov	r9, r2
    3c16:	690a      	ldr	r2, [r1, #16]
    3c18:	688b      	ldr	r3, [r1, #8]
    3c1a:	ea4f 1469 	mov.w	r4, r9, asr #5
    3c1e:	eb04 0802 	add.w	r8, r4, r2
    3c22:	f108 0501 	add.w	r5, r8, #1
    3c26:	429d      	cmp	r5, r3
    3c28:	460e      	mov	r6, r1
    3c2a:	4682      	mov	sl, r0
    3c2c:	6849      	ldr	r1, [r1, #4]
    3c2e:	dd04      	ble.n	3c3a <__lshift+0x2a>
    3c30:	005b      	lsls	r3, r3, #1
    3c32:	429d      	cmp	r5, r3
    3c34:	f101 0101 	add.w	r1, r1, #1
    3c38:	dcfa      	bgt.n	3c30 <__lshift+0x20>
    3c3a:	4650      	mov	r0, sl
    3c3c:	f7ff fe38 	bl	38b0 <_Balloc>
    3c40:	2c00      	cmp	r4, #0
    3c42:	f100 0214 	add.w	r2, r0, #20
    3c46:	dd38      	ble.n	3cba <__lshift+0xaa>
    3c48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    3c4c:	2100      	movs	r1, #0
    3c4e:	f842 1b04 	str.w	r1, [r2], #4
    3c52:	4293      	cmp	r3, r2
    3c54:	d1fb      	bne.n	3c4e <__lshift+0x3e>
    3c56:	6934      	ldr	r4, [r6, #16]
    3c58:	f106 0114 	add.w	r1, r6, #20
    3c5c:	f019 091f 	ands.w	r9, r9, #31
    3c60:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    3c64:	d021      	beq.n	3caa <__lshift+0x9a>
    3c66:	f1c9 0220 	rsb	r2, r9, #32
    3c6a:	2400      	movs	r4, #0
    3c6c:	680f      	ldr	r7, [r1, #0]
    3c6e:	fa07 fc09 	lsl.w	ip, r7, r9
    3c72:	ea4c 0404 	orr.w	r4, ip, r4
    3c76:	469c      	mov	ip, r3
    3c78:	f843 4b04 	str.w	r4, [r3], #4
    3c7c:	f851 4b04 	ldr.w	r4, [r1], #4
    3c80:	458e      	cmp	lr, r1
    3c82:	fa24 f402 	lsr.w	r4, r4, r2
    3c86:	d8f1      	bhi.n	3c6c <__lshift+0x5c>
    3c88:	f8cc 4004 	str.w	r4, [ip, #4]
    3c8c:	b10c      	cbz	r4, 3c92 <__lshift+0x82>
    3c8e:	f108 0502 	add.w	r5, r8, #2
    3c92:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    3c96:	6872      	ldr	r2, [r6, #4]
    3c98:	3d01      	subs	r5, #1
    3c9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3c9e:	6105      	str	r5, [r0, #16]
    3ca0:	6031      	str	r1, [r6, #0]
    3ca2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    3ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3caa:	3b04      	subs	r3, #4
    3cac:	f851 2b04 	ldr.w	r2, [r1], #4
    3cb0:	f843 2f04 	str.w	r2, [r3, #4]!
    3cb4:	458e      	cmp	lr, r1
    3cb6:	d8f9      	bhi.n	3cac <__lshift+0x9c>
    3cb8:	e7eb      	b.n	3c92 <__lshift+0x82>
    3cba:	4613      	mov	r3, r2
    3cbc:	e7cb      	b.n	3c56 <__lshift+0x46>
    3cbe:	bf00      	nop

00003cc0 <__mcmp>:
    3cc0:	6902      	ldr	r2, [r0, #16]
    3cc2:	690b      	ldr	r3, [r1, #16]
    3cc4:	1ad2      	subs	r2, r2, r3
    3cc6:	d113      	bne.n	3cf0 <__mcmp+0x30>
    3cc8:	009b      	lsls	r3, r3, #2
    3cca:	3014      	adds	r0, #20
    3ccc:	3114      	adds	r1, #20
    3cce:	4419      	add	r1, r3
    3cd0:	b410      	push	{r4}
    3cd2:	4403      	add	r3, r0
    3cd4:	e001      	b.n	3cda <__mcmp+0x1a>
    3cd6:	4298      	cmp	r0, r3
    3cd8:	d20c      	bcs.n	3cf4 <__mcmp+0x34>
    3cda:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    3cde:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    3ce2:	4294      	cmp	r4, r2
    3ce4:	d0f7      	beq.n	3cd6 <__mcmp+0x16>
    3ce6:	d309      	bcc.n	3cfc <__mcmp+0x3c>
    3ce8:	2001      	movs	r0, #1
    3cea:	f85d 4b04 	ldr.w	r4, [sp], #4
    3cee:	4770      	bx	lr
    3cf0:	4610      	mov	r0, r2
    3cf2:	4770      	bx	lr
    3cf4:	2000      	movs	r0, #0
    3cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
    3cfa:	4770      	bx	lr
    3cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d00:	e7f3      	b.n	3cea <__mcmp+0x2a>
    3d02:	bf00      	nop

00003d04 <__mdiff>:
    3d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d08:	690b      	ldr	r3, [r1, #16]
    3d0a:	460f      	mov	r7, r1
    3d0c:	6911      	ldr	r1, [r2, #16]
    3d0e:	1a5b      	subs	r3, r3, r1
    3d10:	2b00      	cmp	r3, #0
    3d12:	4690      	mov	r8, r2
    3d14:	d117      	bne.n	3d46 <__mdiff+0x42>
    3d16:	0089      	lsls	r1, r1, #2
    3d18:	f107 0214 	add.w	r2, r7, #20
    3d1c:	f108 0514 	add.w	r5, r8, #20
    3d20:	1853      	adds	r3, r2, r1
    3d22:	4429      	add	r1, r5
    3d24:	e001      	b.n	3d2a <__mdiff+0x26>
    3d26:	429a      	cmp	r2, r3
    3d28:	d25e      	bcs.n	3de8 <__mdiff+0xe4>
    3d2a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    3d2e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    3d32:	42a6      	cmp	r6, r4
    3d34:	d0f7      	beq.n	3d26 <__mdiff+0x22>
    3d36:	d260      	bcs.n	3dfa <__mdiff+0xf6>
    3d38:	463b      	mov	r3, r7
    3d3a:	4614      	mov	r4, r2
    3d3c:	4647      	mov	r7, r8
    3d3e:	f04f 0901 	mov.w	r9, #1
    3d42:	4698      	mov	r8, r3
    3d44:	e006      	b.n	3d54 <__mdiff+0x50>
    3d46:	db5d      	blt.n	3e04 <__mdiff+0x100>
    3d48:	f107 0514 	add.w	r5, r7, #20
    3d4c:	f102 0414 	add.w	r4, r2, #20
    3d50:	f04f 0900 	mov.w	r9, #0
    3d54:	6879      	ldr	r1, [r7, #4]
    3d56:	f7ff fdab 	bl	38b0 <_Balloc>
    3d5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    3d5e:	693e      	ldr	r6, [r7, #16]
    3d60:	f8c0 900c 	str.w	r9, [r0, #12]
    3d64:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    3d68:	46a6      	mov	lr, r4
    3d6a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    3d6e:	f100 0414 	add.w	r4, r0, #20
    3d72:	2300      	movs	r3, #0
    3d74:	f85e 1b04 	ldr.w	r1, [lr], #4
    3d78:	f855 8b04 	ldr.w	r8, [r5], #4
    3d7c:	b28a      	uxth	r2, r1
    3d7e:	fa13 f388 	uxtah	r3, r3, r8
    3d82:	0c09      	lsrs	r1, r1, #16
    3d84:	1a9a      	subs	r2, r3, r2
    3d86:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    3d8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    3d8e:	b292      	uxth	r2, r2
    3d90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3d94:	45f4      	cmp	ip, lr
    3d96:	f844 2b04 	str.w	r2, [r4], #4
    3d9a:	ea4f 4323 	mov.w	r3, r3, asr #16
    3d9e:	d8e9      	bhi.n	3d74 <__mdiff+0x70>
    3da0:	42af      	cmp	r7, r5
    3da2:	d917      	bls.n	3dd4 <__mdiff+0xd0>
    3da4:	46a4      	mov	ip, r4
    3da6:	4629      	mov	r1, r5
    3da8:	f851 eb04 	ldr.w	lr, [r1], #4
    3dac:	fa13 f28e 	uxtah	r2, r3, lr
    3db0:	1413      	asrs	r3, r2, #16
    3db2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    3db6:	b292      	uxth	r2, r2
    3db8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3dbc:	428f      	cmp	r7, r1
    3dbe:	f84c 2b04 	str.w	r2, [ip], #4
    3dc2:	ea4f 4323 	mov.w	r3, r3, asr #16
    3dc6:	d8ef      	bhi.n	3da8 <__mdiff+0xa4>
    3dc8:	43ed      	mvns	r5, r5
    3dca:	443d      	add	r5, r7
    3dcc:	f025 0503 	bic.w	r5, r5, #3
    3dd0:	3504      	adds	r5, #4
    3dd2:	442c      	add	r4, r5
    3dd4:	3c04      	subs	r4, #4
    3dd6:	b922      	cbnz	r2, 3de2 <__mdiff+0xde>
    3dd8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    3ddc:	3e01      	subs	r6, #1
    3dde:	2b00      	cmp	r3, #0
    3de0:	d0fa      	beq.n	3dd8 <__mdiff+0xd4>
    3de2:	6106      	str	r6, [r0, #16]
    3de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3de8:	2100      	movs	r1, #0
    3dea:	f7ff fd61 	bl	38b0 <_Balloc>
    3dee:	2201      	movs	r2, #1
    3df0:	2300      	movs	r3, #0
    3df2:	6102      	str	r2, [r0, #16]
    3df4:	6143      	str	r3, [r0, #20]
    3df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3dfa:	462c      	mov	r4, r5
    3dfc:	f04f 0900 	mov.w	r9, #0
    3e00:	4615      	mov	r5, r2
    3e02:	e7a7      	b.n	3d54 <__mdiff+0x50>
    3e04:	463b      	mov	r3, r7
    3e06:	f107 0414 	add.w	r4, r7, #20
    3e0a:	f108 0514 	add.w	r5, r8, #20
    3e0e:	4647      	mov	r7, r8
    3e10:	f04f 0901 	mov.w	r9, #1
    3e14:	4698      	mov	r8, r3
    3e16:	e79d      	b.n	3d54 <__mdiff+0x50>

00003e18 <__d2b>:
    3e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e1c:	ec57 6b10 	vmov	r6, r7, d0
    3e20:	b083      	sub	sp, #12
    3e22:	4688      	mov	r8, r1
    3e24:	2101      	movs	r1, #1
    3e26:	463c      	mov	r4, r7
    3e28:	f3c7 550a 	ubfx	r5, r7, #20, #11
    3e2c:	4617      	mov	r7, r2
    3e2e:	f7ff fd3f 	bl	38b0 <_Balloc>
    3e32:	f3c4 0413 	ubfx	r4, r4, #0, #20
    3e36:	4681      	mov	r9, r0
    3e38:	b10d      	cbz	r5, 3e3e <__d2b+0x26>
    3e3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    3e3e:	9401      	str	r4, [sp, #4]
    3e40:	b31e      	cbz	r6, 3e8a <__d2b+0x72>
    3e42:	a802      	add	r0, sp, #8
    3e44:	f840 6d08 	str.w	r6, [r0, #-8]!
    3e48:	f7ff fdc2 	bl	39d0 <__lo0bits>
    3e4c:	2800      	cmp	r0, #0
    3e4e:	d134      	bne.n	3eba <__d2b+0xa2>
    3e50:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3e54:	f8c9 2014 	str.w	r2, [r9, #20]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	bf0c      	ite	eq
    3e5c:	2101      	moveq	r1, #1
    3e5e:	2102      	movne	r1, #2
    3e60:	f8c9 3018 	str.w	r3, [r9, #24]
    3e64:	f8c9 1010 	str.w	r1, [r9, #16]
    3e68:	b9dd      	cbnz	r5, 3ea2 <__d2b+0x8a>
    3e6a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    3e6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    3e72:	f8c8 0000 	str.w	r0, [r8]
    3e76:	6918      	ldr	r0, [r3, #16]
    3e78:	f7ff fd8a 	bl	3990 <__hi0bits>
    3e7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    3e80:	6038      	str	r0, [r7, #0]
    3e82:	4648      	mov	r0, r9
    3e84:	b003      	add	sp, #12
    3e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e8a:	a801      	add	r0, sp, #4
    3e8c:	f7ff fda0 	bl	39d0 <__lo0bits>
    3e90:	9b01      	ldr	r3, [sp, #4]
    3e92:	f8c9 3014 	str.w	r3, [r9, #20]
    3e96:	2101      	movs	r1, #1
    3e98:	3020      	adds	r0, #32
    3e9a:	f8c9 1010 	str.w	r1, [r9, #16]
    3e9e:	2d00      	cmp	r5, #0
    3ea0:	d0e3      	beq.n	3e6a <__d2b+0x52>
    3ea2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    3ea6:	4405      	add	r5, r0
    3ea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    3eac:	f8c8 5000 	str.w	r5, [r8]
    3eb0:	6038      	str	r0, [r7, #0]
    3eb2:	4648      	mov	r0, r9
    3eb4:	b003      	add	sp, #12
    3eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3eba:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3ebe:	f1c0 0120 	rsb	r1, r0, #32
    3ec2:	fa03 f101 	lsl.w	r1, r3, r1
    3ec6:	430a      	orrs	r2, r1
    3ec8:	40c3      	lsrs	r3, r0
    3eca:	9301      	str	r3, [sp, #4]
    3ecc:	f8c9 2014 	str.w	r2, [r9, #20]
    3ed0:	e7c2      	b.n	3e58 <__d2b+0x40>
    3ed2:	bf00      	nop

00003ed4 <_vasnprintf_r>:
    3ed4:	b570      	push	{r4, r5, r6, lr}
    3ed6:	4615      	mov	r5, r2
    3ed8:	b09a      	sub	sp, #104	; 0x68
    3eda:	6814      	ldr	r4, [r2, #0]
    3edc:	b109      	cbz	r1, 3ee2 <_vasnprintf_r+0xe>
    3ede:	2c00      	cmp	r4, #0
    3ee0:	d11a      	bne.n	3f18 <_vasnprintf_r+0x44>
    3ee2:	2400      	movs	r4, #0
    3ee4:	f44f 7222 	mov.w	r2, #648	; 0x288
    3ee8:	f8ad 200c 	strh.w	r2, [sp, #12]
    3eec:	9400      	str	r4, [sp, #0]
    3eee:	9404      	str	r4, [sp, #16]
    3ef0:	461a      	mov	r2, r3
    3ef2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3ef6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3ef8:	9402      	str	r4, [sp, #8]
    3efa:	4669      	mov	r1, sp
    3efc:	9405      	str	r4, [sp, #20]
    3efe:	f8ad 600e 	strh.w	r6, [sp, #14]
    3f02:	f000 ff21 	bl	4d48 <_svfprintf_r>
    3f06:	2800      	cmp	r0, #0
    3f08:	db11      	blt.n	3f2e <_vasnprintf_r+0x5a>
    3f0a:	9b00      	ldr	r3, [sp, #0]
    3f0c:	6028      	str	r0, [r5, #0]
    3f0e:	2200      	movs	r2, #0
    3f10:	701a      	strb	r2, [r3, #0]
    3f12:	9804      	ldr	r0, [sp, #16]
    3f14:	b01a      	add	sp, #104	; 0x68
    3f16:	bd70      	pop	{r4, r5, r6, pc}
    3f18:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    3f1c:	9100      	str	r1, [sp, #0]
    3f1e:	9104      	str	r1, [sp, #16]
    3f20:	f8ad 200c 	strh.w	r2, [sp, #12]
    3f24:	dae4      	bge.n	3ef0 <_vasnprintf_r+0x1c>
    3f26:	238b      	movs	r3, #139	; 0x8b
    3f28:	6003      	str	r3, [r0, #0]
    3f2a:	2000      	movs	r0, #0
    3f2c:	e7f2      	b.n	3f14 <_vasnprintf_r+0x40>
    3f2e:	2000      	movs	r0, #0
    3f30:	e7f0      	b.n	3f14 <_vasnprintf_r+0x40>
    3f32:	bf00      	nop

00003f34 <_calloc_r>:
    3f34:	b510      	push	{r4, lr}
    3f36:	fb02 f101 	mul.w	r1, r2, r1
    3f3a:	f7fe fb67 	bl	260c <_malloc_r>
    3f3e:	4604      	mov	r4, r0
    3f40:	b1d8      	cbz	r0, 3f7a <_calloc_r+0x46>
    3f42:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3f46:	f022 0203 	bic.w	r2, r2, #3
    3f4a:	3a04      	subs	r2, #4
    3f4c:	2a24      	cmp	r2, #36	; 0x24
    3f4e:	d818      	bhi.n	3f82 <_calloc_r+0x4e>
    3f50:	2a13      	cmp	r2, #19
    3f52:	d914      	bls.n	3f7e <_calloc_r+0x4a>
    3f54:	2300      	movs	r3, #0
    3f56:	2a1b      	cmp	r2, #27
    3f58:	6003      	str	r3, [r0, #0]
    3f5a:	6043      	str	r3, [r0, #4]
    3f5c:	d916      	bls.n	3f8c <_calloc_r+0x58>
    3f5e:	2a24      	cmp	r2, #36	; 0x24
    3f60:	6083      	str	r3, [r0, #8]
    3f62:	60c3      	str	r3, [r0, #12]
    3f64:	bf11      	iteee	ne
    3f66:	f100 0210 	addne.w	r2, r0, #16
    3f6a:	6103      	streq	r3, [r0, #16]
    3f6c:	6143      	streq	r3, [r0, #20]
    3f6e:	f100 0218 	addeq.w	r2, r0, #24
    3f72:	2300      	movs	r3, #0
    3f74:	6013      	str	r3, [r2, #0]
    3f76:	6053      	str	r3, [r2, #4]
    3f78:	6093      	str	r3, [r2, #8]
    3f7a:	4620      	mov	r0, r4
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	4602      	mov	r2, r0
    3f80:	e7f7      	b.n	3f72 <_calloc_r+0x3e>
    3f82:	2100      	movs	r1, #0
    3f84:	f7fe ff0e 	bl	2da4 <memset>
    3f88:	4620      	mov	r0, r4
    3f8a:	bd10      	pop	{r4, pc}
    3f8c:	f100 0208 	add.w	r2, r0, #8
    3f90:	e7ef      	b.n	3f72 <_calloc_r+0x3e>
    3f92:	bf00      	nop

00003f94 <quorem>:
    3f94:	6902      	ldr	r2, [r0, #16]
    3f96:	690b      	ldr	r3, [r1, #16]
    3f98:	4293      	cmp	r3, r2
    3f9a:	f300 808d 	bgt.w	40b8 <quorem+0x124>
    3f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fa2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3fa6:	f101 0714 	add.w	r7, r1, #20
    3faa:	f100 0b14 	add.w	fp, r0, #20
    3fae:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    3fb2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    3fb6:	ea4f 0488 	mov.w	r4, r8, lsl #2
    3fba:	b083      	sub	sp, #12
    3fbc:	3201      	adds	r2, #1
    3fbe:	fbb3 f9f2 	udiv	r9, r3, r2
    3fc2:	eb0b 0304 	add.w	r3, fp, r4
    3fc6:	9400      	str	r4, [sp, #0]
    3fc8:	eb07 0a04 	add.w	sl, r7, r4
    3fcc:	9301      	str	r3, [sp, #4]
    3fce:	f1b9 0f00 	cmp.w	r9, #0
    3fd2:	d039      	beq.n	4048 <quorem+0xb4>
    3fd4:	2500      	movs	r5, #0
    3fd6:	46bc      	mov	ip, r7
    3fd8:	46de      	mov	lr, fp
    3fda:	462b      	mov	r3, r5
    3fdc:	f85c 6b04 	ldr.w	r6, [ip], #4
    3fe0:	f8de 2000 	ldr.w	r2, [lr]
    3fe4:	b2b4      	uxth	r4, r6
    3fe6:	fb09 5504 	mla	r5, r9, r4, r5
    3fea:	0c36      	lsrs	r6, r6, #16
    3fec:	0c2c      	lsrs	r4, r5, #16
    3fee:	fb09 4406 	mla	r4, r9, r6, r4
    3ff2:	b2ad      	uxth	r5, r5
    3ff4:	1b5b      	subs	r3, r3, r5
    3ff6:	b2a6      	uxth	r6, r4
    3ff8:	fa13 f382 	uxtah	r3, r3, r2
    3ffc:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    4000:	eb06 4623 	add.w	r6, r6, r3, asr #16
    4004:	b29b      	uxth	r3, r3
    4006:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    400a:	45e2      	cmp	sl, ip
    400c:	f84e 3b04 	str.w	r3, [lr], #4
    4010:	ea4f 4514 	mov.w	r5, r4, lsr #16
    4014:	ea4f 4326 	mov.w	r3, r6, asr #16
    4018:	d2e0      	bcs.n	3fdc <quorem+0x48>
    401a:	9b00      	ldr	r3, [sp, #0]
    401c:	f85b 3003 	ldr.w	r3, [fp, r3]
    4020:	b993      	cbnz	r3, 4048 <quorem+0xb4>
    4022:	9c01      	ldr	r4, [sp, #4]
    4024:	1f23      	subs	r3, r4, #4
    4026:	459b      	cmp	fp, r3
    4028:	d20c      	bcs.n	4044 <quorem+0xb0>
    402a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    402e:	b94b      	cbnz	r3, 4044 <quorem+0xb0>
    4030:	f1a4 0308 	sub.w	r3, r4, #8
    4034:	e002      	b.n	403c <quorem+0xa8>
    4036:	681a      	ldr	r2, [r3, #0]
    4038:	3b04      	subs	r3, #4
    403a:	b91a      	cbnz	r2, 4044 <quorem+0xb0>
    403c:	459b      	cmp	fp, r3
    403e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4042:	d3f8      	bcc.n	4036 <quorem+0xa2>
    4044:	f8c0 8010 	str.w	r8, [r0, #16]
    4048:	4604      	mov	r4, r0
    404a:	f7ff fe39 	bl	3cc0 <__mcmp>
    404e:	2800      	cmp	r0, #0
    4050:	db2e      	blt.n	40b0 <quorem+0x11c>
    4052:	f109 0901 	add.w	r9, r9, #1
    4056:	465d      	mov	r5, fp
    4058:	2300      	movs	r3, #0
    405a:	f857 1b04 	ldr.w	r1, [r7], #4
    405e:	6828      	ldr	r0, [r5, #0]
    4060:	b28a      	uxth	r2, r1
    4062:	1a9a      	subs	r2, r3, r2
    4064:	0c09      	lsrs	r1, r1, #16
    4066:	fa12 f280 	uxtah	r2, r2, r0
    406a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    406e:	eb03 4322 	add.w	r3, r3, r2, asr #16
    4072:	b291      	uxth	r1, r2
    4074:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4078:	45ba      	cmp	sl, r7
    407a:	f845 1b04 	str.w	r1, [r5], #4
    407e:	ea4f 4323 	mov.w	r3, r3, asr #16
    4082:	d2ea      	bcs.n	405a <quorem+0xc6>
    4084:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    4088:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    408c:	b982      	cbnz	r2, 40b0 <quorem+0x11c>
    408e:	1f1a      	subs	r2, r3, #4
    4090:	4593      	cmp	fp, r2
    4092:	d20b      	bcs.n	40ac <quorem+0x118>
    4094:	f853 2c04 	ldr.w	r2, [r3, #-4]
    4098:	b942      	cbnz	r2, 40ac <quorem+0x118>
    409a:	3b08      	subs	r3, #8
    409c:	e002      	b.n	40a4 <quorem+0x110>
    409e:	681a      	ldr	r2, [r3, #0]
    40a0:	3b04      	subs	r3, #4
    40a2:	b91a      	cbnz	r2, 40ac <quorem+0x118>
    40a4:	459b      	cmp	fp, r3
    40a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    40aa:	d3f8      	bcc.n	409e <quorem+0x10a>
    40ac:	f8c4 8010 	str.w	r8, [r4, #16]
    40b0:	4648      	mov	r0, r9
    40b2:	b003      	add	sp, #12
    40b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40b8:	2000      	movs	r0, #0
    40ba:	4770      	bx	lr
    40bc:	0000      	movs	r0, r0
	...

000040c0 <_dtoa_r>:
    40c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40c4:	ec57 6b10 	vmov	r6, r7, d0
    40c8:	b093      	sub	sp, #76	; 0x4c
    40ca:	6c05      	ldr	r5, [r0, #64]	; 0x40
    40cc:	9101      	str	r1, [sp, #4]
    40ce:	4604      	mov	r4, r0
    40d0:	4690      	mov	r8, r2
    40d2:	9304      	str	r3, [sp, #16]
    40d4:	ee10 aa10 	vmov	sl, s0
    40d8:	46bb      	mov	fp, r7
    40da:	b14d      	cbz	r5, 40f0 <_dtoa_r+0x30>
    40dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
    40de:	606a      	str	r2, [r5, #4]
    40e0:	2301      	movs	r3, #1
    40e2:	4093      	lsls	r3, r2
    40e4:	60ab      	str	r3, [r5, #8]
    40e6:	4629      	mov	r1, r5
    40e8:	f7ff fc08 	bl	38fc <_Bfree>
    40ec:	2300      	movs	r3, #0
    40ee:	6423      	str	r3, [r4, #64]	; 0x40
    40f0:	f1bb 0f00 	cmp.w	fp, #0
    40f4:	465e      	mov	r6, fp
    40f6:	db34      	blt.n	4162 <_dtoa_r+0xa2>
    40f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    40fa:	2300      	movs	r3, #0
    40fc:	6013      	str	r3, [r2, #0]
    40fe:	4bc4      	ldr	r3, [pc, #784]	; (4410 <_dtoa_r+0x350>)
    4100:	461a      	mov	r2, r3
    4102:	4033      	ands	r3, r6
    4104:	4293      	cmp	r3, r2
    4106:	d015      	beq.n	4134 <_dtoa_r+0x74>
    4108:	ec4b ab17 	vmov	d7, sl, fp
    410c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4114:	e9cd ab02 	strd	sl, fp, [sp, #8]
    4118:	d12a      	bne.n	4170 <_dtoa_r+0xb0>
    411a:	9a04      	ldr	r2, [sp, #16]
    411c:	2301      	movs	r3, #1
    411e:	6013      	str	r3, [r2, #0]
    4120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4122:	2b00      	cmp	r3, #0
    4124:	f000 80b7 	beq.w	4296 <_dtoa_r+0x1d6>
    4128:	48ba      	ldr	r0, [pc, #744]	; (4414 <_dtoa_r+0x354>)
    412a:	6018      	str	r0, [r3, #0]
    412c:	3801      	subs	r0, #1
    412e:	b013      	add	sp, #76	; 0x4c
    4130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4134:	9a04      	ldr	r2, [sp, #16]
    4136:	f242 730f 	movw	r3, #9999	; 0x270f
    413a:	6013      	str	r3, [r2, #0]
    413c:	f1ba 0f00 	cmp.w	sl, #0
    4140:	f000 8092 	beq.w	4268 <_dtoa_r+0x1a8>
    4144:	48b4      	ldr	r0, [pc, #720]	; (4418 <_dtoa_r+0x358>)
    4146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4148:	2b00      	cmp	r3, #0
    414a:	d0f0      	beq.n	412e <_dtoa_r+0x6e>
    414c:	78c3      	ldrb	r3, [r0, #3]
    414e:	2b00      	cmp	r3, #0
    4150:	f000 80a3 	beq.w	429a <_dtoa_r+0x1da>
    4154:	f100 0308 	add.w	r3, r0, #8
    4158:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    415a:	6013      	str	r3, [r2, #0]
    415c:	b013      	add	sp, #76	; 0x4c
    415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4162:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4164:	2301      	movs	r3, #1
    4166:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    416a:	6013      	str	r3, [r2, #0]
    416c:	46b3      	mov	fp, r6
    416e:	e7c6      	b.n	40fe <_dtoa_r+0x3e>
    4170:	a911      	add	r1, sp, #68	; 0x44
    4172:	aa10      	add	r2, sp, #64	; 0x40
    4174:	ed9d 0b02 	vldr	d0, [sp, #8]
    4178:	4620      	mov	r0, r4
    417a:	f7ff fe4d 	bl	3e18 <__d2b>
    417e:	0d31      	lsrs	r1, r6, #20
    4180:	9007      	str	r0, [sp, #28]
    4182:	d17a      	bne.n	427a <_dtoa_r+0x1ba>
    4184:	9810      	ldr	r0, [sp, #64]	; 0x40
    4186:	9911      	ldr	r1, [sp, #68]	; 0x44
    4188:	4401      	add	r1, r0
    418a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    418e:	2b20      	cmp	r3, #32
    4190:	f340 8241 	ble.w	4616 <_dtoa_r+0x556>
    4194:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    4198:	f201 4212 	addw	r2, r1, #1042	; 0x412
    419c:	409e      	lsls	r6, r3
    419e:	fa2a f302 	lsr.w	r3, sl, r2
    41a2:	4333      	orrs	r3, r6
    41a4:	ee07 3a90 	vmov	s15, r3
    41a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    41ac:	2501      	movs	r5, #1
    41ae:	ec53 2b17 	vmov	r2, r3, d7
    41b2:	3901      	subs	r1, #1
    41b4:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    41b8:	950a      	str	r5, [sp, #40]	; 0x28
    41ba:	ec43 2b17 	vmov	d7, r2, r3
    41be:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    41c2:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 43f8 <_dtoa_r+0x338>
    41c6:	ee37 6b46 	vsub.f64	d6, d7, d6
    41ca:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 4400 <_dtoa_r+0x340>
    41ce:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 4408 <_dtoa_r+0x348>
    41d2:	eea6 7b04 	vfma.f64	d7, d6, d4
    41d6:	ee06 1a90 	vmov	s13, r1
    41da:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    41de:	eea6 7b05 	vfma.f64	d7, d6, d5
    41e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    41e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    41ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41ee:	edcd 6a02 	vstr	s13, [sp, #8]
    41f2:	f100 811c 	bmi.w	442e <_dtoa_r+0x36e>
    41f6:	9d02      	ldr	r5, [sp, #8]
    41f8:	2d16      	cmp	r5, #22
    41fa:	f200 8115 	bhi.w	4428 <_dtoa_r+0x368>
    41fe:	4b87      	ldr	r3, [pc, #540]	; (441c <_dtoa_r+0x35c>)
    4200:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4204:	ed93 7b00 	vldr	d7, [r3]
    4208:	ec4b ab16 	vmov	d6, sl, fp
    420c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4214:	f340 8206 	ble.w	4624 <_dtoa_r+0x564>
    4218:	1e6b      	subs	r3, r5, #1
    421a:	9302      	str	r3, [sp, #8]
    421c:	2300      	movs	r3, #0
    421e:	930c      	str	r3, [sp, #48]	; 0x30
    4220:	1a41      	subs	r1, r0, r1
    4222:	f1b1 0901 	subs.w	r9, r1, #1
    4226:	f100 8117 	bmi.w	4458 <_dtoa_r+0x398>
    422a:	2300      	movs	r3, #0
    422c:	9306      	str	r3, [sp, #24]
    422e:	9b02      	ldr	r3, [sp, #8]
    4230:	2b00      	cmp	r3, #0
    4232:	f2c0 8108 	blt.w	4446 <_dtoa_r+0x386>
    4236:	4499      	add	r9, r3
    4238:	930b      	str	r3, [sp, #44]	; 0x2c
    423a:	2300      	movs	r3, #0
    423c:	9305      	str	r3, [sp, #20]
    423e:	9b01      	ldr	r3, [sp, #4]
    4240:	2b09      	cmp	r3, #9
    4242:	d82c      	bhi.n	429e <_dtoa_r+0x1de>
    4244:	2b05      	cmp	r3, #5
    4246:	f340 855f 	ble.w	4d08 <_dtoa_r+0xc48>
    424a:	3b04      	subs	r3, #4
    424c:	9301      	str	r3, [sp, #4]
    424e:	2300      	movs	r3, #0
    4250:	930e      	str	r3, [sp, #56]	; 0x38
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	3b02      	subs	r3, #2
    4256:	2b03      	cmp	r3, #3
    4258:	f200 855f 	bhi.w	4d1a <_dtoa_r+0xc5a>
    425c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4260:	01e502a9 	.word	0x01e502a9
    4264:	03c802b5 	.word	0x03c802b5
    4268:	4b6b      	ldr	r3, [pc, #428]	; (4418 <_dtoa_r+0x358>)
    426a:	4a6d      	ldr	r2, [pc, #436]	; (4420 <_dtoa_r+0x360>)
    426c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    4270:	2800      	cmp	r0, #0
    4272:	bf14      	ite	ne
    4274:	4618      	movne	r0, r3
    4276:	4610      	moveq	r0, r2
    4278:	e765      	b.n	4146 <_dtoa_r+0x86>
    427a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    427e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    4282:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    4286:	2500      	movs	r5, #0
    4288:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    428c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    4290:	9810      	ldr	r0, [sp, #64]	; 0x40
    4292:	950a      	str	r5, [sp, #40]	; 0x28
    4294:	e791      	b.n	41ba <_dtoa_r+0xfa>
    4296:	4863      	ldr	r0, [pc, #396]	; (4424 <_dtoa_r+0x364>)
    4298:	e749      	b.n	412e <_dtoa_r+0x6e>
    429a:	1cc3      	adds	r3, r0, #3
    429c:	e75c      	b.n	4158 <_dtoa_r+0x98>
    429e:	2100      	movs	r1, #0
    42a0:	6461      	str	r1, [r4, #68]	; 0x44
    42a2:	4620      	mov	r0, r4
    42a4:	4688      	mov	r8, r1
    42a6:	9101      	str	r1, [sp, #4]
    42a8:	f7ff fb02 	bl	38b0 <_Balloc>
    42ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    42b0:	2301      	movs	r3, #1
    42b2:	9008      	str	r0, [sp, #32]
    42b4:	6420      	str	r0, [r4, #64]	; 0x40
    42b6:	970d      	str	r7, [sp, #52]	; 0x34
    42b8:	9309      	str	r3, [sp, #36]	; 0x24
    42ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    42bc:	2b00      	cmp	r3, #0
    42be:	db7a      	blt.n	43b6 <_dtoa_r+0x2f6>
    42c0:	9a02      	ldr	r2, [sp, #8]
    42c2:	2a0e      	cmp	r2, #14
    42c4:	dc77      	bgt.n	43b6 <_dtoa_r+0x2f6>
    42c6:	4b55      	ldr	r3, [pc, #340]	; (441c <_dtoa_r+0x35c>)
    42c8:	f1b8 0f00 	cmp.w	r8, #0
    42cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    42d0:	ed93 4b00 	vldr	d4, [r3]
    42d4:	f2c0 8284 	blt.w	47e0 <_dtoa_r+0x720>
    42d8:	eeb1 2b44 	vneg.f64	d2, d4
    42dc:	ec4b ab17 	vmov	d7, sl, fp
    42e0:	ee87 6b04 	vdiv.f64	d6, d7, d4
    42e4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    42e8:	9a08      	ldr	r2, [sp, #32]
    42ea:	ee16 3a10 	vmov	r3, s12
    42ee:	2f01      	cmp	r7, #1
    42f0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    42f4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    42f8:	f102 0b01 	add.w	fp, r2, #1
    42fc:	7013      	strb	r3, [r2, #0]
    42fe:	eea2 7b05 	vfma.f64	d7, d2, d5
    4302:	d022      	beq.n	434a <_dtoa_r+0x28a>
    4304:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    4308:	ee27 7b03 	vmul.f64	d7, d7, d3
    430c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4314:	d03a      	beq.n	438c <_dtoa_r+0x2cc>
    4316:	9a08      	ldr	r2, [sp, #32]
    4318:	e006      	b.n	4328 <_dtoa_r+0x268>
    431a:	ee27 7b03 	vmul.f64	d7, d7, d3
    431e:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4326:	d031      	beq.n	438c <_dtoa_r+0x2cc>
    4328:	ee87 6b04 	vdiv.f64	d6, d7, d4
    432c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4330:	ee16 3a10 	vmov	r3, s12
    4334:	3330      	adds	r3, #48	; 0x30
    4336:	f80b 3b01 	strb.w	r3, [fp], #1
    433a:	ebc2 030b 	rsb	r3, r2, fp
    433e:	42bb      	cmp	r3, r7
    4340:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4344:	eea2 7b05 	vfma.f64	d7, d2, d5
    4348:	d1e7      	bne.n	431a <_dtoa_r+0x25a>
    434a:	ee37 7b07 	vadd.f64	d7, d7, d7
    434e:	eeb4 4bc7 	vcmpe.f64	d4, d7
    4352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4356:	d408      	bmi.n	436a <_dtoa_r+0x2aa>
    4358:	eeb4 4b47 	vcmp.f64	d4, d7
    435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4360:	d114      	bne.n	438c <_dtoa_r+0x2cc>
    4362:	ee16 3a10 	vmov	r3, s12
    4366:	07db      	lsls	r3, r3, #31
    4368:	d510      	bpl.n	438c <_dtoa_r+0x2cc>
    436a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    436e:	9a08      	ldr	r2, [sp, #32]
    4370:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    4374:	e004      	b.n	4380 <_dtoa_r+0x2c0>
    4376:	429a      	cmp	r2, r3
    4378:	f000 83e5 	beq.w	4b46 <_dtoa_r+0xa86>
    437c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    4380:	2839      	cmp	r0, #57	; 0x39
    4382:	f103 0b01 	add.w	fp, r3, #1
    4386:	d0f6      	beq.n	4376 <_dtoa_r+0x2b6>
    4388:	3001      	adds	r0, #1
    438a:	7018      	strb	r0, [r3, #0]
    438c:	9907      	ldr	r1, [sp, #28]
    438e:	4620      	mov	r0, r4
    4390:	f7ff fab4 	bl	38fc <_Bfree>
    4394:	2200      	movs	r2, #0
    4396:	9b02      	ldr	r3, [sp, #8]
    4398:	f88b 2000 	strb.w	r2, [fp]
    439c:	9a04      	ldr	r2, [sp, #16]
    439e:	3301      	adds	r3, #1
    43a0:	6013      	str	r3, [r2, #0]
    43a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    43a4:	2b00      	cmp	r3, #0
    43a6:	f000 8366 	beq.w	4a76 <_dtoa_r+0x9b6>
    43aa:	9808      	ldr	r0, [sp, #32]
    43ac:	f8c3 b000 	str.w	fp, [r3]
    43b0:	b013      	add	sp, #76	; 0x4c
    43b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43b8:	2a00      	cmp	r2, #0
    43ba:	d053      	beq.n	4464 <_dtoa_r+0x3a4>
    43bc:	9a01      	ldr	r2, [sp, #4]
    43be:	2a01      	cmp	r2, #1
    43c0:	f340 822e 	ble.w	4820 <_dtoa_r+0x760>
    43c4:	9905      	ldr	r1, [sp, #20]
    43c6:	1e7a      	subs	r2, r7, #1
    43c8:	4291      	cmp	r1, r2
    43ca:	f2c0 8357 	blt.w	4a7c <_dtoa_r+0x9bc>
    43ce:	1a8b      	subs	r3, r1, r2
    43d0:	930e      	str	r3, [sp, #56]	; 0x38
    43d2:	2f00      	cmp	r7, #0
    43d4:	9b06      	ldr	r3, [sp, #24]
    43d6:	f2c0 8424 	blt.w	4c22 <_dtoa_r+0xb62>
    43da:	930a      	str	r3, [sp, #40]	; 0x28
    43dc:	463b      	mov	r3, r7
    43de:	9a06      	ldr	r2, [sp, #24]
    43e0:	2101      	movs	r1, #1
    43e2:	441a      	add	r2, r3
    43e4:	4620      	mov	r0, r4
    43e6:	9206      	str	r2, [sp, #24]
    43e8:	4499      	add	r9, r3
    43ea:	f7ff fb1f 	bl	3a2c <__i2b>
    43ee:	4606      	mov	r6, r0
    43f0:	e03d      	b.n	446e <_dtoa_r+0x3ae>
    43f2:	bf00      	nop
    43f4:	f3af 8000 	nop.w
    43f8:	636f4361 	.word	0x636f4361
    43fc:	3fd287a7 	.word	0x3fd287a7
    4400:	8b60c8b3 	.word	0x8b60c8b3
    4404:	3fc68a28 	.word	0x3fc68a28
    4408:	509f79fb 	.word	0x509f79fb
    440c:	3fd34413 	.word	0x3fd34413
    4410:	7ff00000 	.word	0x7ff00000
    4414:	20000aa9 	.word	0x20000aa9
    4418:	20000aa4 	.word	0x20000aa4
    441c:	200002a8 	.word	0x200002a8
    4420:	20000a98 	.word	0x20000a98
    4424:	20000aa8 	.word	0x20000aa8
    4428:	2301      	movs	r3, #1
    442a:	930c      	str	r3, [sp, #48]	; 0x30
    442c:	e6f8      	b.n	4220 <_dtoa_r+0x160>
    442e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4432:	eeb4 7b46 	vcmp.f64	d7, d6
    4436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    443a:	f43f aedc 	beq.w	41f6 <_dtoa_r+0x136>
    443e:	9b02      	ldr	r3, [sp, #8]
    4440:	3b01      	subs	r3, #1
    4442:	9302      	str	r3, [sp, #8]
    4444:	e6d7      	b.n	41f6 <_dtoa_r+0x136>
    4446:	9a06      	ldr	r2, [sp, #24]
    4448:	9b02      	ldr	r3, [sp, #8]
    444a:	1ad2      	subs	r2, r2, r3
    444c:	425b      	negs	r3, r3
    444e:	9305      	str	r3, [sp, #20]
    4450:	2300      	movs	r3, #0
    4452:	9206      	str	r2, [sp, #24]
    4454:	930b      	str	r3, [sp, #44]	; 0x2c
    4456:	e6f2      	b.n	423e <_dtoa_r+0x17e>
    4458:	f1c9 0300 	rsb	r3, r9, #0
    445c:	9306      	str	r3, [sp, #24]
    445e:	f04f 0900 	mov.w	r9, #0
    4462:	e6e4      	b.n	422e <_dtoa_r+0x16e>
    4464:	9b05      	ldr	r3, [sp, #20]
    4466:	930e      	str	r3, [sp, #56]	; 0x38
    4468:	9e09      	ldr	r6, [sp, #36]	; 0x24
    446a:	9b06      	ldr	r3, [sp, #24]
    446c:	930a      	str	r3, [sp, #40]	; 0x28
    446e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4470:	460b      	mov	r3, r1
    4472:	b161      	cbz	r1, 448e <_dtoa_r+0x3ce>
    4474:	f1b9 0f00 	cmp.w	r9, #0
    4478:	dd09      	ble.n	448e <_dtoa_r+0x3ce>
    447a:	4549      	cmp	r1, r9
    447c:	9a06      	ldr	r2, [sp, #24]
    447e:	bfa8      	it	ge
    4480:	464b      	movge	r3, r9
    4482:	1ad2      	subs	r2, r2, r3
    4484:	9206      	str	r2, [sp, #24]
    4486:	1aca      	subs	r2, r1, r3
    4488:	920a      	str	r2, [sp, #40]	; 0x28
    448a:	ebc3 0909 	rsb	r9, r3, r9
    448e:	9b05      	ldr	r3, [sp, #20]
    4490:	2b00      	cmp	r3, #0
    4492:	f340 8280 	ble.w	4996 <_dtoa_r+0x8d6>
    4496:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4498:	2a00      	cmp	r2, #0
    449a:	f000 819a 	beq.w	47d2 <_dtoa_r+0x712>
    449e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44a0:	2a00      	cmp	r2, #0
    44a2:	f000 8196 	beq.w	47d2 <_dtoa_r+0x712>
    44a6:	4631      	mov	r1, r6
    44a8:	4620      	mov	r0, r4
    44aa:	f7ff fb61 	bl	3b70 <__pow5mult>
    44ae:	9a07      	ldr	r2, [sp, #28]
    44b0:	4601      	mov	r1, r0
    44b2:	4606      	mov	r6, r0
    44b4:	4620      	mov	r0, r4
    44b6:	f7ff fac3 	bl	3a40 <__multiply>
    44ba:	9907      	ldr	r1, [sp, #28]
    44bc:	4605      	mov	r5, r0
    44be:	4620      	mov	r0, r4
    44c0:	f7ff fa1c 	bl	38fc <_Bfree>
    44c4:	9b05      	ldr	r3, [sp, #20]
    44c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44c8:	1a9b      	subs	r3, r3, r2
    44ca:	9305      	str	r3, [sp, #20]
    44cc:	f040 8180 	bne.w	47d0 <_dtoa_r+0x710>
    44d0:	2101      	movs	r1, #1
    44d2:	4620      	mov	r0, r4
    44d4:	f7ff faaa 	bl	3a2c <__i2b>
    44d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44da:	9005      	str	r0, [sp, #20]
    44dc:	2b00      	cmp	r3, #0
    44de:	f000 81ac 	beq.w	483a <_dtoa_r+0x77a>
    44e2:	4601      	mov	r1, r0
    44e4:	461a      	mov	r2, r3
    44e6:	4620      	mov	r0, r4
    44e8:	f7ff fb42 	bl	3b70 <__pow5mult>
    44ec:	9b01      	ldr	r3, [sp, #4]
    44ee:	9005      	str	r0, [sp, #20]
    44f0:	2b01      	cmp	r3, #1
    44f2:	f340 8280 	ble.w	49f6 <_dtoa_r+0x936>
    44f6:	2300      	movs	r3, #0
    44f8:	9307      	str	r3, [sp, #28]
    44fa:	9a05      	ldr	r2, [sp, #20]
    44fc:	6913      	ldr	r3, [r2, #16]
    44fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4502:	6918      	ldr	r0, [r3, #16]
    4504:	f7ff fa44 	bl	3990 <__hi0bits>
    4508:	f1c0 0020 	rsb	r0, r0, #32
    450c:	4448      	add	r0, r9
    450e:	f010 001f 	ands.w	r0, r0, #31
    4512:	f000 8190 	beq.w	4836 <_dtoa_r+0x776>
    4516:	f1c0 0320 	rsb	r3, r0, #32
    451a:	2b04      	cmp	r3, #4
    451c:	f340 83f8 	ble.w	4d10 <_dtoa_r+0xc50>
    4520:	f1c0 001c 	rsb	r0, r0, #28
    4524:	9b06      	ldr	r3, [sp, #24]
    4526:	4403      	add	r3, r0
    4528:	9306      	str	r3, [sp, #24]
    452a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    452c:	4403      	add	r3, r0
    452e:	930a      	str	r3, [sp, #40]	; 0x28
    4530:	4481      	add	r9, r0
    4532:	9b06      	ldr	r3, [sp, #24]
    4534:	2b00      	cmp	r3, #0
    4536:	dd05      	ble.n	4544 <_dtoa_r+0x484>
    4538:	4629      	mov	r1, r5
    453a:	461a      	mov	r2, r3
    453c:	4620      	mov	r0, r4
    453e:	f7ff fb67 	bl	3c10 <__lshift>
    4542:	4605      	mov	r5, r0
    4544:	f1b9 0f00 	cmp.w	r9, #0
    4548:	dd05      	ble.n	4556 <_dtoa_r+0x496>
    454a:	464a      	mov	r2, r9
    454c:	9905      	ldr	r1, [sp, #20]
    454e:	4620      	mov	r0, r4
    4550:	f7ff fb5e 	bl	3c10 <__lshift>
    4554:	9005      	str	r0, [sp, #20]
    4556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4558:	2b00      	cmp	r3, #0
    455a:	f040 8201 	bne.w	4960 <_dtoa_r+0x8a0>
    455e:	2f00      	cmp	r7, #0
    4560:	f340 8220 	ble.w	49a4 <_dtoa_r+0x8e4>
    4564:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4566:	2b00      	cmp	r3, #0
    4568:	f040 817b 	bne.w	4862 <_dtoa_r+0x7a2>
    456c:	f8dd b020 	ldr.w	fp, [sp, #32]
    4570:	f8dd a014 	ldr.w	sl, [sp, #20]
    4574:	46d8      	mov	r8, fp
    4576:	e002      	b.n	457e <_dtoa_r+0x4be>
    4578:	f7ff f9ca 	bl	3910 <__multadd>
    457c:	4605      	mov	r5, r0
    457e:	4651      	mov	r1, sl
    4580:	4628      	mov	r0, r5
    4582:	f7ff fd07 	bl	3f94 <quorem>
    4586:	f100 0930 	add.w	r9, r0, #48	; 0x30
    458a:	f808 9b01 	strb.w	r9, [r8], #1
    458e:	ebcb 0308 	rsb	r3, fp, r8
    4592:	42bb      	cmp	r3, r7
    4594:	f04f 020a 	mov.w	r2, #10
    4598:	f04f 0300 	mov.w	r3, #0
    459c:	4629      	mov	r1, r5
    459e:	4620      	mov	r0, r4
    45a0:	dbea      	blt.n	4578 <_dtoa_r+0x4b8>
    45a2:	9b08      	ldr	r3, [sp, #32]
    45a4:	2f01      	cmp	r7, #1
    45a6:	bfac      	ite	ge
    45a8:	19db      	addge	r3, r3, r7
    45aa:	3301      	addlt	r3, #1
    45ac:	469b      	mov	fp, r3
    45ae:	f04f 0a00 	mov.w	sl, #0
    45b2:	4629      	mov	r1, r5
    45b4:	2201      	movs	r2, #1
    45b6:	4620      	mov	r0, r4
    45b8:	f7ff fb2a 	bl	3c10 <__lshift>
    45bc:	9905      	ldr	r1, [sp, #20]
    45be:	9007      	str	r0, [sp, #28]
    45c0:	f7ff fb7e 	bl	3cc0 <__mcmp>
    45c4:	2800      	cmp	r0, #0
    45c6:	f340 828c 	ble.w	4ae2 <_dtoa_r+0xa22>
    45ca:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    45ce:	9908      	ldr	r1, [sp, #32]
    45d0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    45d4:	e004      	b.n	45e0 <_dtoa_r+0x520>
    45d6:	428b      	cmp	r3, r1
    45d8:	f000 8203 	beq.w	49e2 <_dtoa_r+0x922>
    45dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    45e0:	2a39      	cmp	r2, #57	; 0x39
    45e2:	f103 0b01 	add.w	fp, r3, #1
    45e6:	d0f6      	beq.n	45d6 <_dtoa_r+0x516>
    45e8:	3201      	adds	r2, #1
    45ea:	701a      	strb	r2, [r3, #0]
    45ec:	9905      	ldr	r1, [sp, #20]
    45ee:	4620      	mov	r0, r4
    45f0:	f7ff f984 	bl	38fc <_Bfree>
    45f4:	2e00      	cmp	r6, #0
    45f6:	f43f aec9 	beq.w	438c <_dtoa_r+0x2cc>
    45fa:	f1ba 0f00 	cmp.w	sl, #0
    45fe:	d005      	beq.n	460c <_dtoa_r+0x54c>
    4600:	45b2      	cmp	sl, r6
    4602:	d003      	beq.n	460c <_dtoa_r+0x54c>
    4604:	4651      	mov	r1, sl
    4606:	4620      	mov	r0, r4
    4608:	f7ff f978 	bl	38fc <_Bfree>
    460c:	4631      	mov	r1, r6
    460e:	4620      	mov	r0, r4
    4610:	f7ff f974 	bl	38fc <_Bfree>
    4614:	e6ba      	b.n	438c <_dtoa_r+0x2cc>
    4616:	f1c3 0320 	rsb	r3, r3, #32
    461a:	fa0a f303 	lsl.w	r3, sl, r3
    461e:	ee07 3a90 	vmov	s15, r3
    4622:	e5c1      	b.n	41a8 <_dtoa_r+0xe8>
    4624:	2300      	movs	r3, #0
    4626:	930c      	str	r3, [sp, #48]	; 0x30
    4628:	e5fa      	b.n	4220 <_dtoa_r+0x160>
    462a:	2300      	movs	r3, #0
    462c:	9309      	str	r3, [sp, #36]	; 0x24
    462e:	9b02      	ldr	r3, [sp, #8]
    4630:	4443      	add	r3, r8
    4632:	1c5f      	adds	r7, r3, #1
    4634:	2f00      	cmp	r7, #0
    4636:	930d      	str	r3, [sp, #52]	; 0x34
    4638:	f340 822d 	ble.w	4a96 <_dtoa_r+0x9d6>
    463c:	463e      	mov	r6, r7
    463e:	463d      	mov	r5, r7
    4640:	2100      	movs	r1, #0
    4642:	2e17      	cmp	r6, #23
    4644:	6461      	str	r1, [r4, #68]	; 0x44
    4646:	d90a      	bls.n	465e <_dtoa_r+0x59e>
    4648:	2201      	movs	r2, #1
    464a:	2304      	movs	r3, #4
    464c:	005b      	lsls	r3, r3, #1
    464e:	f103 0014 	add.w	r0, r3, #20
    4652:	42b0      	cmp	r0, r6
    4654:	4611      	mov	r1, r2
    4656:	f102 0201 	add.w	r2, r2, #1
    465a:	d9f7      	bls.n	464c <_dtoa_r+0x58c>
    465c:	6461      	str	r1, [r4, #68]	; 0x44
    465e:	4620      	mov	r0, r4
    4660:	f7ff f926 	bl	38b0 <_Balloc>
    4664:	2d0e      	cmp	r5, #14
    4666:	9008      	str	r0, [sp, #32]
    4668:	6420      	str	r0, [r4, #64]	; 0x40
    466a:	f63f ae26 	bhi.w	42ba <_dtoa_r+0x1fa>
    466e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4670:	2b00      	cmp	r3, #0
    4672:	f43f ae22 	beq.w	42ba <_dtoa_r+0x1fa>
    4676:	9902      	ldr	r1, [sp, #8]
    4678:	2900      	cmp	r1, #0
    467a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    467e:	f340 8241 	ble.w	4b04 <_dtoa_r+0xa44>
    4682:	4bc6      	ldr	r3, [pc, #792]	; (499c <_dtoa_r+0x8dc>)
    4684:	f001 020f 	and.w	r2, r1, #15
    4688:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    468c:	110b      	asrs	r3, r1, #4
    468e:	06de      	lsls	r6, r3, #27
    4690:	ed92 6b00 	vldr	d6, [r2]
    4694:	f140 81fb 	bpl.w	4a8e <_dtoa_r+0x9ce>
    4698:	4ac1      	ldr	r2, [pc, #772]	; (49a0 <_dtoa_r+0x8e0>)
    469a:	ed92 7b08 	vldr	d7, [r2, #32]
    469e:	ec4b ab14 	vmov	d4, sl, fp
    46a2:	f003 030f 	and.w	r3, r3, #15
    46a6:	2103      	movs	r1, #3
    46a8:	ee84 5b07 	vdiv.f64	d5, d4, d7
    46ac:	b15b      	cbz	r3, 46c6 <_dtoa_r+0x606>
    46ae:	4abc      	ldr	r2, [pc, #752]	; (49a0 <_dtoa_r+0x8e0>)
    46b0:	07dd      	lsls	r5, r3, #31
    46b2:	d504      	bpl.n	46be <_dtoa_r+0x5fe>
    46b4:	ed92 7b00 	vldr	d7, [r2]
    46b8:	3101      	adds	r1, #1
    46ba:	ee26 6b07 	vmul.f64	d6, d6, d7
    46be:	105b      	asrs	r3, r3, #1
    46c0:	f102 0208 	add.w	r2, r2, #8
    46c4:	d1f4      	bne.n	46b0 <_dtoa_r+0x5f0>
    46c6:	ee85 4b06 	vdiv.f64	d4, d5, d6
    46ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    46cc:	b13b      	cbz	r3, 46de <_dtoa_r+0x61e>
    46ce:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    46d2:	eeb4 4bc7 	vcmpe.f64	d4, d7
    46d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46da:	f100 82b7 	bmi.w	4c4c <_dtoa_r+0xb8c>
    46de:	ee07 1a90 	vmov	s15, r1
    46e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    46e6:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    46ea:	eea6 7b04 	vfma.f64	d7, d6, d4
    46ee:	ec53 2b17 	vmov	r2, r3, d7
    46f2:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    46f6:	2f00      	cmp	r7, #0
    46f8:	f000 81a6 	beq.w	4a48 <_dtoa_r+0x988>
    46fc:	9e02      	ldr	r6, [sp, #8]
    46fe:	4639      	mov	r1, r7
    4700:	9809      	ldr	r0, [sp, #36]	; 0x24
    4702:	2800      	cmp	r0, #0
    4704:	f000 824d 	beq.w	4ba2 <_dtoa_r+0xae2>
    4708:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    470c:	48a3      	ldr	r0, [pc, #652]	; (499c <_dtoa_r+0x8dc>)
    470e:	9d08      	ldr	r5, [sp, #32]
    4710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4714:	ed10 6b02 	vldr	d6, [r0, #-8]
    4718:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    471c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    4720:	ee17 0a10 	vmov	r0, s14
    4724:	ec43 2b16 	vmov	d6, r2, r3
    4728:	3030      	adds	r0, #48	; 0x30
    472a:	b2c0      	uxtb	r0, r0
    472c:	ee35 5b46 	vsub.f64	d5, d5, d6
    4730:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    4734:	ee34 7b47 	vsub.f64	d7, d4, d7
    4738:	eeb4 5bc7 	vcmpe.f64	d5, d7
    473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4740:	7028      	strb	r0, [r5, #0]
    4742:	f105 0b01 	add.w	fp, r5, #1
    4746:	dc32      	bgt.n	47ae <_dtoa_r+0x6ee>
    4748:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    474c:	ee33 6b47 	vsub.f64	d6, d3, d7
    4750:	eeb4 5bc6 	vcmpe.f64	d5, d6
    4754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4758:	f300 82ae 	bgt.w	4cb8 <_dtoa_r+0xbf8>
    475c:	2901      	cmp	r1, #1
    475e:	f340 81cd 	ble.w	4afc <_dtoa_r+0xa3c>
    4762:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    4766:	9b08      	ldr	r3, [sp, #32]
    4768:	4419      	add	r1, r3
    476a:	e00a      	b.n	4782 <_dtoa_r+0x6c2>
    476c:	ee33 6b47 	vsub.f64	d6, d3, d7
    4770:	eeb4 6bc5 	vcmpe.f64	d6, d5
    4774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4778:	f100 829e 	bmi.w	4cb8 <_dtoa_r+0xbf8>
    477c:	458b      	cmp	fp, r1
    477e:	f000 81bd 	beq.w	4afc <_dtoa_r+0xa3c>
    4782:	ee27 7b04 	vmul.f64	d7, d7, d4
    4786:	ee25 5b04 	vmul.f64	d5, d5, d4
    478a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    478e:	ee16 3a10 	vmov	r3, s12
    4792:	f103 0030 	add.w	r0, r3, #48	; 0x30
    4796:	b2c0      	uxtb	r0, r0
    4798:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    479c:	ee37 7b46 	vsub.f64	d7, d7, d6
    47a0:	eeb4 7bc5 	vcmpe.f64	d7, d5
    47a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47a8:	f80b 0b01 	strb.w	r0, [fp], #1
    47ac:	d5de      	bpl.n	476c <_dtoa_r+0x6ac>
    47ae:	9602      	str	r6, [sp, #8]
    47b0:	e5ec      	b.n	438c <_dtoa_r+0x2cc>
    47b2:	2300      	movs	r3, #0
    47b4:	9309      	str	r3, [sp, #36]	; 0x24
    47b6:	f1b8 0f00 	cmp.w	r8, #0
    47ba:	f340 8170 	ble.w	4a9e <_dtoa_r+0x9de>
    47be:	4646      	mov	r6, r8
    47c0:	4645      	mov	r5, r8
    47c2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    47c6:	4647      	mov	r7, r8
    47c8:	e73a      	b.n	4640 <_dtoa_r+0x580>
    47ca:	2301      	movs	r3, #1
    47cc:	9309      	str	r3, [sp, #36]	; 0x24
    47ce:	e7f2      	b.n	47b6 <_dtoa_r+0x6f6>
    47d0:	9507      	str	r5, [sp, #28]
    47d2:	9a05      	ldr	r2, [sp, #20]
    47d4:	9907      	ldr	r1, [sp, #28]
    47d6:	4620      	mov	r0, r4
    47d8:	f7ff f9ca 	bl	3b70 <__pow5mult>
    47dc:	4605      	mov	r5, r0
    47de:	e677      	b.n	44d0 <_dtoa_r+0x410>
    47e0:	2f00      	cmp	r7, #0
    47e2:	f73f ad79 	bgt.w	42d8 <_dtoa_r+0x218>
    47e6:	f040 8142 	bne.w	4a6e <_dtoa_r+0x9ae>
    47ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    47ee:	ee24 4b07 	vmul.f64	d4, d4, d7
    47f2:	ec4b ab17 	vmov	d7, sl, fp
    47f6:	eeb4 4bc7 	vcmpe.f64	d4, d7
    47fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47fe:	463e      	mov	r6, r7
    4800:	9705      	str	r7, [sp, #20]
    4802:	f2c0 80e5 	blt.w	49d0 <_dtoa_r+0x910>
    4806:	ea6f 0308 	mvn.w	r3, r8
    480a:	f8dd b020 	ldr.w	fp, [sp, #32]
    480e:	9302      	str	r3, [sp, #8]
    4810:	9905      	ldr	r1, [sp, #20]
    4812:	4620      	mov	r0, r4
    4814:	f7ff f872 	bl	38fc <_Bfree>
    4818:	2e00      	cmp	r6, #0
    481a:	f43f adb7 	beq.w	438c <_dtoa_r+0x2cc>
    481e:	e6f5      	b.n	460c <_dtoa_r+0x54c>
    4820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4822:	2a00      	cmp	r2, #0
    4824:	f000 8202 	beq.w	4c2c <_dtoa_r+0xb6c>
    4828:	9a05      	ldr	r2, [sp, #20]
    482a:	920e      	str	r2, [sp, #56]	; 0x38
    482c:	9a06      	ldr	r2, [sp, #24]
    482e:	920a      	str	r2, [sp, #40]	; 0x28
    4830:	f203 4333 	addw	r3, r3, #1075	; 0x433
    4834:	e5d3      	b.n	43de <_dtoa_r+0x31e>
    4836:	201c      	movs	r0, #28
    4838:	e674      	b.n	4524 <_dtoa_r+0x464>
    483a:	9b01      	ldr	r3, [sp, #4]
    483c:	2b01      	cmp	r3, #1
    483e:	f340 8240 	ble.w	4cc2 <_dtoa_r+0xc02>
    4842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4844:	9307      	str	r3, [sp, #28]
    4846:	2001      	movs	r0, #1
    4848:	e660      	b.n	450c <_dtoa_r+0x44c>
    484a:	4631      	mov	r1, r6
    484c:	2300      	movs	r3, #0
    484e:	220a      	movs	r2, #10
    4850:	4620      	mov	r0, r4
    4852:	f7ff f85d 	bl	3910 <__multadd>
    4856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4858:	2b00      	cmp	r3, #0
    485a:	4606      	mov	r6, r0
    485c:	f340 824d 	ble.w	4cfa <_dtoa_r+0xc3a>
    4860:	461f      	mov	r7, r3
    4862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4864:	2b00      	cmp	r3, #0
    4866:	dd05      	ble.n	4874 <_dtoa_r+0x7b4>
    4868:	4631      	mov	r1, r6
    486a:	461a      	mov	r2, r3
    486c:	4620      	mov	r0, r4
    486e:	f7ff f9cf 	bl	3c10 <__lshift>
    4872:	4606      	mov	r6, r0
    4874:	9b07      	ldr	r3, [sp, #28]
    4876:	2b00      	cmp	r3, #0
    4878:	f040 816e 	bne.w	4b58 <_dtoa_r+0xa98>
    487c:	46b0      	mov	r8, r6
    487e:	9b08      	ldr	r3, [sp, #32]
    4880:	3f01      	subs	r7, #1
    4882:	19da      	adds	r2, r3, r7
    4884:	9209      	str	r2, [sp, #36]	; 0x24
    4886:	f00a 0201 	and.w	r2, sl, #1
    488a:	920a      	str	r2, [sp, #40]	; 0x28
    488c:	461f      	mov	r7, r3
    488e:	f8dd b014 	ldr.w	fp, [sp, #20]
    4892:	4628      	mov	r0, r5
    4894:	4659      	mov	r1, fp
    4896:	f7ff fb7d 	bl	3f94 <quorem>
    489a:	4631      	mov	r1, r6
    489c:	4682      	mov	sl, r0
    489e:	4628      	mov	r0, r5
    48a0:	f7ff fa0e 	bl	3cc0 <__mcmp>
    48a4:	4642      	mov	r2, r8
    48a6:	4659      	mov	r1, fp
    48a8:	4681      	mov	r9, r0
    48aa:	4620      	mov	r0, r4
    48ac:	f7ff fa2a 	bl	3d04 <__mdiff>
    48b0:	68c3      	ldr	r3, [r0, #12]
    48b2:	4683      	mov	fp, r0
    48b4:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    48b8:	2b00      	cmp	r3, #0
    48ba:	d149      	bne.n	4950 <_dtoa_r+0x890>
    48bc:	4601      	mov	r1, r0
    48be:	4628      	mov	r0, r5
    48c0:	9207      	str	r2, [sp, #28]
    48c2:	f7ff f9fd 	bl	3cc0 <__mcmp>
    48c6:	4659      	mov	r1, fp
    48c8:	9006      	str	r0, [sp, #24]
    48ca:	4620      	mov	r0, r4
    48cc:	f7ff f816 	bl	38fc <_Bfree>
    48d0:	9b06      	ldr	r3, [sp, #24]
    48d2:	9a07      	ldr	r2, [sp, #28]
    48d4:	b92b      	cbnz	r3, 48e2 <_dtoa_r+0x822>
    48d6:	9901      	ldr	r1, [sp, #4]
    48d8:	b919      	cbnz	r1, 48e2 <_dtoa_r+0x822>
    48da:	990a      	ldr	r1, [sp, #40]	; 0x28
    48dc:	2900      	cmp	r1, #0
    48de:	f000 81f5 	beq.w	4ccc <_dtoa_r+0xc0c>
    48e2:	f1b9 0f00 	cmp.w	r9, #0
    48e6:	f2c0 80df 	blt.w	4aa8 <_dtoa_r+0x9e8>
    48ea:	d105      	bne.n	48f8 <_dtoa_r+0x838>
    48ec:	9901      	ldr	r1, [sp, #4]
    48ee:	b919      	cbnz	r1, 48f8 <_dtoa_r+0x838>
    48f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    48f2:	2900      	cmp	r1, #0
    48f4:	f000 80d8 	beq.w	4aa8 <_dtoa_r+0x9e8>
    48f8:	2b00      	cmp	r3, #0
    48fa:	f300 8141 	bgt.w	4b80 <_dtoa_r+0xac0>
    48fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4900:	703a      	strb	r2, [r7, #0]
    4902:	f107 0901 	add.w	r9, r7, #1
    4906:	429f      	cmp	r7, r3
    4908:	46cb      	mov	fp, r9
    490a:	f000 8146 	beq.w	4b9a <_dtoa_r+0xada>
    490e:	4629      	mov	r1, r5
    4910:	2300      	movs	r3, #0
    4912:	220a      	movs	r2, #10
    4914:	4620      	mov	r0, r4
    4916:	f7fe fffb 	bl	3910 <__multadd>
    491a:	4546      	cmp	r6, r8
    491c:	4605      	mov	r5, r0
    491e:	4631      	mov	r1, r6
    4920:	f04f 0300 	mov.w	r3, #0
    4924:	f04f 020a 	mov.w	r2, #10
    4928:	4620      	mov	r0, r4
    492a:	d00b      	beq.n	4944 <_dtoa_r+0x884>
    492c:	f7fe fff0 	bl	3910 <__multadd>
    4930:	4641      	mov	r1, r8
    4932:	4606      	mov	r6, r0
    4934:	2300      	movs	r3, #0
    4936:	220a      	movs	r2, #10
    4938:	4620      	mov	r0, r4
    493a:	f7fe ffe9 	bl	3910 <__multadd>
    493e:	464f      	mov	r7, r9
    4940:	4680      	mov	r8, r0
    4942:	e7a4      	b.n	488e <_dtoa_r+0x7ce>
    4944:	f7fe ffe4 	bl	3910 <__multadd>
    4948:	464f      	mov	r7, r9
    494a:	4606      	mov	r6, r0
    494c:	4680      	mov	r8, r0
    494e:	e79e      	b.n	488e <_dtoa_r+0x7ce>
    4950:	4601      	mov	r1, r0
    4952:	4620      	mov	r0, r4
    4954:	9206      	str	r2, [sp, #24]
    4956:	f7fe ffd1 	bl	38fc <_Bfree>
    495a:	2301      	movs	r3, #1
    495c:	9a06      	ldr	r2, [sp, #24]
    495e:	e7c0      	b.n	48e2 <_dtoa_r+0x822>
    4960:	9905      	ldr	r1, [sp, #20]
    4962:	4628      	mov	r0, r5
    4964:	f7ff f9ac 	bl	3cc0 <__mcmp>
    4968:	2800      	cmp	r0, #0
    496a:	f6bf adf8 	bge.w	455e <_dtoa_r+0x49e>
    496e:	4629      	mov	r1, r5
    4970:	9d02      	ldr	r5, [sp, #8]
    4972:	2300      	movs	r3, #0
    4974:	3d01      	subs	r5, #1
    4976:	220a      	movs	r2, #10
    4978:	4620      	mov	r0, r4
    497a:	9502      	str	r5, [sp, #8]
    497c:	f7fe ffc8 	bl	3910 <__multadd>
    4980:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4982:	4605      	mov	r5, r0
    4984:	2b00      	cmp	r3, #0
    4986:	f47f af60 	bne.w	484a <_dtoa_r+0x78a>
    498a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    498c:	2b00      	cmp	r3, #0
    498e:	f340 81ad 	ble.w	4cec <_dtoa_r+0xc2c>
    4992:	461f      	mov	r7, r3
    4994:	e5ea      	b.n	456c <_dtoa_r+0x4ac>
    4996:	9d07      	ldr	r5, [sp, #28]
    4998:	e59a      	b.n	44d0 <_dtoa_r+0x410>
    499a:	bf00      	nop
    499c:	200002a8 	.word	0x200002a8
    49a0:	20000280 	.word	0x20000280
    49a4:	9b01      	ldr	r3, [sp, #4]
    49a6:	2b02      	cmp	r3, #2
    49a8:	f77f addc 	ble.w	4564 <_dtoa_r+0x4a4>
    49ac:	2f00      	cmp	r7, #0
    49ae:	f040 8169 	bne.w	4c84 <_dtoa_r+0xbc4>
    49b2:	463b      	mov	r3, r7
    49b4:	9905      	ldr	r1, [sp, #20]
    49b6:	2205      	movs	r2, #5
    49b8:	4620      	mov	r0, r4
    49ba:	f7fe ffa9 	bl	3910 <__multadd>
    49be:	4601      	mov	r1, r0
    49c0:	9005      	str	r0, [sp, #20]
    49c2:	4628      	mov	r0, r5
    49c4:	f7ff f97c 	bl	3cc0 <__mcmp>
    49c8:	2800      	cmp	r0, #0
    49ca:	9507      	str	r5, [sp, #28]
    49cc:	f77f af1b 	ble.w	4806 <_dtoa_r+0x746>
    49d0:	9a02      	ldr	r2, [sp, #8]
    49d2:	9908      	ldr	r1, [sp, #32]
    49d4:	2331      	movs	r3, #49	; 0x31
    49d6:	3201      	adds	r2, #1
    49d8:	9202      	str	r2, [sp, #8]
    49da:	700b      	strb	r3, [r1, #0]
    49dc:	f101 0b01 	add.w	fp, r1, #1
    49e0:	e716      	b.n	4810 <_dtoa_r+0x750>
    49e2:	9a02      	ldr	r2, [sp, #8]
    49e4:	3201      	adds	r2, #1
    49e6:	9202      	str	r2, [sp, #8]
    49e8:	9a08      	ldr	r2, [sp, #32]
    49ea:	2331      	movs	r3, #49	; 0x31
    49ec:	7013      	strb	r3, [r2, #0]
    49ee:	e5fd      	b.n	45ec <_dtoa_r+0x52c>
    49f0:	2301      	movs	r3, #1
    49f2:	9309      	str	r3, [sp, #36]	; 0x24
    49f4:	e61b      	b.n	462e <_dtoa_r+0x56e>
    49f6:	f1ba 0f00 	cmp.w	sl, #0
    49fa:	f47f ad7c 	bne.w	44f6 <_dtoa_r+0x436>
    49fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
    4a02:	2b00      	cmp	r3, #0
    4a04:	f040 811b 	bne.w	4c3e <_dtoa_r+0xb7e>
    4a08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    4a0c:	0d1b      	lsrs	r3, r3, #20
    4a0e:	051b      	lsls	r3, r3, #20
    4a10:	2b00      	cmp	r3, #0
    4a12:	f000 8154 	beq.w	4cbe <_dtoa_r+0xbfe>
    4a16:	9b06      	ldr	r3, [sp, #24]
    4a18:	3301      	adds	r3, #1
    4a1a:	9306      	str	r3, [sp, #24]
    4a1c:	2301      	movs	r3, #1
    4a1e:	f109 0901 	add.w	r9, r9, #1
    4a22:	9307      	str	r3, [sp, #28]
    4a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a26:	2001      	movs	r0, #1
    4a28:	2b00      	cmp	r3, #0
    4a2a:	f43f ad6f 	beq.w	450c <_dtoa_r+0x44c>
    4a2e:	e564      	b.n	44fa <_dtoa_r+0x43a>
    4a30:	ee07 1a90 	vmov	s15, r1
    4a34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    4a38:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    4a3c:	eea4 7b06 	vfma.f64	d7, d4, d6
    4a40:	ec53 2b17 	vmov	r2, r3, d7
    4a44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4a48:	ec43 2b16 	vmov	d6, r2, r3
    4a4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    4a50:	ee34 7b47 	vsub.f64	d7, d4, d7
    4a54:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a5c:	f300 80dd 	bgt.w	4c1a <_dtoa_r+0xb5a>
    4a60:	eeb1 6b46 	vneg.f64	d6, d6
    4a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a6c:	d546      	bpl.n	4afc <_dtoa_r+0xa3c>
    4a6e:	2300      	movs	r3, #0
    4a70:	9305      	str	r3, [sp, #20]
    4a72:	461e      	mov	r6, r3
    4a74:	e6c7      	b.n	4806 <_dtoa_r+0x746>
    4a76:	9808      	ldr	r0, [sp, #32]
    4a78:	f7ff bb59 	b.w	412e <_dtoa_r+0x6e>
    4a7c:	9b05      	ldr	r3, [sp, #20]
    4a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4a80:	9205      	str	r2, [sp, #20]
    4a82:	1ad3      	subs	r3, r2, r3
    4a84:	4419      	add	r1, r3
    4a86:	2300      	movs	r3, #0
    4a88:	910b      	str	r1, [sp, #44]	; 0x2c
    4a8a:	930e      	str	r3, [sp, #56]	; 0x38
    4a8c:	e4a1      	b.n	43d2 <_dtoa_r+0x312>
    4a8e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    4a92:	2102      	movs	r1, #2
    4a94:	e60a      	b.n	46ac <_dtoa_r+0x5ec>
    4a96:	463d      	mov	r5, r7
    4a98:	2100      	movs	r1, #0
    4a9a:	6461      	str	r1, [r4, #68]	; 0x44
    4a9c:	e5df      	b.n	465e <_dtoa_r+0x59e>
    4a9e:	2501      	movs	r5, #1
    4aa0:	950d      	str	r5, [sp, #52]	; 0x34
    4aa2:	462f      	mov	r7, r5
    4aa4:	46a8      	mov	r8, r5
    4aa6:	e7f7      	b.n	4a98 <_dtoa_r+0x9d8>
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	4691      	mov	r9, r2
    4aac:	dd11      	ble.n	4ad2 <_dtoa_r+0xa12>
    4aae:	4629      	mov	r1, r5
    4ab0:	2201      	movs	r2, #1
    4ab2:	4620      	mov	r0, r4
    4ab4:	f7ff f8ac 	bl	3c10 <__lshift>
    4ab8:	9905      	ldr	r1, [sp, #20]
    4aba:	4605      	mov	r5, r0
    4abc:	f7ff f900 	bl	3cc0 <__mcmp>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	f340 810c 	ble.w	4cde <_dtoa_r+0xc1e>
    4ac6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    4aca:	f000 80dd 	beq.w	4c88 <_dtoa_r+0xbc8>
    4ace:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    4ad2:	46b2      	mov	sl, r6
    4ad4:	f887 9000 	strb.w	r9, [r7]
    4ad8:	f107 0b01 	add.w	fp, r7, #1
    4adc:	4646      	mov	r6, r8
    4ade:	9507      	str	r5, [sp, #28]
    4ae0:	e584      	b.n	45ec <_dtoa_r+0x52c>
    4ae2:	d104      	bne.n	4aee <_dtoa_r+0xa2e>
    4ae4:	f019 0f01 	tst.w	r9, #1
    4ae8:	d001      	beq.n	4aee <_dtoa_r+0xa2e>
    4aea:	e56e      	b.n	45ca <_dtoa_r+0x50a>
    4aec:	4693      	mov	fp, r2
    4aee:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4af2:	2b30      	cmp	r3, #48	; 0x30
    4af4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    4af8:	d0f8      	beq.n	4aec <_dtoa_r+0xa2c>
    4afa:	e577      	b.n	45ec <_dtoa_r+0x52c>
    4afc:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    4b00:	f7ff bbdb 	b.w	42ba <_dtoa_r+0x1fa>
    4b04:	9b02      	ldr	r3, [sp, #8]
    4b06:	425b      	negs	r3, r3
    4b08:	2b00      	cmp	r3, #0
    4b0a:	f000 809b 	beq.w	4c44 <_dtoa_r+0xb84>
    4b0e:	4a8b      	ldr	r2, [pc, #556]	; (4d3c <_dtoa_r+0xc7c>)
    4b10:	f003 010f 	and.w	r1, r3, #15
    4b14:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4b18:	ed92 7b00 	vldr	d7, [r2]
    4b1c:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    4b20:	111b      	asrs	r3, r3, #4
    4b22:	ee26 4b07 	vmul.f64	d4, d6, d7
    4b26:	f000 80e6 	beq.w	4cf6 <_dtoa_r+0xc36>
    4b2a:	4a85      	ldr	r2, [pc, #532]	; (4d40 <_dtoa_r+0xc80>)
    4b2c:	2102      	movs	r1, #2
    4b2e:	07d8      	lsls	r0, r3, #31
    4b30:	d504      	bpl.n	4b3c <_dtoa_r+0xa7c>
    4b32:	ed92 7b00 	vldr	d7, [r2]
    4b36:	3101      	adds	r1, #1
    4b38:	ee24 4b07 	vmul.f64	d4, d4, d7
    4b3c:	105b      	asrs	r3, r3, #1
    4b3e:	f102 0208 	add.w	r2, r2, #8
    4b42:	d1f4      	bne.n	4b2e <_dtoa_r+0xa6e>
    4b44:	e5c1      	b.n	46ca <_dtoa_r+0x60a>
    4b46:	9908      	ldr	r1, [sp, #32]
    4b48:	2230      	movs	r2, #48	; 0x30
    4b4a:	700a      	strb	r2, [r1, #0]
    4b4c:	9a02      	ldr	r2, [sp, #8]
    4b4e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4b52:	3201      	adds	r2, #1
    4b54:	9202      	str	r2, [sp, #8]
    4b56:	e417      	b.n	4388 <_dtoa_r+0x2c8>
    4b58:	6871      	ldr	r1, [r6, #4]
    4b5a:	4620      	mov	r0, r4
    4b5c:	f7fe fea8 	bl	38b0 <_Balloc>
    4b60:	6933      	ldr	r3, [r6, #16]
    4b62:	1c9a      	adds	r2, r3, #2
    4b64:	4680      	mov	r8, r0
    4b66:	0092      	lsls	r2, r2, #2
    4b68:	f106 010c 	add.w	r1, r6, #12
    4b6c:	300c      	adds	r0, #12
    4b6e:	f7fe f81b 	bl	2ba8 <memcpy>
    4b72:	4641      	mov	r1, r8
    4b74:	2201      	movs	r2, #1
    4b76:	4620      	mov	r0, r4
    4b78:	f7ff f84a 	bl	3c10 <__lshift>
    4b7c:	4680      	mov	r8, r0
    4b7e:	e67e      	b.n	487e <_dtoa_r+0x7be>
    4b80:	2a39      	cmp	r2, #57	; 0x39
    4b82:	f000 8081 	beq.w	4c88 <_dtoa_r+0xbc8>
    4b86:	f102 0901 	add.w	r9, r2, #1
    4b8a:	46b2      	mov	sl, r6
    4b8c:	f887 9000 	strb.w	r9, [r7]
    4b90:	f107 0b01 	add.w	fp, r7, #1
    4b94:	4646      	mov	r6, r8
    4b96:	9507      	str	r5, [sp, #28]
    4b98:	e528      	b.n	45ec <_dtoa_r+0x52c>
    4b9a:	46b2      	mov	sl, r6
    4b9c:	4691      	mov	r9, r2
    4b9e:	4646      	mov	r6, r8
    4ba0:	e507      	b.n	45b2 <_dtoa_r+0x4f2>
    4ba2:	4866      	ldr	r0, [pc, #408]	; (4d3c <_dtoa_r+0xc7c>)
    4ba4:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    4ba8:	1e4d      	subs	r5, r1, #1
    4baa:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    4bae:	ec43 2b17 	vmov	d7, r2, r3
    4bb2:	ed90 3b00 	vldr	d3, [r0]
    4bb6:	ee16 3a10 	vmov	r3, s12
    4bba:	ee23 3b07 	vmul.f64	d3, d3, d7
    4bbe:	9808      	ldr	r0, [sp, #32]
    4bc0:	3330      	adds	r3, #48	; 0x30
    4bc2:	2901      	cmp	r1, #1
    4bc4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4bc8:	7003      	strb	r3, [r0, #0]
    4bca:	f100 0b01 	add.w	fp, r0, #1
    4bce:	ee34 7b46 	vsub.f64	d7, d4, d6
    4bd2:	d014      	beq.n	4bfe <_dtoa_r+0xb3e>
    4bd4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    4bd8:	9b08      	ldr	r3, [sp, #32]
    4bda:	4419      	add	r1, r3
    4bdc:	465b      	mov	r3, fp
    4bde:	ee27 7b05 	vmul.f64	d7, d7, d5
    4be2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    4be6:	ee16 2a10 	vmov	r2, s12
    4bea:	3230      	adds	r2, #48	; 0x30
    4bec:	f803 2b01 	strb.w	r2, [r3], #1
    4bf0:	4299      	cmp	r1, r3
    4bf2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4bf6:	ee37 7b46 	vsub.f64	d7, d7, d6
    4bfa:	d1f0      	bne.n	4bde <_dtoa_r+0xb1e>
    4bfc:	44ab      	add	fp, r5
    4bfe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    4c02:	ee33 5b06 	vadd.f64	d5, d3, d6
    4c06:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c0e:	d543      	bpl.n	4c98 <_dtoa_r+0xbd8>
    4c10:	9602      	str	r6, [sp, #8]
    4c12:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4c16:	f7ff bbaa 	b.w	436e <_dtoa_r+0x2ae>
    4c1a:	2300      	movs	r3, #0
    4c1c:	9305      	str	r3, [sp, #20]
    4c1e:	461e      	mov	r6, r3
    4c20:	e6d6      	b.n	49d0 <_dtoa_r+0x910>
    4c22:	1bdb      	subs	r3, r3, r7
    4c24:	930a      	str	r3, [sp, #40]	; 0x28
    4c26:	2300      	movs	r3, #0
    4c28:	f7ff bbd9 	b.w	43de <_dtoa_r+0x31e>
    4c2c:	9a05      	ldr	r2, [sp, #20]
    4c2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c30:	920e      	str	r2, [sp, #56]	; 0x38
    4c32:	9a06      	ldr	r2, [sp, #24]
    4c34:	920a      	str	r2, [sp, #40]	; 0x28
    4c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4c3a:	f7ff bbd0 	b.w	43de <_dtoa_r+0x31e>
    4c3e:	2300      	movs	r3, #0
    4c40:	9307      	str	r3, [sp, #28]
    4c42:	e6ef      	b.n	4a24 <_dtoa_r+0x964>
    4c44:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    4c48:	2102      	movs	r1, #2
    4c4a:	e53e      	b.n	46ca <_dtoa_r+0x60a>
    4c4c:	2f00      	cmp	r7, #0
    4c4e:	f43f aeef 	beq.w	4a30 <_dtoa_r+0x970>
    4c52:	980d      	ldr	r0, [sp, #52]	; 0x34
    4c54:	2800      	cmp	r0, #0
    4c56:	f77f af51 	ble.w	4afc <_dtoa_r+0xa3c>
    4c5a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    4c5e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    4c62:	3101      	adds	r1, #1
    4c64:	ee06 1a90 	vmov	s13, r1
    4c68:	ee24 4b05 	vmul.f64	d4, d4, d5
    4c6c:	9b02      	ldr	r3, [sp, #8]
    4c6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4c72:	1e5e      	subs	r6, r3, #1
    4c74:	eea4 7b06 	vfma.f64	d7, d4, d6
    4c78:	ec53 2b17 	vmov	r2, r3, d7
    4c7c:	4601      	mov	r1, r0
    4c7e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4c82:	e53d      	b.n	4700 <_dtoa_r+0x640>
    4c84:	9507      	str	r5, [sp, #28]
    4c86:	e5be      	b.n	4806 <_dtoa_r+0x746>
    4c88:	2239      	movs	r2, #57	; 0x39
    4c8a:	46b2      	mov	sl, r6
    4c8c:	9507      	str	r5, [sp, #28]
    4c8e:	4646      	mov	r6, r8
    4c90:	703a      	strb	r2, [r7, #0]
    4c92:	f107 0b01 	add.w	fp, r7, #1
    4c96:	e49a      	b.n	45ce <_dtoa_r+0x50e>
    4c98:	ee36 6b43 	vsub.f64	d6, d6, d3
    4c9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    4ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ca4:	dc01      	bgt.n	4caa <_dtoa_r+0xbea>
    4ca6:	e729      	b.n	4afc <_dtoa_r+0xa3c>
    4ca8:	4693      	mov	fp, r2
    4caa:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4cae:	2b30      	cmp	r3, #48	; 0x30
    4cb0:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    4cb4:	d0f8      	beq.n	4ca8 <_dtoa_r+0xbe8>
    4cb6:	e57a      	b.n	47ae <_dtoa_r+0x6ee>
    4cb8:	9602      	str	r6, [sp, #8]
    4cba:	f7ff bb58 	b.w	436e <_dtoa_r+0x2ae>
    4cbe:	9307      	str	r3, [sp, #28]
    4cc0:	e6b0      	b.n	4a24 <_dtoa_r+0x964>
    4cc2:	f1ba 0f00 	cmp.w	sl, #0
    4cc6:	f47f adbc 	bne.w	4842 <_dtoa_r+0x782>
    4cca:	e698      	b.n	49fe <_dtoa_r+0x93e>
    4ccc:	2a39      	cmp	r2, #57	; 0x39
    4cce:	46cb      	mov	fp, r9
    4cd0:	4691      	mov	r9, r2
    4cd2:	d0d9      	beq.n	4c88 <_dtoa_r+0xbc8>
    4cd4:	f1bb 0f00 	cmp.w	fp, #0
    4cd8:	f73f aef9 	bgt.w	4ace <_dtoa_r+0xa0e>
    4cdc:	e6f9      	b.n	4ad2 <_dtoa_r+0xa12>
    4cde:	f47f aef8 	bne.w	4ad2 <_dtoa_r+0xa12>
    4ce2:	f019 0f01 	tst.w	r9, #1
    4ce6:	f43f aef4 	beq.w	4ad2 <_dtoa_r+0xa12>
    4cea:	e6ec      	b.n	4ac6 <_dtoa_r+0xa06>
    4cec:	9b01      	ldr	r3, [sp, #4]
    4cee:	2b02      	cmp	r3, #2
    4cf0:	dc08      	bgt.n	4d04 <_dtoa_r+0xc44>
    4cf2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4cf4:	e43a      	b.n	456c <_dtoa_r+0x4ac>
    4cf6:	2102      	movs	r1, #2
    4cf8:	e4e7      	b.n	46ca <_dtoa_r+0x60a>
    4cfa:	9b01      	ldr	r3, [sp, #4]
    4cfc:	2b02      	cmp	r3, #2
    4cfe:	dc01      	bgt.n	4d04 <_dtoa_r+0xc44>
    4d00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d02:	e5ae      	b.n	4862 <_dtoa_r+0x7a2>
    4d04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d06:	e651      	b.n	49ac <_dtoa_r+0x8ec>
    4d08:	2301      	movs	r3, #1
    4d0a:	930e      	str	r3, [sp, #56]	; 0x38
    4d0c:	f7ff baa1 	b.w	4252 <_dtoa_r+0x192>
    4d10:	f43f ac0f 	beq.w	4532 <_dtoa_r+0x472>
    4d14:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    4d18:	e404      	b.n	4524 <_dtoa_r+0x464>
    4d1a:	2500      	movs	r5, #0
    4d1c:	6465      	str	r5, [r4, #68]	; 0x44
    4d1e:	4629      	mov	r1, r5
    4d20:	4620      	mov	r0, r4
    4d22:	f7fe fdc5 	bl	38b0 <_Balloc>
    4d26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4d2a:	2301      	movs	r3, #1
    4d2c:	9008      	str	r0, [sp, #32]
    4d2e:	46a8      	mov	r8, r5
    4d30:	6420      	str	r0, [r4, #64]	; 0x40
    4d32:	970d      	str	r7, [sp, #52]	; 0x34
    4d34:	9309      	str	r3, [sp, #36]	; 0x24
    4d36:	f7ff bac0 	b.w	42ba <_dtoa_r+0x1fa>
    4d3a:	bf00      	nop
    4d3c:	200002a8 	.word	0x200002a8
    4d40:	20000280 	.word	0x20000280
    4d44:	00000000 	.word	0x00000000

00004d48 <_svfprintf_r>:
    4d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d4c:	ed2d 8b06 	vpush	{d8-d10}
    4d50:	b0b9      	sub	sp, #228	; 0xe4
    4d52:	460c      	mov	r4, r1
    4d54:	9103      	str	r1, [sp, #12]
    4d56:	4692      	mov	sl, r2
    4d58:	9309      	str	r3, [sp, #36]	; 0x24
    4d5a:	9005      	str	r0, [sp, #20]
    4d5c:	f7fe fd48 	bl	37f0 <_localeconv_r>
    4d60:	6803      	ldr	r3, [r0, #0]
    4d62:	9310      	str	r3, [sp, #64]	; 0x40
    4d64:	4618      	mov	r0, r3
    4d66:	f7fe fa8b 	bl	3280 <strlen>
    4d6a:	89a3      	ldrh	r3, [r4, #12]
    4d6c:	900f      	str	r0, [sp, #60]	; 0x3c
    4d6e:	0619      	lsls	r1, r3, #24
    4d70:	d503      	bpl.n	4d7a <_svfprintf_r+0x32>
    4d72:	6923      	ldr	r3, [r4, #16]
    4d74:	2b00      	cmp	r3, #0
    4d76:	f001 807d 	beq.w	5e74 <_svfprintf_r+0x112c>
    4d7a:	2300      	movs	r3, #0
    4d7c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 5010 <_svfprintf_r+0x2c8>
    4d80:	ed9f 9ba5 	vldr	d9, [pc, #660]	; 5018 <_svfprintf_r+0x2d0>
    4d84:	930d      	str	r3, [sp, #52]	; 0x34
    4d86:	931d      	str	r3, [sp, #116]	; 0x74
    4d88:	931c      	str	r3, [sp, #112]	; 0x70
    4d8a:	9311      	str	r3, [sp, #68]	; 0x44
    4d8c:	9306      	str	r3, [sp, #24]
    4d8e:	ab28      	add	r3, sp, #160	; 0xa0
    4d90:	931b      	str	r3, [sp, #108]	; 0x6c
    4d92:	4699      	mov	r9, r3
    4d94:	f89a 3000 	ldrb.w	r3, [sl]
    4d98:	4654      	mov	r4, sl
    4d9a:	b1eb      	cbz	r3, 4dd8 <_svfprintf_r+0x90>
    4d9c:	2b25      	cmp	r3, #37	; 0x25
    4d9e:	d102      	bne.n	4da6 <_svfprintf_r+0x5e>
    4da0:	e01a      	b.n	4dd8 <_svfprintf_r+0x90>
    4da2:	2b25      	cmp	r3, #37	; 0x25
    4da4:	d003      	beq.n	4dae <_svfprintf_r+0x66>
    4da6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4daa:	2b00      	cmp	r3, #0
    4dac:	d1f9      	bne.n	4da2 <_svfprintf_r+0x5a>
    4dae:	ebca 0504 	rsb	r5, sl, r4
    4db2:	b18d      	cbz	r5, 4dd8 <_svfprintf_r+0x90>
    4db4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4db6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4db8:	f8c9 a000 	str.w	sl, [r9]
    4dbc:	3301      	adds	r3, #1
    4dbe:	442a      	add	r2, r5
    4dc0:	2b07      	cmp	r3, #7
    4dc2:	f8c9 5004 	str.w	r5, [r9, #4]
    4dc6:	921d      	str	r2, [sp, #116]	; 0x74
    4dc8:	931c      	str	r3, [sp, #112]	; 0x70
    4dca:	f300 80a3 	bgt.w	4f14 <_svfprintf_r+0x1cc>
    4dce:	f109 0908 	add.w	r9, r9, #8
    4dd2:	9b06      	ldr	r3, [sp, #24]
    4dd4:	442b      	add	r3, r5
    4dd6:	9306      	str	r3, [sp, #24]
    4dd8:	7823      	ldrb	r3, [r4, #0]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	f000 80a3 	beq.w	4f26 <_svfprintf_r+0x1de>
    4de0:	2300      	movs	r3, #0
    4de2:	461a      	mov	r2, r3
    4de4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    4de8:	4619      	mov	r1, r3
    4dea:	9307      	str	r3, [sp, #28]
    4dec:	469b      	mov	fp, r3
    4dee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4df2:	7863      	ldrb	r3, [r4, #1]
    4df4:	f104 0a01 	add.w	sl, r4, #1
    4df8:	4645      	mov	r5, r8
    4dfa:	f10a 0a01 	add.w	sl, sl, #1
    4dfe:	f1a3 0020 	sub.w	r0, r3, #32
    4e02:	2858      	cmp	r0, #88	; 0x58
    4e04:	f200 83f8 	bhi.w	55f8 <_svfprintf_r+0x8b0>
    4e08:	e8df f010 	tbh	[pc, r0, lsl #1]
    4e0c:	03f60363 	.word	0x03f60363
    4e10:	036b03f6 	.word	0x036b03f6
    4e14:	03f603f6 	.word	0x03f603f6
    4e18:	03f603f6 	.word	0x03f603f6
    4e1c:	03f603f6 	.word	0x03f603f6
    4e20:	037e0370 	.word	0x037e0370
    4e24:	005d03f6 	.word	0x005d03f6
    4e28:	03f600df 	.word	0x03f600df
    4e2c:	010c00fb 	.word	0x010c00fb
    4e30:	010c010c 	.word	0x010c010c
    4e34:	010c010c 	.word	0x010c010c
    4e38:	010c010c 	.word	0x010c010c
    4e3c:	010c010c 	.word	0x010c010c
    4e40:	03f603f6 	.word	0x03f603f6
    4e44:	03f603f6 	.word	0x03f603f6
    4e48:	03f603f6 	.word	0x03f603f6
    4e4c:	03f603f6 	.word	0x03f603f6
    4e50:	03f603f6 	.word	0x03f603f6
    4e54:	015e011c 	.word	0x015e011c
    4e58:	015e03f6 	.word	0x015e03f6
    4e5c:	03f603f6 	.word	0x03f603f6
    4e60:	03f603f6 	.word	0x03f603f6
    4e64:	03f602a1 	.word	0x03f602a1
    4e68:	02a603f6 	.word	0x02a603f6
    4e6c:	03f603f6 	.word	0x03f603f6
    4e70:	03f603f6 	.word	0x03f603f6
    4e74:	02d803f6 	.word	0x02d803f6
    4e78:	03f603f6 	.word	0x03f603f6
    4e7c:	03f60305 	.word	0x03f60305
    4e80:	03f603f6 	.word	0x03f603f6
    4e84:	03f603f6 	.word	0x03f603f6
    4e88:	03f603f6 	.word	0x03f603f6
    4e8c:	03f603f6 	.word	0x03f603f6
    4e90:	034303f6 	.word	0x034303f6
    4e94:	015e0356 	.word	0x015e0356
    4e98:	015e015e 	.word	0x015e015e
    4e9c:	0356035e 	.word	0x0356035e
    4ea0:	03f603f6 	.word	0x03f603f6
    4ea4:	03f603a4 	.word	0x03f603a4
    4ea8:	00a203b1 	.word	0x00a203b1
    4eac:	03c30062 	.word	0x03c30062
    4eb0:	03c803f6 	.word	0x03c803f6
    4eb4:	038303f6 	.word	0x038303f6
    4eb8:	03f603f6 	.word	0x03f603f6
    4ebc:	038b      	.short	0x038b
    4ebe:	9807      	ldr	r0, [sp, #28]
    4ec0:	9309      	str	r3, [sp, #36]	; 0x24
    4ec2:	4240      	negs	r0, r0
    4ec4:	9007      	str	r0, [sp, #28]
    4ec6:	f04b 0b04 	orr.w	fp, fp, #4
    4eca:	f89a 3000 	ldrb.w	r3, [sl]
    4ece:	e794      	b.n	4dfa <_svfprintf_r+0xb2>
    4ed0:	46a8      	mov	r8, r5
    4ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
    4ed4:	2100      	movs	r1, #0
    4ed6:	2330      	movs	r3, #48	; 0x30
    4ed8:	2278      	movs	r2, #120	; 0x78
    4eda:	4588      	cmp	r8, r1
    4edc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    4ee0:	6804      	ldr	r4, [r0, #0]
    4ee2:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    4ee6:	f100 0704 	add.w	r7, r0, #4
    4eea:	f04f 0500 	mov.w	r5, #0
    4eee:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    4ef2:	f04b 0302 	orr.w	r3, fp, #2
    4ef6:	f2c0 839c 	blt.w	5632 <_svfprintf_r+0x8ea>
    4efa:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    4efe:	f043 0b02 	orr.w	fp, r3, #2
    4f02:	ea54 0305 	orrs.w	r3, r4, r5
    4f06:	9709      	str	r7, [sp, #36]	; 0x24
    4f08:	f000 8369 	beq.w	55de <_svfprintf_r+0x896>
    4f0c:	460f      	mov	r7, r1
    4f0e:	920c      	str	r2, [sp, #48]	; 0x30
    4f10:	4843      	ldr	r0, [pc, #268]	; (5020 <_svfprintf_r+0x2d8>)
    4f12:	e2ae      	b.n	5472 <_svfprintf_r+0x72a>
    4f14:	aa1b      	add	r2, sp, #108	; 0x6c
    4f16:	9903      	ldr	r1, [sp, #12]
    4f18:	9805      	ldr	r0, [sp, #20]
    4f1a:	f001 f9cd 	bl	62b8 <__ssprint_r>
    4f1e:	b948      	cbnz	r0, 4f34 <_svfprintf_r+0x1ec>
    4f20:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    4f24:	e755      	b.n	4dd2 <_svfprintf_r+0x8a>
    4f26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4f28:	b123      	cbz	r3, 4f34 <_svfprintf_r+0x1ec>
    4f2a:	9805      	ldr	r0, [sp, #20]
    4f2c:	9903      	ldr	r1, [sp, #12]
    4f2e:	aa1b      	add	r2, sp, #108	; 0x6c
    4f30:	f001 f9c2 	bl	62b8 <__ssprint_r>
    4f34:	9b03      	ldr	r3, [sp, #12]
    4f36:	899b      	ldrh	r3, [r3, #12]
    4f38:	f013 0f40 	tst.w	r3, #64	; 0x40
    4f3c:	9b06      	ldr	r3, [sp, #24]
    4f3e:	bf18      	it	ne
    4f40:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    4f44:	4618      	mov	r0, r3
    4f46:	b039      	add	sp, #228	; 0xe4
    4f48:	ecbd 8b06 	vpop	{d8-d10}
    4f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f50:	930c      	str	r3, [sp, #48]	; 0x30
    4f52:	46a8      	mov	r8, r5
    4f54:	2a00      	cmp	r2, #0
    4f56:	f041 819a 	bne.w	628e <_svfprintf_r+0x1546>
    4f5a:	f01b 0320 	ands.w	r3, fp, #32
    4f5e:	f000 8206 	beq.w	536e <_svfprintf_r+0x626>
    4f62:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4f64:	3707      	adds	r7, #7
    4f66:	f027 0307 	bic.w	r3, r7, #7
    4f6a:	2700      	movs	r7, #0
    4f6c:	f103 0208 	add.w	r2, r3, #8
    4f70:	45b8      	cmp	r8, r7
    4f72:	9209      	str	r2, [sp, #36]	; 0x24
    4f74:	e9d3 4500 	ldrd	r4, r5, [r3]
    4f78:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    4f7c:	f2c0 865e 	blt.w	5c3c <_svfprintf_r+0xef4>
    4f80:	ea54 0305 	orrs.w	r3, r4, r5
    4f84:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4f88:	f000 834b 	beq.w	5622 <_svfprintf_r+0x8da>
    4f8c:	ae28      	add	r6, sp, #160	; 0xa0
    4f8e:	08e2      	lsrs	r2, r4, #3
    4f90:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    4f94:	08e9      	lsrs	r1, r5, #3
    4f96:	f004 0307 	and.w	r3, r4, #7
    4f9a:	460d      	mov	r5, r1
    4f9c:	4614      	mov	r4, r2
    4f9e:	3330      	adds	r3, #48	; 0x30
    4fa0:	ea54 0205 	orrs.w	r2, r4, r5
    4fa4:	f806 3d01 	strb.w	r3, [r6, #-1]!
    4fa8:	d1f1      	bne.n	4f8e <_svfprintf_r+0x246>
    4faa:	f01b 0f01 	tst.w	fp, #1
    4fae:	f000 8227 	beq.w	5400 <_svfprintf_r+0x6b8>
    4fb2:	2b30      	cmp	r3, #48	; 0x30
    4fb4:	f000 8224 	beq.w	5400 <_svfprintf_r+0x6b8>
    4fb8:	2230      	movs	r2, #48	; 0x30
    4fba:	1e73      	subs	r3, r6, #1
    4fbc:	f806 2c01 	strb.w	r2, [r6, #-1]
    4fc0:	aa28      	add	r2, sp, #160	; 0xa0
    4fc2:	1ad2      	subs	r2, r2, r3
    4fc4:	9208      	str	r2, [sp, #32]
    4fc6:	461e      	mov	r6, r3
    4fc8:	e21d      	b.n	5406 <_svfprintf_r+0x6be>
    4fca:	f89a 3000 	ldrb.w	r3, [sl]
    4fce:	2b2a      	cmp	r3, #42	; 0x2a
    4fd0:	f10a 0401 	add.w	r4, sl, #1
    4fd4:	f001 812f 	beq.w	6236 <_svfprintf_r+0x14ee>
    4fd8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4fdc:	2809      	cmp	r0, #9
    4fde:	bf98      	it	ls
    4fe0:	2500      	movls	r5, #0
    4fe2:	f201 80d5 	bhi.w	6190 <_svfprintf_r+0x1448>
    4fe6:	f814 3b01 	ldrb.w	r3, [r4], #1
    4fea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4fee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    4ff2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4ff6:	2809      	cmp	r0, #9
    4ff8:	d9f5      	bls.n	4fe6 <_svfprintf_r+0x29e>
    4ffa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    4ffe:	46a2      	mov	sl, r4
    5000:	e6fd      	b.n	4dfe <_svfprintf_r+0xb6>
    5002:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    5006:	f89a 3000 	ldrb.w	r3, [sl]
    500a:	e6f6      	b.n	4dfa <_svfprintf_r+0xb2>
    500c:	f3af 8000 	nop.w
	...
    5018:	ffffffff 	.word	0xffffffff
    501c:	7fefffff 	.word	0x7fefffff
    5020:	20000ad0 	.word	0x20000ad0
    5024:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5028:	2300      	movs	r3, #0
    502a:	461c      	mov	r4, r3
    502c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    5030:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5034:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    5038:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    503c:	2809      	cmp	r0, #9
    503e:	d9f5      	bls.n	502c <_svfprintf_r+0x2e4>
    5040:	9407      	str	r4, [sp, #28]
    5042:	e6dc      	b.n	4dfe <_svfprintf_r+0xb6>
    5044:	930c      	str	r3, [sp, #48]	; 0x30
    5046:	46a8      	mov	r8, r5
    5048:	2a00      	cmp	r2, #0
    504a:	f041 812c 	bne.w	62a6 <_svfprintf_r+0x155e>
    504e:	f04b 0b10 	orr.w	fp, fp, #16
    5052:	f01b 0f20 	tst.w	fp, #32
    5056:	f000 8503 	beq.w	5a60 <_svfprintf_r+0xd18>
    505a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    505c:	3707      	adds	r7, #7
    505e:	f027 0707 	bic.w	r7, r7, #7
    5062:	e9d7 2300 	ldrd	r2, r3, [r7]
    5066:	f107 0108 	add.w	r1, r7, #8
    506a:	9109      	str	r1, [sp, #36]	; 0x24
    506c:	4614      	mov	r4, r2
    506e:	461d      	mov	r5, r3
    5070:	2a00      	cmp	r2, #0
    5072:	f173 0300 	sbcs.w	r3, r3, #0
    5076:	f2c0 8537 	blt.w	5ae8 <_svfprintf_r+0xda0>
    507a:	f1b8 0f00 	cmp.w	r8, #0
    507e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5082:	f2c0 81b5 	blt.w	53f0 <_svfprintf_r+0x6a8>
    5086:	ea54 0305 	orrs.w	r3, r4, r5
    508a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    508e:	f000 83f6 	beq.w	587e <_svfprintf_r+0xb36>
    5092:	2d00      	cmp	r5, #0
    5094:	bf08      	it	eq
    5096:	2c0a      	cmpeq	r4, #10
    5098:	f0c0 81ae 	bcc.w	53f8 <_svfprintf_r+0x6b0>
    509c:	ae28      	add	r6, sp, #160	; 0xa0
    509e:	4620      	mov	r0, r4
    50a0:	4629      	mov	r1, r5
    50a2:	220a      	movs	r2, #10
    50a4:	2300      	movs	r3, #0
    50a6:	f7fd f8d1 	bl	224c <__aeabi_uldivmod>
    50aa:	3230      	adds	r2, #48	; 0x30
    50ac:	f806 2d01 	strb.w	r2, [r6, #-1]!
    50b0:	4620      	mov	r0, r4
    50b2:	4629      	mov	r1, r5
    50b4:	2300      	movs	r3, #0
    50b6:	220a      	movs	r2, #10
    50b8:	f7fd f8c8 	bl	224c <__aeabi_uldivmod>
    50bc:	4604      	mov	r4, r0
    50be:	460d      	mov	r5, r1
    50c0:	ea54 0305 	orrs.w	r3, r4, r5
    50c4:	d1eb      	bne.n	509e <_svfprintf_r+0x356>
    50c6:	e19b      	b.n	5400 <_svfprintf_r+0x6b8>
    50c8:	930c      	str	r3, [sp, #48]	; 0x30
    50ca:	46a8      	mov	r8, r5
    50cc:	2a00      	cmp	r2, #0
    50ce:	f041 80e6 	bne.w	629e <_svfprintf_r+0x1556>
    50d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    50d4:	f01b 0f08 	tst.w	fp, #8
    50d8:	f107 0707 	add.w	r7, r7, #7
    50dc:	f000 8640 	beq.w	5d60 <_svfprintf_r+0x1018>
    50e0:	f027 0307 	bic.w	r3, r7, #7
    50e4:	ed93 8b00 	vldr	d8, [r3]
    50e8:	f103 0208 	add.w	r2, r3, #8
    50ec:	9209      	str	r2, [sp, #36]	; 0x24
    50ee:	eeb0 7bc8 	vabs.f64	d7, d8
    50f2:	eeb4 7b49 	vcmp.f64	d7, d9
    50f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50fa:	f340 85bc 	ble.w	5c76 <_svfprintf_r+0xf2e>
    50fe:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5106:	f100 87ca 	bmi.w	609e <_svfprintf_r+0x1356>
    510a:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    510e:	4ea7      	ldr	r6, [pc, #668]	; (53ac <_svfprintf_r+0x664>)
    5110:	4ba7      	ldr	r3, [pc, #668]	; (53b0 <_svfprintf_r+0x668>)
    5112:	990c      	ldr	r1, [sp, #48]	; 0x30
    5114:	2203      	movs	r2, #3
    5116:	f04f 0800 	mov.w	r8, #0
    511a:	9204      	str	r2, [sp, #16]
    511c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5120:	2947      	cmp	r1, #71	; 0x47
    5122:	bfd8      	it	le
    5124:	461e      	movle	r6, r3
    5126:	9208      	str	r2, [sp, #32]
    5128:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    512c:	b117      	cbz	r7, 5134 <_svfprintf_r+0x3ec>
    512e:	9b04      	ldr	r3, [sp, #16]
    5130:	3301      	adds	r3, #1
    5132:	9304      	str	r3, [sp, #16]
    5134:	f01b 0302 	ands.w	r3, fp, #2
    5138:	930a      	str	r3, [sp, #40]	; 0x28
    513a:	d002      	beq.n	5142 <_svfprintf_r+0x3fa>
    513c:	9b04      	ldr	r3, [sp, #16]
    513e:	3302      	adds	r3, #2
    5140:	9304      	str	r3, [sp, #16]
    5142:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    5146:	930b      	str	r3, [sp, #44]	; 0x2c
    5148:	f040 8280 	bne.w	564c <_svfprintf_r+0x904>
    514c:	9b07      	ldr	r3, [sp, #28]
    514e:	9a04      	ldr	r2, [sp, #16]
    5150:	1a9c      	subs	r4, r3, r2
    5152:	2c00      	cmp	r4, #0
    5154:	f340 827a 	ble.w	564c <_svfprintf_r+0x904>
    5158:	2c10      	cmp	r4, #16
    515a:	991d      	ldr	r1, [sp, #116]	; 0x74
    515c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    515e:	4f95      	ldr	r7, [pc, #596]	; (53b4 <_svfprintf_r+0x66c>)
    5160:	dd23      	ble.n	51aa <_svfprintf_r+0x462>
    5162:	4648      	mov	r0, r9
    5164:	2510      	movs	r5, #16
    5166:	46c1      	mov	r9, r8
    5168:	46b0      	mov	r8, r6
    516a:	9e05      	ldr	r6, [sp, #20]
    516c:	e004      	b.n	5178 <_svfprintf_r+0x430>
    516e:	3c10      	subs	r4, #16
    5170:	2c10      	cmp	r4, #16
    5172:	f100 0008 	add.w	r0, r0, #8
    5176:	dd15      	ble.n	51a4 <_svfprintf_r+0x45c>
    5178:	3201      	adds	r2, #1
    517a:	3110      	adds	r1, #16
    517c:	2a07      	cmp	r2, #7
    517e:	911d      	str	r1, [sp, #116]	; 0x74
    5180:	921c      	str	r2, [sp, #112]	; 0x70
    5182:	6007      	str	r7, [r0, #0]
    5184:	6045      	str	r5, [r0, #4]
    5186:	ddf2      	ble.n	516e <_svfprintf_r+0x426>
    5188:	aa1b      	add	r2, sp, #108	; 0x6c
    518a:	9903      	ldr	r1, [sp, #12]
    518c:	4630      	mov	r0, r6
    518e:	f001 f893 	bl	62b8 <__ssprint_r>
    5192:	2800      	cmp	r0, #0
    5194:	f47f aece 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5198:	3c10      	subs	r4, #16
    519a:	2c10      	cmp	r4, #16
    519c:	991d      	ldr	r1, [sp, #116]	; 0x74
    519e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51a0:	a828      	add	r0, sp, #160	; 0xa0
    51a2:	dce9      	bgt.n	5178 <_svfprintf_r+0x430>
    51a4:	4646      	mov	r6, r8
    51a6:	46c8      	mov	r8, r9
    51a8:	4681      	mov	r9, r0
    51aa:	3201      	adds	r2, #1
    51ac:	1863      	adds	r3, r4, r1
    51ae:	2a07      	cmp	r2, #7
    51b0:	931d      	str	r3, [sp, #116]	; 0x74
    51b2:	921c      	str	r2, [sp, #112]	; 0x70
    51b4:	f8c9 7000 	str.w	r7, [r9]
    51b8:	f8c9 4004 	str.w	r4, [r9, #4]
    51bc:	f300 83e2 	bgt.w	5984 <_svfprintf_r+0xc3c>
    51c0:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    51c4:	f109 0908 	add.w	r9, r9, #8
    51c8:	b177      	cbz	r7, 51e8 <_svfprintf_r+0x4a0>
    51ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51cc:	3201      	adds	r2, #1
    51ce:	3301      	adds	r3, #1
    51d0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    51d4:	2101      	movs	r1, #1
    51d6:	2a07      	cmp	r2, #7
    51d8:	931d      	str	r3, [sp, #116]	; 0x74
    51da:	921c      	str	r2, [sp, #112]	; 0x70
    51dc:	e889 0003 	stmia.w	r9, {r0, r1}
    51e0:	f300 835f 	bgt.w	58a2 <_svfprintf_r+0xb5a>
    51e4:	f109 0908 	add.w	r9, r9, #8
    51e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    51ea:	b16a      	cbz	r2, 5208 <_svfprintf_r+0x4c0>
    51ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51ee:	3201      	adds	r2, #1
    51f0:	3302      	adds	r3, #2
    51f2:	a814      	add	r0, sp, #80	; 0x50
    51f4:	2102      	movs	r1, #2
    51f6:	2a07      	cmp	r2, #7
    51f8:	931d      	str	r3, [sp, #116]	; 0x74
    51fa:	921c      	str	r2, [sp, #112]	; 0x70
    51fc:	e889 0003 	stmia.w	r9, {r0, r1}
    5200:	f300 835b 	bgt.w	58ba <_svfprintf_r+0xb72>
    5204:	f109 0908 	add.w	r9, r9, #8
    5208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    520a:	2a80      	cmp	r2, #128	; 0x80
    520c:	f000 827e 	beq.w	570c <_svfprintf_r+0x9c4>
    5210:	9a08      	ldr	r2, [sp, #32]
    5212:	ebc2 0408 	rsb	r4, r2, r8
    5216:	2c00      	cmp	r4, #0
    5218:	dd34      	ble.n	5284 <_svfprintf_r+0x53c>
    521a:	2c10      	cmp	r4, #16
    521c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    521e:	4f66      	ldr	r7, [pc, #408]	; (53b8 <_svfprintf_r+0x670>)
    5220:	dd23      	ble.n	526a <_svfprintf_r+0x522>
    5222:	4649      	mov	r1, r9
    5224:	f04f 0810 	mov.w	r8, #16
    5228:	46b1      	mov	r9, r6
    522a:	9d05      	ldr	r5, [sp, #20]
    522c:	9e03      	ldr	r6, [sp, #12]
    522e:	e004      	b.n	523a <_svfprintf_r+0x4f2>
    5230:	3c10      	subs	r4, #16
    5232:	2c10      	cmp	r4, #16
    5234:	f101 0108 	add.w	r1, r1, #8
    5238:	dd15      	ble.n	5266 <_svfprintf_r+0x51e>
    523a:	3201      	adds	r2, #1
    523c:	3310      	adds	r3, #16
    523e:	2a07      	cmp	r2, #7
    5240:	931d      	str	r3, [sp, #116]	; 0x74
    5242:	921c      	str	r2, [sp, #112]	; 0x70
    5244:	e881 0180 	stmia.w	r1, {r7, r8}
    5248:	ddf2      	ble.n	5230 <_svfprintf_r+0x4e8>
    524a:	aa1b      	add	r2, sp, #108	; 0x6c
    524c:	4631      	mov	r1, r6
    524e:	4628      	mov	r0, r5
    5250:	f001 f832 	bl	62b8 <__ssprint_r>
    5254:	2800      	cmp	r0, #0
    5256:	f47f ae6d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    525a:	3c10      	subs	r4, #16
    525c:	2c10      	cmp	r4, #16
    525e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5260:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5262:	a928      	add	r1, sp, #160	; 0xa0
    5264:	dce9      	bgt.n	523a <_svfprintf_r+0x4f2>
    5266:	464e      	mov	r6, r9
    5268:	4689      	mov	r9, r1
    526a:	3201      	adds	r2, #1
    526c:	4423      	add	r3, r4
    526e:	2a07      	cmp	r2, #7
    5270:	931d      	str	r3, [sp, #116]	; 0x74
    5272:	921c      	str	r2, [sp, #112]	; 0x70
    5274:	f8c9 7000 	str.w	r7, [r9]
    5278:	f8c9 4004 	str.w	r4, [r9, #4]
    527c:	f300 8305 	bgt.w	588a <_svfprintf_r+0xb42>
    5280:	f109 0908 	add.w	r9, r9, #8
    5284:	f41b 7f80 	tst.w	fp, #256	; 0x100
    5288:	f040 81e2 	bne.w	5650 <_svfprintf_r+0x908>
    528c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    528e:	9808      	ldr	r0, [sp, #32]
    5290:	f8c9 6000 	str.w	r6, [r9]
    5294:	3201      	adds	r2, #1
    5296:	4403      	add	r3, r0
    5298:	2a07      	cmp	r2, #7
    529a:	931d      	str	r3, [sp, #116]	; 0x74
    529c:	f8c9 0004 	str.w	r0, [r9, #4]
    52a0:	921c      	str	r2, [sp, #112]	; 0x70
    52a2:	f300 82c2 	bgt.w	582a <_svfprintf_r+0xae2>
    52a6:	f109 0908 	add.w	r9, r9, #8
    52aa:	f01b 0f04 	tst.w	fp, #4
    52ae:	d03e      	beq.n	532e <_svfprintf_r+0x5e6>
    52b0:	9a07      	ldr	r2, [sp, #28]
    52b2:	9904      	ldr	r1, [sp, #16]
    52b4:	1a54      	subs	r4, r2, r1
    52b6:	2c00      	cmp	r4, #0
    52b8:	dd39      	ble.n	532e <_svfprintf_r+0x5e6>
    52ba:	2c10      	cmp	r4, #16
    52bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    52be:	4f3d      	ldr	r7, [pc, #244]	; (53b4 <_svfprintf_r+0x66c>)
    52c0:	dd22      	ble.n	5308 <_svfprintf_r+0x5c0>
    52c2:	2510      	movs	r5, #16
    52c4:	9e05      	ldr	r6, [sp, #20]
    52c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    52ca:	e004      	b.n	52d6 <_svfprintf_r+0x58e>
    52cc:	3c10      	subs	r4, #16
    52ce:	2c10      	cmp	r4, #16
    52d0:	f109 0908 	add.w	r9, r9, #8
    52d4:	dd18      	ble.n	5308 <_svfprintf_r+0x5c0>
    52d6:	3201      	adds	r2, #1
    52d8:	3310      	adds	r3, #16
    52da:	2a07      	cmp	r2, #7
    52dc:	931d      	str	r3, [sp, #116]	; 0x74
    52de:	921c      	str	r2, [sp, #112]	; 0x70
    52e0:	f8c9 7000 	str.w	r7, [r9]
    52e4:	f8c9 5004 	str.w	r5, [r9, #4]
    52e8:	ddf0      	ble.n	52cc <_svfprintf_r+0x584>
    52ea:	aa1b      	add	r2, sp, #108	; 0x6c
    52ec:	4641      	mov	r1, r8
    52ee:	4630      	mov	r0, r6
    52f0:	f000 ffe2 	bl	62b8 <__ssprint_r>
    52f4:	2800      	cmp	r0, #0
    52f6:	f47f ae1d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    52fa:	3c10      	subs	r4, #16
    52fc:	2c10      	cmp	r4, #16
    52fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5300:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5302:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5306:	dce6      	bgt.n	52d6 <_svfprintf_r+0x58e>
    5308:	3201      	adds	r2, #1
    530a:	4423      	add	r3, r4
    530c:	2a07      	cmp	r2, #7
    530e:	931d      	str	r3, [sp, #116]	; 0x74
    5310:	921c      	str	r2, [sp, #112]	; 0x70
    5312:	f8c9 7000 	str.w	r7, [r9]
    5316:	f8c9 4004 	str.w	r4, [r9, #4]
    531a:	dd08      	ble.n	532e <_svfprintf_r+0x5e6>
    531c:	aa1b      	add	r2, sp, #108	; 0x6c
    531e:	9903      	ldr	r1, [sp, #12]
    5320:	9805      	ldr	r0, [sp, #20]
    5322:	f000 ffc9 	bl	62b8 <__ssprint_r>
    5326:	2800      	cmp	r0, #0
    5328:	f47f ae04 	bne.w	4f34 <_svfprintf_r+0x1ec>
    532c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    532e:	9a06      	ldr	r2, [sp, #24]
    5330:	9907      	ldr	r1, [sp, #28]
    5332:	9804      	ldr	r0, [sp, #16]
    5334:	4281      	cmp	r1, r0
    5336:	bfac      	ite	ge
    5338:	1852      	addge	r2, r2, r1
    533a:	1812      	addlt	r2, r2, r0
    533c:	9206      	str	r2, [sp, #24]
    533e:	2b00      	cmp	r3, #0
    5340:	f040 827f 	bne.w	5842 <_svfprintf_r+0xafa>
    5344:	2300      	movs	r3, #0
    5346:	931c      	str	r3, [sp, #112]	; 0x70
    5348:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    534c:	e522      	b.n	4d94 <_svfprintf_r+0x4c>
    534e:	f04b 0b08 	orr.w	fp, fp, #8
    5352:	f89a 3000 	ldrb.w	r3, [sl]
    5356:	e550      	b.n	4dfa <_svfprintf_r+0xb2>
    5358:	930c      	str	r3, [sp, #48]	; 0x30
    535a:	46a8      	mov	r8, r5
    535c:	2a00      	cmp	r2, #0
    535e:	f040 879a 	bne.w	6296 <_svfprintf_r+0x154e>
    5362:	f04b 0b10 	orr.w	fp, fp, #16
    5366:	f01b 0320 	ands.w	r3, fp, #32
    536a:	f47f adfa 	bne.w	4f62 <_svfprintf_r+0x21a>
    536e:	f01b 0210 	ands.w	r2, fp, #16
    5372:	f040 8391 	bne.w	5a98 <_svfprintf_r+0xd50>
    5376:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    537a:	f000 838d 	beq.w	5a98 <_svfprintf_r+0xd50>
    537e:	9909      	ldr	r1, [sp, #36]	; 0x24
    5380:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    5384:	460b      	mov	r3, r1
    5386:	f1b8 0f00 	cmp.w	r8, #0
    538a:	f103 0304 	add.w	r3, r3, #4
    538e:	880c      	ldrh	r4, [r1, #0]
    5390:	f04f 0500 	mov.w	r5, #0
    5394:	f2c0 85ab 	blt.w	5eee <_svfprintf_r+0x11a6>
    5398:	ea54 0105 	orrs.w	r1, r4, r5
    539c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    53a0:	9309      	str	r3, [sp, #36]	; 0x24
    53a2:	f000 813e 	beq.w	5622 <_svfprintf_r+0x8da>
    53a6:	4617      	mov	r7, r2
    53a8:	e5f0      	b.n	4f8c <_svfprintf_r+0x244>
    53aa:	bf00      	nop
    53ac:	20000ab0 	.word	0x20000ab0
    53b0:	20000aac 	.word	0x20000aac
    53b4:	200004a0 	.word	0x200004a0
    53b8:	20000b88 	.word	0x20000b88
    53bc:	930c      	str	r3, [sp, #48]	; 0x30
    53be:	46a8      	mov	r8, r5
    53c0:	2a00      	cmp	r2, #0
    53c2:	f040 8759 	bne.w	6278 <_svfprintf_r+0x1530>
    53c6:	f04b 0b10 	orr.w	fp, fp, #16
    53ca:	f01b 0320 	ands.w	r3, fp, #32
    53ce:	f000 82e7 	beq.w	59a0 <_svfprintf_r+0xc58>
    53d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    53d4:	3707      	adds	r7, #7
    53d6:	f027 0307 	bic.w	r3, r7, #7
    53da:	2700      	movs	r7, #0
    53dc:	f103 0208 	add.w	r2, r3, #8
    53e0:	45b8      	cmp	r8, r7
    53e2:	9209      	str	r2, [sp, #36]	; 0x24
    53e4:	e9d3 4500 	ldrd	r4, r5, [r3]
    53e8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    53ec:	f6bf ae4b 	bge.w	5086 <_svfprintf_r+0x33e>
    53f0:	ea54 0305 	orrs.w	r3, r4, r5
    53f4:	f47f ae4d 	bne.w	5092 <_svfprintf_r+0x34a>
    53f8:	ae38      	add	r6, sp, #224	; 0xe0
    53fa:	3430      	adds	r4, #48	; 0x30
    53fc:	f806 4d41 	strb.w	r4, [r6, #-65]!
    5400:	ab28      	add	r3, sp, #160	; 0xa0
    5402:	1b9b      	subs	r3, r3, r6
    5404:	9308      	str	r3, [sp, #32]
    5406:	9b08      	ldr	r3, [sp, #32]
    5408:	4543      	cmp	r3, r8
    540a:	bfb8      	it	lt
    540c:	4643      	movlt	r3, r8
    540e:	9304      	str	r3, [sp, #16]
    5410:	2300      	movs	r3, #0
    5412:	930e      	str	r3, [sp, #56]	; 0x38
    5414:	e68a      	b.n	512c <_svfprintf_r+0x3e4>
    5416:	930c      	str	r3, [sp, #48]	; 0x30
    5418:	46a8      	mov	r8, r5
    541a:	2a00      	cmp	r2, #0
    541c:	f040 8728 	bne.w	6270 <_svfprintf_r+0x1528>
    5420:	f01b 0f20 	tst.w	fp, #32
    5424:	48c2      	ldr	r0, [pc, #776]	; (5730 <_svfprintf_r+0x9e8>)
    5426:	f000 8086 	beq.w	5536 <_svfprintf_r+0x7ee>
    542a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    542c:	3707      	adds	r7, #7
    542e:	f027 0307 	bic.w	r3, r7, #7
    5432:	e9d3 4500 	ldrd	r4, r5, [r3]
    5436:	f103 0208 	add.w	r2, r3, #8
    543a:	9209      	str	r2, [sp, #36]	; 0x24
    543c:	f01b 0701 	ands.w	r7, fp, #1
    5440:	f000 8247 	beq.w	58d2 <_svfprintf_r+0xb8a>
    5444:	ea54 0305 	orrs.w	r3, r4, r5
    5448:	f000 84a3 	beq.w	5d92 <_svfprintf_r+0x104a>
    544c:	2700      	movs	r7, #0
    544e:	2330      	movs	r3, #48	; 0x30
    5450:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5454:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    5458:	45b8      	cmp	r8, r7
    545a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    545e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5462:	f04b 0302 	orr.w	r3, fp, #2
    5466:	f2c0 8617 	blt.w	6098 <_svfprintf_r+0x1350>
    546a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    546e:	f043 0b02 	orr.w	fp, r3, #2
    5472:	ae28      	add	r6, sp, #160	; 0xa0
    5474:	0923      	lsrs	r3, r4, #4
    5476:	f004 010f 	and.w	r1, r4, #15
    547a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    547e:	092a      	lsrs	r2, r5, #4
    5480:	461c      	mov	r4, r3
    5482:	4615      	mov	r5, r2
    5484:	5c43      	ldrb	r3, [r0, r1]
    5486:	f806 3d01 	strb.w	r3, [r6, #-1]!
    548a:	ea54 0305 	orrs.w	r3, r4, r5
    548e:	d1f1      	bne.n	5474 <_svfprintf_r+0x72c>
    5490:	e7b6      	b.n	5400 <_svfprintf_r+0x6b8>
    5492:	9909      	ldr	r1, [sp, #36]	; 0x24
    5494:	930c      	str	r3, [sp, #48]	; 0x30
    5496:	680a      	ldr	r2, [r1, #0]
    5498:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    549c:	2300      	movs	r3, #0
    549e:	460a      	mov	r2, r1
    54a0:	461f      	mov	r7, r3
    54a2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    54a6:	3204      	adds	r2, #4
    54a8:	2301      	movs	r3, #1
    54aa:	9304      	str	r3, [sp, #16]
    54ac:	46b8      	mov	r8, r7
    54ae:	970e      	str	r7, [sp, #56]	; 0x38
    54b0:	9209      	str	r2, [sp, #36]	; 0x24
    54b2:	9308      	str	r3, [sp, #32]
    54b4:	ae1e      	add	r6, sp, #120	; 0x78
    54b6:	e63d      	b.n	5134 <_svfprintf_r+0x3ec>
    54b8:	930c      	str	r3, [sp, #48]	; 0x30
    54ba:	46a8      	mov	r8, r5
    54bc:	2a00      	cmp	r2, #0
    54be:	f43f adc8 	beq.w	5052 <_svfprintf_r+0x30a>
    54c2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    54c6:	e5c4      	b.n	5052 <_svfprintf_r+0x30a>
    54c8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    54cc:	f89a 3000 	ldrb.w	r3, [sl]
    54d0:	e493      	b.n	4dfa <_svfprintf_r+0xb2>
    54d2:	f89a 3000 	ldrb.w	r3, [sl]
    54d6:	2900      	cmp	r1, #0
    54d8:	f47f ac8f 	bne.w	4dfa <_svfprintf_r+0xb2>
    54dc:	2201      	movs	r2, #1
    54de:	2120      	movs	r1, #32
    54e0:	e48b      	b.n	4dfa <_svfprintf_r+0xb2>
    54e2:	f04b 0b01 	orr.w	fp, fp, #1
    54e6:	f89a 3000 	ldrb.w	r3, [sl]
    54ea:	e486      	b.n	4dfa <_svfprintf_r+0xb2>
    54ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
    54ee:	6823      	ldr	r3, [r4, #0]
    54f0:	9307      	str	r3, [sp, #28]
    54f2:	4618      	mov	r0, r3
    54f4:	2800      	cmp	r0, #0
    54f6:	4623      	mov	r3, r4
    54f8:	f103 0304 	add.w	r3, r3, #4
    54fc:	f6ff acdf 	blt.w	4ebe <_svfprintf_r+0x176>
    5500:	9309      	str	r3, [sp, #36]	; 0x24
    5502:	f89a 3000 	ldrb.w	r3, [sl]
    5506:	e478      	b.n	4dfa <_svfprintf_r+0xb2>
    5508:	f89a 3000 	ldrb.w	r3, [sl]
    550c:	2201      	movs	r2, #1
    550e:	212b      	movs	r1, #43	; 0x2b
    5510:	e473      	b.n	4dfa <_svfprintf_r+0xb2>
    5512:	930c      	str	r3, [sp, #48]	; 0x30
    5514:	46a8      	mov	r8, r5
    5516:	2a00      	cmp	r2, #0
    5518:	f43f af57 	beq.w	53ca <_svfprintf_r+0x682>
    551c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5520:	e753      	b.n	53ca <_svfprintf_r+0x682>
    5522:	930c      	str	r3, [sp, #48]	; 0x30
    5524:	46a8      	mov	r8, r5
    5526:	2a00      	cmp	r2, #0
    5528:	f040 86aa 	bne.w	6280 <_svfprintf_r+0x1538>
    552c:	f01b 0f20 	tst.w	fp, #32
    5530:	4880      	ldr	r0, [pc, #512]	; (5734 <_svfprintf_r+0x9ec>)
    5532:	f47f af7a 	bne.w	542a <_svfprintf_r+0x6e2>
    5536:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5538:	f01b 0f10 	tst.w	fp, #16
    553c:	4613      	mov	r3, r2
    553e:	f040 82c1 	bne.w	5ac4 <_svfprintf_r+0xd7c>
    5542:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5546:	f000 82bd 	beq.w	5ac4 <_svfprintf_r+0xd7c>
    554a:	3304      	adds	r3, #4
    554c:	8814      	ldrh	r4, [r2, #0]
    554e:	9309      	str	r3, [sp, #36]	; 0x24
    5550:	2500      	movs	r5, #0
    5552:	e773      	b.n	543c <_svfprintf_r+0x6f4>
    5554:	f89a 3000 	ldrb.w	r3, [sl]
    5558:	2b6c      	cmp	r3, #108	; 0x6c
    555a:	bf03      	ittte	eq
    555c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    5560:	f04b 0b20 	orreq.w	fp, fp, #32
    5564:	f10a 0a01 	addeq.w	sl, sl, #1
    5568:	f04b 0b10 	orrne.w	fp, fp, #16
    556c:	e445      	b.n	4dfa <_svfprintf_r+0xb2>
    556e:	2a00      	cmp	r2, #0
    5570:	f040 866f 	bne.w	6252 <_svfprintf_r+0x150a>
    5574:	f01b 0f20 	tst.w	fp, #32
    5578:	f000 8366 	beq.w	5c48 <_svfprintf_r+0xf00>
    557c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    557e:	9906      	ldr	r1, [sp, #24]
    5580:	6813      	ldr	r3, [r2, #0]
    5582:	17cd      	asrs	r5, r1, #31
    5584:	4608      	mov	r0, r1
    5586:	3204      	adds	r2, #4
    5588:	4629      	mov	r1, r5
    558a:	9209      	str	r2, [sp, #36]	; 0x24
    558c:	e9c3 0100 	strd	r0, r1, [r3]
    5590:	e400      	b.n	4d94 <_svfprintf_r+0x4c>
    5592:	f04b 0b20 	orr.w	fp, fp, #32
    5596:	f89a 3000 	ldrb.w	r3, [sl]
    559a:	e42e      	b.n	4dfa <_svfprintf_r+0xb2>
    559c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    559e:	930c      	str	r3, [sp, #48]	; 0x30
    55a0:	6816      	ldr	r6, [r2, #0]
    55a2:	2400      	movs	r4, #0
    55a4:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    55a8:	1d17      	adds	r7, r2, #4
    55aa:	2e00      	cmp	r6, #0
    55ac:	f000 8565 	beq.w	607a <_svfprintf_r+0x1332>
    55b0:	2d00      	cmp	r5, #0
    55b2:	f2c0 84a2 	blt.w	5efa <_svfprintf_r+0x11b2>
    55b6:	462a      	mov	r2, r5
    55b8:	4621      	mov	r1, r4
    55ba:	4630      	mov	r0, r6
    55bc:	f7fe f928 	bl	3810 <memchr>
    55c0:	2800      	cmp	r0, #0
    55c2:	f000 85cc 	beq.w	615e <_svfprintf_r+0x1416>
    55c6:	1b83      	subs	r3, r0, r6
    55c8:	9308      	str	r3, [sp, #32]
    55ca:	46a0      	mov	r8, r4
    55cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    55d0:	9709      	str	r7, [sp, #36]	; 0x24
    55d2:	9304      	str	r3, [sp, #16]
    55d4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    55d8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    55dc:	e5a6      	b.n	512c <_svfprintf_r+0x3e4>
    55de:	4855      	ldr	r0, [pc, #340]	; (5734 <_svfprintf_r+0x9ec>)
    55e0:	920c      	str	r2, [sp, #48]	; 0x30
    55e2:	f1b8 0f00 	cmp.w	r8, #0
    55e6:	f040 8184 	bne.w	58f2 <_svfprintf_r+0xbaa>
    55ea:	4647      	mov	r7, r8
    55ec:	f04f 0800 	mov.w	r8, #0
    55f0:	f8cd 8020 	str.w	r8, [sp, #32]
    55f4:	ae28      	add	r6, sp, #160	; 0xa0
    55f6:	e706      	b.n	5406 <_svfprintf_r+0x6be>
    55f8:	930c      	str	r3, [sp, #48]	; 0x30
    55fa:	2a00      	cmp	r2, #0
    55fc:	f040 862d 	bne.w	625a <_svfprintf_r+0x1512>
    5600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5602:	2a00      	cmp	r2, #0
    5604:	f43f ac8f 	beq.w	4f26 <_svfprintf_r+0x1de>
    5608:	2300      	movs	r3, #0
    560a:	2101      	movs	r1, #1
    560c:	461f      	mov	r7, r3
    560e:	9104      	str	r1, [sp, #16]
    5610:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    5614:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5618:	4698      	mov	r8, r3
    561a:	930e      	str	r3, [sp, #56]	; 0x38
    561c:	9108      	str	r1, [sp, #32]
    561e:	ae1e      	add	r6, sp, #120	; 0x78
    5620:	e588      	b.n	5134 <_svfprintf_r+0x3ec>
    5622:	f1b8 0f00 	cmp.w	r8, #0
    5626:	f000 858b 	beq.w	6140 <_svfprintf_r+0x13f8>
    562a:	2700      	movs	r7, #0
    562c:	2400      	movs	r4, #0
    562e:	2500      	movs	r5, #0
    5630:	e4ac      	b.n	4f8c <_svfprintf_r+0x244>
    5632:	4840      	ldr	r0, [pc, #256]	; (5734 <_svfprintf_r+0x9ec>)
    5634:	920c      	str	r2, [sp, #48]	; 0x30
    5636:	469b      	mov	fp, r3
    5638:	ea54 0305 	orrs.w	r3, r4, r5
    563c:	9709      	str	r7, [sp, #36]	; 0x24
    563e:	f04f 0700 	mov.w	r7, #0
    5642:	f47f af16 	bne.w	5472 <_svfprintf_r+0x72a>
    5646:	2400      	movs	r4, #0
    5648:	2500      	movs	r5, #0
    564a:	e712      	b.n	5472 <_svfprintf_r+0x72a>
    564c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    564e:	e5bb      	b.n	51c8 <_svfprintf_r+0x480>
    5650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5652:	2a65      	cmp	r2, #101	; 0x65
    5654:	f340 80a1 	ble.w	579a <_svfprintf_r+0xa52>
    5658:	eeb5 8b40 	vcmp.f64	d8, #0.0
    565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5660:	f040 8149 	bne.w	58f6 <_svfprintf_r+0xbae>
    5664:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5666:	4934      	ldr	r1, [pc, #208]	; (5738 <_svfprintf_r+0x9f0>)
    5668:	f8c9 1000 	str.w	r1, [r9]
    566c:	3201      	adds	r2, #1
    566e:	3301      	adds	r3, #1
    5670:	2101      	movs	r1, #1
    5672:	2a07      	cmp	r2, #7
    5674:	931d      	str	r3, [sp, #116]	; 0x74
    5676:	921c      	str	r2, [sp, #112]	; 0x70
    5678:	f8c9 1004 	str.w	r1, [r9, #4]
    567c:	f300 8392 	bgt.w	5da4 <_svfprintf_r+0x105c>
    5680:	f109 0908 	add.w	r9, r9, #8
    5684:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5686:	990d      	ldr	r1, [sp, #52]	; 0x34
    5688:	428a      	cmp	r2, r1
    568a:	db03      	blt.n	5694 <_svfprintf_r+0x94c>
    568c:	f01b 0f01 	tst.w	fp, #1
    5690:	f43f ae0b 	beq.w	52aa <_svfprintf_r+0x562>
    5694:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5696:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5698:	9910      	ldr	r1, [sp, #64]	; 0x40
    569a:	f8c9 1000 	str.w	r1, [r9]
    569e:	3201      	adds	r2, #1
    56a0:	4403      	add	r3, r0
    56a2:	2a07      	cmp	r2, #7
    56a4:	931d      	str	r3, [sp, #116]	; 0x74
    56a6:	f8c9 0004 	str.w	r0, [r9, #4]
    56aa:	921c      	str	r2, [sp, #112]	; 0x70
    56ac:	f300 83d6 	bgt.w	5e5c <_svfprintf_r+0x1114>
    56b0:	f109 0908 	add.w	r9, r9, #8
    56b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    56b6:	1e54      	subs	r4, r2, #1
    56b8:	2c00      	cmp	r4, #0
    56ba:	f77f adf6 	ble.w	52aa <_svfprintf_r+0x562>
    56be:	2c10      	cmp	r4, #16
    56c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    56c2:	4f1e      	ldr	r7, [pc, #120]	; (573c <_svfprintf_r+0x9f4>)
    56c4:	f340 81dc 	ble.w	5a80 <_svfprintf_r+0xd38>
    56c8:	2510      	movs	r5, #16
    56ca:	9e05      	ldr	r6, [sp, #20]
    56cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
    56d0:	e005      	b.n	56de <_svfprintf_r+0x996>
    56d2:	f109 0908 	add.w	r9, r9, #8
    56d6:	3c10      	subs	r4, #16
    56d8:	2c10      	cmp	r4, #16
    56da:	f340 81d1 	ble.w	5a80 <_svfprintf_r+0xd38>
    56de:	3201      	adds	r2, #1
    56e0:	3310      	adds	r3, #16
    56e2:	2a07      	cmp	r2, #7
    56e4:	931d      	str	r3, [sp, #116]	; 0x74
    56e6:	921c      	str	r2, [sp, #112]	; 0x70
    56e8:	f8c9 7000 	str.w	r7, [r9]
    56ec:	f8c9 5004 	str.w	r5, [r9, #4]
    56f0:	ddef      	ble.n	56d2 <_svfprintf_r+0x98a>
    56f2:	aa1b      	add	r2, sp, #108	; 0x6c
    56f4:	4641      	mov	r1, r8
    56f6:	4630      	mov	r0, r6
    56f8:	f000 fdde 	bl	62b8 <__ssprint_r>
    56fc:	2800      	cmp	r0, #0
    56fe:	f47f ac19 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5702:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5704:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5706:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    570a:	e7e4      	b.n	56d6 <_svfprintf_r+0x98e>
    570c:	9a07      	ldr	r2, [sp, #28]
    570e:	9904      	ldr	r1, [sp, #16]
    5710:	1a54      	subs	r4, r2, r1
    5712:	2c00      	cmp	r4, #0
    5714:	f77f ad7c 	ble.w	5210 <_svfprintf_r+0x4c8>
    5718:	2c10      	cmp	r4, #16
    571a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    571c:	4f07      	ldr	r7, [pc, #28]	; (573c <_svfprintf_r+0x9f4>)
    571e:	dd2e      	ble.n	577e <_svfprintf_r+0xa36>
    5720:	4649      	mov	r1, r9
    5722:	2510      	movs	r5, #16
    5724:	46c1      	mov	r9, r8
    5726:	4618      	mov	r0, r3
    5728:	46b0      	mov	r8, r6
    572a:	9e05      	ldr	r6, [sp, #20]
    572c:	e00d      	b.n	574a <_svfprintf_r+0xa02>
    572e:	bf00      	nop
    5730:	20000abc 	.word	0x20000abc
    5734:	20000ad0 	.word	0x20000ad0
    5738:	20000aa8 	.word	0x20000aa8
    573c:	20000b88 	.word	0x20000b88
    5740:	3c10      	subs	r4, #16
    5742:	2c10      	cmp	r4, #16
    5744:	f101 0108 	add.w	r1, r1, #8
    5748:	dd15      	ble.n	5776 <_svfprintf_r+0xa2e>
    574a:	3201      	adds	r2, #1
    574c:	3010      	adds	r0, #16
    574e:	2a07      	cmp	r2, #7
    5750:	901d      	str	r0, [sp, #116]	; 0x74
    5752:	921c      	str	r2, [sp, #112]	; 0x70
    5754:	600f      	str	r7, [r1, #0]
    5756:	604d      	str	r5, [r1, #4]
    5758:	ddf2      	ble.n	5740 <_svfprintf_r+0x9f8>
    575a:	aa1b      	add	r2, sp, #108	; 0x6c
    575c:	9903      	ldr	r1, [sp, #12]
    575e:	4630      	mov	r0, r6
    5760:	f000 fdaa 	bl	62b8 <__ssprint_r>
    5764:	2800      	cmp	r0, #0
    5766:	f47f abe5 	bne.w	4f34 <_svfprintf_r+0x1ec>
    576a:	3c10      	subs	r4, #16
    576c:	2c10      	cmp	r4, #16
    576e:	981d      	ldr	r0, [sp, #116]	; 0x74
    5770:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5772:	a928      	add	r1, sp, #160	; 0xa0
    5774:	dce9      	bgt.n	574a <_svfprintf_r+0xa02>
    5776:	4646      	mov	r6, r8
    5778:	4603      	mov	r3, r0
    577a:	46c8      	mov	r8, r9
    577c:	4689      	mov	r9, r1
    577e:	3201      	adds	r2, #1
    5780:	4423      	add	r3, r4
    5782:	2a07      	cmp	r2, #7
    5784:	931d      	str	r3, [sp, #116]	; 0x74
    5786:	921c      	str	r2, [sp, #112]	; 0x70
    5788:	f8c9 7000 	str.w	r7, [r9]
    578c:	f8c9 4004 	str.w	r4, [r9, #4]
    5790:	f300 8246 	bgt.w	5c20 <_svfprintf_r+0xed8>
    5794:	f109 0908 	add.w	r9, r9, #8
    5798:	e53a      	b.n	5210 <_svfprintf_r+0x4c8>
    579a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    579c:	f8c9 6000 	str.w	r6, [r9]
    57a0:	2a01      	cmp	r2, #1
    57a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    57a4:	f103 0301 	add.w	r3, r3, #1
    57a8:	f102 0201 	add.w	r2, r2, #1
    57ac:	f04f 0101 	mov.w	r1, #1
    57b0:	931d      	str	r3, [sp, #116]	; 0x74
    57b2:	921c      	str	r2, [sp, #112]	; 0x70
    57b4:	f8c9 1004 	str.w	r1, [r9, #4]
    57b8:	f340 8210 	ble.w	5bdc <_svfprintf_r+0xe94>
    57bc:	2a07      	cmp	r2, #7
    57be:	f300 8215 	bgt.w	5bec <_svfprintf_r+0xea4>
    57c2:	f109 0908 	add.w	r9, r9, #8
    57c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    57c8:	9910      	ldr	r1, [sp, #64]	; 0x40
    57ca:	f8c9 1000 	str.w	r1, [r9]
    57ce:	3201      	adds	r2, #1
    57d0:	4403      	add	r3, r0
    57d2:	2a07      	cmp	r2, #7
    57d4:	931d      	str	r3, [sp, #116]	; 0x74
    57d6:	921c      	str	r2, [sp, #112]	; 0x70
    57d8:	f8c9 0004 	str.w	r0, [r9, #4]
    57dc:	f300 8213 	bgt.w	5c06 <_svfprintf_r+0xebe>
    57e0:	f109 0908 	add.w	r9, r9, #8
    57e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    57e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57ec:	990d      	ldr	r1, [sp, #52]	; 0x34
    57ee:	f000 80f5 	beq.w	59dc <_svfprintf_r+0xc94>
    57f2:	3901      	subs	r1, #1
    57f4:	3201      	adds	r2, #1
    57f6:	3601      	adds	r6, #1
    57f8:	440b      	add	r3, r1
    57fa:	2a07      	cmp	r2, #7
    57fc:	f8c9 6000 	str.w	r6, [r9]
    5800:	921c      	str	r2, [sp, #112]	; 0x70
    5802:	931d      	str	r3, [sp, #116]	; 0x74
    5804:	f8c9 1004 	str.w	r1, [r9, #4]
    5808:	f300 811d 	bgt.w	5a46 <_svfprintf_r+0xcfe>
    580c:	f109 0908 	add.w	r9, r9, #8
    5810:	9811      	ldr	r0, [sp, #68]	; 0x44
    5812:	f8c9 0004 	str.w	r0, [r9, #4]
    5816:	3201      	adds	r2, #1
    5818:	4403      	add	r3, r0
    581a:	a917      	add	r1, sp, #92	; 0x5c
    581c:	2a07      	cmp	r2, #7
    581e:	931d      	str	r3, [sp, #116]	; 0x74
    5820:	921c      	str	r2, [sp, #112]	; 0x70
    5822:	f8c9 1000 	str.w	r1, [r9]
    5826:	f77f ad3e 	ble.w	52a6 <_svfprintf_r+0x55e>
    582a:	aa1b      	add	r2, sp, #108	; 0x6c
    582c:	9903      	ldr	r1, [sp, #12]
    582e:	9805      	ldr	r0, [sp, #20]
    5830:	f000 fd42 	bl	62b8 <__ssprint_r>
    5834:	2800      	cmp	r0, #0
    5836:	f47f ab7d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    583a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    583c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5840:	e533      	b.n	52aa <_svfprintf_r+0x562>
    5842:	aa1b      	add	r2, sp, #108	; 0x6c
    5844:	9903      	ldr	r1, [sp, #12]
    5846:	9805      	ldr	r0, [sp, #20]
    5848:	f000 fd36 	bl	62b8 <__ssprint_r>
    584c:	2800      	cmp	r0, #0
    584e:	f43f ad79 	beq.w	5344 <_svfprintf_r+0x5fc>
    5852:	f7ff bb6f 	b.w	4f34 <_svfprintf_r+0x1ec>
    5856:	9909      	ldr	r1, [sp, #36]	; 0x24
    5858:	f1b8 0f00 	cmp.w	r8, #0
    585c:	680c      	ldr	r4, [r1, #0]
    585e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5862:	f101 0704 	add.w	r7, r1, #4
    5866:	f04f 0500 	mov.w	r5, #0
    586a:	f2c0 8371 	blt.w	5f50 <_svfprintf_r+0x1208>
    586e:	ea54 0205 	orrs.w	r2, r4, r5
    5872:	9709      	str	r7, [sp, #36]	; 0x24
    5874:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5878:	461f      	mov	r7, r3
    587a:	f47f ac0a 	bne.w	5092 <_svfprintf_r+0x34a>
    587e:	f1b8 0f00 	cmp.w	r8, #0
    5882:	f43f aeb3 	beq.w	55ec <_svfprintf_r+0x8a4>
    5886:	2400      	movs	r4, #0
    5888:	e5b6      	b.n	53f8 <_svfprintf_r+0x6b0>
    588a:	aa1b      	add	r2, sp, #108	; 0x6c
    588c:	9903      	ldr	r1, [sp, #12]
    588e:	9805      	ldr	r0, [sp, #20]
    5890:	f000 fd12 	bl	62b8 <__ssprint_r>
    5894:	2800      	cmp	r0, #0
    5896:	f47f ab4d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    589a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    589c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58a0:	e4f0      	b.n	5284 <_svfprintf_r+0x53c>
    58a2:	aa1b      	add	r2, sp, #108	; 0x6c
    58a4:	9903      	ldr	r1, [sp, #12]
    58a6:	9805      	ldr	r0, [sp, #20]
    58a8:	f000 fd06 	bl	62b8 <__ssprint_r>
    58ac:	2800      	cmp	r0, #0
    58ae:	f47f ab41 	bne.w	4f34 <_svfprintf_r+0x1ec>
    58b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58b4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58b8:	e496      	b.n	51e8 <_svfprintf_r+0x4a0>
    58ba:	aa1b      	add	r2, sp, #108	; 0x6c
    58bc:	9903      	ldr	r1, [sp, #12]
    58be:	9805      	ldr	r0, [sp, #20]
    58c0:	f000 fcfa 	bl	62b8 <__ssprint_r>
    58c4:	2800      	cmp	r0, #0
    58c6:	f47f ab35 	bne.w	4f34 <_svfprintf_r+0x1ec>
    58ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58cc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58d0:	e49a      	b.n	5208 <_svfprintf_r+0x4c0>
    58d2:	f1b8 0f00 	cmp.w	r8, #0
    58d6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    58da:	f2c0 826f 	blt.w	5dbc <_svfprintf_r+0x1074>
    58de:	ea54 0305 	orrs.w	r3, r4, r5
    58e2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    58e6:	f47f adc4 	bne.w	5472 <_svfprintf_r+0x72a>
    58ea:	f1b8 0f00 	cmp.w	r8, #0
    58ee:	f43f ae7c 	beq.w	55ea <_svfprintf_r+0x8a2>
    58f2:	2700      	movs	r7, #0
    58f4:	e6a7      	b.n	5646 <_svfprintf_r+0x8fe>
    58f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    58f8:	2c00      	cmp	r4, #0
    58fa:	f340 8261 	ble.w	5dc0 <_svfprintf_r+0x1078>
    58fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5900:	990d      	ldr	r1, [sp, #52]	; 0x34
    5902:	428a      	cmp	r2, r1
    5904:	bfa8      	it	ge
    5906:	460a      	movge	r2, r1
    5908:	2a00      	cmp	r2, #0
    590a:	4614      	mov	r4, r2
    590c:	dd0d      	ble.n	592a <_svfprintf_r+0xbe2>
    590e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5910:	f8c9 6000 	str.w	r6, [r9]
    5914:	3201      	adds	r2, #1
    5916:	4423      	add	r3, r4
    5918:	2a07      	cmp	r2, #7
    591a:	931d      	str	r3, [sp, #116]	; 0x74
    591c:	f8c9 4004 	str.w	r4, [r9, #4]
    5920:	921c      	str	r2, [sp, #112]	; 0x70
    5922:	f300 8372 	bgt.w	600a <_svfprintf_r+0x12c2>
    5926:	f109 0908 	add.w	r9, r9, #8
    592a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    592c:	2c00      	cmp	r4, #0
    592e:	bfa8      	it	ge
    5930:	1b12      	subge	r2, r2, r4
    5932:	2a00      	cmp	r2, #0
    5934:	4614      	mov	r4, r2
    5936:	f340 80f1 	ble.w	5b1c <_svfprintf_r+0xdd4>
    593a:	2c10      	cmp	r4, #16
    593c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    593e:	4fc1      	ldr	r7, [pc, #772]	; (5c44 <_svfprintf_r+0xefc>)
    5940:	f340 8219 	ble.w	5d76 <_svfprintf_r+0x102e>
    5944:	4649      	mov	r1, r9
    5946:	2510      	movs	r5, #16
    5948:	46b1      	mov	r9, r6
    594a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    594e:	9e03      	ldr	r6, [sp, #12]
    5950:	e004      	b.n	595c <_svfprintf_r+0xc14>
    5952:	3108      	adds	r1, #8
    5954:	3c10      	subs	r4, #16
    5956:	2c10      	cmp	r4, #16
    5958:	f340 820b 	ble.w	5d72 <_svfprintf_r+0x102a>
    595c:	3201      	adds	r2, #1
    595e:	3310      	adds	r3, #16
    5960:	2a07      	cmp	r2, #7
    5962:	931d      	str	r3, [sp, #116]	; 0x74
    5964:	921c      	str	r2, [sp, #112]	; 0x70
    5966:	600f      	str	r7, [r1, #0]
    5968:	604d      	str	r5, [r1, #4]
    596a:	ddf2      	ble.n	5952 <_svfprintf_r+0xc0a>
    596c:	aa1b      	add	r2, sp, #108	; 0x6c
    596e:	4631      	mov	r1, r6
    5970:	4640      	mov	r0, r8
    5972:	f000 fca1 	bl	62b8 <__ssprint_r>
    5976:	2800      	cmp	r0, #0
    5978:	f47f aadc 	bne.w	4f34 <_svfprintf_r+0x1ec>
    597c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    597e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5980:	a928      	add	r1, sp, #160	; 0xa0
    5982:	e7e7      	b.n	5954 <_svfprintf_r+0xc0c>
    5984:	aa1b      	add	r2, sp, #108	; 0x6c
    5986:	9903      	ldr	r1, [sp, #12]
    5988:	9805      	ldr	r0, [sp, #20]
    598a:	f000 fc95 	bl	62b8 <__ssprint_r>
    598e:	2800      	cmp	r0, #0
    5990:	f47f aad0 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5994:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    599a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    599e:	e413      	b.n	51c8 <_svfprintf_r+0x480>
    59a0:	f01b 0210 	ands.w	r2, fp, #16
    59a4:	f47f af57 	bne.w	5856 <_svfprintf_r+0xb0e>
    59a8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    59ac:	f43f af53 	beq.w	5856 <_svfprintf_r+0xb0e>
    59b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    59b2:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    59b6:	460b      	mov	r3, r1
    59b8:	f1b8 0f00 	cmp.w	r8, #0
    59bc:	f103 0304 	add.w	r3, r3, #4
    59c0:	880c      	ldrh	r4, [r1, #0]
    59c2:	f04f 0500 	mov.w	r5, #0
    59c6:	f2c0 8294 	blt.w	5ef2 <_svfprintf_r+0x11aa>
    59ca:	ea54 0105 	orrs.w	r1, r4, r5
    59ce:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    59d2:	9309      	str	r3, [sp, #36]	; 0x24
    59d4:	4617      	mov	r7, r2
    59d6:	f47f ab5c 	bne.w	5092 <_svfprintf_r+0x34a>
    59da:	e750      	b.n	587e <_svfprintf_r+0xb36>
    59dc:	1e4c      	subs	r4, r1, #1
    59de:	2c00      	cmp	r4, #0
    59e0:	f77f af16 	ble.w	5810 <_svfprintf_r+0xac8>
    59e4:	2c10      	cmp	r4, #16
    59e6:	4f97      	ldr	r7, [pc, #604]	; (5c44 <_svfprintf_r+0xefc>)
    59e8:	dd22      	ble.n	5a30 <_svfprintf_r+0xce8>
    59ea:	2510      	movs	r5, #16
    59ec:	9e05      	ldr	r6, [sp, #20]
    59ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
    59f2:	e004      	b.n	59fe <_svfprintf_r+0xcb6>
    59f4:	3c10      	subs	r4, #16
    59f6:	2c10      	cmp	r4, #16
    59f8:	f109 0908 	add.w	r9, r9, #8
    59fc:	dd18      	ble.n	5a30 <_svfprintf_r+0xce8>
    59fe:	3201      	adds	r2, #1
    5a00:	3310      	adds	r3, #16
    5a02:	2a07      	cmp	r2, #7
    5a04:	931d      	str	r3, [sp, #116]	; 0x74
    5a06:	921c      	str	r2, [sp, #112]	; 0x70
    5a08:	f8c9 7000 	str.w	r7, [r9]
    5a0c:	f8c9 5004 	str.w	r5, [r9, #4]
    5a10:	ddf0      	ble.n	59f4 <_svfprintf_r+0xcac>
    5a12:	aa1b      	add	r2, sp, #108	; 0x6c
    5a14:	4641      	mov	r1, r8
    5a16:	4630      	mov	r0, r6
    5a18:	f000 fc4e 	bl	62b8 <__ssprint_r>
    5a1c:	2800      	cmp	r0, #0
    5a1e:	f47f aa89 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5a22:	3c10      	subs	r4, #16
    5a24:	2c10      	cmp	r4, #16
    5a26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5a28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a2a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5a2e:	dce6      	bgt.n	59fe <_svfprintf_r+0xcb6>
    5a30:	3201      	adds	r2, #1
    5a32:	4423      	add	r3, r4
    5a34:	2a07      	cmp	r2, #7
    5a36:	931d      	str	r3, [sp, #116]	; 0x74
    5a38:	921c      	str	r2, [sp, #112]	; 0x70
    5a3a:	f8c9 7000 	str.w	r7, [r9]
    5a3e:	f8c9 4004 	str.w	r4, [r9, #4]
    5a42:	f77f aee3 	ble.w	580c <_svfprintf_r+0xac4>
    5a46:	aa1b      	add	r2, sp, #108	; 0x6c
    5a48:	9903      	ldr	r1, [sp, #12]
    5a4a:	9805      	ldr	r0, [sp, #20]
    5a4c:	f000 fc34 	bl	62b8 <__ssprint_r>
    5a50:	2800      	cmp	r0, #0
    5a52:	f47f aa6f 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5a58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a5a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5a5e:	e6d7      	b.n	5810 <_svfprintf_r+0xac8>
    5a60:	f01b 0f10 	tst.w	fp, #16
    5a64:	d133      	bne.n	5ace <_svfprintf_r+0xd86>
    5a66:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5a6a:	d030      	beq.n	5ace <_svfprintf_r+0xd86>
    5a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    5a6e:	f9b1 4000 	ldrsh.w	r4, [r1]
    5a72:	3104      	adds	r1, #4
    5a74:	17e5      	asrs	r5, r4, #31
    5a76:	4622      	mov	r2, r4
    5a78:	462b      	mov	r3, r5
    5a7a:	9109      	str	r1, [sp, #36]	; 0x24
    5a7c:	f7ff baf8 	b.w	5070 <_svfprintf_r+0x328>
    5a80:	3201      	adds	r2, #1
    5a82:	4423      	add	r3, r4
    5a84:	2a07      	cmp	r2, #7
    5a86:	931d      	str	r3, [sp, #116]	; 0x74
    5a88:	921c      	str	r2, [sp, #112]	; 0x70
    5a8a:	f8c9 7000 	str.w	r7, [r9]
    5a8e:	f8c9 4004 	str.w	r4, [r9, #4]
    5a92:	f77f ac08 	ble.w	52a6 <_svfprintf_r+0x55e>
    5a96:	e6c8      	b.n	582a <_svfprintf_r+0xae2>
    5a98:	9909      	ldr	r1, [sp, #36]	; 0x24
    5a9a:	f1b8 0f00 	cmp.w	r8, #0
    5a9e:	680c      	ldr	r4, [r1, #0]
    5aa0:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5aa4:	f101 0704 	add.w	r7, r1, #4
    5aa8:	f04f 0500 	mov.w	r5, #0
    5aac:	f2c0 80c5 	blt.w	5c3a <_svfprintf_r+0xef2>
    5ab0:	ea54 0205 	orrs.w	r2, r4, r5
    5ab4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5ab8:	9709      	str	r7, [sp, #36]	; 0x24
    5aba:	f43f adb2 	beq.w	5622 <_svfprintf_r+0x8da>
    5abe:	461f      	mov	r7, r3
    5ac0:	f7ff ba64 	b.w	4f8c <_svfprintf_r+0x244>
    5ac4:	681c      	ldr	r4, [r3, #0]
    5ac6:	3304      	adds	r3, #4
    5ac8:	9309      	str	r3, [sp, #36]	; 0x24
    5aca:	2500      	movs	r5, #0
    5acc:	e4b6      	b.n	543c <_svfprintf_r+0x6f4>
    5ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ad0:	6814      	ldr	r4, [r2, #0]
    5ad2:	4613      	mov	r3, r2
    5ad4:	3304      	adds	r3, #4
    5ad6:	17e5      	asrs	r5, r4, #31
    5ad8:	4622      	mov	r2, r4
    5ada:	9309      	str	r3, [sp, #36]	; 0x24
    5adc:	2a00      	cmp	r2, #0
    5ade:	462b      	mov	r3, r5
    5ae0:	f173 0300 	sbcs.w	r3, r3, #0
    5ae4:	f6bf aac9 	bge.w	507a <_svfprintf_r+0x332>
    5ae8:	4264      	negs	r4, r4
    5aea:	f04f 072d 	mov.w	r7, #45	; 0x2d
    5aee:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    5af2:	f1b8 0f00 	cmp.w	r8, #0
    5af6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5afa:	f6ff aaca 	blt.w	5092 <_svfprintf_r+0x34a>
    5afe:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5b02:	f7ff bac6 	b.w	5092 <_svfprintf_r+0x34a>
    5b06:	aa1b      	add	r2, sp, #108	; 0x6c
    5b08:	9903      	ldr	r1, [sp, #12]
    5b0a:	9805      	ldr	r0, [sp, #20]
    5b0c:	f000 fbd4 	bl	62b8 <__ssprint_r>
    5b10:	2800      	cmp	r0, #0
    5b12:	f47f aa0f 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5b18:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5b1c:	990e      	ldr	r1, [sp, #56]	; 0x38
    5b1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5b20:	4431      	add	r1, r6
    5b22:	460d      	mov	r5, r1
    5b24:	990d      	ldr	r1, [sp, #52]	; 0x34
    5b26:	428a      	cmp	r2, r1
    5b28:	db47      	blt.n	5bba <_svfprintf_r+0xe72>
    5b2a:	f01b 0f01 	tst.w	fp, #1
    5b2e:	d144      	bne.n	5bba <_svfprintf_r+0xe72>
    5b30:	980d      	ldr	r0, [sp, #52]	; 0x34
    5b32:	4406      	add	r6, r0
    5b34:	1b74      	subs	r4, r6, r5
    5b36:	1a82      	subs	r2, r0, r2
    5b38:	4294      	cmp	r4, r2
    5b3a:	bfa8      	it	ge
    5b3c:	4614      	movge	r4, r2
    5b3e:	2c00      	cmp	r4, #0
    5b40:	4626      	mov	r6, r4
    5b42:	dd0d      	ble.n	5b60 <_svfprintf_r+0xe18>
    5b44:	991c      	ldr	r1, [sp, #112]	; 0x70
    5b46:	f8c9 5000 	str.w	r5, [r9]
    5b4a:	3101      	adds	r1, #1
    5b4c:	4423      	add	r3, r4
    5b4e:	2907      	cmp	r1, #7
    5b50:	931d      	str	r3, [sp, #116]	; 0x74
    5b52:	f8c9 4004 	str.w	r4, [r9, #4]
    5b56:	911c      	str	r1, [sp, #112]	; 0x70
    5b58:	f300 8280 	bgt.w	605c <_svfprintf_r+0x1314>
    5b5c:	f109 0908 	add.w	r9, r9, #8
    5b60:	2e00      	cmp	r6, #0
    5b62:	bfac      	ite	ge
    5b64:	1b94      	subge	r4, r2, r6
    5b66:	4614      	movlt	r4, r2
    5b68:	2c00      	cmp	r4, #0
    5b6a:	f77f ab9e 	ble.w	52aa <_svfprintf_r+0x562>
    5b6e:	2c10      	cmp	r4, #16
    5b70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b72:	4f34      	ldr	r7, [pc, #208]	; (5c44 <_svfprintf_r+0xefc>)
    5b74:	dd84      	ble.n	5a80 <_svfprintf_r+0xd38>
    5b76:	2510      	movs	r5, #16
    5b78:	9e05      	ldr	r6, [sp, #20]
    5b7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5b7e:	e005      	b.n	5b8c <_svfprintf_r+0xe44>
    5b80:	f109 0908 	add.w	r9, r9, #8
    5b84:	3c10      	subs	r4, #16
    5b86:	2c10      	cmp	r4, #16
    5b88:	f77f af7a 	ble.w	5a80 <_svfprintf_r+0xd38>
    5b8c:	3201      	adds	r2, #1
    5b8e:	3310      	adds	r3, #16
    5b90:	2a07      	cmp	r2, #7
    5b92:	931d      	str	r3, [sp, #116]	; 0x74
    5b94:	921c      	str	r2, [sp, #112]	; 0x70
    5b96:	f8c9 7000 	str.w	r7, [r9]
    5b9a:	f8c9 5004 	str.w	r5, [r9, #4]
    5b9e:	ddef      	ble.n	5b80 <_svfprintf_r+0xe38>
    5ba0:	aa1b      	add	r2, sp, #108	; 0x6c
    5ba2:	4641      	mov	r1, r8
    5ba4:	4630      	mov	r0, r6
    5ba6:	f000 fb87 	bl	62b8 <__ssprint_r>
    5baa:	2800      	cmp	r0, #0
    5bac:	f47f a9c2 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5bb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5bb4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5bb8:	e7e4      	b.n	5b84 <_svfprintf_r+0xe3c>
    5bba:	991c      	ldr	r1, [sp, #112]	; 0x70
    5bbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    5bbe:	9810      	ldr	r0, [sp, #64]	; 0x40
    5bc0:	f8c9 0000 	str.w	r0, [r9]
    5bc4:	3101      	adds	r1, #1
    5bc6:	4423      	add	r3, r4
    5bc8:	2907      	cmp	r1, #7
    5bca:	931d      	str	r3, [sp, #116]	; 0x74
    5bcc:	f8c9 4004 	str.w	r4, [r9, #4]
    5bd0:	911c      	str	r1, [sp, #112]	; 0x70
    5bd2:	f300 8226 	bgt.w	6022 <_svfprintf_r+0x12da>
    5bd6:	f109 0908 	add.w	r9, r9, #8
    5bda:	e7a9      	b.n	5b30 <_svfprintf_r+0xde8>
    5bdc:	f01b 0f01 	tst.w	fp, #1
    5be0:	f47f adec 	bne.w	57bc <_svfprintf_r+0xa74>
    5be4:	2a07      	cmp	r2, #7
    5be6:	f77f ae11 	ble.w	580c <_svfprintf_r+0xac4>
    5bea:	e72c      	b.n	5a46 <_svfprintf_r+0xcfe>
    5bec:	aa1b      	add	r2, sp, #108	; 0x6c
    5bee:	9903      	ldr	r1, [sp, #12]
    5bf0:	9805      	ldr	r0, [sp, #20]
    5bf2:	f000 fb61 	bl	62b8 <__ssprint_r>
    5bf6:	2800      	cmp	r0, #0
    5bf8:	f47f a99c 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c00:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c04:	e5df      	b.n	57c6 <_svfprintf_r+0xa7e>
    5c06:	aa1b      	add	r2, sp, #108	; 0x6c
    5c08:	9903      	ldr	r1, [sp, #12]
    5c0a:	9805      	ldr	r0, [sp, #20]
    5c0c:	f000 fb54 	bl	62b8 <__ssprint_r>
    5c10:	2800      	cmp	r0, #0
    5c12:	f47f a98f 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5c16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c1a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c1e:	e5e1      	b.n	57e4 <_svfprintf_r+0xa9c>
    5c20:	aa1b      	add	r2, sp, #108	; 0x6c
    5c22:	9903      	ldr	r1, [sp, #12]
    5c24:	9805      	ldr	r0, [sp, #20]
    5c26:	f000 fb47 	bl	62b8 <__ssprint_r>
    5c2a:	2800      	cmp	r0, #0
    5c2c:	f47f a982 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5c30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c32:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c36:	f7ff baeb 	b.w	5210 <_svfprintf_r+0x4c8>
    5c3a:	9709      	str	r7, [sp, #36]	; 0x24
    5c3c:	2700      	movs	r7, #0
    5c3e:	f7ff b9a5 	b.w	4f8c <_svfprintf_r+0x244>
    5c42:	bf00      	nop
    5c44:	20000b88 	.word	0x20000b88
    5c48:	f01b 0f10 	tst.w	fp, #16
    5c4c:	d10b      	bne.n	5c66 <_svfprintf_r+0xf1e>
    5c4e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5c52:	d008      	beq.n	5c66 <_svfprintf_r+0xf1e>
    5c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c56:	6813      	ldr	r3, [r2, #0]
    5c58:	3204      	adds	r2, #4
    5c5a:	9209      	str	r2, [sp, #36]	; 0x24
    5c5c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    5c60:	801a      	strh	r2, [r3, #0]
    5c62:	f7ff b897 	b.w	4d94 <_svfprintf_r+0x4c>
    5c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c68:	6813      	ldr	r3, [r2, #0]
    5c6a:	3204      	adds	r2, #4
    5c6c:	9209      	str	r2, [sp, #36]	; 0x24
    5c6e:	9a06      	ldr	r2, [sp, #24]
    5c70:	601a      	str	r2, [r3, #0]
    5c72:	f7ff b88f 	b.w	4d94 <_svfprintf_r+0x4c>
    5c76:	eeb4 8b48 	vcmp.f64	d8, d8
    5c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c7e:	f180 829e 	bvs.w	61be <_svfprintf_r+0x1476>
    5c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c84:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    5c88:	f023 0520 	bic.w	r5, r3, #32
    5c8c:	f000 8225 	beq.w	60da <_svfprintf_r+0x1392>
    5c90:	2d47      	cmp	r5, #71	; 0x47
    5c92:	f000 8126 	beq.w	5ee2 <_svfprintf_r+0x119a>
    5c96:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    5c9a:	930a      	str	r3, [sp, #40]	; 0x28
    5c9c:	ee18 3a90 	vmov	r3, s17
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	f2c0 821d 	blt.w	60e0 <_svfprintf_r+0x1398>
    5ca6:	eeb0 ab48 	vmov.f64	d10, d8
    5caa:	2700      	movs	r7, #0
    5cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cae:	2b66      	cmp	r3, #102	; 0x66
    5cb0:	f000 8202 	beq.w	60b8 <_svfprintf_r+0x1370>
    5cb4:	2b46      	cmp	r3, #70	; 0x46
    5cb6:	f000 80ec 	beq.w	5e92 <_svfprintf_r+0x114a>
    5cba:	eeb0 0b4a 	vmov.f64	d0, d10
    5cbe:	2d45      	cmp	r5, #69	; 0x45
    5cc0:	bf0c      	ite	eq
    5cc2:	f108 0401 	addeq.w	r4, r8, #1
    5cc6:	4644      	movne	r4, r8
    5cc8:	aa19      	add	r2, sp, #100	; 0x64
    5cca:	ab16      	add	r3, sp, #88	; 0x58
    5ccc:	9201      	str	r2, [sp, #4]
    5cce:	9300      	str	r3, [sp, #0]
    5cd0:	4622      	mov	r2, r4
    5cd2:	ab15      	add	r3, sp, #84	; 0x54
    5cd4:	2102      	movs	r1, #2
    5cd6:	9805      	ldr	r0, [sp, #20]
    5cd8:	f7fe f9f2 	bl	40c0 <_dtoa_r>
    5cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cde:	2b67      	cmp	r3, #103	; 0x67
    5ce0:	4606      	mov	r6, r0
    5ce2:	f040 820e 	bne.w	6102 <_svfprintf_r+0x13ba>
    5ce6:	f01b 0f01 	tst.w	fp, #1
    5cea:	f000 8266 	beq.w	61ba <_svfprintf_r+0x1472>
    5cee:	1931      	adds	r1, r6, r4
    5cf0:	eeb5 ab40 	vcmp.f64	d10, #0.0
    5cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5cf8:	f000 8185 	beq.w	6006 <_svfprintf_r+0x12be>
    5cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5cfe:	4299      	cmp	r1, r3
    5d00:	d906      	bls.n	5d10 <_svfprintf_r+0xfc8>
    5d02:	2030      	movs	r0, #48	; 0x30
    5d04:	1c5a      	adds	r2, r3, #1
    5d06:	9219      	str	r2, [sp, #100]	; 0x64
    5d08:	7018      	strb	r0, [r3, #0]
    5d0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5d0c:	4299      	cmp	r1, r3
    5d0e:	d8f9      	bhi.n	5d04 <_svfprintf_r+0xfbc>
    5d10:	1b9b      	subs	r3, r3, r6
    5d12:	2d47      	cmp	r5, #71	; 0x47
    5d14:	930d      	str	r3, [sp, #52]	; 0x34
    5d16:	f000 811f 	beq.w	5f58 <_svfprintf_r+0x1210>
    5d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d1c:	2b65      	cmp	r3, #101	; 0x65
    5d1e:	f340 81ff 	ble.w	6120 <_svfprintf_r+0x13d8>
    5d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d24:	2b66      	cmp	r3, #102	; 0x66
    5d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5d28:	f000 81fc 	beq.w	6124 <_svfprintf_r+0x13dc>
    5d2c:	930e      	str	r3, [sp, #56]	; 0x38
    5d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5d30:	990d      	ldr	r1, [sp, #52]	; 0x34
    5d32:	428a      	cmp	r2, r1
    5d34:	f2c0 81d8 	blt.w	60e8 <_svfprintf_r+0x13a0>
    5d38:	f01b 0f01 	tst.w	fp, #1
    5d3c:	f040 8234 	bne.w	61a8 <_svfprintf_r+0x1460>
    5d40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    5d44:	9208      	str	r2, [sp, #32]
    5d46:	2267      	movs	r2, #103	; 0x67
    5d48:	920c      	str	r2, [sp, #48]	; 0x30
    5d4a:	2f00      	cmp	r7, #0
    5d4c:	f040 80f6 	bne.w	5f3c <_svfprintf_r+0x11f4>
    5d50:	46b8      	mov	r8, r7
    5d52:	9304      	str	r3, [sp, #16]
    5d54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5d58:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5d5c:	f7ff b9e6 	b.w	512c <_svfprintf_r+0x3e4>
    5d60:	f027 0707 	bic.w	r7, r7, #7
    5d64:	f107 0308 	add.w	r3, r7, #8
    5d68:	ed97 8b00 	vldr	d8, [r7]
    5d6c:	9309      	str	r3, [sp, #36]	; 0x24
    5d6e:	f7ff b9be 	b.w	50ee <_svfprintf_r+0x3a6>
    5d72:	464e      	mov	r6, r9
    5d74:	4689      	mov	r9, r1
    5d76:	3201      	adds	r2, #1
    5d78:	4423      	add	r3, r4
    5d7a:	2a07      	cmp	r2, #7
    5d7c:	931d      	str	r3, [sp, #116]	; 0x74
    5d7e:	921c      	str	r2, [sp, #112]	; 0x70
    5d80:	f8c9 7000 	str.w	r7, [r9]
    5d84:	f8c9 4004 	str.w	r4, [r9, #4]
    5d88:	f73f aebd 	bgt.w	5b06 <_svfprintf_r+0xdbe>
    5d8c:	f109 0908 	add.w	r9, r9, #8
    5d90:	e6c4      	b.n	5b1c <_svfprintf_r+0xdd4>
    5d92:	2700      	movs	r7, #0
    5d94:	45b8      	cmp	r8, r7
    5d96:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5d9a:	f6ff ac54 	blt.w	5646 <_svfprintf_r+0x8fe>
    5d9e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5da2:	e41e      	b.n	55e2 <_svfprintf_r+0x89a>
    5da4:	aa1b      	add	r2, sp, #108	; 0x6c
    5da6:	9903      	ldr	r1, [sp, #12]
    5da8:	9805      	ldr	r0, [sp, #20]
    5daa:	f000 fa85 	bl	62b8 <__ssprint_r>
    5dae:	2800      	cmp	r0, #0
    5db0:	f47f a8c0 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5db4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5db6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5dba:	e463      	b.n	5684 <_svfprintf_r+0x93c>
    5dbc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5dbe:	e43b      	b.n	5638 <_svfprintf_r+0x8f0>
    5dc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5dc2:	49b9      	ldr	r1, [pc, #740]	; (60a8 <_svfprintf_r+0x1360>)
    5dc4:	f8c9 1000 	str.w	r1, [r9]
    5dc8:	3201      	adds	r2, #1
    5dca:	3301      	adds	r3, #1
    5dcc:	2101      	movs	r1, #1
    5dce:	2a07      	cmp	r2, #7
    5dd0:	931d      	str	r3, [sp, #116]	; 0x74
    5dd2:	921c      	str	r2, [sp, #112]	; 0x70
    5dd4:	f8c9 1004 	str.w	r1, [r9, #4]
    5dd8:	dc76      	bgt.n	5ec8 <_svfprintf_r+0x1180>
    5dda:	f109 0908 	add.w	r9, r9, #8
    5dde:	b92c      	cbnz	r4, 5dec <_svfprintf_r+0x10a4>
    5de0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5de2:	b91a      	cbnz	r2, 5dec <_svfprintf_r+0x10a4>
    5de4:	f01b 0f01 	tst.w	fp, #1
    5de8:	f43f aa5f 	beq.w	52aa <_svfprintf_r+0x562>
    5dec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5dee:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5df0:	9910      	ldr	r1, [sp, #64]	; 0x40
    5df2:	f8c9 1000 	str.w	r1, [r9]
    5df6:	3201      	adds	r2, #1
    5df8:	4403      	add	r3, r0
    5dfa:	2a07      	cmp	r2, #7
    5dfc:	931d      	str	r3, [sp, #116]	; 0x74
    5dfe:	f8c9 0004 	str.w	r0, [r9, #4]
    5e02:	921c      	str	r2, [sp, #112]	; 0x70
    5e04:	f300 81b6 	bgt.w	6174 <_svfprintf_r+0x142c>
    5e08:	f109 0908 	add.w	r9, r9, #8
    5e0c:	4264      	negs	r4, r4
    5e0e:	2c00      	cmp	r4, #0
    5e10:	f340 8087 	ble.w	5f22 <_svfprintf_r+0x11da>
    5e14:	2c10      	cmp	r4, #16
    5e16:	4fa5      	ldr	r7, [pc, #660]	; (60ac <_svfprintf_r+0x1364>)
    5e18:	f340 8112 	ble.w	6040 <_svfprintf_r+0x12f8>
    5e1c:	4649      	mov	r1, r9
    5e1e:	2510      	movs	r5, #16
    5e20:	46b1      	mov	r9, r6
    5e22:	f8dd 8014 	ldr.w	r8, [sp, #20]
    5e26:	9e03      	ldr	r6, [sp, #12]
    5e28:	e004      	b.n	5e34 <_svfprintf_r+0x10ec>
    5e2a:	3108      	adds	r1, #8
    5e2c:	3c10      	subs	r4, #16
    5e2e:	2c10      	cmp	r4, #16
    5e30:	f340 8104 	ble.w	603c <_svfprintf_r+0x12f4>
    5e34:	3201      	adds	r2, #1
    5e36:	3310      	adds	r3, #16
    5e38:	2a07      	cmp	r2, #7
    5e3a:	931d      	str	r3, [sp, #116]	; 0x74
    5e3c:	921c      	str	r2, [sp, #112]	; 0x70
    5e3e:	600f      	str	r7, [r1, #0]
    5e40:	604d      	str	r5, [r1, #4]
    5e42:	ddf2      	ble.n	5e2a <_svfprintf_r+0x10e2>
    5e44:	aa1b      	add	r2, sp, #108	; 0x6c
    5e46:	4631      	mov	r1, r6
    5e48:	4640      	mov	r0, r8
    5e4a:	f000 fa35 	bl	62b8 <__ssprint_r>
    5e4e:	2800      	cmp	r0, #0
    5e50:	f47f a870 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5e56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5e58:	a928      	add	r1, sp, #160	; 0xa0
    5e5a:	e7e7      	b.n	5e2c <_svfprintf_r+0x10e4>
    5e5c:	aa1b      	add	r2, sp, #108	; 0x6c
    5e5e:	9903      	ldr	r1, [sp, #12]
    5e60:	9805      	ldr	r0, [sp, #20]
    5e62:	f000 fa29 	bl	62b8 <__ssprint_r>
    5e66:	2800      	cmp	r0, #0
    5e68:	f47f a864 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5e6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5e6e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5e72:	e41f      	b.n	56b4 <_svfprintf_r+0x96c>
    5e74:	2140      	movs	r1, #64	; 0x40
    5e76:	9805      	ldr	r0, [sp, #20]
    5e78:	f7fc fbc8 	bl	260c <_malloc_r>
    5e7c:	9a03      	ldr	r2, [sp, #12]
    5e7e:	6010      	str	r0, [r2, #0]
    5e80:	6110      	str	r0, [r2, #16]
    5e82:	2800      	cmp	r0, #0
    5e84:	f000 81ed 	beq.w	6262 <_svfprintf_r+0x151a>
    5e88:	9a03      	ldr	r2, [sp, #12]
    5e8a:	2340      	movs	r3, #64	; 0x40
    5e8c:	6153      	str	r3, [r2, #20]
    5e8e:	f7fe bf74 	b.w	4d7a <_svfprintf_r+0x32>
    5e92:	aa19      	add	r2, sp, #100	; 0x64
    5e94:	ab16      	add	r3, sp, #88	; 0x58
    5e96:	9201      	str	r2, [sp, #4]
    5e98:	9300      	str	r3, [sp, #0]
    5e9a:	4642      	mov	r2, r8
    5e9c:	ab15      	add	r3, sp, #84	; 0x54
    5e9e:	2103      	movs	r1, #3
    5ea0:	eeb0 0b4a 	vmov.f64	d0, d10
    5ea4:	9805      	ldr	r0, [sp, #20]
    5ea6:	f7fe f90b 	bl	40c0 <_dtoa_r>
    5eaa:	4644      	mov	r4, r8
    5eac:	4606      	mov	r6, r0
    5eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5eb0:	2b46      	cmp	r3, #70	; 0x46
    5eb2:	eb06 0104 	add.w	r1, r6, r4
    5eb6:	f47f af1b 	bne.w	5cf0 <_svfprintf_r+0xfa8>
    5eba:	7833      	ldrb	r3, [r6, #0]
    5ebc:	2b30      	cmp	r3, #48	; 0x30
    5ebe:	f000 818d 	beq.w	61dc <_svfprintf_r+0x1494>
    5ec2:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5ec4:	4421      	add	r1, r4
    5ec6:	e713      	b.n	5cf0 <_svfprintf_r+0xfa8>
    5ec8:	aa1b      	add	r2, sp, #108	; 0x6c
    5eca:	9903      	ldr	r1, [sp, #12]
    5ecc:	9805      	ldr	r0, [sp, #20]
    5ece:	f000 f9f3 	bl	62b8 <__ssprint_r>
    5ed2:	2800      	cmp	r0, #0
    5ed4:	f47f a82e 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5ed8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5edc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5ee0:	e77d      	b.n	5dde <_svfprintf_r+0x1096>
    5ee2:	f1b8 0f00 	cmp.w	r8, #0
    5ee6:	bf08      	it	eq
    5ee8:	f04f 0801 	moveq.w	r8, #1
    5eec:	e6d3      	b.n	5c96 <_svfprintf_r+0xf4e>
    5eee:	9309      	str	r3, [sp, #36]	; 0x24
    5ef0:	e6a4      	b.n	5c3c <_svfprintf_r+0xef4>
    5ef2:	9309      	str	r3, [sp, #36]	; 0x24
    5ef4:	4617      	mov	r7, r2
    5ef6:	f7ff ba7b 	b.w	53f0 <_svfprintf_r+0x6a8>
    5efa:	4630      	mov	r0, r6
    5efc:	f7fd f9c0 	bl	3280 <strlen>
    5f00:	46a0      	mov	r8, r4
    5f02:	4603      	mov	r3, r0
    5f04:	9008      	str	r0, [sp, #32]
    5f06:	f7ff bb61 	b.w	55cc <_svfprintf_r+0x884>
    5f0a:	aa1b      	add	r2, sp, #108	; 0x6c
    5f0c:	9903      	ldr	r1, [sp, #12]
    5f0e:	9805      	ldr	r0, [sp, #20]
    5f10:	f000 f9d2 	bl	62b8 <__ssprint_r>
    5f14:	2800      	cmp	r0, #0
    5f16:	f47f a80d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    5f1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5f1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5f1e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5f22:	980d      	ldr	r0, [sp, #52]	; 0x34
    5f24:	f8c9 6000 	str.w	r6, [r9]
    5f28:	3201      	adds	r2, #1
    5f2a:	4403      	add	r3, r0
    5f2c:	2a07      	cmp	r2, #7
    5f2e:	931d      	str	r3, [sp, #116]	; 0x74
    5f30:	921c      	str	r2, [sp, #112]	; 0x70
    5f32:	f8c9 0004 	str.w	r0, [r9, #4]
    5f36:	f77f a9b6 	ble.w	52a6 <_svfprintf_r+0x55e>
    5f3a:	e476      	b.n	582a <_svfprintf_r+0xae2>
    5f3c:	272d      	movs	r7, #45	; 0x2d
    5f3e:	9304      	str	r3, [sp, #16]
    5f40:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5f44:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5f48:	f04f 0800 	mov.w	r8, #0
    5f4c:	f7ff b8ef 	b.w	512e <_svfprintf_r+0x3e6>
    5f50:	9709      	str	r7, [sp, #36]	; 0x24
    5f52:	461f      	mov	r7, r3
    5f54:	f7ff ba4c 	b.w	53f0 <_svfprintf_r+0x6a8>
    5f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5f5a:	1cda      	adds	r2, r3, #3
    5f5c:	db02      	blt.n	5f64 <_svfprintf_r+0x121c>
    5f5e:	4598      	cmp	r8, r3
    5f60:	f6bf aee4 	bge.w	5d2c <_svfprintf_r+0xfe4>
    5f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5f66:	3a02      	subs	r2, #2
    5f68:	920c      	str	r2, [sp, #48]	; 0x30
    5f6a:	3b01      	subs	r3, #1
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5f72:	9315      	str	r3, [sp, #84]	; 0x54
    5f74:	bfb8      	it	lt
    5f76:	425b      	neglt	r3, r3
    5f78:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    5f7c:	bfb4      	ite	lt
    5f7e:	222d      	movlt	r2, #45	; 0x2d
    5f80:	222b      	movge	r2, #43	; 0x2b
    5f82:	2b09      	cmp	r3, #9
    5f84:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    5f88:	f340 8106 	ble.w	6198 <_svfprintf_r+0x1450>
    5f8c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    5f90:	4604      	mov	r4, r0
    5f92:	4a47      	ldr	r2, [pc, #284]	; (60b0 <_svfprintf_r+0x1368>)
    5f94:	fb82 2103 	smull	r2, r1, r2, r3
    5f98:	17da      	asrs	r2, r3, #31
    5f9a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    5f9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    5fa2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    5fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    5faa:	2a09      	cmp	r2, #9
    5fac:	4613      	mov	r3, r2
    5fae:	f804 1d01 	strb.w	r1, [r4, #-1]!
    5fb2:	dcee      	bgt.n	5f92 <_svfprintf_r+0x124a>
    5fb4:	4621      	mov	r1, r4
    5fb6:	3330      	adds	r3, #48	; 0x30
    5fb8:	b2da      	uxtb	r2, r3
    5fba:	f801 2d01 	strb.w	r2, [r1, #-1]!
    5fbe:	4288      	cmp	r0, r1
    5fc0:	f240 8162 	bls.w	6288 <_svfprintf_r+0x1540>
    5fc4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    5fc8:	4623      	mov	r3, r4
    5fca:	e001      	b.n	5fd0 <_svfprintf_r+0x1288>
    5fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
    5fd0:	f801 2b01 	strb.w	r2, [r1], #1
    5fd4:	4298      	cmp	r0, r3
    5fd6:	d1f9      	bne.n	5fcc <_svfprintf_r+0x1284>
    5fd8:	1c43      	adds	r3, r0, #1
    5fda:	1b1b      	subs	r3, r3, r4
    5fdc:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    5fe0:	4413      	add	r3, r2
    5fe2:	aa17      	add	r2, sp, #92	; 0x5c
    5fe4:	1a9b      	subs	r3, r3, r2
    5fe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5fe8:	9311      	str	r3, [sp, #68]	; 0x44
    5fea:	2a01      	cmp	r2, #1
    5fec:	4413      	add	r3, r2
    5fee:	9308      	str	r3, [sp, #32]
    5ff0:	f340 80ff 	ble.w	61f2 <_svfprintf_r+0x14aa>
    5ff4:	9b08      	ldr	r3, [sp, #32]
    5ff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5ff8:	4413      	add	r3, r2
    5ffa:	2200      	movs	r2, #0
    5ffc:	9308      	str	r3, [sp, #32]
    5ffe:	920e      	str	r2, [sp, #56]	; 0x38
    6000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6004:	e6a1      	b.n	5d4a <_svfprintf_r+0x1002>
    6006:	460b      	mov	r3, r1
    6008:	e682      	b.n	5d10 <_svfprintf_r+0xfc8>
    600a:	aa1b      	add	r2, sp, #108	; 0x6c
    600c:	9903      	ldr	r1, [sp, #12]
    600e:	9805      	ldr	r0, [sp, #20]
    6010:	f000 f952 	bl	62b8 <__ssprint_r>
    6014:	2800      	cmp	r0, #0
    6016:	f47e af8d 	bne.w	4f34 <_svfprintf_r+0x1ec>
    601a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    601c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6020:	e483      	b.n	592a <_svfprintf_r+0xbe2>
    6022:	aa1b      	add	r2, sp, #108	; 0x6c
    6024:	9903      	ldr	r1, [sp, #12]
    6026:	9805      	ldr	r0, [sp, #20]
    6028:	f000 f946 	bl	62b8 <__ssprint_r>
    602c:	2800      	cmp	r0, #0
    602e:	f47e af81 	bne.w	4f34 <_svfprintf_r+0x1ec>
    6032:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6036:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    603a:	e579      	b.n	5b30 <_svfprintf_r+0xde8>
    603c:	464e      	mov	r6, r9
    603e:	4689      	mov	r9, r1
    6040:	3201      	adds	r2, #1
    6042:	4423      	add	r3, r4
    6044:	2a07      	cmp	r2, #7
    6046:	931d      	str	r3, [sp, #116]	; 0x74
    6048:	921c      	str	r2, [sp, #112]	; 0x70
    604a:	f8c9 7000 	str.w	r7, [r9]
    604e:	f8c9 4004 	str.w	r4, [r9, #4]
    6052:	f73f af5a 	bgt.w	5f0a <_svfprintf_r+0x11c2>
    6056:	f109 0908 	add.w	r9, r9, #8
    605a:	e762      	b.n	5f22 <_svfprintf_r+0x11da>
    605c:	aa1b      	add	r2, sp, #108	; 0x6c
    605e:	9903      	ldr	r1, [sp, #12]
    6060:	9805      	ldr	r0, [sp, #20]
    6062:	f000 f929 	bl	62b8 <__ssprint_r>
    6066:	2800      	cmp	r0, #0
    6068:	f47e af64 	bne.w	4f34 <_svfprintf_r+0x1ec>
    606c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    606e:	990d      	ldr	r1, [sp, #52]	; 0x34
    6070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6072:	1a8a      	subs	r2, r1, r2
    6074:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6078:	e572      	b.n	5b60 <_svfprintf_r+0xe18>
    607a:	2d06      	cmp	r5, #6
    607c:	462b      	mov	r3, r5
    607e:	bf28      	it	cs
    6080:	2306      	movcs	r3, #6
    6082:	9308      	str	r3, [sp, #32]
    6084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6088:	46b0      	mov	r8, r6
    608a:	9709      	str	r7, [sp, #36]	; 0x24
    608c:	960e      	str	r6, [sp, #56]	; 0x38
    608e:	4637      	mov	r7, r6
    6090:	9304      	str	r3, [sp, #16]
    6092:	4e08      	ldr	r6, [pc, #32]	; (60b4 <_svfprintf_r+0x136c>)
    6094:	f7ff b84a 	b.w	512c <_svfprintf_r+0x3e4>
    6098:	469b      	mov	fp, r3
    609a:	f7ff b9ea 	b.w	5472 <_svfprintf_r+0x72a>
    609e:	272d      	movs	r7, #45	; 0x2d
    60a0:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    60a4:	f7ff b833 	b.w	510e <_svfprintf_r+0x3c6>
    60a8:	20000aa8 	.word	0x20000aa8
    60ac:	20000b88 	.word	0x20000b88
    60b0:	66666667 	.word	0x66666667
    60b4:	20000ae4 	.word	0x20000ae4
    60b8:	aa19      	add	r2, sp, #100	; 0x64
    60ba:	ab16      	add	r3, sp, #88	; 0x58
    60bc:	9201      	str	r2, [sp, #4]
    60be:	9300      	str	r3, [sp, #0]
    60c0:	2103      	movs	r1, #3
    60c2:	ab15      	add	r3, sp, #84	; 0x54
    60c4:	4642      	mov	r2, r8
    60c6:	eeb0 0b4a 	vmov.f64	d0, d10
    60ca:	9805      	ldr	r0, [sp, #20]
    60cc:	f7fd fff8 	bl	40c0 <_dtoa_r>
    60d0:	4644      	mov	r4, r8
    60d2:	4606      	mov	r6, r0
    60d4:	eb00 0108 	add.w	r1, r0, r8
    60d8:	e6ef      	b.n	5eba <_svfprintf_r+0x1172>
    60da:	f04f 0806 	mov.w	r8, #6
    60de:	e5da      	b.n	5c96 <_svfprintf_r+0xf4e>
    60e0:	eeb1 ab48 	vneg.f64	d10, d8
    60e4:	272d      	movs	r7, #45	; 0x2d
    60e6:	e5e1      	b.n	5cac <_svfprintf_r+0xf64>
    60e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    60ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60ec:	4413      	add	r3, r2
    60ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    60f0:	9308      	str	r3, [sp, #32]
    60f2:	2a00      	cmp	r2, #0
    60f4:	f340 8086 	ble.w	6204 <_svfprintf_r+0x14bc>
    60f8:	2267      	movs	r2, #103	; 0x67
    60fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    60fe:	920c      	str	r2, [sp, #48]	; 0x30
    6100:	e623      	b.n	5d4a <_svfprintf_r+0x1002>
    6102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6104:	2b47      	cmp	r3, #71	; 0x47
    6106:	f47f adf2 	bne.w	5cee <_svfprintf_r+0xfa6>
    610a:	f01b 0f01 	tst.w	fp, #1
    610e:	f47f aece 	bne.w	5eae <_svfprintf_r+0x1166>
    6112:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6114:	2d47      	cmp	r5, #71	; 0x47
    6116:	eba3 0306 	sub.w	r3, r3, r6
    611a:	930d      	str	r3, [sp, #52]	; 0x34
    611c:	f43f af1c 	beq.w	5f58 <_svfprintf_r+0x1210>
    6120:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6122:	e722      	b.n	5f6a <_svfprintf_r+0x1222>
    6124:	2b00      	cmp	r3, #0
    6126:	461a      	mov	r2, r3
    6128:	930e      	str	r3, [sp, #56]	; 0x38
    612a:	dd73      	ble.n	6214 <_svfprintf_r+0x14cc>
    612c:	f1b8 0f00 	cmp.w	r8, #0
    6130:	d14b      	bne.n	61ca <_svfprintf_r+0x1482>
    6132:	f01b 0f01 	tst.w	fp, #1
    6136:	d148      	bne.n	61ca <_svfprintf_r+0x1482>
    6138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    613c:	9208      	str	r2, [sp, #32]
    613e:	e604      	b.n	5d4a <_svfprintf_r+0x1002>
    6140:	f01b 0f01 	tst.w	fp, #1
    6144:	4647      	mov	r7, r8
    6146:	d005      	beq.n	6154 <_svfprintf_r+0x140c>
    6148:	ae38      	add	r6, sp, #224	; 0xe0
    614a:	2330      	movs	r3, #48	; 0x30
    614c:	f806 3d41 	strb.w	r3, [r6, #-65]!
    6150:	f7ff b956 	b.w	5400 <_svfprintf_r+0x6b8>
    6154:	f8cd 8020 	str.w	r8, [sp, #32]
    6158:	ae28      	add	r6, sp, #160	; 0xa0
    615a:	f7ff b954 	b.w	5406 <_svfprintf_r+0x6be>
    615e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    6162:	9709      	str	r7, [sp, #36]	; 0x24
    6164:	9304      	str	r3, [sp, #16]
    6166:	9508      	str	r5, [sp, #32]
    6168:	4680      	mov	r8, r0
    616a:	900e      	str	r0, [sp, #56]	; 0x38
    616c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    6170:	f7fe bfdc 	b.w	512c <_svfprintf_r+0x3e4>
    6174:	aa1b      	add	r2, sp, #108	; 0x6c
    6176:	9903      	ldr	r1, [sp, #12]
    6178:	9805      	ldr	r0, [sp, #20]
    617a:	f000 f89d 	bl	62b8 <__ssprint_r>
    617e:	2800      	cmp	r0, #0
    6180:	f47e aed8 	bne.w	4f34 <_svfprintf_r+0x1ec>
    6184:	9c15      	ldr	r4, [sp, #84]	; 0x54
    6186:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6188:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    618a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    618e:	e63d      	b.n	5e0c <_svfprintf_r+0x10c4>
    6190:	46a2      	mov	sl, r4
    6192:	2500      	movs	r5, #0
    6194:	f7fe be33 	b.w	4dfe <_svfprintf_r+0xb6>
    6198:	3330      	adds	r3, #48	; 0x30
    619a:	2230      	movs	r2, #48	; 0x30
    619c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    61a0:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    61a4:	ab18      	add	r3, sp, #96	; 0x60
    61a6:	e71c      	b.n	5fe2 <_svfprintf_r+0x129a>
    61a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    61aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    61ac:	4413      	add	r3, r2
    61ae:	2267      	movs	r2, #103	; 0x67
    61b0:	9308      	str	r3, [sp, #32]
    61b2:	920c      	str	r2, [sp, #48]	; 0x30
    61b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61b8:	e5c7      	b.n	5d4a <_svfprintf_r+0x1002>
    61ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    61bc:	e5a8      	b.n	5d10 <_svfprintf_r+0xfc8>
    61be:	4e3c      	ldr	r6, [pc, #240]	; (62b0 <_svfprintf_r+0x1568>)
    61c0:	4b3c      	ldr	r3, [pc, #240]	; (62b4 <_svfprintf_r+0x156c>)
    61c2:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    61c6:	f7fe bfa4 	b.w	5112 <_svfprintf_r+0x3ca>
    61ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    61cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    61ce:	189d      	adds	r5, r3, r2
    61d0:	eb05 0308 	add.w	r3, r5, r8
    61d4:	9308      	str	r3, [sp, #32]
    61d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61da:	e5b6      	b.n	5d4a <_svfprintf_r+0x1002>
    61dc:	eeb5 ab40 	vcmp.f64	d10, #0.0
    61e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61e4:	f43f ae6d 	beq.w	5ec2 <_svfprintf_r+0x117a>
    61e8:	f1c4 0401 	rsb	r4, r4, #1
    61ec:	9415      	str	r4, [sp, #84]	; 0x54
    61ee:	4421      	add	r1, r4
    61f0:	e57e      	b.n	5cf0 <_svfprintf_r+0xfa8>
    61f2:	f01b 0301 	ands.w	r3, fp, #1
    61f6:	f47f aefd 	bne.w	5ff4 <_svfprintf_r+0x12ac>
    61fa:	930e      	str	r3, [sp, #56]	; 0x38
    61fc:	9b08      	ldr	r3, [sp, #32]
    61fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6202:	e5a2      	b.n	5d4a <_svfprintf_r+0x1002>
    6204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6206:	9a08      	ldr	r2, [sp, #32]
    6208:	f1c3 0301 	rsb	r3, r3, #1
    620c:	441a      	add	r2, r3
    620e:	4613      	mov	r3, r2
    6210:	9208      	str	r2, [sp, #32]
    6212:	e771      	b.n	60f8 <_svfprintf_r+0x13b0>
    6214:	f1b8 0f00 	cmp.w	r8, #0
    6218:	d102      	bne.n	6220 <_svfprintf_r+0x14d8>
    621a:	f01b 0f01 	tst.w	fp, #1
    621e:	d007      	beq.n	6230 <_svfprintf_r+0x14e8>
    6220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6222:	1c5d      	adds	r5, r3, #1
    6224:	eb05 0308 	add.w	r3, r5, r8
    6228:	9308      	str	r3, [sp, #32]
    622a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    622e:	e58c      	b.n	5d4a <_svfprintf_r+0x1002>
    6230:	2301      	movs	r3, #1
    6232:	9308      	str	r3, [sp, #32]
    6234:	e589      	b.n	5d4a <_svfprintf_r+0x1002>
    6236:	9809      	ldr	r0, [sp, #36]	; 0x24
    6238:	f89a 3001 	ldrb.w	r3, [sl, #1]
    623c:	6805      	ldr	r5, [r0, #0]
    623e:	3004      	adds	r0, #4
    6240:	2d00      	cmp	r5, #0
    6242:	9009      	str	r0, [sp, #36]	; 0x24
    6244:	46a2      	mov	sl, r4
    6246:	f6be add8 	bge.w	4dfa <_svfprintf_r+0xb2>
    624a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    624e:	f7fe bdd4 	b.w	4dfa <_svfprintf_r+0xb2>
    6252:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6256:	f7ff b98d 	b.w	5574 <_svfprintf_r+0x82c>
    625a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    625e:	f7ff b9cf 	b.w	5600 <_svfprintf_r+0x8b8>
    6262:	9a05      	ldr	r2, [sp, #20]
    6264:	230c      	movs	r3, #12
    6266:	6013      	str	r3, [r2, #0]
    6268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    626c:	f7fe be6b 	b.w	4f46 <_svfprintf_r+0x1fe>
    6270:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6274:	f7ff b8d4 	b.w	5420 <_svfprintf_r+0x6d8>
    6278:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    627c:	f7ff b8a3 	b.w	53c6 <_svfprintf_r+0x67e>
    6280:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6284:	f7ff b952 	b.w	552c <_svfprintf_r+0x7e4>
    6288:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    628c:	e6a9      	b.n	5fe2 <_svfprintf_r+0x129a>
    628e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6292:	f7fe be62 	b.w	4f5a <_svfprintf_r+0x212>
    6296:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    629a:	f7ff b862 	b.w	5362 <_svfprintf_r+0x61a>
    629e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62a2:	f7fe bf16 	b.w	50d2 <_svfprintf_r+0x38a>
    62a6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62aa:	f7fe bed0 	b.w	504e <_svfprintf_r+0x306>
    62ae:	bf00      	nop
    62b0:	20000ab8 	.word	0x20000ab8
    62b4:	20000ab4 	.word	0x20000ab4

000062b8 <__ssprint_r>:
    62b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62bc:	6893      	ldr	r3, [r2, #8]
    62be:	b083      	sub	sp, #12
    62c0:	4690      	mov	r8, r2
    62c2:	2b00      	cmp	r3, #0
    62c4:	d072      	beq.n	63ac <__ssprint_r+0xf4>
    62c6:	4683      	mov	fp, r0
    62c8:	f04f 0900 	mov.w	r9, #0
    62cc:	6816      	ldr	r6, [r2, #0]
    62ce:	6808      	ldr	r0, [r1, #0]
    62d0:	688b      	ldr	r3, [r1, #8]
    62d2:	460d      	mov	r5, r1
    62d4:	464c      	mov	r4, r9
    62d6:	2c00      	cmp	r4, #0
    62d8:	d045      	beq.n	6366 <__ssprint_r+0xae>
    62da:	429c      	cmp	r4, r3
    62dc:	461f      	mov	r7, r3
    62de:	469a      	mov	sl, r3
    62e0:	d346      	bcc.n	6370 <__ssprint_r+0xb8>
    62e2:	89ab      	ldrh	r3, [r5, #12]
    62e4:	f413 6f90 	tst.w	r3, #1152	; 0x480
    62e8:	d02d      	beq.n	6346 <__ssprint_r+0x8e>
    62ea:	696f      	ldr	r7, [r5, #20]
    62ec:	6929      	ldr	r1, [r5, #16]
    62ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    62f2:	ebc1 0a00 	rsb	sl, r1, r0
    62f6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    62fa:	1c60      	adds	r0, r4, #1
    62fc:	107f      	asrs	r7, r7, #1
    62fe:	4450      	add	r0, sl
    6300:	42b8      	cmp	r0, r7
    6302:	463a      	mov	r2, r7
    6304:	bf84      	itt	hi
    6306:	4607      	movhi	r7, r0
    6308:	463a      	movhi	r2, r7
    630a:	055b      	lsls	r3, r3, #21
    630c:	d533      	bpl.n	6376 <__ssprint_r+0xbe>
    630e:	4611      	mov	r1, r2
    6310:	4658      	mov	r0, fp
    6312:	f7fc f97b 	bl	260c <_malloc_r>
    6316:	2800      	cmp	r0, #0
    6318:	d037      	beq.n	638a <__ssprint_r+0xd2>
    631a:	4652      	mov	r2, sl
    631c:	6929      	ldr	r1, [r5, #16]
    631e:	9001      	str	r0, [sp, #4]
    6320:	f7fc fc42 	bl	2ba8 <memcpy>
    6324:	89aa      	ldrh	r2, [r5, #12]
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    632c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6330:	81aa      	strh	r2, [r5, #12]
    6332:	ebca 0207 	rsb	r2, sl, r7
    6336:	eb03 000a 	add.w	r0, r3, sl
    633a:	616f      	str	r7, [r5, #20]
    633c:	612b      	str	r3, [r5, #16]
    633e:	6028      	str	r0, [r5, #0]
    6340:	60aa      	str	r2, [r5, #8]
    6342:	4627      	mov	r7, r4
    6344:	46a2      	mov	sl, r4
    6346:	4652      	mov	r2, sl
    6348:	4649      	mov	r1, r9
    634a:	f7fc fcc7 	bl	2cdc <memmove>
    634e:	f8d8 2008 	ldr.w	r2, [r8, #8]
    6352:	68ab      	ldr	r3, [r5, #8]
    6354:	6828      	ldr	r0, [r5, #0]
    6356:	1bdb      	subs	r3, r3, r7
    6358:	4450      	add	r0, sl
    635a:	1b14      	subs	r4, r2, r4
    635c:	60ab      	str	r3, [r5, #8]
    635e:	6028      	str	r0, [r5, #0]
    6360:	f8c8 4008 	str.w	r4, [r8, #8]
    6364:	b314      	cbz	r4, 63ac <__ssprint_r+0xf4>
    6366:	f8d6 9000 	ldr.w	r9, [r6]
    636a:	6874      	ldr	r4, [r6, #4]
    636c:	3608      	adds	r6, #8
    636e:	e7b2      	b.n	62d6 <__ssprint_r+0x1e>
    6370:	4627      	mov	r7, r4
    6372:	46a2      	mov	sl, r4
    6374:	e7e7      	b.n	6346 <__ssprint_r+0x8e>
    6376:	4658      	mov	r0, fp
    6378:	f7fc fd66 	bl	2e48 <_realloc_r>
    637c:	4603      	mov	r3, r0
    637e:	2800      	cmp	r0, #0
    6380:	d1d7      	bne.n	6332 <__ssprint_r+0x7a>
    6382:	6929      	ldr	r1, [r5, #16]
    6384:	4658      	mov	r0, fp
    6386:	f7fd f94b 	bl	3620 <_free_r>
    638a:	230c      	movs	r3, #12
    638c:	f8cb 3000 	str.w	r3, [fp]
    6390:	89ab      	ldrh	r3, [r5, #12]
    6392:	2200      	movs	r2, #0
    6394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    639c:	81ab      	strh	r3, [r5, #12]
    639e:	f8c8 2008 	str.w	r2, [r8, #8]
    63a2:	f8c8 2004 	str.w	r2, [r8, #4]
    63a6:	b003      	add	sp, #12
    63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63ac:	2000      	movs	r0, #0
    63ae:	f8c8 0004 	str.w	r0, [r8, #4]
    63b2:	b003      	add	sp, #12
    63b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000063b8 <___reboot_Teensyduino__veneer>:
    63b8:	f85f f000 	ldr.w	pc, [pc]	; 63bc <___reboot_Teensyduino__veneer+0x4>
    63bc:	60001dc5 	.word	0x60001dc5

000063c0 <___init_veneer>:
    63c0:	f85f f000 	ldr.w	pc, [pc]	; 63c4 <___init_veneer+0x4>
    63c4:	60001e19 	.word	0x60001e19
	...

Disassembly of section .fini:

000063d0 <_fini>:
    63d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63d2:	bf00      	nop

Disassembly of section .text.csf:

60009df4 <_heap_end+0x3fd89df4>:
60009df4:	ffffffff 	.word	0xffffffff
60009df8:	ffffffff 	.word	0xffffffff
60009dfc:	ffffffff 	.word	0xffffffff
60009e00:	ffffffff 	.word	0xffffffff
60009e04:	ffffffff 	.word	0xffffffff
60009e08:	ffffffff 	.word	0xffffffff
60009e0c:	ffffffff 	.word	0xffffffff
60009e10:	ffffffff 	.word	0xffffffff
60009e14:	ffffffff 	.word	0xffffffff
60009e18:	ffffffff 	.word	0xffffffff
60009e1c:	ffffffff 	.word	0xffffffff
60009e20:	ffffffff 	.word	0xffffffff
60009e24:	ffffffff 	.word	0xffffffff
60009e28:	ffffffff 	.word	0xffffffff
60009e2c:	ffffffff 	.word	0xffffffff
60009e30:	ffffffff 	.word	0xffffffff
60009e34:	ffffffff 	.word	0xffffffff
60009e38:	ffffffff 	.word	0xffffffff
60009e3c:	ffffffff 	.word	0xffffffff
60009e40:	ffffffff 	.word	0xffffffff
60009e44:	ffffffff 	.word	0xffffffff
60009e48:	ffffffff 	.word	0xffffffff
60009e4c:	ffffffff 	.word	0xffffffff
60009e50:	ffffffff 	.word	0xffffffff
60009e54:	ffffffff 	.word	0xffffffff
60009e58:	ffffffff 	.word	0xffffffff
60009e5c:	ffffffff 	.word	0xffffffff
60009e60:	ffffffff 	.word	0xffffffff
60009e64:	ffffffff 	.word	0xffffffff
60009e68:	ffffffff 	.word	0xffffffff
60009e6c:	ffffffff 	.word	0xffffffff
60009e70:	ffffffff 	.word	0xffffffff
60009e74:	ffffffff 	.word	0xffffffff
60009e78:	ffffffff 	.word	0xffffffff
60009e7c:	ffffffff 	.word	0xffffffff
60009e80:	ffffffff 	.word	0xffffffff
60009e84:	ffffffff 	.word	0xffffffff
60009e88:	ffffffff 	.word	0xffffffff
60009e8c:	ffffffff 	.word	0xffffffff
60009e90:	ffffffff 	.word	0xffffffff
60009e94:	ffffffff 	.word	0xffffffff
60009e98:	ffffffff 	.word	0xffffffff
60009e9c:	ffffffff 	.word	0xffffffff
60009ea0:	ffffffff 	.word	0xffffffff
60009ea4:	ffffffff 	.word	0xffffffff
60009ea8:	ffffffff 	.word	0xffffffff
60009eac:	ffffffff 	.word	0xffffffff
60009eb0:	ffffffff 	.word	0xffffffff
60009eb4:	ffffffff 	.word	0xffffffff
60009eb8:	ffffffff 	.word	0xffffffff
60009ebc:	ffffffff 	.word	0xffffffff
60009ec0:	ffffffff 	.word	0xffffffff
60009ec4:	ffffffff 	.word	0xffffffff
60009ec8:	ffffffff 	.word	0xffffffff
60009ecc:	ffffffff 	.word	0xffffffff
60009ed0:	ffffffff 	.word	0xffffffff
60009ed4:	ffffffff 	.word	0xffffffff
60009ed8:	ffffffff 	.word	0xffffffff
60009edc:	ffffffff 	.word	0xffffffff
60009ee0:	ffffffff 	.word	0xffffffff
60009ee4:	ffffffff 	.word	0xffffffff
60009ee8:	ffffffff 	.word	0xffffffff
60009eec:	ffffffff 	.word	0xffffffff
60009ef0:	ffffffff 	.word	0xffffffff
60009ef4:	ffffffff 	.word	0xffffffff
60009ef8:	ffffffff 	.word	0xffffffff
60009efc:	ffffffff 	.word	0xffffffff
60009f00:	ffffffff 	.word	0xffffffff
60009f04:	ffffffff 	.word	0xffffffff
60009f08:	ffffffff 	.word	0xffffffff
60009f0c:	ffffffff 	.word	0xffffffff
60009f10:	ffffffff 	.word	0xffffffff
60009f14:	ffffffff 	.word	0xffffffff
60009f18:	ffffffff 	.word	0xffffffff
60009f1c:	ffffffff 	.word	0xffffffff
60009f20:	ffffffff 	.word	0xffffffff
60009f24:	ffffffff 	.word	0xffffffff
60009f28:	ffffffff 	.word	0xffffffff
60009f2c:	ffffffff 	.word	0xffffffff
60009f30:	ffffffff 	.word	0xffffffff
60009f34:	ffffffff 	.word	0xffffffff
60009f38:	ffffffff 	.word	0xffffffff
60009f3c:	ffffffff 	.word	0xffffffff
60009f40:	ffffffff 	.word	0xffffffff
60009f44:	ffffffff 	.word	0xffffffff
60009f48:	ffffffff 	.word	0xffffffff
60009f4c:	ffffffff 	.word	0xffffffff
60009f50:	ffffffff 	.word	0xffffffff
60009f54:	ffffffff 	.word	0xffffffff
60009f58:	ffffffff 	.word	0xffffffff
60009f5c:	ffffffff 	.word	0xffffffff
60009f60:	ffffffff 	.word	0xffffffff
60009f64:	ffffffff 	.word	0xffffffff
60009f68:	ffffffff 	.word	0xffffffff
60009f6c:	ffffffff 	.word	0xffffffff
60009f70:	ffffffff 	.word	0xffffffff
60009f74:	ffffffff 	.word	0xffffffff
60009f78:	ffffffff 	.word	0xffffffff
60009f7c:	ffffffff 	.word	0xffffffff
60009f80:	ffffffff 	.word	0xffffffff
60009f84:	ffffffff 	.word	0xffffffff
60009f88:	ffffffff 	.word	0xffffffff
60009f8c:	ffffffff 	.word	0xffffffff
60009f90:	ffffffff 	.word	0xffffffff
60009f94:	ffffffff 	.word	0xffffffff
60009f98:	ffffffff 	.word	0xffffffff
60009f9c:	ffffffff 	.word	0xffffffff
60009fa0:	ffffffff 	.word	0xffffffff
60009fa4:	ffffffff 	.word	0xffffffff
60009fa8:	ffffffff 	.word	0xffffffff
60009fac:	ffffffff 	.word	0xffffffff
60009fb0:	ffffffff 	.word	0xffffffff
60009fb4:	ffffffff 	.word	0xffffffff
60009fb8:	ffffffff 	.word	0xffffffff
60009fbc:	ffffffff 	.word	0xffffffff
60009fc0:	ffffffff 	.word	0xffffffff
60009fc4:	ffffffff 	.word	0xffffffff
60009fc8:	ffffffff 	.word	0xffffffff
60009fcc:	ffffffff 	.word	0xffffffff
60009fd0:	ffffffff 	.word	0xffffffff
60009fd4:	ffffffff 	.word	0xffffffff
60009fd8:	ffffffff 	.word	0xffffffff
60009fdc:	ffffffff 	.word	0xffffffff
60009fe0:	ffffffff 	.word	0xffffffff
60009fe4:	ffffffff 	.word	0xffffffff
60009fe8:	ffffffff 	.word	0xffffffff
60009fec:	ffffffff 	.word	0xffffffff
60009ff0:	ffffffff 	.word	0xffffffff
60009ff4:	ffffffff 	.word	0xffffffff
60009ff8:	ffffffff 	.word	0xffffffff
60009ffc:	ffffffff 	.word	0xffffffff

6000a000 <hab_csf>:
	...
