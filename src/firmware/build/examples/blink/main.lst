
/Users/mitchellscott/Desktop/rufous/src/firmware/build/examples/blink/main.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
60001426:	4770      	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	4b66      	ldr	r3, [pc, #408]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	4a66      	ldr	r2, [pc, #408]	; (600015c8 <ResetHandler+0x1a0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	4866      	ldr	r0, [pc, #408]	; (600015cc <ResetHandler+0x1a4>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	4a65      	ldr	r2, [pc, #404]	; (600015d0 <ResetHandler+0x1a8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	f3bf 8f6f 	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	f000 f930 	bl	600016ac <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	4b61      	ldr	r3, [pc, #388]	; (600015d4 <ResetHandler+0x1ac>)
6000144e:	2008      	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	4a61      	ldr	r2, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
60001452:	4962      	ldr	r1, [pc, #392]	; (600015dc <ResetHandler+0x1b4>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	4861      	ldr	r0, [pc, #388]	; (600015e0 <ResetHandler+0x1b8>)
6000145a:	f7ff ffd1 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	4a61      	ldr	r2, [pc, #388]	; (600015e4 <ResetHandler+0x1bc>)
60001460:	4961      	ldr	r1, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001462:	4862      	ldr	r0, [pc, #392]	; (600015ec <ResetHandler+0x1c4>)
60001464:	f7ff ffcc 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	4961      	ldr	r1, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146a:	4862      	ldr	r0, [pc, #392]	; (600015f4 <ResetHandler+0x1cc>)
6000146c:	f7ff ffd4 	bl	60001418 <memory_clear>
60001470:	4c61      	ldr	r4, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	4962      	ldr	r1, [pc, #392]	; (600015fc <ResetHandler+0x1d4>)
60001474:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	2300      	movs	r3, #0
6000147a:	4a61      	ldr	r2, [pc, #388]	; (60001600 <ResetHandler+0x1d8>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	6008      	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
60001482:	3301      	adds	r3, #1
60001484:	2bb0      	cmp	r3, #176	; 0xb0
60001486:	d1fa      	bne.n	6000147e <ResetHandler+0x56>
60001488:	4b5e      	ldr	r3, [pc, #376]	; (60001604 <ResetHandler+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	2180      	movs	r1, #128	; 0x80
6000148c:	4a5e      	ldr	r2, [pc, #376]	; (60001608 <ResetHandler+0x1e0>)
6000148e:	f803 1b01 	strb.w	r1, [r3], #1
60001492:	4293      	cmp	r3, r2
60001494:	d1fb      	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	4d4f      	ldr	r5, [pc, #316]	; (600015d4 <ResetHandler+0x1ac>)
60001498:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	495b      	ldr	r1, [pc, #364]	; (6000160c <ResetHandler+0x1e4>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	4b5b      	ldr	r3, [pc, #364]	; (60001610 <ResetHandler+0x1e8>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	2600      	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000164c <ResetHandler+0x224>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 60001650 <ResetHandler+0x228>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	601c      	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	680b      	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	4f54      	ldr	r7, [pc, #336]	; (60001614 <ResetHandler+0x1ec>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014c8:	600b      	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	69fb      	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	493d      	ldr	r1, [pc, #244]	; (600015c4 <ResetHandler+0x19c>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d6:	61fb      	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014e2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	f000 f8e4 	bl	600016b8 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	4a49      	ldr	r2, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[15] = systick_isr;
600014f2:	4b4a      	ldr	r3, [pc, #296]	; (6000161c <ResetHandler+0x1f4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	2063      	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	63a2      	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	2103      	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	4a48      	ldr	r2, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
	SYST_CVR = 0;
600014fe:	4b49      	ldr	r3, [pc, #292]	; (60001624 <ResetHandler+0x1fc>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	601e      	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	f842 1c04 	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	f600 70a1 	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	4945      	ldr	r1, [pc, #276]	; (60001628 <ResetHandler+0x200>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	4a46      	ldr	r2, [pc, #280]	; (6000162c <ResetHandler+0x204>)
60001514:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	4a45      	ldr	r2, [pc, #276]	; (60001630 <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	4943      	ldr	r1, [pc, #268]	; (60001634 <ResetHandler+0x20c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	f043 0301 	orr.w	r3, r3, #1
6000152a:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	6803      	ldr	r3, [r0, #0]
6000152e:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	f000 fb12 	bl	60001b58 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	483f      	ldr	r0, [pc, #252]	; (60001638 <ResetHandler+0x210>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	f000 fc87 	bl	60001e58 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	4a3b      	ldr	r2, [pc, #236]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	4b3b      	ldr	r3, [pc, #236]	; (60001640 <ResetHandler+0x218>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	66f9      	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	6016      	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	f8c2 6118 	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	f8c2 6128 	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	f8c2 6138 	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000156a:	07d2      	lsls	r2, r2, #31
6000156c:	d408      	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	4934      	ldr	r1, [pc, #208]	; (60001644 <ResetHandler+0x21c>)
60001574:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000157a:	f042 0201 	orr.w	r2, r2, #1
6000157e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	4a2f      	ldr	r2, [pc, #188]	; (60001640 <ResetHandler+0x218>)
60001582:	4c31      	ldr	r4, [pc, #196]	; (60001648 <ResetHandler+0x220>)
60001584:	6893      	ldr	r3, [r2, #8]
60001586:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000158a:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000158c:	f000 f906 	bl	6000179c <configure_external_ram>
#endif
	analog_init();
60001590:	f000 f860 	bl	60001654 <analog_init>
	pwm_init();
60001594:	f000 fc50 	bl	60001e38 <__pwm_init_veneer>
	tempmon_init();
60001598:	f000 fb10 	bl	60001bbc <tempmon_init>
	startup_middle_hook();
6000159c:	f000 f888 	bl	600016b0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015a0:	6823      	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015a2:	2b13      	cmp	r3, #19
600015a4:	d9fc      	bls.n	600015a0 <ResetHandler+0x178>
	usb_init();
600015a6:	f000 fb97 	bl	60001cd8 <usb_init>
600015aa:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015b0:	d3fb      	bcc.n	600015aa <ResetHandler+0x182>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015b2:	f000 f87f 	bl	600016b4 <startup_default_late_hook>
	__libc_init_array();
600015b6:	f000 fc53 	bl	60001e60 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015ba:	f000 fc45 	bl	60001e48 <__main_veneer>
	
	while (1) asm("WFI");
600015be:	bf30      	wfi
600015c0:	e7fd      	b.n	600015be <ResetHandler+0x196>
600015c2:	bf00      	nop
600015c4:	400ac000 	.word	0x400ac000
600015c8:	aaaaaaab 	.word	0xaaaaaaab
600015cc:	00200007 	.word	0x00200007
600015d0:	20078000 	.word	0x20078000
600015d4:	400d8000 	.word	0x400d8000
600015d8:	000063e8 	.word	0x000063e8
600015dc:	60001f5c 	.word	0x60001f5c
600015e0:	00000000 	.word	0x00000000
600015e4:	20001ac0 	.word	0x20001ac0
600015e8:	60008348 	.word	0x60008348
600015ec:	20000000 	.word	0x20000000
600015f0:	20002020 	.word	0x20002020
600015f4:	20001ac0 	.word	0x20001ac0
600015f8:	20001800 	.word	0x20001800
600015fc:	e000ed88 	.word	0xe000ed88
60001600:	00000e05 	.word	0x00000e05
60001604:	e000e400 	.word	0xe000e400
60001608:	e000e4a0 	.word	0xe000e4a0
6000160c:	e000ed24 	.word	0xe000ed24
60001610:	e000ed08 	.word	0xe000ed08
60001614:	400fc000 	.word	0x400fc000
60001618:	00001f61 	.word	0x00001f61
6000161c:	00001f65 	.word	0x00001f65
60001620:	e000e014 	.word	0xe000e014
60001624:	e000e018 	.word	0xe000e018
60001628:	e000edfc 	.word	0xe000edfc
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	20001f40 	.word	0x20001f40
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	20001f44 	.word	0x20001f44
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001654:	4b11      	ldr	r3, [pc, #68]	; (6000169c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001656:	4912      	ldr	r1, [pc, #72]	; (600016a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001658:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000165a:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000165c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001660:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001662:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001664:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001668:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000166a:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000166c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001670:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001672:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001674:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001676:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001678:	061b      	lsls	r3, r3, #24
6000167a:	d4fc      	bmi.n	60001676 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000167c:	4b09      	ldr	r3, [pc, #36]	; (600016a4 <analog_init+0x50>)
6000167e:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001682:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001684:	461a      	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001686:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001688:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000168a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000168c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001690:	d1fb      	bne.n	6000168a <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
60001692:	4a05      	ldr	r2, [pc, #20]	; (600016a8 <analog_init+0x54>)
60001694:	7013      	strb	r3, [r2, #0]
}
60001696:	bc30      	pop	{r4, r5}
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	400fc000 	.word	0x400fc000
600016a0:	400c4000 	.word	0x400c4000
600016a4:	400c8000 	.word	0x400c8000
600016a8:	20001f7e 	.word	0x20001f7e

600016ac <startup_default_early_hook>:
600016ac:	4770      	bx	lr
600016ae:	bf00      	nop

600016b0 <startup_default_middle_hook>:
600016b0:	4770      	bx	lr
600016b2:	bf00      	nop

600016b4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600016b4:	4770      	bx	lr
600016b6:	bf00      	nop

600016b8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016ba:	4a24      	ldr	r2, [pc, #144]	; (6000174c <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016bc:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016be:	4b24      	ldr	r3, [pc, #144]	; (60001750 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016c0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016c4:	4c23      	ldr	r4, [pc, #140]	; (60001754 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016c6:	2611      	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001794 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016cc:	2712      	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016ce:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016d0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016d2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016d6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016dc:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 60001798 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016e0:	4e1d      	ldr	r6, [pc, #116]	; (60001758 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016e2:	f8c3 e000 	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016e6:	491d      	ldr	r1, [pc, #116]	; (6000175c <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016e8:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ea:	601e      	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ec:	f041 0115 	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f0:	4f1b      	ldr	r7, [pc, #108]	; (60001760 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f2:	4e1c      	ldr	r6, [pc, #112]	; (60001764 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016f8:	4f1b      	ldr	r7, [pc, #108]	; (60001768 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fa:	4e1c      	ldr	r6, [pc, #112]	; (6000176c <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016fc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fe:	601e      	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001700:	4f1b      	ldr	r7, [pc, #108]	; (60001770 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001702:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001704:	4e1b      	ldr	r6, [pc, #108]	; (60001774 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001706:	491c      	ldr	r1, [pc, #112]	; (60001778 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001708:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000170a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000170c:	4f1b      	ldr	r7, [pc, #108]	; (6000177c <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000170e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001710:	4e1b      	ldr	r6, [pc, #108]	; (60001780 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001712:	491c      	ldr	r1, [pc, #112]	; (60001784 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001714:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001716:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001718:	4f1b      	ldr	r7, [pc, #108]	; (60001788 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000171a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000171c:	4e1b      	ldr	r6, [pc, #108]	; (6000178c <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000171e:	491c      	ldr	r1, [pc, #112]	; (60001790 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001720:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001722:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001724:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001726:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001728:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001730:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001734:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001738:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001740:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001744:	f842 3c88 	str.w	r3, [r2, #-136]
60001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000174a:	bf00      	nop
6000174c:	e000ed9c 	.word	0xe000ed9c
60001750:	e000eda0 	.word	0xe000eda0
60001754:	e000ed94 	.word	0xe000ed94
60001758:	00100009 	.word	0x00100009
6000175c:	20002020 	.word	0x20002020
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	13100033 	.word	0x13100033
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	130b002f 	.word	0x130b002f
60001794:	1000003f 	.word	0x1000003f
60001798:	03080025 	.word	0x03080025

6000179c <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000179c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179e:	4b8d      	ldr	r3, [pc, #564]	; (600019d4 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017a0:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017a2:	4e8d      	ldr	r6, [pc, #564]	; (600019d8 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a4:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a6:	498d      	ldr	r1, [pc, #564]	; (600019dc <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017a8:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ac:	4d8c      	ldr	r5, [pc, #560]	; (600019e0 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	4c8c      	ldr	r4, [pc, #560]	; (600019e4 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600017b4:	b083      	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017b6:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ba:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600017be:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017c0:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017c4:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017c8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017cc:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017d0:	4985      	ldr	r1, [pc, #532]	; (600019e8 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d2:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d6:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017da:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017de:	4e83      	ldr	r6, [pc, #524]	; (600019ec <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017e0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017e2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017e4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017e6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017e8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600017f6:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017fe:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001802:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001806:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000180a:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
6000180e:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001812:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001814:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001816:	4876      	ldr	r0, [pc, #472]	; (600019f0 <configure_external_ram+0x254>)
60001818:	4018      	ands	r0, r3
6000181a:	4b76      	ldr	r3, [pc, #472]	; (600019f4 <configure_external_ram+0x258>)
6000181c:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000181e:	4876      	ldr	r0, [pc, #472]	; (600019f8 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001820:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001822:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001826:	f043 030c 	orr.w	r3, r3, #12
6000182a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000182e:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001830:	6803      	ldr	r3, [r0, #0]
60001832:	4333      	orrs	r3, r6
60001834:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001836:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001838:	ea03 0e0e 	and.w	lr, r3, lr
6000183c:	4b6f      	ldr	r3, [pc, #444]	; (600019fc <configure_external_ram+0x260>)
6000183e:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001842:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 60001a34 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001846:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001848:	4b6d      	ldr	r3, [pc, #436]	; (60001a00 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000184a:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000184c:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001850:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4f6c      	ldr	r7, [pc, #432]	; (60001a04 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001858:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000185a:	68c3      	ldr	r3, [r0, #12]
6000185c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001860:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001862:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001864:	401f      	ands	r7, r3
60001866:	4b68      	ldr	r3, [pc, #416]	; (60001a08 <configure_external_ram+0x26c>)
60001868:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000186a:	4f66      	ldr	r7, [pc, #408]	; (60001a04 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186c:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186e:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001870:	401f      	ands	r7, r3
60001872:	4b65      	ldr	r3, [pc, #404]	; (60001a08 <configure_external_ram+0x26c>)
60001874:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001876:	4f65      	ldr	r7, [pc, #404]	; (60001a0c <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001878:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000187a:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000187c:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000187e:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001882:	4f63      	ldr	r7, [pc, #396]	; (60001a10 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001888:	f043 0301 	orr.w	r3, r3, #1
6000188c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001890:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	f8df e184 	ldr.w	lr, [pc, #388]	; 60001a1c <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000189c:	f043 0301 	orr.w	r3, r3, #1
600018a0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600018a4:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018a6:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018a8:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018aa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ae:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b0:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018b2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018b6:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b8:	4b56      	ldr	r3, [pc, #344]	; (60001a14 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018ba:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018be:	4a56      	ldr	r2, [pc, #344]	; (60001a18 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018c0:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018c2:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018c6:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018c8:	f843 1b04 	str.w	r1, [r3], #4
600018cc:	4293      	cmp	r3, r2
600018ce:	d1fb      	bne.n	600018c8 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d0:	4b49      	ldr	r3, [pc, #292]	; (600019f8 <configure_external_ram+0x25c>)
600018d2:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018d4:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d6:	f042 0201 	orr.w	r2, r2, #1
600018da:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018dc:	680b      	ldr	r3, [r1, #0]
600018de:	4a46      	ldr	r2, [pc, #280]	; (600019f8 <configure_external_ram+0x25c>)
600018e0:	f013 0301 	ands.w	r3, r3, #1
600018e4:	d1fa      	bne.n	600018dc <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018e6:	4e4d      	ldr	r6, [pc, #308]	; (60001a1c <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018e8:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018ea:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018ee:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018f2:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f6:	4f4a      	ldr	r7, [pc, #296]	; (60001a20 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018f8:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fa:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018fe:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001904:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001908:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000190c:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001910:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001912:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001916:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001918:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000191c:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001920:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001924:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001928:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000192c:	4e3d      	ldr	r6, [pc, #244]	; (60001a24 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000192e:	4d3e      	ldr	r5, [pc, #248]	; (60001a28 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001930:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001934:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001938:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000193c:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001944:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	4a2a      	ldr	r2, [pc, #168]	; (600019f8 <configure_external_ram+0x25c>)
60001950:	07dd      	lsls	r5, r3, #31
60001952:	d5fb      	bpl.n	6000194c <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001954:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001956:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001958:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000195c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001960:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001964:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	694b      	ldr	r3, [r1, #20]
6000196e:	4a22      	ldr	r2, [pc, #136]	; (600019f8 <configure_external_ram+0x25c>)
60001970:	07dc      	lsls	r4, r3, #31
60001972:	d5fb      	bpl.n	6000196c <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001974:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001976:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000197e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001980:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001984:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001988:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198c:	694b      	ldr	r3, [r1, #20]
6000198e:	4a1a      	ldr	r2, [pc, #104]	; (600019f8 <configure_external_ram+0x25c>)
60001990:	07d8      	lsls	r0, r3, #31
60001992:	d5fb      	bpl.n	6000198c <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001994:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001996:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001998:	4824      	ldr	r0, [pc, #144]	; (60001a2c <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199a:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199c:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000199e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019a2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019aa:	694b      	ldr	r3, [r1, #20]
600019ac:	4a12      	ldr	r2, [pc, #72]	; (600019f8 <configure_external_ram+0x25c>)
600019ae:	07db      	lsls	r3, r3, #31
600019b0:	d5fb      	bpl.n	600019aa <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
600019b2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019b6:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ba:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019bc:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019be:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019c0:	428b      	cmp	r3, r1
600019c2:	d039      	beq.n	60001a38 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600019c4:	4b1a      	ldr	r3, [pc, #104]	; (60001a30 <configure_external_ram+0x294>)
600019c6:	2200      	movs	r2, #0
600019c8:	601a      	str	r2, [r3, #0]
600019ca:	605a      	str	r2, [r3, #4]
600019cc:	609a      	str	r2, [r3, #8]
600019ce:	60da      	str	r2, [r3, #12]
	}
}
600019d0:	b003      	add	sp, #12
600019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
600019d4:	401f8000 	.word	0x401f8000
600019d8:	000170f9 	.word	0x000170f9
600019dc:	0001b0f9 	.word	0x0001b0f9
600019e0:	000110f9 	.word	0x000110f9
600019e4:	000100f9 	.word	0x000100f9
600019e8:	401f8400 	.word	0x401f8400
600019ec:	400fc000 	.word	0x400fc000
600019f0:	1ffffcff 	.word	0x1ffffcff
600019f4:	a0000300 	.word	0xa0000300
600019f8:	402a4000 	.word	0x402a4000
600019fc:	ffff0012 	.word	0xffff0012
60001a00:	00f737ff 	.word	0x00f737ff
60001a04:	7cf0ff00 	.word	0x7cf0ff00
60001a08:	80000040 	.word	0x80000040
60001a0c:	830f00ff 	.word	0x830f00ff
60001a10:	00020063 	.word	0x00020063
60001a14:	402a4200 	.word	0x402a4200
60001a18:	402a4300 	.word	0x402a4300
60001a1c:	5af05af0 	.word	0x5af05af0
60001a20:	3018049f 	.word	0x3018049f
60001a24:	26013206 	.word	0x26013206
60001a28:	0a180638 	.word	0x0a180638
60001a2c:	00030004 	.word	0x00030004
60001a30:	20001fe4 	.word	0x20001fe4
60001a34:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a38:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a42:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a46:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4e:	694b      	ldr	r3, [r1, #20]
60001a50:	4a3b      	ldr	r2, [pc, #236]	; (60001b40 <configure_external_ram+0x3a4>)
60001a52:	07df      	lsls	r7, r3, #31
60001a54:	d5fb      	bpl.n	60001a4e <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a58:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a60:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a62:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a66:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a6e:	694b      	ldr	r3, [r1, #20]
60001a70:	4a33      	ldr	r2, [pc, #204]	; (60001b40 <configure_external_ram+0x3a4>)
60001a72:	07de      	lsls	r6, r3, #31
60001a74:	d5fb      	bpl.n	60001a6e <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a78:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a82:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a84:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a88:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a90:	694b      	ldr	r3, [r1, #20]
60001a92:	4a2b      	ldr	r2, [pc, #172]	; (60001b40 <configure_external_ram+0x3a4>)
60001a94:	07dd      	lsls	r5, r3, #31
60001a96:	d5fb      	bpl.n	60001a90 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a98:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a9a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa2:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aa4:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001aa6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aaa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab2:	694b      	ldr	r3, [r1, #20]
60001ab4:	4a22      	ldr	r2, [pc, #136]	; (60001b40 <configure_external_ram+0x3a4>)
60001ab6:	07dc      	lsls	r4, r3, #31
60001ab8:	d5fb      	bpl.n	60001ab2 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001abc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	4820      	ldr	r0, [pc, #128]	; (60001b44 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac2:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ac4:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001ac6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aca:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ace:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad2:	694b      	ldr	r3, [r1, #20]
60001ad4:	4a1a      	ldr	r2, [pc, #104]	; (60001b40 <configure_external_ram+0x3a4>)
60001ad6:	07d8      	lsls	r0, r3, #31
60001ad8:	d5fb      	bpl.n	60001ad2 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001ada:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ade:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae2:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae4:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae6:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae8:	428b      	cmp	r3, r1
60001aea:	d010      	beq.n	60001b0e <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001aec:	4b16      	ldr	r3, [pc, #88]	; (60001b48 <configure_external_ram+0x3ac>)
60001aee:	2208      	movs	r2, #8
60001af0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
60001af4:	701a      	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af6:	4915      	ldr	r1, [pc, #84]	; (60001b4c <configure_external_ram+0x3b0>)
60001af8:	2000      	movs	r0, #0
60001afa:	4a15      	ldr	r2, [pc, #84]	; (60001b50 <configure_external_ram+0x3b4>)
60001afc:	2301      	movs	r3, #1
60001afe:	9000      	str	r0, [sp, #0]
60001b00:	1a52      	subs	r2, r2, r1
60001b02:	4814      	ldr	r0, [pc, #80]	; (60001b54 <configure_external_ram+0x3b8>)
60001b04:	4422      	add	r2, r4
60001b06:	f000 f98f 	bl	60001e28 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001b0a:	b003      	add	sp, #12
60001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b12:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b16:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b18:	4610      	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b1a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1e:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b26:	6943      	ldr	r3, [r0, #20]
60001b28:	4905      	ldr	r1, [pc, #20]	; (60001b40 <configure_external_ram+0x3a4>)
60001b2a:	07db      	lsls	r3, r3, #31
60001b2c:	d5fb      	bpl.n	60001b26 <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b2e:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b30:	4b05      	ldr	r3, [pc, #20]	; (60001b48 <configure_external_ram+0x3ac>)
60001b32:	2210      	movs	r2, #16
60001b34:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b38:	6148      	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b3a:	701a      	strb	r2, [r3, #0]
60001b3c:	e7db      	b.n	60001af6 <configure_external_ram+0x35a>
60001b3e:	bf00      	nop
60001b40:	402a4000 	.word	0x402a4000
60001b44:	00030004 	.word	0x00030004
60001b48:	20001f7f 	.word	0x20001f7f
60001b4c:	70000000 	.word	0x70000000
60001b50:	70000000 	.word	0x70000000
60001b54:	20001fe4 	.word	0x20001fe4

60001b58 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001b58:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b5a:	4a17      	ldr	r2, [pc, #92]	; (60001bb8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b5c:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b62:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b66:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b6a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b6e:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b72:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b74:	f013 0f02 	tst.w	r3, #2
60001b78:	d006      	beq.n	60001b88 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7a:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b7c:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b7e:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b80:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b82:	f013 0f02 	tst.w	r3, #2
60001b86:	d1f8      	bne.n	60001b7a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b8c:	d101      	bne.n	60001b92 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b8e:	6155      	str	r5, [r2, #20]
			continue;
60001b90:	e7ef      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b96:	d101      	bne.n	60001b9c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b98:	6156      	str	r6, [r2, #20]
			continue;
60001b9a:	e7ea      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9c:	2b00      	cmp	r3, #0
60001b9e:	dae8      	bge.n	60001b72 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001ba0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba4:	d001      	beq.n	60001baa <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ba6:	6191      	str	r1, [r2, #24]
			continue;
60001ba8:	e7e3      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001baa:	065b      	lsls	r3, r3, #25
60001bac:	d401      	bmi.n	60001bb2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bae:	6157      	str	r7, [r2, #20]
			continue;
60001bb0:	e7df      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001bb2:	bcf0      	pop	{r4, r5, r6, r7}
60001bb4:	4770      	bx	lr
60001bb6:	bf00      	nop
60001bb8:	400d8000 	.word	0x400d8000

60001bbc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bbc:	4a39      	ldr	r2, [pc, #228]	; (60001ca4 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bbe:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bc0:	4939      	ldr	r1, [pc, #228]	; (60001ca8 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bc2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc6:	6813      	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bc8:	ed9f 6a38 	vldr	s12, [pc, #224]	; 60001cac <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bcc:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bd0:	eddf 6a37 	vldr	s13, [pc, #220]	; 60001cb0 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001bd4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd6:	6013      	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd8:	2400      	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bda:	6110      	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bdc:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be0:	4f34      	ldr	r7, [pc, #208]	; (60001cb4 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001be2:	b2d8      	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001be4:	f3c3 210b 	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be8:	0d1b      	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bea:	4e33      	ldr	r6, [pc, #204]	; (60001cb8 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bec:	ee07 0a10 	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bf0:	ee05 1a10 	vmov	s10, r1
60001bf4:	ee07 3a90 	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf8:	4b30      	ldr	r3, [pc, #192]	; (60001cbc <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bfa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bfe:	4d30      	ldr	r5, [pc, #192]	; (60001cc0 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c04:	6030      	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c0a:	6029      	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c0c:	492d      	ldr	r1, [pc, #180]	; (60001cc4 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c0e:	ee37 6a46 	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c12:	4e2d      	ldr	r6, [pc, #180]	; (60001cc8 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c14:	ee77 7ac5 	vsub.f32	s15, s15, s10
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c18:	482c      	ldr	r0, [pc, #176]	; (60001ccc <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c1a:	ee77 6a66 	vsub.f32	s13, s14, s13
60001c1e:	4d2c      	ldr	r5, [pc, #176]	; (60001cd0 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c20:	ee37 7a65 	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c24:	ee26 6a27 	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c28:	edc7 7a00 	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c30:	6817      	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c36:	ed83 7a00 	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3a:	eec6 5a07 	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3e:	ee86 6a87 	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c42:	eec7 6a87 	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c46:	ee35 7a85 	vadd.f32	s14, s11, s10
60001c4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c4e:	ee36 7a05 	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c52:	ee17 3a90 	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c56:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c5a:	ea47 5303 	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c5e:	ee76 7a85 	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c62:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c64:	ee17 3a10 	vmov	r3, s14
60001c68:	f8d2 7110 	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c70:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c74:	4339      	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c76:	ee17 3a90 	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7a:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c82:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001c86:	430b      	orrs	r3, r1
60001c88:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c8c:	6813      	ldr	r3, [r2, #0]
60001c8e:	f043 0302 	orr.w	r3, r3, #2
60001c92:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c94:	7034      	strb	r4, [r6, #0]
60001c96:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c9a:	4b0e      	ldr	r3, [pc, #56]	; (60001cd4 <tempmon_init+0x118>)
60001c9c:	2201      	movs	r2, #1
}
60001c9e:	bcf0      	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ca0:	601a      	str	r2, [r3, #0]
}
60001ca2:	4770      	bx	lr
60001ca4:	400d8180 	.word	0x400d8180
60001ca8:	401f4400 	.word	0x401f4400
60001cac:	42aa0000 	.word	0x42aa0000
60001cb0:	42b40000 	.word	0x42b40000
60001cb4:	20001f38 	.word	0x20001f38
60001cb8:	20001f30 	.word	0x20001f30
60001cbc:	20001f34 	.word	0x20001f34
60001cc0:	20001f2c 	.word	0x20001f2c
60001cc4:	0fff0000 	.word	0x0fff0000
60001cc8:	e000e440 	.word	0xe000e440
60001ccc:	20001800 	.word	0x20001800
60001cd0:	00000fc5 	.word	0x00000fc5
60001cd4:	e000e108 	.word	0xe000e108

60001cd8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cd8:	4b30      	ldr	r3, [pc, #192]	; (60001d9c <usb_init+0xc4>)
60001cda:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001cde:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ce0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001ce4:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001ce8:	f000 f8b2 	bl	60001e50 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cec:	492c      	ldr	r1, [pc, #176]	; (60001da0 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cee:	482d      	ldr	r0, [pc, #180]	; (60001da4 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cf4:	4c2c      	ldr	r4, [pc, #176]	; (60001da8 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf6:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cfa:	4b2c      	ldr	r3, [pc, #176]	; (60001dac <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cfc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d00:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d04:	6822      	ldr	r2, [r4, #0]
60001d06:	4013      	ands	r3, r2
60001d08:	b91b      	cbnz	r3, 60001d12 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d0a:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001d0e:	079a      	lsls	r2, r3, #30
60001d10:	d01a      	beq.n	60001d48 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d12:	4b24      	ldr	r3, [pc, #144]	; (60001da4 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d18:	4a23      	ldr	r2, [pc, #140]	; (60001da8 <usb_init+0xd0>)
60001d1a:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d1c:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d1e:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001d22:	f041 0102 	orr.w	r1, r1, #2
60001d26:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d2a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d2e:	079b      	lsls	r3, r3, #30
60001d30:	d4fb      	bmi.n	60001d2a <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d36:	491e      	ldr	r1, [pc, #120]	; (60001db0 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d38:	4b1b      	ldr	r3, [pc, #108]	; (60001da8 <usb_init+0xd0>)
60001d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d3e:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d40:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d42:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d44:	f000 f874 	bl	60001e30 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d48:	4d1a      	ldr	r5, [pc, #104]	; (60001db4 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d4a:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d4c:	4b16      	ldr	r3, [pc, #88]	; (60001da8 <usb_init+0xd0>)
60001d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d52:	4c14      	ldr	r4, [pc, #80]	; (60001da4 <usb_init+0xcc>)
60001d54:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d56:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d58:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d5a:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d5c:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d5e:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d62:	f44f 7220 	mov.w	r2, #640	; 0x280
60001d66:	f000 f86b 	bl	60001e40 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d6a:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d6e:	f240 1143 	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d72:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
60001d76:	4b10      	ldr	r3, [pc, #64]	; (60001db8 <usb_init+0xe0>)
60001d78:	4a10      	ldr	r2, [pc, #64]	; (60001dbc <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d7a:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001d7c:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d7e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d82:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d8a:	4a0d      	ldr	r2, [pc, #52]	; (60001dc0 <usb_init+0xe8>)
60001d8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d90:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d92:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d94:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001d98:	bd70      	pop	{r4, r5, r6, pc}
60001d9a:	bf00      	nop
60001d9c:	400d8000 	.word	0x400d8000
60001da0:	400fc000 	.word	0x400fc000
60001da4:	402e0000 	.word	0x402e0000
60001da8:	400d9000 	.word	0x400d9000
60001dac:	001e1c00 	.word	0x001e1c00
60001db0:	e000e28c 	.word	0xe000e28c
60001db4:	20000000 	.word	0x20000000
60001db8:	20001800 	.word	0x20001800
60001dbc:	00001191 	.word	0x00001191
60001dc0:	e000e10c 	.word	0xe000e10c

60001dc4 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001dc4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001dc6:	4b0e      	ldr	r3, [pc, #56]	; (60001e00 <_reboot_Teensyduino_+0x3c>)
60001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001dca:	079b      	lsls	r3, r3, #30
60001dcc:	d400      	bmi.n	60001dd0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dce:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dd0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dd2:	4b0c      	ldr	r3, [pc, #48]	; (60001e04 <_reboot_Teensyduino_+0x40>)
60001dd4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dd6:	4a0c      	ldr	r2, [pc, #48]	; (60001e08 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001dd8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ddc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de0:	490a      	ldr	r1, [pc, #40]	; (60001e0c <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de6:	6411      	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001dea:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dee:	4a08      	ldr	r2, [pc, #32]	; (60001e10 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001df0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
60001df4:	4907      	ldr	r1, [pc, #28]	; (60001e14 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001df6:	6812      	ldr	r2, [r2, #0]
60001df8:	4618      	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001dfa:	6019      	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dfc:	6893      	ldr	r3, [r2, #8]
60001dfe:	4798      	blx	r3
60001e00:	401f4400 	.word	0x401f4400
60001e04:	402e0000 	.word	0x402e0000
60001e08:	400ac000 	.word	0x400ac000
60001e0c:	00200003 	.word	0x00200003
60001e10:	0020001c 	.word	0x0020001c
60001e14:	eb120000 	.word	0xeb120000

60001e18 <_init>:
60001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e1a:	bf00      	nop
60001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e1e:	bc08      	pop	{r3}
60001e20:	469e      	mov	lr, r3
60001e22:	4770      	bx	lr
60001e24:	0000      	movs	r0, r0
	...

60001e28 <__sm_set_pool_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__sm_set_pool_veneer+0x4>
60001e2c:	00000d75 	.word	0x00000d75

60001e30 <__delay_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__delay_veneer+0x4>
60001e34:	00000849 	.word	0x00000849

60001e38 <__pwm_init_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__pwm_init_veneer+0x4>
60001e3c:	00000a3d 	.word	0x00000a3d

60001e40 <__memset_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__memset_veneer+0x4>
60001e44:	00002ef5 	.word	0x00002ef5

60001e48 <__main_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	00000149 	.word	0x00000149

60001e50 <__usb_init_serialnumber_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__usb_init_serialnumber_veneer+0x4>
60001e54:	000018f5 	.word	0x000018f5

60001e58 <__set_arm_clock_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__set_arm_clock_veneer+0x4>
60001e5c:	00000585 	.word	0x00000585

60001e60 <____libc_init_array_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <____libc_init_array_veneer+0x4>
60001e64:	000026fd 	.word	0x000026fd

60001e68 <__init_array_start>:
60001e68:	00000045 	.word	0x00000045
60001e6c:	000003b1 	.word	0x000003b1
60001e70:	00002231 	.word	0x00002231

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	b933      	.short	0xb933
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xd>
      2c:	f3af4804 	.word	0xf3af4804
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	7023      	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	bd10      	.short	0xbd10
      38:	1e68      	subs	r0, r5, #1
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	63e4      	str	r4, [r4, #60]	; 0x3c
	...

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	b5104b08 	.word	0xb5104b08
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	20001e6c 	.word	0x20001e6c
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	63e4      	str	r4, [r4, #60]	; 0x3c
      72:	0000      	movs	r0, r0
      74:	1ac0      	subs	r0, r0, r3
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <Print::println(char const*)>:
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      7c:	b538      	push	{r3, r4, r5, lr}
      7e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
      80:	4608      	mov	r0, r1
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      82:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
      84:	f99cf003 	.word	0xf99cf003
      88:	6823      	ldr	r3, [r4, #0]
      8a:	4602      	.short	0x4602
      8c:	4629      	mov	r1, r5
      8e:	4620      	.short	0x4620
      90:	685b      	ldr	r3, [r3, #4]
      92:	4798      	.short	0x4798
      94:	4605      	mov	r5, r0
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
      96:	4620      	.short	0x4620
      98:	f001 ffa2 	bl	1fe0 <Print::println()>
      9c:	4428      	add	r0, r5
      9e:	bd38      	.short	0xbd38

000000a0 <test_blink()>:
	// test stuff
	setup_blink();
	return 0;
}

int test_blink(void) {
      a0:	b510      	push	{r4, lr}
      a2:	b082      	sub	sp, #8
	// more test stuff
	blink();
	blinker_status = false;
      a4:	4c20      	ldr	r4, [pc, #128]	; (128 <test_blink()+0x88>)
	return 0;
}

int test_blink(void) {
	// more test stuff
	blink();
      a6:	f000      	.short	0xf000
      a8:	f9a3 2300 	vld4.8	{d2[0],d3[0],d4[0],d5[0]}, [r3], r0
	blinker_status = false;
	bool init_status = blinker_status;
	timers.set(0);
      ac:	481f      	ldr	r0, [pc, #124]	; (12c <test_blink()+0x8c>)
      ae:	4619      	.short	0x4619
}

int test_blink(void) {
	// more test stuff
	blink();
	blinker_status = false;
      b0:	7023      	strb	r3, [r4, #0]
	bool init_status = blinker_status;
	timers.set(0);
      b2:	f000 f9df 	bl	474 <FTYK::set(int)>

	while (init_status == blinker_status) {
      b6:	7823      	ldrb	r3, [r4, #0]
      b8:	b923      	cbnz	r3, c4 <test_blink()+0x24>
		blink();
      ba:	f000 f999 	bl	3f0 <blink()>
	blink();
	blinker_status = false;
	bool init_status = blinker_status;
	timers.set(0);

	while (init_status == blinker_status) {
      be:	7823      	ldrb	r3, [r4, #0]
      c0:	2b00      	cmp	r3, #0
      c2:	d0fa      	.short	0xd0fa
		blink();
	}
	// blinker should be precise to 0 microseconds
	if (abs(BLINK_RATE_US - timers.micros(0)) > 1) {
      c4:	2100      	movs	r1, #0
      c6:	4819      	.short	0x4819
      c8:	f000 f9de 	bl	488 <FTYK::micros(int)>
      cc:	7a18eddf 	.word	0x7a18eddf
      d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
      d4:	0ac0eeb5 	.word	0x0ac0eeb5
      d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      dc:	eef7dd20 	.word	0xeef7dd20
      e0:	7a00      	ldrb	r0, [r0, #8]
      e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
      e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      ea:	dd16      	ble.n	11a <test_blink()+0x7a>
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
      ec:	2111      	movs	r1, #17
      ee:	4811      	ldr	r0, [pc, #68]	; (134 <test_blink()+0x94>)
      f0:	f001 fee8 	bl	1ec4 <usb_seremu_write>
      f4:	f0014810 	.word	0xf0014810
      f8:	ff73 2100 	vrhadd.u<illegal width 64>	d18, d3, d0
		Serial.println("Failed blink test");
		Serial.printf("%i != %f\n", BLINK_RATE_US, timers.micros(0));
      fc:	480b      	ldr	r0, [pc, #44]	; (12c <test_blink()+0x8c>)
      fe:	f000 f9c3 	bl	488 <FTYK::micros(int)>
     102:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     106:	4a0d      	ldr	r2, [pc, #52]	; (13c <test_blink()+0x9c>)
     108:	490d      	ldr	r1, [pc, #52]	; (140 <test_blink()+0xa0>)
     10a:	480b      	ldr	r0, [pc, #44]	; (138 <test_blink()+0x98>)
     10c:	ed8d 0b00 	vstr	d0, [sp]
     110:	f001 ff7e 	bl	2010 <Print::printf(char const*, ...)>
     114:	b0022001 	.word	0xb0022001
		return 1;
	}
	// TEST_ASSERT_INT32_WITHIN(15, BLINK_RATE_US, timer_info_us(0));
	return 0;
}
     118:	bd10      	pop	{r4, pc}
		Serial.println("Failed blink test");
		Serial.printf("%i != %f\n", BLINK_RATE_US, timers.micros(0));
		return 1;
	}
	// TEST_ASSERT_INT32_WITHIN(15, BLINK_RATE_US, timer_info_us(0));
	return 0;
     11a:	2000      	movs	r0, #0
}
     11c:	bd10b002 	.word	0xbd10b002

	while (init_status == blinker_status) {
		blink();
	}
	// blinker should be precise to 0 microseconds
	if (abs(BLINK_RATE_US - timers.micros(0)) > 1) {
     120:	eeb1 0a40 	vneg.f32	s0, s0
     124:	e7db      	b.n	de <test_blink()+0x3e>
     126:	bf00      	nop
     128:	1f7d      	subs	r5, r7, #5
     12a:	2000      	.short	0x2000
     12c:	1f48      	subs	r0, r1, #5
     12e:	2000      	.short	0x2000
     130:	2400      	movs	r4, #0
     132:	4874      	.short	0x4874
     134:	082c      	lsrs	r4, r5, #32
     136:	2000      	movs	r0, #0
     138:	20000e34 	.word	0x20000e34
     13c:	d090      	beq.n	60 <frame_dummy+0x1c>
     13e:	0003      	.short	0x0003
     140:	0840      	lsrs	r0, r0, #1
     142:	2000      	movs	r0, #0
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
				| IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     144:	00000000 	.word	0x00000000

00000148 <main>:
	// RUN_TEST(test_blink);
	// return UNITY_END();
}


int main() {
     148:	b530      	push	{r4, r5, lr}
     14a:	4c8d      	.short	0x4c8d
     14c:	4d8d      	ldr	r5, [pc, #564]	; (384 <main+0x23c>)
     14e:	ed2d      	.short	0xed2d
     150:	8b04      	ldrh	r4, [r0, #24]
     152:	b085      	.short	0xb085
        uint8_t stopbits(void) { return 1; }
        uint8_t paritytype(void) { return 0; }
        uint8_t numbits(void) { return 8; }
        uint8_t dtr(void) { return 1; }
        uint8_t rts(void) { return 1; }
        operator bool() { yield(); return usb_configuration && usb_seremu_online; }
     154:	f002 f88c 	bl	2270 <yield>
     158:	2b007823 	.word	0x2b007823
     15c:	d0fa      	beq.n	154 <main+0xc>
     15e:	782b      	.short	0x782b
     160:	2b00      	cmp	r3, #0
     162:	d0f7      	.short	0xd0f7
	// Wait ~2 seconds before the Unity test runner
	// establishes connection with a board Serial interface
	while (!Serial) {};

	Serial.println("Start FTYK tests");
     164:	4988      	ldr	r1, [pc, #544]	; (388 <main+0x240>)
     166:	4889      	.short	0x4889
     168:	f7ff ff88 	bl	7c <Print::println(char const*)>
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     16c:	48872102 	.word	0x48872102
     170:	ed9f 0b81 	vldr	d0, [pc, #516]	; 378 <main+0x230>
     174:	ff9cf001 	.word	0xff9cf001
	Serial.print(1E9);
	Serial.println();
     178:	4884      	ldr	r0, [pc, #528]	; (38c <main+0x244>)
     17a:	f001      	.short	0xf001
     17c:	ff31 2100 	vrhadd.u<illegal width 64>	d2, d1, d0

	timers.set(0);
     180:	f0004883 	.word	0xf0004883
     184:	f977 2101 	ldr??.w	r2, [r7, <undefined>]
	timers.set(1);
     188:	f0004881 	.word	0xf0004881
     18c:	f973 2102 	ldr??.w	r2, [r3, <undefined>]
	timers.set(2);
     190:	f000487f 	.word	0xf000487f
     194:	f96f eeb7 			; <UNDEFINED> instruction: 0xf96feeb7

	timers.delay_millis(0, 1);
     198:	21000a00 	.word	0x21000a00
     19c:	487c      	ldr	r0, [pc, #496]	; (390 <main+0x248>)
     19e:	f000      	.short	0xf000
     1a0:	f9d3 2100 	ldr??.w	r2, [r3, #256]	; 0x100

	Serial.printf("timers: %f, %f, %f us\n", timers.micros(0), timers.micros(1), timers.micros(2));
     1a4:	487a      	ldr	r0, [pc, #488]	; (390 <main+0x248>)
     1a6:	f000      	.short	0xf000
     1a8:	f96f 2101 	vld4.8	{d18,d20,d22,d24}, [pc], r1
     1ac:	eef04878 	.word	0xeef04878
     1b0:	8a40      	ldrh	r0, [r0, #18]
     1b2:	f000 f969 	bl	488 <FTYK::micros(int)>
     1b6:	eeb0      	.short	0xeeb0
     1b8:	8a40      	ldrh	r0, [r0, #18]
     1ba:	2102      	.short	0x2102
     1bc:	4874      	ldr	r0, [pc, #464]	; (390 <main+0x248>)
     1be:	f000      	.short	0xf000
     1c0:	f963 eeb7 			; <UNDEFINED> instruction: 0xf963eeb7
     1c4:	eeb76ae8 	.word	0xeeb76ae8
     1c8:	0ac0      	lsrs	r0, r0, #11
     1ca:	4972      	.short	0x4972
     1cc:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
     1d0:	486e      	ldr	r0, [pc, #440]	; (38c <main+0x244>)
     1d2:	ed8d      	.short	0xed8d
     1d4:	0b02      	lsrs	r2, r0, #12
     1d6:	ec53      	.short	0xec53
     1d8:	2b16      	cmp	r3, #22
     1da:	ed8d 7b00 	vstr	d7, [sp]
     1de:	f001      	.short	0xf001
     1e0:	ff17 2102 	vrhadd.u16	d2, d7, d2
	Serial.printf("timer diff: %f %f\n", timers.micros(2) - timers.micros(0), timers.micros(2) - timers.micros(1));
     1e4:	f000486a 	.word	0xf000486a
     1e8:	f94f 2100 	vst4.8	{d18,d20,d22,d24}, [pc], r0
     1ec:	eef04868 	.word	0xeef04868
     1f0:	8a40      	ldrh	r0, [r0, #18]
     1f2:	f000      	.short	0xf000
     1f4:	f949 2102 	vst4.8	{d18,d20,d22,d24}, [r9], r2
     1f8:	eeb04865 	.word	0xeeb04865
     1fc:	9a40      	ldr	r2, [sp, #256]	; 0x100
     1fe:	f000      	.short	0xf000
     200:	f943 eeb0 			; <UNDEFINED> instruction: 0xf943eeb0
     204:	8a40      	ldrh	r0, [r0, #18]
     206:	2101      	.short	0x2101
     208:	4861      	ldr	r0, [pc, #388]	; (390 <main+0x248>)
     20a:	f000 f93d 	bl	488 <FTYK::micros(int)>
     20e:	ee78      	.short	0xee78
     210:	8ac9      	ldrh	r1, [r1, #22]
     212:	ee38      	.short	0xee38
     214:	0a40      	lsrs	r0, r0, #9
     216:	4960      	.short	0x4960
     218:	485c      	ldr	r0, [pc, #368]	; (38c <main+0x244>)
     21a:	eeb7      	.short	0xeeb7
     21c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
     21e:	eeb7      	.short	0xeeb7
     220:	7ac0      	ldrb	r0, [r0, #11]
     222:	ec53      	.short	0xec53
     224:	2b16      	cmp	r3, #22
     226:	ed8d      	.short	0xed8d
     228:	7b00      	ldrb	r0, [r0, #12]
     22a:	f001      	.short	0xf001
     22c:	fef1 2100 	cdp2	1, 15, cr2, cr1, cr0, {0}
	Serial.printf("timers: %f, %f, %f ms\n", timers.millis(0), timers.millis(1), timers.millis(2));
     230:	f0004857 	.word	0xf0004857
     234:	f949 2101 	vst4.8	{d18,d20,d22,d24}, [r9], r1
     238:	eef04855 	.word	0xeef04855
     23c:	8a40      	ldrh	r0, [r0, #18]
     23e:	f000      	.short	0xf000
     240:	f943 eeb0 			; <UNDEFINED> instruction: 0xf943eeb0
     244:	21028a40 	.word	0x21028a40
     248:	4851      	ldr	r0, [pc, #324]	; (390 <main+0x248>)
     24a:	f000      	.short	0xf000
     24c:	f93d eeb7 	ldrsht	lr, [sp, #183]
     250:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
     252:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     256:	4951      	ldr	r1, [pc, #324]	; (39c <main+0x254>)
     258:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
     25c:	484b      	ldr	r0, [pc, #300]	; (38c <main+0x244>)
     25e:	ed8d 0b02 	vstr	d0, [sp, #8]
     262:	ec53 2b16 	vmov	r2, r3, d6
     266:	ed8d 7b00 	vstr	d7, [sp]
     26a:	f001 fed1 	bl	2010 <Print::printf(char const*, ...)>
	Serial.printf("timer diff: %f %f\n", timers.millis(2) - timers.millis(0), timers.millis(2) - timers.millis(1));
     26e:	2102      	movs	r1, #2
     270:	4847      	ldr	r0, [pc, #284]	; (390 <main+0x248>)
     272:	f000 f929 	bl	4c8 <FTYK::millis(int)>
     276:	2100      	movs	r1, #0
     278:	4845      	ldr	r0, [pc, #276]	; (390 <main+0x248>)
     27a:	eef0 8a40 	vmov.f32	s17, s0
     27e:	f000 f923 	bl	4c8 <FTYK::millis(int)>
     282:	2102      	movs	r1, #2
     284:	4842      	ldr	r0, [pc, #264]	; (390 <main+0x248>)
     286:	eeb0 9a40 	vmov.f32	s18, s0
     28a:	f000 f91d 	bl	4c8 <FTYK::millis(int)>
     28e:	eeb0 8a40 	vmov.f32	s16, s0
     292:	2101      	movs	r1, #1
     294:	483e      	ldr	r0, [pc, #248]	; (390 <main+0x248>)
     296:	f000 f917 	bl	4c8 <FTYK::millis(int)>
     29a:	ee78 8ac9 	vsub.f32	s17, s17, s18
     29e:	ee38 0a40 	vsub.f32	s0, s16, s0
     2a2:	493d      	ldr	r1, [pc, #244]	; (398 <main+0x250>)
     2a4:	4839      	ldr	r0, [pc, #228]	; (38c <main+0x244>)
     2a6:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
     2aa:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
     2ae:	ec53 2b16 	vmov	r2, r3, d6
     2b2:	ed8d 7b00 	vstr	d7, [sp]
     2b6:	f001 feab 	bl	2010 <Print::printf(char const*, ...)>
	Serial.printf("timers: %f, %f, %f s\n", timers.secs(0), timers.secs(1), timers.secs(2));
     2ba:	2100      	movs	r1, #0
     2bc:	4834      	ldr	r0, [pc, #208]	; (390 <main+0x248>)
     2be:	f000 f923 	bl	508 <FTYK::secs(int)>
     2c2:	2101      	movs	r1, #1
     2c4:	4832      	ldr	r0, [pc, #200]	; (390 <main+0x248>)
     2c6:	eef0 8a40 	vmov.f32	s17, s0
     2ca:	f000 f91d 	bl	508 <FTYK::secs(int)>
     2ce:	eeb0 8a40 	vmov.f32	s16, s0
     2d2:	2102      	movs	r1, #2
     2d4:	482e      	ldr	r0, [pc, #184]	; (390 <main+0x248>)
     2d6:	f000 f917 	bl	508 <FTYK::secs(int)>
     2da:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
     2de:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     2e2:	492f      	ldr	r1, [pc, #188]	; (3a0 <main+0x258>)
     2e4:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
     2e8:	4828      	ldr	r0, [pc, #160]	; (38c <main+0x244>)
     2ea:	ed8d 0b02 	vstr	d0, [sp, #8]
     2ee:	ec53 2b16 	vmov	r2, r3, d6
     2f2:	ed8d 7b00 	vstr	d7, [sp]
     2f6:	f001 fe8b 	bl	2010 <Print::printf(char const*, ...)>
	Serial.printf("timer diff: %f %f\n", timers.secs(2) - timers.secs(0), timers.secs(2) - timers.secs(1));
     2fa:	2102      	movs	r1, #2
     2fc:	4824      	ldr	r0, [pc, #144]	; (390 <main+0x248>)
     2fe:	f000 f903 	bl	508 <FTYK::secs(int)>
     302:	2100      	movs	r1, #0
     304:	4822      	ldr	r0, [pc, #136]	; (390 <main+0x248>)
     306:	eef0 8a40 	vmov.f32	s17, s0
     30a:	f000 f8fd 	bl	508 <FTYK::secs(int)>
     30e:	2102      	movs	r1, #2
     310:	481f      	ldr	r0, [pc, #124]	; (390 <main+0x248>)
     312:	eeb0 9a40 	vmov.f32	s18, s0
     316:	f000 f8f7 	bl	508 <FTYK::secs(int)>
     31a:	eeb0 8a40 	vmov.f32	s16, s0
     31e:	2101      	movs	r1, #1
     320:	481b      	ldr	r0, [pc, #108]	; (390 <main+0x248>)
     322:	f000 f8f1 	bl	508 <FTYK::secs(int)>
     326:	ee78 8ac9 	vsub.f32	s17, s17, s18
     32a:	ee38 0a40 	vsub.f32	s0, s16, s0
     32e:	491a      	ldr	r1, [pc, #104]	; (398 <main+0x250>)
     330:	4816      	ldr	r0, [pc, #88]	; (38c <main+0x244>)
     332:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
     336:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
     33a:	ec53 2b16 	vmov	r2, r3, d6
     33e:	ed8d 7b00 	vstr	d7, [sp]
     342:	f001 fe65 	bl	2010 <Print::printf(char const*, ...)>
	Serial.println("Start blink tests");
     346:	4917      	ldr	r1, [pc, #92]	; (3a4 <main+0x25c>)
     348:	4810      	ldr	r0, [pc, #64]	; (38c <main+0x244>)
     34a:	f7ff fe97 	bl	7c <Print::println(char const*)>

FTYK timers;

int test_setup_blink(void) {
	// test stuff
	setup_blink();
     34e:	f000 f835 	bl	3bc <setup_blink()>
	return 0;
}

int runTests(void) {
	test_setup_blink();
	int errs = test_blink();
     352:	f7ff fea5 	bl	a0 <test_blink()>
     356:	4604      	mov	r4, r0
	Serial.printf("timer diff: %f %f\n", timers.secs(2) - timers.secs(0), timers.secs(2) - timers.secs(1));
	Serial.println("Start blink tests");

	int errors = runTests();

	Serial.println("Finished tests");
     358:	4913      	ldr	r1, [pc, #76]	; (3a8 <main+0x260>)
     35a:	480c      	ldr	r0, [pc, #48]	; (38c <main+0x244>)
     35c:	f7ff fe8e 	bl	7c <Print::println(char const*)>
	Serial.printf("%i failed\n", errors);
     360:	4622      	mov	r2, r4
     362:	4912      	ldr	r1, [pc, #72]	; (3ac <main+0x264>)
     364:	4809      	ldr	r0, [pc, #36]	; (38c <main+0x244>)
     366:	f001 fe53 	bl	2010 <Print::printf(char const*, ...)>

	return 0;
     36a:	2000      	movs	r0, #0
     36c:	b005      	add	sp, #20
     36e:	ecbd 8b04 	vpop	{d8-d9}
     372:	bd30      	pop	{r4, r5, pc}
     374:	f3af 8000 	nop.w
     378:	00000000 	.word	0x00000000
     37c:	41cdcd65 	.word	0x41cdcd65
     380:	20001f89 	.word	0x20001f89
     384:	20001f8c 	.word	0x20001f8c
     388:	2000084c 	.word	0x2000084c
     38c:	20000e34 	.word	0x20000e34
     390:	20001f48 	.word	0x20001f48
     394:	20000860 	.word	0x20000860
     398:	20000878 	.word	0x20000878
     39c:	2000088c 	.word	0x2000088c
     3a0:	200008a4 	.word	0x200008a4
     3a4:	200008bc 	.word	0x200008bc
     3a8:	200008d0 	.word	0x200008d0
     3ac:	200008e0 	.word	0x200008e0

000003b0 <_GLOBAL__sub_I_timers>:
// #include "unity.h"
#include "utilities/timing.h"
#include "utilities/blink.h"

FTYK timers;
     3b0:	4801      	ldr	r0, [pc, #4]	; (3b8 <_GLOBAL__sub_I_timers+0x8>)
     3b2:	f000 b84f 	b.w	454 <FTYK::FTYK()>
     3b6:	bf00      	nop
     3b8:	20001f48 	.word	0x20001f48

000003bc <setup_blink()>:
#include "blink.h"

uint32_t blinker_timer_mark;
bool blinker_status;

void setup_blink() {
     3bc:	b510      	push	{r4, lr}
	// Hardware setup
	blinker_status = false;
     3be:	2200      	movs	r2, #0
     3c0:	4c07      	ldr	r4, [pc, #28]	; (3e0 <setup_blink()+0x24>)
	blinker_timer_mark = ARM_DWT_CYCCNT;
     3c2:	4b08      	ldr	r3, [pc, #32]	; (3e4 <setup_blink()+0x28>)

	pinMode(BLINK_PIN, OUTPUT);
     3c4:	2101      	movs	r1, #1
uint32_t blinker_timer_mark;
bool blinker_status;

void setup_blink() {
	// Hardware setup
	blinker_status = false;
     3c6:	7022      	strb	r2, [r4, #0]
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
     3c8:	200d      	movs	r0, #13
bool blinker_status;

void setup_blink() {
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;
     3ca:	681a      	ldr	r2, [r3, #0]
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <setup_blink()+0x2c>)
     3ce:	601a      	str	r2, [r3, #0]

	pinMode(BLINK_PIN, OUTPUT);
     3d0:	f000 facc 	bl	96c <pinMode>
	digitalWrite(BLINK_PIN, blinker_status);
     3d4:	7821      	ldrb	r1, [r4, #0]
     3d6:	200d      	movs	r0, #13
}
     3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
	digitalWrite(BLINK_PIN, blinker_status);
     3dc:	f000 bac0 	b.w	960 <digitalWrite>
     3e0:	20001f7d 	.word	0x20001f7d
     3e4:	e0001004 	.word	0xe0001004
     3e8:	20001ee8 	.word	0x20001ee8
     3ec:	00000000 	.word	0x00000000

000003f0 <blink()>:
}

void blink(){
     3f0:	b410      	push	{r4}
	if ((1E6/float(F_CPU))*(ARM_DWT_CYCCNT - blinker_timer_mark) > BLINK_RATE_US){
     3f2:	4a15      	ldr	r2, [pc, #84]	; (448 <blink()+0x58>)
     3f4:	4c15      	ldr	r4, [pc, #84]	; (44c <blink()+0x5c>)
     3f6:	6811      	ldr	r1, [r2, #0]
     3f8:	6823      	ldr	r3, [r4, #0]
     3fa:	1a5b      	subs	r3, r3, r1
     3fc:	ee07 3a10 	vmov	s14, r3
     400:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 438 <blink()+0x48>
     404:	eeb8 7b47 	vcvt.f64.u32	d7, s14
     408:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 440 <blink()+0x50>
     40c:	ee27 7b05 	vmul.f64	d7, d7, d5
     410:	eeb4 7bc6 	vcmpe.f64	d7, d6
     414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     418:	dc02      	bgt.n	420 <blink()+0x30>
		blinker_status = !blinker_status;
		blinker_timer_mark = ARM_DWT_CYCCNT;
		digitalWrite(BLINK_PIN, blinker_status);
	}
     41a:	f85d 4b04 	ldr.w	r4, [sp], #4
     41e:	4770      	bx	lr
	digitalWrite(BLINK_PIN, blinker_status);
}

void blink(){
	if ((1E6/float(F_CPU))*(ARM_DWT_CYCCNT - blinker_timer_mark) > BLINK_RATE_US){
		blinker_status = !blinker_status;
     420:	4b0b      	ldr	r3, [pc, #44]	; (450 <blink()+0x60>)
		blinker_timer_mark = ARM_DWT_CYCCNT;
		digitalWrite(BLINK_PIN, blinker_status);
     422:	200d      	movs	r0, #13
	digitalWrite(BLINK_PIN, blinker_status);
}

void blink(){
	if ((1E6/float(F_CPU))*(ARM_DWT_CYCCNT - blinker_timer_mark) > BLINK_RATE_US){
		blinker_status = !blinker_status;
     424:	7819      	ldrb	r1, [r3, #0]
     426:	f081 0101 	eor.w	r1, r1, #1
     42a:	7019      	strb	r1, [r3, #0]
		blinker_timer_mark = ARM_DWT_CYCCNT;
     42c:	6823      	ldr	r3, [r4, #0]
		digitalWrite(BLINK_PIN, blinker_status);
	}
     42e:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void blink(){
	if ((1E6/float(F_CPU))*(ARM_DWT_CYCCNT - blinker_timer_mark) > BLINK_RATE_US){
		blinker_status = !blinker_status;
		blinker_timer_mark = ARM_DWT_CYCCNT;
     432:	6013      	str	r3, [r2, #0]
		digitalWrite(BLINK_PIN, blinker_status);
     434:	f000 ba94 	b.w	960 <digitalWrite>
     438:	b4e81b4f 	.word	0xb4e81b4f
     43c:	3f5b4e81 	.word	0x3f5b4e81
     440:	00000000 	.word	0x00000000
     444:	410e8480 	.word	0x410e8480
     448:	20001ee8 	.word	0x20001ee8
     44c:	e0001004 	.word	0xe0001004
     450:	20001f7d 	.word	0x20001f7d

00000454 <FTYK::FTYK()>:
	uint32_t delta_ns = CYCLES_2_NS(delta_cycles); 
	Serial.printf( "\t%1lu cycles, %1lu ns\n", delta_cycles, delta_ns);
	return delta_ns;
}

FTYK::FTYK() {
     454:	b410      	push	{r4}
     456:	1f03      	subs	r3, r0, #4
	for (size_t i = 0; i < MAX_NUM_TIMERS; i++) {
		timers[i] = ARM_DWT_CYCCNT;
     458:	4c05      	ldr	r4, [pc, #20]	; (470 <FTYK::FTYK()+0x1c>)
     45a:	f100 0124 	add.w	r1, r0, #36	; 0x24
     45e:	6822      	ldr	r2, [r4, #0]
     460:	f843 2f04 	str.w	r2, [r3, #4]!
	Serial.printf( "\t%1lu cycles, %1lu ns\n", delta_cycles, delta_ns);
	return delta_ns;
}

FTYK::FTYK() {
	for (size_t i = 0; i < MAX_NUM_TIMERS; i++) {
     464:	428b      	cmp	r3, r1
     466:	d1fa      	bne.n	45e <FTYK::FTYK()+0xa>
		timers[i] = ARM_DWT_CYCCNT;
	}
}
     468:	f85d 4b04 	ldr.w	r4, [sp], #4
     46c:	4770      	bx	lr
     46e:	bf00      	nop
     470:	e0001004 	.word	0xe0001004

00000474 <FTYK::set(int)>:


void FTYK::set(int idx) {
	timers[idx] = ARM_DWT_CYCCNT;
     474:	4b02      	ldr	r3, [pc, #8]	; (480 <FTYK::set(int)+0xc>)
     476:	681b      	ldr	r3, [r3, #0]
     478:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     47c:	4770      	bx	lr
     47e:	bf00      	nop
     480:	e0001004 	.word	0xe0001004
     484:	00000000 	.word	0x00000000

00000488 <FTYK::micros(int)>:
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     488:	4b0d      	ldr	r3, [pc, #52]	; (4c0 <FTYK::micros(int)+0x38>)
}

float FTYK::micros(int idx) {
	return NS_2_US(CYCLES_2_NS(cycles(idx))); 
     48a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     48e:	681b      	ldr	r3, [r3, #0]
}

float FTYK::micros(int idx) {
	return NS_2_US(CYCLES_2_NS(cycles(idx))); 
     490:	1a9b      	subs	r3, r3, r2
     492:	ee07 3a10 	vmov	s14, r3
     496:	ed9f 5b06 	vldr	d5, [pc, #24]	; 4b0 <FTYK::micros(int)+0x28>
     49a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     49e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 4b8 <FTYK::micros(int)+0x30>
     4a2:	ee27 7b05 	vmul.f64	d7, d7, d5
     4a6:	ee87 0b06 	vdiv.f64	d0, d7, d6
}
     4aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     4ae:	4770      	bx	lr
     4b0:	aaaaaaab 	.word	0xaaaaaaab
     4b4:	3ffaaaaa 	.word	0x3ffaaaaa
     4b8:	00000000 	.word	0x00000000
     4bc:	408f4000 	.word	0x408f4000
     4c0:	e0001004 	.word	0xe0001004
     4c4:	00000000 	.word	0x00000000

000004c8 <FTYK::millis(int)>:
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     4c8:	4b0d      	ldr	r3, [pc, #52]	; (500 <FTYK::millis(int)+0x38>)
float FTYK::micros(int idx) {
	return NS_2_US(CYCLES_2_NS(cycles(idx))); 
}

float FTYK::millis(int idx) {
	return NS_2_MS(CYCLES_2_NS(cycles(idx)));
     4ca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     4ce:	681b      	ldr	r3, [r3, #0]
float FTYK::micros(int idx) {
	return NS_2_US(CYCLES_2_NS(cycles(idx))); 
}

float FTYK::millis(int idx) {
	return NS_2_MS(CYCLES_2_NS(cycles(idx)));
     4d0:	1a9b      	subs	r3, r3, r2
     4d2:	ee07 3a10 	vmov	s14, r3
     4d6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 4f0 <FTYK::millis(int)+0x28>
     4da:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     4de:	ed9f 6b06 	vldr	d6, [pc, #24]	; 4f8 <FTYK::millis(int)+0x30>
     4e2:	ee27 7b05 	vmul.f64	d7, d7, d5
     4e6:	ee87 0b06 	vdiv.f64	d0, d7, d6
}
     4ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     4ee:	4770      	bx	lr
     4f0:	aaaaaaab 	.word	0xaaaaaaab
     4f4:	3ffaaaaa 	.word	0x3ffaaaaa
     4f8:	00000000 	.word	0x00000000
     4fc:	412e8480 	.word	0x412e8480
     500:	e0001004 	.word	0xe0001004
     504:	00000000 	.word	0x00000000

00000508 <FTYK::secs(int)>:
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     508:	4b0d      	ldr	r3, [pc, #52]	; (540 <FTYK::secs(int)+0x38>)
float FTYK::millis(int idx) {
	return NS_2_MS(CYCLES_2_NS(cycles(idx)));
}

float FTYK::secs(int idx) {
	return NS_2_S(CYCLES_2_NS(cycles(idx)));
     50a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     50e:	681b      	ldr	r3, [r3, #0]
float FTYK::millis(int idx) {
	return NS_2_MS(CYCLES_2_NS(cycles(idx)));
}

float FTYK::secs(int idx) {
	return NS_2_S(CYCLES_2_NS(cycles(idx)));
     510:	1a9b      	subs	r3, r3, r2
     512:	ee07 3a10 	vmov	s14, r3
     516:	ed9f 5b06 	vldr	d5, [pc, #24]	; 530 <FTYK::secs(int)+0x28>
     51a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     51e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 538 <FTYK::secs(int)+0x30>
     522:	ee27 7b05 	vmul.f64	d7, d7, d5
     526:	ee87 0b06 	vdiv.f64	d0, d7, d6
}
     52a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     52e:	4770      	bx	lr
     530:	aaaaaaab 	.word	0xaaaaaaab
     534:	3ffaaaaa 	.word	0x3ffaaaaa
     538:	00000000 	.word	0x00000000
     53c:	41cdcd65 	.word	0x41cdcd65
     540:	e0001004 	.word	0xe0001004
     544:	00000000 	.word	0x00000000

00000548 <FTYK::delay_millis(int, float)>:
		None
	*/
	while(CYCLES_2_US(cycles(idx)) < duration) {}
}

void FTYK::delay_millis(int idx, float duration){
     548:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     54c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     550:	4a0b      	ldr	r2, [pc, #44]	; (580 <FTYK::delay_millis(int, float)+0x38>)
	@param
	  duration: (uint32_t) milliseconds to wait (from when set() was called)
	@return
		None
	*/
	while(CYCLES_2_MS(cycles(idx)) < duration) {}
     552:	ed9f 6b09 	vldr	d6, [pc, #36]	; 578 <FTYK::delay_millis(int, float)+0x30>
void FTYK::mark(int idx) {
	duration_info(timers[idx], ARM_DWT_CYCCNT);
}

int FTYK::cycles(int idx) {
	return ARM_DWT_CYCCNT - timers[idx];
     556:	6813      	ldr	r3, [r2, #0]
	@param
	  duration: (uint32_t) milliseconds to wait (from when set() was called)
	@return
		None
	*/
	while(CYCLES_2_MS(cycles(idx)) < duration) {}
     558:	1a5b      	subs	r3, r3, r1
     55a:	ee07 3a10 	vmov	s14, r3
     55e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     562:	ee27 7b06 	vmul.f64	d7, d7, d6
     566:	eeb4 0bc7 	vcmpe.f64	d0, d7
     56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     56e:	dcf2      	bgt.n	556 <FTYK::delay_millis(int, float)+0xe>
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	f3af 8000 	nop.w
     578:	612f3696 	.word	0x612f3696
     57c:	3ebbf647 	.word	0x3ebbf647
     580:	e0001004 	.word	0xe0001004

00000584 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     584:	4a96      	ldr	r2, [pc, #600]	; (7e0 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     586:	4b97      	ldr	r3, [pc, #604]	; (7e4 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     588:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     58a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     58e:	4c96      	ldr	r4, [pc, #600]	; (7e8 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     590:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     594:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     596:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     598:	d91c      	bls.n	5d4 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     59a:	4b94      	ldr	r3, [pc, #592]	; (7ec <set_arm_clock+0x268>)
     59c:	4298      	cmp	r0, r3
     59e:	f240 8115 	bls.w	7cc <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     5a2:	4b93      	ldr	r3, [pc, #588]	; (7f0 <set_arm_clock+0x26c>)
     5a4:	f240 6527 	movw	r5, #1575	; 0x627
     5a8:	4f92      	ldr	r7, [pc, #584]	; (7f4 <set_arm_clock+0x270>)
     5aa:	4403      	add	r3, r0
     5ac:	4c92      	ldr	r4, [pc, #584]	; (7f8 <set_arm_clock+0x274>)
     5ae:	0a1a      	lsrs	r2, r3, #8
     5b0:	fba7 3202 	umull	r3, r2, r7, r2
     5b4:	09d3      	lsrs	r3, r2, #7
     5b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     5ba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     5be:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
     5c2:	42ab      	cmp	r3, r5
     5c4:	bf28      	it	cs
     5c6:	462b      	movcs	r3, r5
     5c8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
     5cc:	fba4 3503 	umull	r3, r5, r4, r3
     5d0:	08ed      	lsrs	r5, r5, #3
     5d2:	e004      	b.n	5de <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     5d4:	4d89      	ldr	r5, [pc, #548]	; (7fc <set_arm_clock+0x278>)
     5d6:	42a8      	cmp	r0, r5
     5d8:	bf94      	ite	ls
     5da:	2506      	movls	r5, #6
     5dc:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     5de:	4a81      	ldr	r2, [pc, #516]	; (7e4 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     5e0:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     5e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     5e8:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     5ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     5ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     5f2:	d20a      	bcs.n	60a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     5f4:	4b7c      	ldr	r3, [pc, #496]	; (7e8 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     5f6:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     5fa:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     5fc:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     5fe:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     600:	6813      	ldr	r3, [r2, #0]
     602:	2b00      	cmp	r3, #0
     604:	dafc      	bge.n	600 <set_arm_clock+0x7c>
     606:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     60a:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
     60e:	d131      	bne.n	674 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     610:	4c7b      	ldr	r4, [pc, #492]	; (800 <set_arm_clock+0x27c>)
     612:	4a7c      	ldr	r2, [pc, #496]	; (804 <set_arm_clock+0x280>)
     614:	f8d4 c010 	ldr.w	ip, [r4, #16]
     618:	4614      	mov	r4, r2
     61a:	ea0c 0202 	and.w	r2, ip, r2
     61e:	42a2      	cmp	r2, r4
     620:	bf0a      	itet	eq
     622:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
     626:	f44f 5280 	movne.w	r2, #4096	; 0x1000
     62a:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     62c:	ea8e 0403 	eor.w	r4, lr, r3
     630:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     634:	d008      	beq.n	648 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     636:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     63a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     63e:	4c69      	ldr	r4, [pc, #420]	; (7e4 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     640:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     644:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     648:	ea81 0302 	eor.w	r3, r1, r2
     64c:	f413 5f40 	tst.w	r3, #12288	; 0x3000
     650:	d008      	beq.n	664 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     652:	4b64      	ldr	r3, [pc, #400]	; (7e4 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     654:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     658:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     65a:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     65c:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     65e:	6c93      	ldr	r3, [r2, #72]	; 0x48
     660:	071c      	lsls	r4, r3, #28
     662:	d4fc      	bmi.n	65e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     664:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     668:	4a5e      	ldr	r2, [pc, #376]	; (7e4 <set_arm_clock+0x260>)
     66a:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     66e:	6c93      	ldr	r3, [r2, #72]	; 0x48
     670:	0699      	lsls	r1, r3, #26
     672:	d4fc      	bmi.n	66e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     674:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     676:	4c64      	ldr	r4, [pc, #400]	; (808 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     678:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     67a:	fb01 f302 	mul.w	r3, r1, r2
     67e:	fb00 f303 	mul.w	r3, r0, r3
     682:	42a3      	cmp	r3, r4
     684:	d809      	bhi.n	69a <set_arm_clock+0x116>
		if (div_arm < 8) {
     686:	2a07      	cmp	r2, #7
     688:	f200 8095 	bhi.w	7b6 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     68c:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     68e:	fb01 f302 	mul.w	r3, r1, r2
     692:	fb00 f303 	mul.w	r3, r0, r3
     696:	42a3      	cmp	r3, r4
     698:	d9f5      	bls.n	686 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     69a:	485c      	ldr	r0, [pc, #368]	; (80c <set_arm_clock+0x288>)
     69c:	4c5c      	ldr	r4, [pc, #368]	; (810 <set_arm_clock+0x28c>)
     69e:	4418      	add	r0, r3
     6a0:	fba4 0300 	umull	r0, r3, r4, r0
     6a4:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     6a6:	2b6c      	cmp	r3, #108	; 0x6c
     6a8:	f200 808b 	bhi.w	7c2 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     6ac:	2b35      	cmp	r3, #53	; 0x35
     6ae:	f200 808f 	bhi.w	7d0 <set_arm_clock+0x24c>
     6b2:	f8df 8188 	ldr.w	r8, [pc, #392]	; 83c <set_arm_clock+0x2b8>
     6b6:	2336      	movs	r3, #54	; 0x36
     6b8:	4856      	ldr	r0, [pc, #344]	; (814 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     6ba:	f8df c144 	ldr.w	ip, [pc, #324]	; 800 <set_arm_clock+0x27c>
     6be:	4c56      	ldr	r4, [pc, #344]	; (818 <set_arm_clock+0x294>)
     6c0:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     6c4:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     6c8:	ea09 0404 	and.w	r4, r9, r4
     6cc:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     6ce:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     6d2:	d00b      	beq.n	6ec <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     6d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     6d8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     6dc:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     6de:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     6e2:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     6e6:	6823      	ldr	r3, [r4, #0]
     6e8:	2b00      	cmp	r3, #0
     6ea:	dafc      	bge.n	6e6 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     6ec:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7e4 <set_arm_clock+0x260>
     6f0:	3a01      	subs	r2, #1
     6f2:	f8dc 3010 	ldr.w	r3, [ip, #16]
     6f6:	f003 0307 	and.w	r3, r3, #7
     6fa:	4293      	cmp	r3, r2
     6fc:	d007      	beq.n	70e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     6fe:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     702:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     704:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     708:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     70a:	03db      	lsls	r3, r3, #15
     70c:	d4fc      	bmi.n	708 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     70e:	3901      	subs	r1, #1
     710:	0289      	lsls	r1, r1, #10
     712:	ea8e 0301 	eor.w	r3, lr, r1
     716:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
     71a:	d00c      	beq.n	736 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     71c:	4b31      	ldr	r3, [pc, #196]	; (7e4 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     71e:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     722:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     726:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     728:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     72c:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     730:	6c93      	ldr	r3, [r2, #72]	; 0x48
     732:	0799      	lsls	r1, r3, #30
     734:	d4fc      	bmi.n	730 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     736:	4b39      	ldr	r3, [pc, #228]	; (81c <set_arm_clock+0x298>)
     738:	4939      	ldr	r1, [pc, #228]	; (820 <set_arm_clock+0x29c>)
     73a:	4403      	add	r3, r0
     73c:	09db      	lsrs	r3, r3, #7
     73e:	fba1 3103 	umull	r3, r1, r1, r3
     742:	0b09      	lsrs	r1, r1, #12
     744:	2904      	cmp	r1, #4
     746:	bf28      	it	cs
     748:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     74a:	1e4b      	subs	r3, r1, #1
     74c:	021b      	lsls	r3, r3, #8
     74e:	ea8e 0203 	eor.w	r2, lr, r3
     752:	f412 7f40 	tst.w	r2, #768	; 0x300
     756:	d007      	beq.n	768 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     758:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     75c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     760:	4a20      	ldr	r2, [pc, #128]	; (7e4 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     762:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     766:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     768:	4b1e      	ldr	r3, [pc, #120]	; (7e4 <set_arm_clock+0x260>)
     76a:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     76c:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     76e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
     772:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     774:	6c93      	ldr	r3, [r2, #72]	; 0x48
     776:	069b      	lsls	r3, r3, #26
     778:	d4fc      	bmi.n	774 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     77a:	4b2a      	ldr	r3, [pc, #168]	; (824 <set_arm_clock+0x2a0>)
     77c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     780:	4c29      	ldr	r4, [pc, #164]	; (828 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     782:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     784:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     788:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     78a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     78e:	4c27      	ldr	r4, [pc, #156]	; (82c <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     790:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     794:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     798:	4a25      	ldr	r2, [pc, #148]	; (830 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     79a:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     79c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     79e:	d208      	bcs.n	7b2 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     7a0:	4b11      	ldr	r3, [pc, #68]	; (7e8 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     7a2:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     7a6:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     7a8:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     7aa:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     7ac:	6813      	ldr	r3, [r2, #0]
     7ae:	2b00      	cmp	r3, #0
     7b0:	dafc      	bge.n	7ac <set_arm_clock+0x228>
	}

	return frequency;
}
     7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     7b6:	2904      	cmp	r1, #4
     7b8:	f63f af6f 	bhi.w	69a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     7bc:	3101      	adds	r1, #1
				div_arm = 1;
     7be:	2201      	movs	r2, #1
     7c0:	e75b      	b.n	67a <set_arm_clock+0xf6>
     7c2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 840 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     7c6:	236c      	movs	r3, #108	; 0x6c
     7c8:	481a      	ldr	r0, [pc, #104]	; (834 <set_arm_clock+0x2b0>)
     7ca:	e776      	b.n	6ba <set_arm_clock+0x136>
     7cc:	2512      	movs	r5, #18
     7ce:	e706      	b.n	5de <set_arm_clock+0x5a>
     7d0:	4819      	ldr	r0, [pc, #100]	; (838 <set_arm_clock+0x2b4>)
     7d2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 844 <set_arm_clock+0x2c0>
     7d6:	fb00 f003 	mul.w	r0, r0, r3
     7da:	ea43 0808 	orr.w	r8, r3, r8
     7de:	e76c      	b.n	6ba <set_arm_clock+0x136>
     7e0:	1f78a400 	.word	0x1f78a400
     7e4:	400fc000 	.word	0x400fc000
     7e8:	40080000 	.word	0x40080000
     7ec:	23c34600 	.word	0x23c34600
     7f0:	dc3cba00 	.word	0xdc3cba00
     7f4:	004cb223 	.word	0x004cb223
     7f8:	51eb851f 	.word	0x51eb851f
     7fc:	016e3600 	.word	0x016e3600
     800:	400d8000 	.word	0x400d8000
     804:	80003040 	.word	0x80003040
     808:	269fb1ff 	.word	0x269fb1ff
     80c:	005b8d80 	.word	0x005b8d80
     810:	165e9f81 	.word	0x165e9f81
     814:	269fb200 	.word	0x269fb200
     818:	8001307f 	.word	0x8001307f
     81c:	08f0d17f 	.word	0x08f0d17f
     820:	00e5109f 	.word	0x00e5109f
     824:	431bde83 	.word	0x431bde83
     828:	20000e30 	.word	0x20000e30
     82c:	20000e2c 	.word	0x20000e2c
     830:	20001f3c 	.word	0x20001f3c
     834:	4d3f6400 	.word	0x4d3f6400
     838:	00b71b00 	.word	0x00b71b00
     83c:	80002036 	.word	0x80002036
     840:	8000206c 	.word	0x8000206c
     844:	80002000 	.word	0x80002000

00000848 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     848:	2800      	cmp	r0, #0
     84a:	d057      	beq.n	8fc <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     84c:	2201      	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
     84e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     852:	b085      	sub	sp, #20
     854:	4683      	mov	fp, r0
     856:	4c2a      	ldr	r4, [pc, #168]	; (900 <delay+0xb8>)
     858:	4d2a      	ldr	r5, [pc, #168]	; (904 <delay+0xbc>)
     85a:	4e2b      	ldr	r6, [pc, #172]	; (908 <delay+0xc0>)
     85c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     860:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     864:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     866:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     868:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     86c:	2900      	cmp	r1, #0
     86e:	d1f7      	bne.n	860 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     870:	4f26      	ldr	r7, [pc, #152]	; (90c <delay+0xc4>)
     872:	e9cd 8902 	strd	r8, r9, [sp, #8]
     876:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     878:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     87a:	4a25      	ldr	r2, [pc, #148]	; (910 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     87c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     880:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     882:	6812      	ldr	r2, [r2, #0]
     884:	2701      	movs	r7, #1
     886:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     88a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     88e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     890:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     892:	428b      	cmp	r3, r1
     894:	bf08      	it	eq
     896:	4542      	cmpeq	r2, r8
     898:	bf2c      	ite	cs
     89a:	46c2      	movcs	sl, r8
     89c:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     89e:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     8a2:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     8a6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     8a8:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     8aa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     8ae:	2b00      	cmp	r3, #0
     8b0:	d1f7      	bne.n	8a2 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     8b2:	9801      	ldr	r0, [sp, #4]
     8b4:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     8b6:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     8b8:	4815      	ldr	r0, [pc, #84]	; (910 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     8ba:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     8be:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     8c0:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     8c4:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     8c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     8cc:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     8d0:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     8d2:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     8d4:	4299      	cmp	r1, r3
     8d6:	bf08      	it	eq
     8d8:	4540      	cmpeq	r0, r8
     8da:	bf2c      	ite	cs
     8dc:	4643      	movcs	r3, r8
     8de:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     8e0:	441a      	add	r2, r3
     8e2:	4572      	cmp	r2, lr
     8e4:	d307      	bcc.n	8f6 <delay+0xae>
			if (--msec == 0) return;
     8e6:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     8ea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     8ee:	d1d8      	bne.n	8a2 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     8f0:	b005      	add	sp, #20
     8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     8f6:	f001 fcbb 	bl	2270 <yield>
	}
     8fa:	e7d2      	b.n	8a2 <delay+0x5a>
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	20001fe0 	.word	0x20001fe0
     904:	20001f44 	.word	0x20001f44
     908:	20001f40 	.word	0x20001f40
     90c:	e0001004 	.word	0xe0001004
     910:	20001f3c 	.word	0x20001f3c

00000914 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     914:	0100      	lsls	r0, r0, #4
     916:	4b0f      	ldr	r3, [pc, #60]	; (954 <digitalWrite.part.0+0x40>)
     918:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     91a:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
     91c:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     91e:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     920:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     922:	4204      	tst	r4, r0
     924:	d005      	beq.n	932 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
     926:	b159      	cbz	r1, 940 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
     928:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     92c:	f85d 4b04 	ldr.w	r4, [sp], #4
     930:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     932:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     934:	b949      	cbnz	r1, 94a <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     936:	4a08      	ldr	r2, [pc, #32]	; (958 <digitalWrite.part.0+0x44>)
		}
	}
}
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     93c:	601a      	str	r2, [r3, #0]
		}
	}
}
     93e:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     940:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     944:	f85d 4b04 	ldr.w	r4, [sp], #4
     948:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     94a:	4a04      	ldr	r2, [pc, #16]	; (95c <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     94c:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     950:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     952:	4770      	bx	lr
     954:	200004b0 	.word	0x200004b0
     958:	00013038 	.word	0x00013038
     95c:	0001f038 	.word	0x0001f038

00000960 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     960:	2836      	cmp	r0, #54	; 0x36
     962:	d801      	bhi.n	968 <digitalWrite+0x8>
     964:	f7ff bfd6 	b.w	914 <digitalWrite.part.0>
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     96c:	2836      	cmp	r0, #54	; 0x36
     96e:	d81c      	bhi.n	9aa <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     970:	0100      	lsls	r0, r0, #4
     972:	4a1a      	ldr	r2, [pc, #104]	; (9dc <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     974:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     976:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     97a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     97c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     97e:	d015      	beq.n	9ac <pinMode+0x40>
     980:	2904      	cmp	r1, #4
     982:	d013      	beq.n	9ac <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     984:	68dc      	ldr	r4, [r3, #12]
     986:	6842      	ldr	r2, [r0, #4]
     988:	ea22 0204 	bic.w	r2, r2, r4
     98c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     98e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     990:	b1e9      	cbz	r1, 9ce <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     992:	2902      	cmp	r1, #2
     994:	d01e      	beq.n	9d4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     996:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     998:	685b      	ldr	r3, [r3, #4]
}
     99a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     99e:	bf0c      	ite	eq
     9a0:	490f      	ldreq	r1, [pc, #60]	; (9e0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     9a2:	4910      	ldrne	r1, [pc, #64]	; (9e4 <pinMode+0x78>)
     9a4:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     9a6:	2215      	movs	r2, #21
     9a8:	601a      	str	r2, [r3, #0]
}
     9aa:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     9ac:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     9ae:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     9b0:	6844      	ldr	r4, [r0, #4]
     9b2:	ea42 0204 	orr.w	r2, r2, r4
     9b6:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     9b8:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     9ba:	d008      	beq.n	9ce <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     9bc:	f640 0138 	movw	r1, #2104	; 0x838
     9c0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	2215      	movs	r2, #21
}
     9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     9ca:	601a      	str	r2, [r3, #0]
}
     9cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     9ce:	2138      	movs	r1, #56	; 0x38
     9d0:	6011      	str	r1, [r2, #0]
     9d2:	e7f6      	b.n	9c2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     9d4:	4904      	ldr	r1, [pc, #16]	; (9e8 <pinMode+0x7c>)
     9d6:	6011      	str	r1, [r2, #0]
     9d8:	e7f3      	b.n	9c2 <pinMode+0x56>
     9da:	bf00      	nop
     9dc:	200004b0 	.word	0x200004b0
     9e0:	00013038 	.word	0x00013038
     9e4:	00010038 	.word	0x00010038
     9e8:	0001f038 	.word	0x0001f038

000009ec <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     9ec:	b4f0      	push	{r4, r5, r6, r7}
     9ee:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
     9f0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     9f2:	4637      	mov	r7, r6
     9f4:	e000      	b.n	9f8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
     9f6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
     9f8:	fbb0 f3f2 	udiv	r3, r0, r2
     9fc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     a00:	f100 0437 	add.w	r4, r0, #55	; 0x37
     a04:	2809      	cmp	r0, #9
     a06:	f100 0030 	add.w	r0, r0, #48	; 0x30
     a0a:	b2e4      	uxtb	r4, r4
     a0c:	bf98      	it	ls
     a0e:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
     a10:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     a12:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
     a16:	2b00      	cmp	r3, #0
     a18:	d1ed      	bne.n	9f6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
     a1a:	194a      	adds	r2, r1, r5
     a1c:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
     a1e:	b14d      	cbz	r5, a34 <ultoa+0x48>
     a20:	3301      	adds	r3, #1
		t = buf[j];
     a22:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
     a26:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     a28:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
     a2a:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     a2c:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
     a2e:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     a32:	dbf5      	blt.n	a20 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
     a34:	4608      	mov	r0, r1
     a36:	bcf0      	pop	{r4, r5, r6, r7}
     a38:	4770      	bx	lr
     a3a:	bf00      	nop

00000a3c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     a3c:	48a4      	ldr	r0, [pc, #656]	; (cd0 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     a3e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a42:	4ba4      	ldr	r3, [pc, #656]	; (cd4 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     a44:	6f82      	ldr	r2, [r0, #120]	; 0x78
     a46:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
     a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     a4c:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     a4e:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     a50:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a54:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     a58:	4c9f      	ldr	r4, [pc, #636]	; (cd8 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     a5a:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     a5e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     a60:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     a64:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     a66:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     a68:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a6c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     a70:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     a74:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     a78:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     a7c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     a80:	b280      	uxth	r0, r0
     a82:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     a86:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     a8a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     a8e:	4b91      	ldr	r3, [pc, #580]	; (cd4 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
     a90:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     a92:	2500      	movs	r5, #0
     a94:	0140      	lsls	r0, r0, #5
     a96:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     a98:	2904      	cmp	r1, #4
     a9a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     a9c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     aa0:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
     aa2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     aa4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     aa6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     aa8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     aaa:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     aac:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     aae:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     ab0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     ab2:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     ab4:	d1e9      	bne.n	a8a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ab6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     aba:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     abe:	4b87      	ldr	r3, [pc, #540]	; (cdc <pwm_init+0x2a0>)
     ac0:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ac4:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     ac6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ac8:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     acc:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ace:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     ad2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ad6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     ada:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     ade:	b280      	uxth	r0, r0
     ae0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     ae4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ae8:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     aec:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     af0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     af4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     af8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     afc:	b280      	uxth	r0, r0
     afe:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     b02:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     b06:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     b0a:	4b74      	ldr	r3, [pc, #464]	; (cdc <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
     b0c:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b0e:	2500      	movs	r5, #0
     b10:	0140      	lsls	r0, r0, #5
     b12:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b14:	2904      	cmp	r1, #4
     b16:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b18:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b1a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     b1e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     b20:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     b22:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     b24:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     b26:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     b28:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     b2a:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     b2c:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     b2e:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b30:	d1e9      	bne.n	b06 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b32:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     b36:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b3a:	4b69      	ldr	r3, [pc, #420]	; (ce0 <pwm_init+0x2a4>)
     b3c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b40:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b42:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b44:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b48:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b4a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b4e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b52:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     b56:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     b5a:	b280      	uxth	r0, r0
     b5c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     b60:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     b64:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     b68:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     b6c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     b70:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     b74:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     b78:	b280      	uxth	r0, r0
     b7a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     b7e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     b82:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     b86:	4b56      	ldr	r3, [pc, #344]	; (ce0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
     b88:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     b8a:	2500      	movs	r5, #0
     b8c:	0140      	lsls	r0, r0, #5
     b8e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     b90:	2904      	cmp	r1, #4
     b92:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     b94:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     b96:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     b9a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     b9c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     b9e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     ba0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     ba2:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     ba4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     ba6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     ba8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     baa:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     bac:	d1e9      	bne.n	b82 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     bae:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     bb2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     bb6:	4b4b      	ldr	r3, [pc, #300]	; (ce4 <pwm_init+0x2a8>)
     bb8:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     bbc:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     bbe:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     bc0:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     bc4:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     bc6:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     bca:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     bce:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     bd2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     bd6:	b280      	uxth	r0, r0
     bd8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     bdc:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     be0:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     be4:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     be8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     bec:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     bf0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     bf4:	b280      	uxth	r0, r0
     bf6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     bfa:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     bfe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     c02:	4b38      	ldr	r3, [pc, #224]	; (ce4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
     c04:	3101      	adds	r1, #1
     c06:	0140      	lsls	r0, r0, #5
     c08:	461c      	mov	r4, r3
     c0a:	2904      	cmp	r1, #4
     c0c:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     c0e:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     c10:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     c14:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     c16:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     c18:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     c1a:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     c1c:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
     c1e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     c20:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     c22:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     c24:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     c26:	d1ea      	bne.n	bfe <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c28:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     c2c:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c2e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     c30:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c34:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     c36:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     c3a:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     c3c:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     c40:	433b      	orrs	r3, r7
     c42:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     c46:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
     c4a:	b29b      	uxth	r3, r3
     c4c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     c50:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     c54:	0150      	lsls	r0, r2, #5
     c56:	4b24      	ldr	r3, [pc, #144]	; (ce8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c58:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     c5a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c5c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     c5e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     c60:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     c62:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     c64:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     c66:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     c6a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     c6c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     c6e:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c70:	d1f0      	bne.n	c54 <pwm_init+0x218>
     c72:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     c74:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     c76:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     c7a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     c7e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     c80:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     c84:	0150      	lsls	r0, r2, #5
     c86:	4b19      	ldr	r3, [pc, #100]	; (cec <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c88:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     c8a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c8c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     c8e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     c90:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     c92:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     c94:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     c96:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     c98:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     c9a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     c9c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     c9e:	d1f1      	bne.n	c84 <pwm_init+0x248>
     ca0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     ca2:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     ca4:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     ca8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     cac:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     cae:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     cb2:	0150      	lsls	r0, r2, #5
     cb4:	4b0e      	ldr	r3, [pc, #56]	; (cf0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     cb6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     cb8:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     cba:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     cbc:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     cbe:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     cc0:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     cc2:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     cc4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     cc6:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     cc8:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     cca:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     ccc:	d1f1      	bne.n	cb2 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd0:	400fc000 	.word	0x400fc000
     cd4:	403dc000 	.word	0x403dc000
     cd8:	fc030000 	.word	0xfc030000
     cdc:	403e0000 	.word	0x403e0000
     ce0:	403e4000 	.word	0x403e4000
     ce4:	403e8000 	.word	0x403e8000
     ce8:	401dc000 	.word	0x401dc000
     cec:	401e0000 	.word	0x401e0000
     cf0:	401e4000 	.word	0x401e4000

00000cf4 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
     cf4:	4b0a      	ldr	r3, [pc, #40]	; (d20 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
     cf6:	b430      	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
     cf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     cfa:	461c      	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
     cfc:	6a99      	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     cfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
     d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
     d02:	4299      	cmp	r1, r3
     d04:	bf08      	it	eq
     d06:	4290      	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
     d08:	4610      	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
     d0a:	4619      	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
     d0c:	bf0c      	ite	eq
     d0e:	2501      	moveq	r5, #1
     d10:	2500      	movne	r5, #0
     d12:	2d00      	cmp	r5, #0
     d14:	d0f3      	beq.n	cfe <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
     d16:	0bd9      	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
     d18:	bc30      	pop	{r4, r5}
     d1a:	ea41 4042 	orr.w	r0, r1, r2, lsl #17
     d1e:	4770      	bx	lr
     d20:	400d4000 	.word	0x400d4000

00000d24 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
     d24:	b508      	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     d26:	6803      	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
     d28:	6842      	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     d2a:	b1bb      	cbz	r3, d5c <sm_align_pool+0x38>
     d2c:	b17a      	cbz	r2, d4e <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
     d2e:	4b10      	ldr	r3, [pc, #64]	; (d70 <sm_align_pool+0x4c>)
     d30:	fba3 1302 	umull	r1, r3, r3, r2
     d34:	08db      	lsrs	r3, r3, #3
     d36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d3a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
     d3e:	d003      	beq.n	d48 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
     d40:	1ad2      	subs	r2, r2, r3
     d42:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
     d44:	2af0      	cmp	r2, #240	; 0xf0
     d46:	d902      	bls.n	d4e <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
     d48:	2301      	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
     d4a:	4618      	mov	r0, r3
     d4c:	bd08      	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
     d4e:	f001 fccf 	bl	26f0 <__errno>
     d52:	221c      	movs	r2, #28
     d54:	2300      	movs	r3, #0
     d56:	6002      	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
     d58:	4618      	mov	r0, r3
     d5a:	bd08      	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <sm_align_pool+0x4c>)
     d5e:	fba3 1302 	umull	r1, r3, r3, r2
     d62:	08db      	lsrs	r3, r3, #3
     d64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
     d68:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
     d6c:	d1e8      	bne.n	d40 <sm_align_pool+0x1c>
     d6e:	e7e9      	b.n	d44 <sm_align_pool+0x20>
     d70:	aaaaaaab 	.word	0xaaaaaaab

00000d74 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
     d74:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
     d76:	4604      	mov	r4, r0
     d78:	2800      	cmp	r0, #0
     d7a:	d03a      	beq.n	df2 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
     d7c:	b119      	cbz	r1, d86 <sm_set_pool+0x12>
     d7e:	fab2 f582 	clz	r5, r2
     d82:	096d      	lsrs	r5, r5, #5
     d84:	b1fd      	cbz	r5, dc6 <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
     d86:	6820      	ldr	r0, [r4, #0]
     d88:	b108      	cbz	r0, d8e <sm_set_pool+0x1a>
     d8a:	6862      	ldr	r2, [r4, #4]
     d8c:	b932      	cbnz	r2, d9c <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
     d8e:	f001 fcaf 	bl	26f0 <__errno>
     d92:	2316      	movs	r3, #22
		return 0;
     d94:	2200      	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
     d96:	6003      	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     d98:	4610      	mov	r0, r2
     d9a:	bd70      	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
     d9c:	4918      	ldr	r1, [pc, #96]	; (e00 <sm_set_pool+0x8c>)
     d9e:	fba1 3102 	umull	r3, r1, r1, r2
     da2:	08c9      	lsrs	r1, r1, #3
     da4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     da8:	ebb2 0181 	subs.w	r1, r2, r1, lsl #2
     dac:	d1ef      	bne.n	d8e <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
     dae:	68a3      	ldr	r3, [r4, #8]
     db0:	b10b      	cbz	r3, db6 <sm_set_pool+0x42>
     db2:	f002 f89f 	bl	2ef4 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
     db6:	2300      	movs	r3, #0
			return 1;
     db8:	2201      	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
     dba:	6023      	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     dbc:	4610      	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
     dbe:	6063      	str	r3, [r4, #4]
     dc0:	60a3      	str	r3, [r4, #8]
     dc2:	60e3      	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
     dc4:	bd70      	pop	{r4, r5, r6, pc}
     dc6:	461e      	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
     dc8:	9b04      	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
     dca:	e880 0006 	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
     dce:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
     dd0:	f7ff ffa8 	bl	d24 <sm_align_pool>
     dd4:	4602      	mov	r2, r0
     dd6:	2800      	cmp	r0, #0
     dd8:	d0de      	beq.n	d98 <sm_set_pool+0x24>

	if (do_zero) {
     dda:	b916      	cbnz	r6, de2 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
     ddc:	2201      	movs	r2, #1
}
     dde:	4610      	mov	r0, r2
     de0:	bd70      	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
     de2:	e894 0005 	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
     de6:	60a6      	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
     de8:	4629      	mov	r1, r5
     dea:	f002 f883 	bl	2ef4 <memset>
	}

	return 1;
     dee:	2201      	movs	r2, #1
     df0:	e7d2      	b.n	d98 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
     df2:	f001 fc7d 	bl	26f0 <__errno>
     df6:	2316      	movs	r3, #22
		return 0;
     df8:	4622      	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
     dfa:	6003      	str	r3, [r0, #0]
		return 0;
     dfc:	e7cc      	b.n	d98 <sm_set_pool+0x24>
     dfe:	bf00      	nop
     e00:	aaaaaaab 	.word	0xaaaaaaab

00000e04 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
     e04:	b672      	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     e06:	f3ef 8305 	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
     e0a:	4d49      	ldr	r5, [pc, #292]	; (f30 <unused_interrupt_vector+0x12c>)
     e0c:	606b      	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
     e0e:	f3ef 8308 	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
     e12:	4c48      	ldr	r4, [pc, #288]	; (f34 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
     e14:	462e      	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
     e16:	4848      	ldr	r0, [pc, #288]	; (f38 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
     e18:	4948      	ldr	r1, [pc, #288]	; (f3c <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
     e1a:	4a49      	ldr	r2, [pc, #292]	; (f40 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
     e1c:	6824      	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
     e1e:	6800      	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
     e20:	6809      	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
     e22:	6812      	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
     e24:	6129      	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
     e26:	60ac      	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
     e28:	60e8      	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
     e2a:	616a      	str	r2, [r5, #20]
	info->ret = stack[6];
     e2c:	699a      	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     e2e:	4c45      	ldr	r4, [pc, #276]	; (f44 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
     e30:	61aa      	str	r2, [r5, #24]
	info->xpsr = stack[7];
     e32:	69db      	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
     e34:	4f44      	ldr	r7, [pc, #272]	; (f48 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
     e36:	61eb      	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
     e38:	f000 f8c6 	bl	fc8 <tempmonGetTemp>
     e3c:	ed85 0a08 	vstr	s0, [r5, #32]
	info->time = rtc_get();
     e40:	f7ff ff58 	bl	cf4 <rtc_get>
	info->len = sizeof(*info) / 4;
     e44:	230b      	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
     e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
     e4a:	6268      	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
     e4c:	4619      	mov	r1, r3
     e4e:	602b      	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
     e50:	404a      	eors	r2, r1
     e52:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     e54:	f002 0301 	and.w	r3, r2, #1
     e58:	3901      	subs	r1, #1
     e5a:	fb04 f303 	mul.w	r3, r4, r3
     e5e:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     e62:	d1f7      	bne.n	e54 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
     e64:	42be      	cmp	r6, r7
     e66:	d002      	beq.n	e6e <unused_interrupt_vector+0x6a>
     e68:	f856 1f04 	ldr.w	r1, [r6, #4]!
     e6c:	e7f0      	b.n	e50 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
     e6e:	4930      	ldr	r1, [pc, #192]	; (f30 <unused_interrupt_vector+0x12c>)
     e70:	628a      	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     e72:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     e76:	4b35      	ldr	r3, [pc, #212]	; (f4c <unused_interrupt_vector+0x148>)
     e78:	4a35      	ldr	r2, [pc, #212]	; (f50 <unused_interrupt_vector+0x14c>)
     e7a:	6019      	str	r1, [r3, #0]
     e7c:	601a      	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     e7e:	f3bf 8f4f 	dsb	sy
	asm("isb");
     e82:	f3bf 8f6f 	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e86:	4a33      	ldr	r2, [pc, #204]	; (f54 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
     e88:	2502      	movs	r5, #2
     e8a:	4c33      	ldr	r4, [pc, #204]	; (f58 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e8c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     e8e:	4933      	ldr	r1, [pc, #204]	; (f5c <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e90:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     e94:	4832      	ldr	r0, [pc, #200]	; (f60 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     e96:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     e98:	6025      	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     e9a:	69d3      	ldr	r3, [r2, #28]
     e9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ea4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     ea6:	680b      	ldr	r3, [r1, #0]
     ea8:	4283      	cmp	r3, r0
     eaa:	d83e      	bhi.n	f2a <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
     eac:	4a2a      	ldr	r2, [pc, #168]	; (f58 <unused_interrupt_vector+0x154>)
     eae:	2100      	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     eb0:	2001      	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     eb2:	4e2c      	ldr	r6, [pc, #176]	; (f64 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
     eb4:	6011      	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
     eba:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
     ebe:	460c      	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     ec0:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
     ec4:	4615      	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     ec6:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
     eca:	4607      	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     ecc:	f8df e0c0 	ldr.w	lr, [pc, #192]	; f90 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
     ed0:	4e25      	ldr	r6, [pc, #148]	; (f68 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
     ed2:	4826      	ldr	r0, [pc, #152]	; (f6c <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
     ed4:	4926      	ldr	r1, [pc, #152]	; (f70 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
     ed6:	4a27      	ldr	r2, [pc, #156]	; (f74 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
     ed8:	f8ce 3000 	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
     edc:	6033      	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
     ede:	6003      	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
     ee0:	600b      	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
     ee2:	6013      	str	r3, [r2, #0]
     ee4:	e001      	b.n	eea <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
     ee6:	f000 f953 	bl	1190 <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
     eea:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
     eee:	4b1a      	ldr	r3, [pc, #104]	; (f58 <unused_interrupt_vector+0x154>)
     ef0:	2a00      	cmp	r2, #0
     ef2:	d0f8      	beq.n	ee6 <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
     ef4:	3401      	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
     ef6:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     efa:	2c4f      	cmp	r4, #79	; 0x4f
     efc:	d9f3      	bls.n	ee6 <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     efe:	4a1e      	ldr	r2, [pc, #120]	; (f78 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
     f00:	2402      	movs	r4, #2
     f02:	481e      	ldr	r0, [pc, #120]	; (f7c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     f04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
     f08:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     f0c:	6351      	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     f0e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
     f12:	b932      	cbnz	r2, f22 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
     f14:	491a      	ldr	r1, [pc, #104]	; (f80 <unused_interrupt_vector+0x17c>)
     f16:	4a1b      	ldr	r2, [pc, #108]	; (f84 <unused_interrupt_vector+0x180>)
     f18:	630a      	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     f1a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
     f1e:	2800      	cmp	r0, #0
     f20:	d0fa      	beq.n	f18 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
     f22:	4b19      	ldr	r3, [pc, #100]	; (f88 <unused_interrupt_vector+0x184>)
     f24:	4a19      	ldr	r2, [pc, #100]	; (f8c <unused_interrupt_vector+0x188>)
     f26:	601a      	str	r2, [r3, #0]
     f28:	e7fe      	b.n	f28 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     f2a:	f7ff fb2b 	bl	584 <set_arm_clock>
     f2e:	e7bd      	b.n	eac <unused_interrupt_vector+0xa8>
     f30:	2027ff80 	.word	0x2027ff80
     f34:	e000ed28 	.word	0xe000ed28
     f38:	e000ed2c 	.word	0xe000ed2c
     f3c:	e000ed34 	.word	0xe000ed34
     f40:	e000ed38 	.word	0xe000ed38
     f44:	edb88320 	.word	0xedb88320
     f48:	2027ffa4 	.word	0x2027ffa4
     f4c:	e000ef70 	.word	0xe000ef70
     f50:	2027ffa0 	.word	0x2027ffa0
     f54:	400fc000 	.word	0x400fc000
     f58:	40084000 	.word	0x40084000
     f5c:	20000e30 	.word	0x20000e30
     f60:	0bcd3d80 	.word	0x0bcd3d80
     f64:	00249f00 	.word	0x00249f00
     f68:	e000e184 	.word	0xe000e184
     f6c:	e000e188 	.word	0xe000e188
     f70:	e000e18c 	.word	0xe000e18c
     f74:	e000e190 	.word	0xe000e190
     f78:	400d9000 	.word	0x400d9000
     f7c:	402e0000 	.word	0x402e0000
     f80:	400f8000 	.word	0x400f8000
     f84:	0bad00f1 	.word	0x0bad00f1
     f88:	e000ed0c 	.word	0xe000ed0c
     f8c:	05fa0004 	.word	0x05fa0004
     f90:	e000e180 	.word	0xe000e180

00000f94 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     f94:	4a09      	ldr	r2, [pc, #36]	; (fbc <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     f96:	b508      	push	{r3, lr}
        char *prev = __brkval;
     f98:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
     f9a:	b120      	cbz	r0, fa6 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     f9c:	4418      	add	r0, r3
     f9e:	4908      	ldr	r1, [pc, #32]	; (fc0 <_sbrk+0x2c>)
     fa0:	4288      	cmp	r0, r1
     fa2:	d802      	bhi.n	faa <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     fa4:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
     fa6:	4618      	mov	r0, r3
     fa8:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     faa:	f001 fba1 	bl	26f0 <__errno>
     fae:	220c      	movs	r2, #12
                        return (void *)-1;
     fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     fb4:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     fb6:	4618      	mov	r0, r3
     fb8:	bd08      	pop	{r3, pc}
     fba:	bf00      	nop
     fbc:	20000e50 	.word	0x20000e50
     fc0:	20280000 	.word	0x20280000

00000fc4 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
     fc4:	f7ff bf1e 	b.w	e04 <unused_interrupt_vector>

00000fc8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     fc8:	4912      	ldr	r1, [pc, #72]	; (1014 <tempmonGetTemp+0x4c>)
     fca:	680b      	ldr	r3, [r1, #0]
     fcc:	4a11      	ldr	r2, [pc, #68]	; (1014 <tempmonGetTemp+0x4c>)
     fce:	075b      	lsls	r3, r3, #29
     fd0:	d5fb      	bpl.n	fca <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     fd2:	6813      	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     fd4:	4910      	ldr	r1, [pc, #64]	; (1018 <tempmonGetTemp+0x50>)

    return tmeas;
     fd6:	f3c3 230b 	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     fda:	4a10      	ldr	r2, [pc, #64]	; (101c <tempmonGetTemp+0x54>)

    return tmeas;
     fdc:	ee07 3a90 	vmov	s15, r3
     fe0:	680b      	ldr	r3, [r1, #0]
     fe2:	ed92 6a00 	vldr	s12, [r2]
     fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     fea:	ee07 3a90 	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     fee:	4a0c      	ldr	r2, [pc, #48]	; (1020 <tempmonGetTemp+0x58>)

    return tmeas;
     ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     ff4:	4b0b      	ldr	r3, [pc, #44]	; (1024 <tempmonGetTemp+0x5c>)

    return tmeas;
     ff6:	edd2 6a00 	vldr	s13, [r2]
     ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
     ffe:	ed93 7a00 	vldr	s14, [r3]
    1002:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    1006:	ee67 7a86 	vmul.f32	s15, s15, s12
    100a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
}
    100e:	ee37 0a40 	vsub.f32	s0, s14, s0
    1012:	4770      	bx	lr
    1014:	400d8180 	.word	0x400d8180
    1018:	20001f2c 	.word	0x20001f2c
    101c:	20001f34 	.word	0x20001f34
    1020:	20001f38 	.word	0x20001f38
    1024:	20001f30 	.word	0x20001f30

00001028 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1028:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    102a:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    102c:	b11b      	cbz	r3, 1036 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    102e:	6853      	ldr	r3, [r2, #4]
    1030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1034:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    1036:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    1038:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    103a:	b35c      	cbz	r4, 1094 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    103c:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    103e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    1040:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1044:	420c      	tst	r4, r1
    1046:	d115      	bne.n	1074 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1048:	4e1a      	ldr	r6, [pc, #104]	; (10b4 <schedule_transfer+0x8c>)
    104a:	6837      	ldr	r7, [r6, #0]
    104c:	e004      	b.n	1058 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    104e:	6834      	ldr	r4, [r6, #0]
    1050:	1be4      	subs	r4, r4, r7
    1052:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    1056:	d20b      	bcs.n	1070 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1058:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    105c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1060:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    1064:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1068:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    106c:	0464      	lsls	r4, r4, #17
    106e:	d5ee      	bpl.n	104e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1070:	400d      	ands	r5, r1
    1072:	d003      	beq.n	107c <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1074:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1076:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1078:	bcf0      	pop	{r4, r5, r6, r7}
    107a:	4770      	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    107c:	4c0c      	ldr	r4, [pc, #48]	; (10b0 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    107e:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    1080:	60c5      	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    1082:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1086:	4319      	orrs	r1, r3
    1088:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    108c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    108e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1090:	bcf0      	pop	{r4, r5, r6, r7}
    1092:	4770      	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    1094:	4d06      	ldr	r5, [pc, #24]	; (10b0 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    1096:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    1098:	60c4      	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    109a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    109e:	4319      	orrs	r1, r3
    10a0:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    10a4:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    10a6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    10a8:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    10aa:	bcf0      	pop	{r4, r5, r6, r7}
    10ac:	4770      	bx	lr
    10ae:	bf00      	nop
    10b0:	402e0000 	.word	0x402e0000
    10b4:	e0001004 	.word	0xe0001004

000010b8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    10bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    10be:	b190      	cbz	r0, 10e6 <run_callbacks+0x2e>
    10c0:	4602      	mov	r2, r0
    10c2:	2400      	movs	r4, #0
    10c4:	e003      	b.n	10ce <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    10c6:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    10c8:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    10ca:	2a01      	cmp	r2, #1
    10cc:	d00c      	beq.n	10e8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    10ce:	6853      	ldr	r3, [r2, #4]
    10d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    10d4:	d0f7      	beq.n	10c6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    10d6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    10d8:	b12c      	cbz	r4, 10e6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    10da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    10dc:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    10de:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    10e0:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    10e2:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    10e4:	d1f9      	bne.n	10da <run_callbacks+0x22>
    10e6:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    10e8:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    10ea:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    10ec:	e7f4      	b.n	10d8 <run_callbacks+0x20>
    10ee:	bf00      	nop

000010f0 <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    10f0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    10f2:	b9e1      	cbnz	r1, 112e <endpoint0_transmit.constprop.1+0x3e>
    10f4:	4c21      	ldr	r4, [pc, #132]	; (117c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10f6:	4922      	ldr	r1, [pc, #136]	; (1180 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    10f8:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    10fa:	4b22      	ldr	r3, [pc, #136]	; (1184 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10fc:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    10fe:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1102:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1104:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    1106:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1108:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    110a:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    110c:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    110e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    1112:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1116:	4d1c      	ldr	r5, [pc, #112]	; (1188 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1118:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    111c:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    111e:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    1122:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    1124:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1128:	2b00      	cmp	r3, #0
    112a:	d1fb      	bne.n	1124 <endpoint0_transmit.constprop.1+0x34>
}
    112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    112e:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1130:	4b16      	ldr	r3, [pc, #88]	; (118c <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1132:	4d14      	ldr	r5, [pc, #80]	; (1184 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1134:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1136:	4c11      	ldr	r4, [pc, #68]	; (117c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1138:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    113c:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    113e:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1140:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1142:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1146:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1148:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    114c:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    114e:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1152:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1156:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    115a:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    115c:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    115e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1162:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1166:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    116a:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    116c:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    116e:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1172:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1176:	2b00      	cmp	r3, #0
    1178:	d1fb      	bne.n	1172 <endpoint0_transmit.constprop.1+0x82>
    117a:	e7bc      	b.n	10f6 <endpoint0_transmit.constprop.1+0x6>
    117c:	20000000 	.word	0x20000000
    1180:	20001fc0 	.word	0x20001fc0
    1184:	402e0000 	.word	0x402e0000
    1188:	20001ef4 	.word	0x20001ef4
    118c:	20001fa0 	.word	0x20001fa0

00001190 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    1190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1194:	4cb0      	ldr	r4, [pc, #704]	; (1458 <usb_isr+0x2c8>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    1196:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1198:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    119c:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    11a0:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    11a4:	d06f      	beq.n	1286 <usb_isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    11a6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    11aa:	2b00      	cmp	r3, #0
    11ac:	d066      	beq.n	127c <usb_isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    11ae:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    11b2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 147c <usb_isr+0x2ec>
    11b6:	4fa9      	ldr	r7, [pc, #676]	; (145c <usb_isr+0x2cc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    11b8:	4626      	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    11ba:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    11bc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    11c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    11c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    11c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    11c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    11cc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    11d0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    11d4:	049d      	lsls	r5, r3, #18
    11d6:	d5f5      	bpl.n	11c4 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    11d8:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
    11dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    11e0:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    11e4:	f8c6 a1b4 	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    11e8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    11ec:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    11f0:	d1fa      	bne.n	11e8 <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    11f2:	b281      	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    11f4:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    11f8:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    11fc:	f000 8148 	beq.w	1490 <usb_isr+0x300>
    1200:	f200 80bb 	bhi.w	137a <usb_isr+0x1ea>
    1204:	2982      	cmp	r1, #130	; 0x82
    1206:	f000 8193 	beq.w	1530 <usb_isr+0x3a0>
    120a:	f240 80cf 	bls.w	13ac <usb_isr+0x21c>
    120e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1212:	f000 815d 	beq.w	14d0 <usb_isr+0x340>
    1216:	f240 3302 	movw	r3, #770	; 0x302
    121a:	4299      	cmp	r1, r3
    121c:	f040 80be 	bne.w	139c <usb_isr+0x20c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1220:	b292      	uxth	r2, r2
    1222:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1226:	2b07      	cmp	r3, #7
    1228:	f200 80b8 	bhi.w	139c <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    122c:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1230:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1234:	4a8a      	ldr	r2, [pc, #552]	; (1460 <usb_isr+0x2d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1236:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    123a:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    123e:	441a      	add	r2, r3
    1240:	6813      	ldr	r3, [r2, #0]
    1242:	bf14      	ite	ne
    1244:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1248:	f043 0301 	orreq.w	r3, r3, #1
    124c:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    124e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1250:	4b84      	ldr	r3, [pc, #528]	; (1464 <usb_isr+0x2d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1252:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1254:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1256:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1258:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    125a:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    125e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1262:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1264:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1268:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    126c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1270:	2b00      	cmp	r3, #0
    1272:	d1fb      	bne.n	126c <usb_isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1274:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1278:	2b00      	cmp	r3, #0
    127a:	d19f      	bne.n	11bc <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    127c:	4a76      	ldr	r2, [pc, #472]	; (1458 <usb_isr+0x2c8>)
    127e:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1282:	2b00      	cmp	r3, #0
    1284:	d147      	bne.n	1316 <usb_isr+0x186>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1286:	f018 0f40 	tst.w	r8, #64	; 0x40
    128a:	d016      	beq.n	12ba <usb_isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    128c:	4b72      	ldr	r3, [pc, #456]	; (1458 <usb_isr+0x2c8>)
    128e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1292:	4619      	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1294:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1298:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    129c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    12a0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    12a4:	4a6c      	ldr	r2, [pc, #432]	; (1458 <usb_isr+0x2c8>)
    12a6:	2b00      	cmp	r3, #0
    12a8:	d1fa      	bne.n	12a0 <usb_isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    12aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    12ae:	496e      	ldr	r1, [pc, #440]	; (1468 <usb_isr+0x2d8>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    12b0:	f8c2 01b4 	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    12b4:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    12b8:	600b      	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    12ba:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    12be:	d003      	beq.n	12c8 <usb_isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    12c0:	4b6a      	ldr	r3, [pc, #424]	; (146c <usb_isr+0x2dc>)
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	b103      	cbz	r3, 12c8 <usb_isr+0x138>
    12c6:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    12c8:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    12cc:	d003      	beq.n	12d6 <usb_isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    12ce:	4b68      	ldr	r3, [pc, #416]	; (1470 <usb_isr+0x2e0>)
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	b103      	cbz	r3, 12d6 <usb_isr+0x146>
    12d4:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    12d6:	f018 0f04 	tst.w	r8, #4
    12da:	d008      	beq.n	12ee <usb_isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    12dc:	4b5e      	ldr	r3, [pc, #376]	; (1458 <usb_isr+0x2c8>)
    12de:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    12e2:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    12e6:	d045      	beq.n	1374 <usb_isr+0x1e4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    12e8:	4b62      	ldr	r3, [pc, #392]	; (1474 <usb_isr+0x2e4>)
    12ea:	2201      	movs	r2, #1
    12ec:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    12ee:	4b5a      	ldr	r3, [pc, #360]	; (1458 <usb_isr+0x2c8>)
    12f0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    12f4:	0612      	lsls	r2, r2, #24
    12f6:	d50b      	bpl.n	1310 <usb_isr+0x180>
    12f8:	f018 0f80 	tst.w	r8, #128	; 0x80
    12fc:	d008      	beq.n	1310 <usb_isr+0x180>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    12fe:	495e      	ldr	r1, [pc, #376]	; (1478 <usb_isr+0x2e8>)
    1300:	780a      	ldrb	r2, [r1, #0]
    1302:	b12a      	cbz	r2, 1310 <usb_isr+0x180>
			if (--usb_reboot_timer == 0) {
    1304:	3a01      	subs	r2, #1
    1306:	b2d2      	uxtb	r2, r2
    1308:	700a      	strb	r2, [r1, #0]
    130a:	2a00      	cmp	r2, #0
    130c:	f000 8217 	beq.w	173e <usb_isr+0x5ae>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1310:	b003      	add	sp, #12
    1312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1316:	4959      	ldr	r1, [pc, #356]	; (147c <usb_isr+0x2ec>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1318:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    131c:	6808      	ldr	r0, [r1, #0]
    131e:	4203      	tst	r3, r0
    1320:	f040 81b1 	bne.w	1686 <usb_isr+0x4f6>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1324:	4a50      	ldr	r2, [pc, #320]	; (1468 <usb_isr+0x2d8>)
    1326:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    1328:	401d      	ands	r5, r3
    132a:	d0ac      	beq.n	1286 <usb_isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    132c:	0c2e      	lsrs	r6, r5, #16
    132e:	d00f      	beq.n	1350 <usb_isr+0x1c0>
    1330:	4f4a      	ldr	r7, [pc, #296]	; (145c <usb_isr+0x2cc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    1332:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    1336:	fa96 f4a6 	rbit	r4, r6
    133a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    133e:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    1342:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1346:	3040      	adds	r0, #64	; 0x40
    1348:	f7ff feb6 	bl	10b8 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    134c:	43a6      	bics	r6, r4
    134e:	d1f2      	bne.n	1336 <usb_isr+0x1a6>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1350:	b2ad      	uxth	r5, r5
				while(rx) {
    1352:	2d00      	cmp	r5, #0
    1354:	d097      	beq.n	1286 <usb_isr+0xf6>
    1356:	4f41      	ldr	r7, [pc, #260]	; (145c <usb_isr+0x2cc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1358:	2601      	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    135a:	fa95 f4a5 	rbit	r4, r5
    135e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    1362:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    1366:	fa06 f404 	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    136a:	f7ff fea5 	bl	10b8 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    136e:	43a5      	bics	r5, r4
    1370:	d1f3      	bne.n	135a <usb_isr+0x1ca>
    1372:	e788      	b.n	1286 <usb_isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1374:	4a3f      	ldr	r2, [pc, #252]	; (1474 <usb_isr+0x2e4>)
    1376:	7013      	strb	r3, [r2, #0]
    1378:	e7b9      	b.n	12ee <usb_isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    137a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    137e:	f000 80f5 	beq.w	156c <usb_isr+0x3dc>
    1382:	d922      	bls.n	13ca <usb_isr+0x23a>
    1384:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1388:	f000 80fe 	beq.w	1588 <usb_isr+0x3f8>
    138c:	f640 1521 	movw	r5, #2337	; 0x921
    1390:	42a9      	cmp	r1, r5
    1392:	d103      	bne.n	139c <usb_isr+0x20c>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    1394:	0c11      	lsrs	r1, r2, #16
    1396:	2908      	cmp	r1, #8
    1398:	f240 8126 	bls.w	15e8 <usb_isr+0x458>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    139c:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13a0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13a4:	2b00      	cmp	r3, #0
    13a6:	f47f af09 	bne.w	11bc <usb_isr+0x2c>
    13aa:	e767      	b.n	127c <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13ac:	2980      	cmp	r1, #128	; 0x80
    13ae:	d1f5      	bne.n	139c <usb_isr+0x20c>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    13b0:	4a33      	ldr	r2, [pc, #204]	; (1480 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    13b2:	2102      	movs	r1, #2
    13b4:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    13b6:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    13b8:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    13ba:	f7ff fe99 	bl	10f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13be:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13c2:	2b00      	cmp	r3, #0
    13c4:	f47f aefa 	bne.w	11bc <usb_isr+0x2c>
    13c8:	e758      	b.n	127c <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    13ca:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    13ce:	2901      	cmp	r1, #1
    13d0:	d8e4      	bhi.n	139c <usb_isr+0x20c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    13d2:	4b2c      	ldr	r3, [pc, #176]	; (1484 <usb_isr+0x2f4>)
    13d4:	6859      	ldr	r1, [r3, #4]
    13d6:	2900      	cmp	r1, #0
    13d8:	d0e0      	beq.n	139c <usb_isr+0x20c>
    13da:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    13dc:	fa1f fe82 	uxth.w	lr, r2
    13e0:	e003      	b.n	13ea <usb_isr+0x25a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    13e2:	330c      	adds	r3, #12
    13e4:	6859      	ldr	r1, [r3, #4]
    13e6:	2900      	cmp	r1, #0
    13e8:	d0d8      	beq.n	139c <usb_isr+0x20c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    13ea:	881d      	ldrh	r5, [r3, #0]
    13ec:	4285      	cmp	r5, r0
    13ee:	d1f8      	bne.n	13e2 <usb_isr+0x252>
    13f0:	885d      	ldrh	r5, [r3, #2]
    13f2:	4575      	cmp	r5, lr
    13f4:	d1f5      	bne.n	13e2 <usb_isr+0x252>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    13f6:	0a05      	lsrs	r5, r0, #8
    13f8:	2d03      	cmp	r5, #3
    13fa:	f000 817b 	beq.w	16f4 <usb_isr+0x564>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    13fe:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1400:	0c12      	lsrs	r2, r2, #16
    1402:	4293      	cmp	r3, r2
    1404:	bf28      	it	cs
    1406:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1408:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    140c:	f000 8163 	beq.w	16d6 <usb_isr+0x546>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1410:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    1414:	f000 814c 	beq.w	16b0 <usb_isr+0x520>
    1418:	4d1b      	ldr	r5, [pc, #108]	; (1488 <usb_isr+0x2f8>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    141a:	461a      	mov	r2, r3
    141c:	9301      	str	r3, [sp, #4]
    141e:	4628      	mov	r0, r5
    1420:	f001 fc6a 	bl	2cf8 <memcpy>
    1424:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1426:	f025 021f 	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    142a:	441d      	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
    142c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1430:	4916      	ldr	r1, [pc, #88]	; (148c <usb_isr+0x2fc>)
    1432:	600a      	str	r2, [r1, #0]
		location += 32;
    1434:	3220      	adds	r2, #32
	} while (location < end_addr);
    1436:	4295      	cmp	r5, r2
    1438:	d8fa      	bhi.n	1430 <usb_isr+0x2a0>
	asm("dsb");
    143a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    143e:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1442:	4811      	ldr	r0, [pc, #68]	; (1488 <usb_isr+0x2f8>)
    1444:	4619      	mov	r1, r3
    1446:	f7ff fe53 	bl	10f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    144a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    144e:	2b00      	cmp	r3, #0
    1450:	f47f aeb4 	bne.w	11bc <usb_isr+0x2c>
    1454:	e712      	b.n	127c <usb_isr+0xec>
    1456:	bf00      	nop
    1458:	402e0000 	.word	0x402e0000
    145c:	20000000 	.word	0x20000000
    1460:	402e01c0 	.word	0x402e01c0
    1464:	20001fc0 	.word	0x20001fc0
    1468:	20001ef8 	.word	0x20001ef8
    146c:	20001f70 	.word	0x20001f70
    1470:	20001f74 	.word	0x20001f74
    1474:	20001f8a 	.word	0x20001f8a
    1478:	20001f8b 	.word	0x20001f8b
    147c:	20001ef4 	.word	0x20001ef4
    1480:	20001efc 	.word	0x20001efc
    1484:	20000954 	.word	0x20000954
    1488:	20200000 	.word	0x20200000
    148c:	e000ef70 	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1490:	4ab2      	ldr	r2, [pc, #712]	; (175c <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1492:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1494:	2501      	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1496:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1498:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    149a:	6015      	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    149c:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    149e:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    14a2:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14a6:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    14a8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    14ac:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    14b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14b4:	2b00      	cmp	r3, #0
    14b6:	d1fb      	bne.n	14b0 <usb_isr+0x320>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    14b8:	0c03      	lsrs	r3, r0, #16
    14ba:	065b      	lsls	r3, r3, #25
    14bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    14c0:	f8c6 3154 	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    14c4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    14c8:	2b00      	cmp	r3, #0
    14ca:	f47f ae77 	bne.w	11bc <usb_isr+0x2c>
    14ce:	e6d5      	b.n	127c <usb_isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    14d0:	b292      	uxth	r2, r2
    14d2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    14d6:	2b07      	cmp	r3, #7
    14d8:	f63f af60 	bhi.w	139c <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    14dc:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    14e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    14e4:	4a9e      	ldr	r2, [pc, #632]	; (1760 <usb_isr+0x5d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14e6:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14ea:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    14ee:	441a      	add	r2, r3
    14f0:	6813      	ldr	r3, [r2, #0]
    14f2:	bf14      	ite	ne
    14f4:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    14f8:	f023 0301 	biceq.w	r3, r3, #1
    14fc:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14fe:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1500:	4b96      	ldr	r3, [pc, #600]	; (175c <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1502:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1504:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1506:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1508:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    150a:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    150e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1512:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1514:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1518:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    151c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1520:	2b00      	cmp	r3, #0
    1522:	d1fb      	bne.n	151c <usb_isr+0x38c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1524:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1528:	2b00      	cmp	r3, #0
    152a:	f47f ae47 	bne.w	11bc <usb_isr+0x2c>
    152e:	e6a5      	b.n	127c <usb_isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1530:	b292      	uxth	r2, r2
    1532:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1536:	2907      	cmp	r1, #7
    1538:	f63f af30 	bhi.w	139c <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    153c:	0089      	lsls	r1, r1, #2
    153e:	4888      	ldr	r0, [pc, #544]	; (1760 <usb_isr+0x5d0>)
		reply_buffer[0] = 0;
    1540:	4d88      	ldr	r5, [pc, #544]	; (1764 <usb_isr+0x5d4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1542:	4408      	add	r0, r1
    1544:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1546:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1548:	702b      	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    154a:	706b      	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    154c:	f140 8097 	bpl.w	167e <usb_isr+0x4ee>
    1550:	03ca      	lsls	r2, r1, #15
    1552:	d501      	bpl.n	1558 <usb_isr+0x3c8>
			reply_buffer[0] = 1;
    1554:	2301      	movs	r3, #1
    1556:	702b      	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1558:	2102      	movs	r1, #2
    155a:	4882      	ldr	r0, [pc, #520]	; (1764 <usb_isr+0x5d4>)
    155c:	f7ff fdc8 	bl	10f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1560:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1564:	2b00      	cmp	r3, #0
    1566:	f47f ae29 	bne.w	11bc <usb_isr+0x2c>
    156a:	e687      	b.n	127c <usb_isr+0xec>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    156c:	4a7e      	ldr	r2, [pc, #504]	; (1768 <usb_isr+0x5d8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    156e:	2101      	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1570:	4b7c      	ldr	r3, [pc, #496]	; (1764 <usb_isr+0x5d4>)
    1572:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1574:	4618      	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1576:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1578:	f7ff fdba 	bl	10f0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    157c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1580:	2b00      	cmp	r3, #0
    1582:	f47f ae1b 	bne.w	11bc <usb_isr+0x2c>
    1586:	e679      	b.n	127c <usb_isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1588:	f3c0 4007 	ubfx	r0, r0, #16, #8
    158c:	4a76      	ldr	r2, [pc, #472]	; (1768 <usb_isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    158e:	4977      	ldr	r1, [pc, #476]	; (176c <usb_isr+0x5dc>)
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1590:	f04f 15cc 	mov.w	r5, #13369548	; 0xcc00cc
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1594:	7010      	strb	r0, [r2, #0]
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1596:	4a76      	ldr	r2, [pc, #472]	; (1770 <usb_isr+0x5e0>)
    1598:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    159a:	f8c6 51c8 	str.w	r5, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    159e:	f8c6 11cc 	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    15a2:	f8c6 21d0 	str.w	r2, [r6, #464]	; 0x1d0
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
    15a6:	f000 fab3 	bl	1b10 <usb_seremu_configure>
		#endif
		#if defined(CDC3_STATUS_INTERFACE) && defined(CDC3_DATA_INTERFACE)
		usb_serial3_configure();
		#endif
		#if defined(RAWHID_INTERFACE)
		usb_rawhid_configure();
    15aa:	f000 fa19 	bl	19e0 <usb_rawhid_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15ae:	4a6b      	ldr	r2, [pc, #428]	; (175c <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15b0:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15b2:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15b4:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    15b6:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    15b8:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    15ba:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    15bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    15be:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    15c2:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    15c6:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    15c8:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    15cc:	f8c6 21b0 	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    15d0:	4a68      	ldr	r2, [pc, #416]	; (1774 <usb_isr+0x5e4>)
    15d2:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    15d4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    15d8:	2b00      	cmp	r3, #0
    15da:	d1fb      	bne.n	15d4 <usb_isr+0x444>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    15dc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	f47f adeb 	bne.w	11bc <usb_isr+0x2c>
    15e6:	e649      	b.n	127c <usb_isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    15e8:	f8df e194 	ldr.w	lr, [pc, #404]	; 1780 <usb_isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
    15ec:	f04f 0ce9 	mov.w	ip, #233	; 0xe9
    15f0:	4d61      	ldr	r5, [pc, #388]	; (1778 <usb_isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    15f2:	e88e 0005 	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
    15f6:	f885 c000 	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
    15fa:	b301      	cbz	r1, 163e <usb_isr+0x4ae>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    15fc:	0409      	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    15fe:	4a5f      	ldr	r2, [pc, #380]	; (177c <usb_isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1600:	60fb      	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1602:	2001      	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1604:	f041 0380 	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1608:	60ba      	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    160a:	6010      	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    160c:	f505 5e00 	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1610:	6053      	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1612:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1616:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    161a:	f505 5140 	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    161e:	6095      	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1620:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1624:	f043 0301 	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1628:	60d0      	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    162a:	f8c2 e010 	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    162e:	6151      	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1630:	6195      	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1632:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1636:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    163a:	2b00      	cmp	r3, #0
    163c:	d1fb      	bne.n	1636 <usb_isr+0x4a6>
	}
	endpoint0_transfer_ack.next = 1;
    163e:	4b47      	ldr	r3, [pc, #284]	; (175c <usb_isr+0x5cc>)
    1640:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1642:	f248 0280 	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
    1646:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1648:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    164a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    164e:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1650:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1652:	64f9      	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1654:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1658:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    165c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    165e:	ea42 0300 	orr.w	r3, r2, r0
    1662:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1666:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    166a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    166e:	2b00      	cmp	r3, #0
    1670:	d1fb      	bne.n	166a <usb_isr+0x4da>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1672:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1676:	2b00      	cmp	r3, #0
    1678:	f47f ada0 	bne.w	11bc <usb_isr+0x2c>
    167c:	e5fe      	b.n	127c <usb_isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    167e:	07cb      	lsls	r3, r1, #31
    1680:	f57f af6a 	bpl.w	1558 <usb_isr+0x3c8>
    1684:	e766      	b.n	1554 <usb_isr+0x3c4>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1686:	483e      	ldr	r0, [pc, #248]	; (1780 <usb_isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1688:	2600      	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    168a:	4c3e      	ldr	r4, [pc, #248]	; (1784 <usb_isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    168c:	6805      	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    168e:	600e      	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1690:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1692:	6840      	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1694:	f47f ae46 	bne.w	1324 <usb_isr+0x194>
    1698:	493b      	ldr	r1, [pc, #236]	; (1788 <usb_isr+0x5f8>)
    169a:	4288      	cmp	r0, r1
    169c:	f47f ae42 	bne.w	1324 <usb_isr+0x194>
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    16a0:	4935      	ldr	r1, [pc, #212]	; (1778 <usb_isr+0x5e8>)
    16a2:	7808      	ldrb	r0, [r1, #0]
    16a4:	28a9      	cmp	r0, #169	; 0xa9
    16a6:	d02b      	beq.n	1700 <usb_isr+0x570>
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
		} else {
			// any other feature report means Arduino Serial Monitor is open
			usb_seremu_online = 1;
    16a8:	4a38      	ldr	r2, [pc, #224]	; (178c <usb_isr+0x5fc>)
    16aa:	2101      	movs	r1, #1
    16ac:	7011      	strb	r1, [r2, #0]
    16ae:	e639      	b.n	1324 <usb_isr+0x194>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    16b0:	4837      	ldr	r0, [pc, #220]	; (1790 <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    16b2:	461a      	mov	r2, r3
    16b4:	4d37      	ldr	r5, [pc, #220]	; (1794 <usb_isr+0x604>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    16b6:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    16ba:	4937      	ldr	r1, [pc, #220]	; (1798 <usb_isr+0x608>)
    16bc:	4837      	ldr	r0, [pc, #220]	; (179c <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    16be:	9301      	str	r3, [sp, #4]
    16c0:	f1be 0f00 	cmp.w	lr, #0
    16c4:	bf08      	it	eq
    16c6:	4601      	moveq	r1, r0
    16c8:	4628      	mov	r0, r5
    16ca:	f001 fb15 	bl	2cf8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    16ce:	2207      	movs	r2, #7
    16d0:	9b01      	ldr	r3, [sp, #4]
    16d2:	706a      	strb	r2, [r5, #1]
    16d4:	e6a7      	b.n	1426 <usb_isr+0x296>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    16d6:	482e      	ldr	r0, [pc, #184]	; (1790 <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    16d8:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    16da:	4930      	ldr	r1, [pc, #192]	; (179c <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    16dc:	7805      	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    16de:	482e      	ldr	r0, [pc, #184]	; (1798 <usb_isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    16e0:	9301      	str	r3, [sp, #4]
    16e2:	2d00      	cmp	r5, #0
    16e4:	bf08      	it	eq
    16e6:	4601      	moveq	r1, r0
    16e8:	482a      	ldr	r0, [pc, #168]	; (1794 <usb_isr+0x604>)
    16ea:	f001 fb05 	bl	2cf8 <memcpy>
    16ee:	4d29      	ldr	r5, [pc, #164]	; (1794 <usb_isr+0x604>)
    16f0:	9b01      	ldr	r3, [sp, #4]
    16f2:	e698      	b.n	1426 <usb_isr+0x296>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    16f4:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    16f6:	780b      	ldrb	r3, [r1, #0]
    16f8:	4293      	cmp	r3, r2
    16fa:	bf28      	it	cs
    16fc:	4613      	movcs	r3, r2
    16fe:	e687      	b.n	1410 <usb_isr+0x280>
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    1700:	7848      	ldrb	r0, [r1, #1]
    1702:	2845      	cmp	r0, #69	; 0x45
    1704:	d1d0      	bne.n	16a8 <usb_isr+0x518>
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
    1706:	7888      	ldrb	r0, [r1, #2]
    1708:	28c2      	cmp	r0, #194	; 0xc2
    170a:	d1cd      	bne.n	16a8 <usb_isr+0x518>
    170c:	78c9      	ldrb	r1, [r1, #3]
    170e:	296b      	cmp	r1, #107	; 0x6b
    1710:	d1ca      	bne.n	16a8 <usb_isr+0x518>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1712:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1714:	4822      	ldr	r0, [pc, #136]	; (17a0 <usb_isr+0x610>)
    1716:	7801      	ldrb	r1, [r0, #0]
    1718:	f041 0104 	orr.w	r1, r1, #4
    171c:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    171e:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1722:	0608      	lsls	r0, r1, #24
    1724:	d406      	bmi.n	1734 <usb_isr+0x5a4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1726:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    172a:	2080      	movs	r0, #128	; 0x80
    172c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1730:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1734:	b662      	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1736:	4a1b      	ldr	r2, [pc, #108]	; (17a4 <usb_isr+0x614>)
    1738:	2150      	movs	r1, #80	; 0x50
    173a:	7011      	strb	r1, [r2, #0]
    173c:	e5f2      	b.n	1324 <usb_isr+0x194>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    173e:	4918      	ldr	r1, [pc, #96]	; (17a0 <usb_isr+0x610>)
    1740:	780a      	ldrb	r2, [r1, #0]
    1742:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1746:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1748:	b92a      	cbnz	r2, 1756 <usb_isr+0x5c6>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    174a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    174e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1752:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    1756:	f004 fe37 	bl	63c8 <___reboot_Teensyduino__veneer>
    175a:	bf00      	nop
    175c:	20001fc0 	.word	0x20001fc0
    1760:	402e01c0 	.word	0x402e01c0
    1764:	20001efc 	.word	0x20001efc
    1768:	20001f89 	.word	0x20001f89
    176c:	00cc0002 	.word	0x00cc0002
    1770:	000200cc 	.word	0x000200cc
    1774:	20001ef4 	.word	0x20001ef4
    1778:	20001eec 	.word	0x20001eec
    177c:	20001fa0 	.word	0x20001fa0
    1780:	20001e60 	.word	0x20001e60
    1784:	03000921 	.word	0x03000921
    1788:	00040001 	.word	0x00040001
    178c:	20001f8c 	.word	0x20001f8c
    1790:	20001f8a 	.word	0x20001f8a
    1794:	20200000 	.word	0x20200000
    1798:	60001eb8 	.word	0x60001eb8
    179c:	60001f04 	.word	0x60001f04
    17a0:	20001f84 	.word	0x20001f84
    17a4:	20001f8b 	.word	0x20001f8b

000017a8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17a8:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    17aa:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    17ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    17b2:	bf14      	ite	ne
    17b4:	2700      	movne	r7, #0
    17b6:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    17ba:	2a02      	cmp	r2, #2
    17bc:	d901      	bls.n	17c2 <usb_config_rx+0x1a>
    17be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    17c2:	ea4f 19c0 	mov.w	r9, r0, lsl #7
    17c6:	f8df a040 	ldr.w	sl, [pc, #64]	; 1808 <usb_config_rx+0x60>
    17ca:	460d      	mov	r5, r1
    17cc:	4604      	mov	r4, r0
    17ce:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    17d2:	2100      	movs	r1, #0
    17d4:	2240      	movs	r2, #64	; 0x40
    17d6:	4698      	mov	r8, r3
    17d8:	4630      	mov	r0, r6
    17da:	f001 fb8b 	bl	2ef4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17de:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    17e0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    17e4:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    17e8:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    17ec:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    17ee:	f1b8 0f00 	cmp.w	r8, #0
    17f2:	d0e4      	beq.n	17be <usb_config_rx+0x16>
    17f4:	4b03      	ldr	r3, [pc, #12]	; (1804 <usb_config_rx+0x5c>)
    17f6:	40a0      	lsls	r0, r4
    17f8:	681c      	ldr	r4, [r3, #0]
    17fa:	4320      	orrs	r0, r4
    17fc:	6018      	str	r0, [r3, #0]
    17fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1802:	bf00      	nop
    1804:	20001ef8 	.word	0x20001ef8
    1808:	20000000 	.word	0x20000000

0000180c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    180c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    180e:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1816:	bf14      	ite	ne
    1818:	2700      	movne	r7, #0
    181a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    181e:	2a02      	cmp	r2, #2
    1820:	d901      	bls.n	1826 <usb_config_tx+0x1a>
    1822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1826:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1828:	01c5      	lsls	r5, r0, #7
    182a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1870 <usb_config_tx+0x64>
    182e:	4688      	mov	r8, r1
    1830:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1832:	2100      	movs	r1, #0
    1834:	4604      	mov	r4, r0
    1836:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1838:	eb09 0a05 	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    183c:	4650      	mov	r0, sl
    183e:	f001 fb59 	bl	2ef4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1842:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1844:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    1848:	f849 1005 	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    184c:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1850:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1854:	2e00      	cmp	r6, #0
    1856:	d0e4      	beq.n	1822 <usb_config_tx+0x16>
    1858:	f104 0010 	add.w	r0, r4, #16
    185c:	4b03      	ldr	r3, [pc, #12]	; (186c <usb_config_tx+0x60>)
    185e:	4082      	lsls	r2, r0
    1860:	6818      	ldr	r0, [r3, #0]
    1862:	4302      	orrs	r2, r0
    1864:	601a      	str	r2, [r3, #0]
    1866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    186a:	bf00      	nop
    186c:	20001ef8 	.word	0x20001ef8
    1870:	20000000 	.word	0x20000000

00001874 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1874:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1876:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1878:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    187a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    187e:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1880:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1882:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1884:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1888:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    188c:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1890:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1894:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1896:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1898:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    189a:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    189c:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    189e:	bcf0      	pop	{r4, r5, r6, r7}
    18a0:	4770      	bx	lr
    18a2:	bf00      	nop

000018a4 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    18a4:	1e83      	subs	r3, r0, #2
    18a6:	2b02      	cmp	r3, #2
    18a8:	d900      	bls.n	18ac <usb_transmit+0x8>
    18aa:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    18ac:	4b06      	ldr	r3, [pc, #24]	; (18c8 <usb_transmit+0x24>)
    18ae:	460a      	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    18b0:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    18b2:	f100 0410 	add.w	r4, r0, #16
    18b6:	2501      	movs	r5, #1
    18b8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    18bc:	fa05 f104 	lsl.w	r1, r5, r4
    18c0:	3040      	adds	r0, #64	; 0x40
}
    18c2:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    18c4:	f7ff bbb0 	b.w	1028 <schedule_transfer>
    18c8:	20000000 	.word	0x20000000

000018cc <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    18cc:	1e83      	subs	r3, r0, #2
    18ce:	2b02      	cmp	r3, #2
    18d0:	d900      	bls.n	18d4 <usb_receive+0x8>
    18d2:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    18d4:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <usb_receive+0x20>)
    18d8:	2401      	movs	r4, #1
    18da:	460a      	mov	r2, r1
    18dc:	fa04 f100 	lsl.w	r1, r4, r0
    18e0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    18e4:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    18e8:	f7ff bb9e 	b.w	1028 <schedule_transfer>
    18ec:	20000000 	.word	0x20000000

000018f0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    18f0:	6840      	ldr	r0, [r0, #4]
#endif
}
    18f2:	4770      	bx	lr

000018f4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18f4:	4a12      	ldr	r2, [pc, #72]	; (1940 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    18f6:	4b13      	ldr	r3, [pc, #76]	; (1944 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18f8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    18fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1900:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1902:	b510      	push	{r4, lr}
    1904:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1906:	d802      	bhi.n	190e <usb_init_serialnumber+0x1a>
    1908:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    190c:	0040      	lsls	r0, r0, #1
    190e:	4c0e      	ldr	r4, [pc, #56]	; (1948 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1910:	a901      	add	r1, sp, #4
    1912:	220a      	movs	r2, #10
    1914:	f7ff f86a 	bl	9ec <ultoa>
    1918:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    191a:	2300      	movs	r3, #0
    191c:	4620      	mov	r0, r4
		char c = buf[i];
    191e:	f811 2b01 	ldrb.w	r2, [r1], #1
    1922:	3301      	adds	r3, #1
		if (!c) break;
    1924:	b13a      	cbz	r2, 1936 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1926:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1928:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    192c:	d1f7      	bne.n	191e <usb_init_serialnumber+0x2a>
    192e:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1930:	7023      	strb	r3, [r4, #0]
}
    1932:	b004      	add	sp, #16
    1934:	bd10      	pop	{r4, pc}
    1936:	005b      	lsls	r3, r3, #1
    1938:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    193a:	7023      	strb	r3, [r4, #0]
}
    193c:	b004      	add	sp, #16
    193e:	bd10      	pop	{r4, pc}
    1940:	401f4400 	.word	0x401f4400
    1944:	0098967f 	.word	0x0098967f
    1948:	20001428 	.word	0x20001428

0000194c <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    194c:	4a0a      	ldr	r2, [pc, #40]	; (1978 <rx_event+0x2c>)
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    194e:	b410      	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    1950:	7813      	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    1952:	69c4      	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    1954:	3301      	adds	r3, #1
    1956:	2b04      	cmp	r3, #4
    1958:	d907      	bls.n	196a <rx_event+0x1e>
    195a:	2100      	movs	r1, #0
	rx_list[head] = i;
    195c:	4807      	ldr	r0, [pc, #28]	; (197c <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    195e:	460b      	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    1960:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1962:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    1964:	f85d 4b04 	ldr.w	r4, [sp], #4
    1968:	4770      	bx	lr
    196a:	b2d9      	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    196c:	4803      	ldr	r0, [pc, #12]	; (197c <rx_event+0x30>)
	rx_head = head;
    196e:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1970:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    1972:	f85d 4b04 	ldr.w	r4, [sp], #4
    1976:	4770      	bx	lr
    1978:	20001f80 	.word	0x20001f80
    197c:	20001f18 	.word	0x20001f18

00001980 <rx_queue_transfer>:
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
    1980:	4912      	ldr	r1, [pc, #72]	; (19cc <rx_queue_transfer+0x4c>)
    1982:	eb01 1180 	add.w	r1, r1, r0, lsl #6
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1986:	b538      	push	{r3, r4, r5, lr}
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1988:	f021 021f 	bic.w	r2, r1, #31
    198c:	4603      	mov	r3, r0
	uint32_t end_addr = (uint32_t)addr + size;
    198e:	f101 0540 	add.w	r5, r1, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    1992:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1996:	4c0e      	ldr	r4, [pc, #56]	; (19d0 <rx_queue_transfer+0x50>)
    1998:	6022      	str	r2, [r4, #0]
		location += 32;
    199a:	3220      	adds	r2, #32
	} while (location < end_addr);
    199c:	4295      	cmp	r5, r2
    199e:	d8fb      	bhi.n	1998 <rx_queue_transfer+0x18>
	asm("dsb");
    19a0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    19a4:	f3bf 8f6f 	isb	sy
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    19a8:	4c0a      	ldr	r4, [pc, #40]	; (19d4 <rx_queue_transfer+0x54>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    19aa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    19ae:	4a0a      	ldr	r2, [pc, #40]	; (19d8 <rx_queue_transfer+0x58>)
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    19b0:	eb04 1443 	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    19b4:	6015      	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    19b6:	2240      	movs	r2, #64	; 0x40
    19b8:	4620      	mov	r0, r4
    19ba:	f7ff ff5b 	bl	1874 <usb_prepare_transfer>
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
    19be:	4621      	mov	r1, r4
    19c0:	2004      	movs	r0, #4
    19c2:	f7ff ff83 	bl	18cc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <rx_queue_transfer+0x5c>)
    19c8:	601d      	str	r5, [r3, #0]
    19ca:	bd38      	pop	{r3, r4, r5, pc}
    19cc:	20200060 	.word	0x20200060
    19d0:	e000ef5c 	.word	0xe000ef5c
    19d4:	20001ae0 	.word	0x20001ae0
    19d8:	e000e18c 	.word	0xe000e18c
    19dc:	e000e10c 	.word	0xe000e10c

000019e0 <usb_rawhid_configure>:


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    19e0:	2100      	movs	r1, #0
    19e2:	4816      	ldr	r0, [pc, #88]	; (1a3c <usb_rawhid_configure+0x5c>)
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_rawhid_configure(void)
{
    19e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    19e6:	2580      	movs	r5, #128	; 0x80
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    19e8:	460c      	mov	r4, r1
	rx_head = 0;
    19ea:	4f15      	ldr	r7, [pc, #84]	; (1a40 <usb_rawhid_configure+0x60>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    19ec:	462a      	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    19ee:	4e15      	ldr	r6, [pc, #84]	; (1a44 <usb_rawhid_configure+0x64>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    19f0:	f001 fa80 	bl	2ef4 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    19f4:	462a      	mov	r2, r5
    19f6:	4621      	mov	r1, r4
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    19f8:	4d13      	ldr	r5, [pc, #76]	; (1a48 <usb_rawhid_configure+0x68>)

void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    19fa:	4814      	ldr	r0, [pc, #80]	; (1a4c <usb_rawhid_configure+0x6c>)
    19fc:	f001 fa7a 	bl	2ef4 <memset>
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    1a00:	4623      	mov	r3, r4
    1a02:	4622      	mov	r2, r4
    1a04:	2140      	movs	r1, #64	; 0x40
    1a06:	2003      	movs	r0, #3
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    1a08:	703c      	strb	r4, [r7, #0]
void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    1a0a:	7034      	strb	r4, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
    1a0c:	702c      	strb	r4, [r5, #0]
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    1a0e:	f7ff fefd 	bl	180c <usb_config_tx>
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
    1a12:	4622      	mov	r2, r4
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <usb_rawhid_configure+0x70>)
    1a16:	2140      	movs	r1, #64	; 0x40
    1a18:	2004      	movs	r0, #4
    1a1a:	f7ff fec5 	bl	17a8 <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1a1e:	4620      	mov	r0, r4
    1a20:	f7ff ffae 	bl	1980 <rx_queue_transfer>
    1a24:	2001      	movs	r0, #1
    1a26:	f7ff ffab 	bl	1980 <rx_queue_transfer>
    1a2a:	2002      	movs	r0, #2
    1a2c:	f7ff ffa8 	bl	1980 <rx_queue_transfer>
    1a30:	2003      	movs	r0, #3
}
    1a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1a36:	f7ff bfa3 	b.w	1980 <rx_queue_transfer>
    1a3a:	bf00      	nop
    1a3c:	20001c60 	.word	0x20001c60
    1a40:	20001f80 	.word	0x20001f80
    1a44:	20001f86 	.word	0x20001f86
    1a48:	20001f82 	.word	0x20001f82
    1a4c:	20001ae0 	.word	0x20001ae0
    1a50:	0000194d 	.word	0x0000194d

00001a54 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1a54:	b570      	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    1a56:	0141      	lsls	r1, r0, #5
    1a58:	4c12      	ldr	r4, [pc, #72]	; (1aa4 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1a5a:	4d13      	ldr	r5, [pc, #76]	; (1aa8 <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1a5c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    1a5e:	440c      	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a60:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1a64:	440d      	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a66:	4811      	ldr	r0, [pc, #68]	; (1aac <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1a68:	4621      	mov	r1, r4
    1a6a:	2220      	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a6c:	6006      	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    1a6e:	4628      	mov	r0, r5
    1a70:	f7ff ff00 	bl	1874 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a74:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a78:	f104 0120 	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
    1a7c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1a80:	4a0b      	ldr	r2, [pc, #44]	; (1ab0 <rx_queue_transfer+0x5c>)
    1a82:	6013      	str	r3, [r2, #0]
		location += 32;
    1a84:	3320      	adds	r3, #32
	} while (location < end_addr);
    1a86:	4299      	cmp	r1, r3
    1a88:	d8fb      	bhi.n	1a82 <rx_queue_transfer+0x2e>
	asm("dsb");
    1a8a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a8e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
    1a92:	2002      	movs	r0, #2
    1a94:	4629      	mov	r1, r5
    1a96:	f7ff ff19 	bl	18cc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1a9a:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <rx_queue_transfer+0x60>)
    1a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1aa0:	601a      	str	r2, [r3, #0]
    1aa2:	bd70      	pop	{r4, r5, r6, pc}
    1aa4:	20200260 	.word	0x20200260
    1aa8:	20001b60 	.word	0x20001b60
    1aac:	e000e18c 	.word	0xe000e18c
    1ab0:	e000ef5c 	.word	0xe000ef5c
    1ab4:	e000e10c 	.word	0xe000e10c

00001ab8 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    1ab8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    1aba:	69c0      	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    1abc:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1ac0:	b10b      	cbz	r3, 1ac6 <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
    1ac2:	f7ff bfc7 	b.w	1a54 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    1ac6:	490d      	ldr	r1, [pc, #52]	; (1afc <rx_event+0x44>)
    1ac8:	0142      	lsls	r2, r0, #5
    1aca:	5c8a      	ldrb	r2, [r1, r2]
    1acc:	2a00      	cmp	r2, #0
    1ace:	d0f8      	beq.n	1ac2 <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
    1ad0:	490b      	ldr	r1, [pc, #44]	; (1b00 <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1ad2:	b410      	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1ad4:	4c0b      	ldr	r4, [pc, #44]	; (1b04 <rx_event+0x4c>)
		rx_index[i] = 0;
    1ad6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1ada:	7822      	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1adc:	490a      	ldr	r1, [pc, #40]	; (1b08 <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1ade:	3201      	adds	r2, #1
    1ae0:	2a08      	cmp	r2, #8
    1ae2:	bf94      	ite	ls
    1ae4:	b2d3      	uxtbls	r3, r2
    1ae6:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    1ae8:	7023      	strb	r3, [r4, #0]
		rx_available += len;
    1aea:	680b      	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1aec:	4c07      	ldr	r4, [pc, #28]	; (1b0c <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
    1aee:	3320      	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1af0:	54a0      	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
    1af2:	600b      	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
    1af4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop
    1afc:	20200260 	.word	0x20200260
    1b00:	20001f08 	.word	0x20001f08
    1b04:	20001f81 	.word	0x20001f81
    1b08:	20001f04 	.word	0x20001f04
    1b0c:	20001f20 	.word	0x20001f20

00001b10 <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1b10:	2100      	movs	r1, #0
    1b12:	f44f 72c0 	mov.w	r2, #384	; 0x180
    1b16:	481f      	ldr	r0, [pc, #124]	; (1b94 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
    1b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1b1a:	460d      	mov	r5, r1
    1b1c:	4c1e      	ldr	r4, [pc, #120]	; (1b98 <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1b1e:	f001 f9e9 	bl	2ef4 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1b22:	4e1e      	ldr	r6, [pc, #120]	; (1b9c <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1b24:	4b1e      	ldr	r3, [pc, #120]	; (1ba0 <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b26:	4629      	mov	r1, r5
    1b28:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b2c:	481d      	ldr	r0, [pc, #116]	; (1ba4 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1b2e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b30:	462c      	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1b32:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b34:	f001 f9de 	bl	2ef4 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1b38:	7035      	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1b3a:	462a      	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1b3c:	4e1a      	ldr	r6, [pc, #104]	; (1ba8 <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1b3e:	2120      	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1b40:	4b1a      	ldr	r3, [pc, #104]	; (1bac <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1b42:	2002      	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1b44:	4f1a      	ldr	r7, [pc, #104]	; (1bb0 <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1b46:	701d      	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1b48:	6035      	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1b4a:	4b1a      	ldr	r3, [pc, #104]	; (1bb4 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    1b4c:	6075      	str	r5, [r6, #4]
    1b4e:	60b5      	str	r5, [r6, #8]
    1b50:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1b52:	603d      	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    1b54:	f7ff fe28 	bl	17a8 <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
    1b58:	462b      	mov	r3, r5
    1b5a:	462a      	mov	r2, r5
    1b5c:	2140      	movs	r1, #64	; 0x40
    1b5e:	2002      	movs	r0, #2
    1b60:	f7ff fe54 	bl	180c <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b64:	4620      	mov	r0, r4
    1b66:	3401      	adds	r4, #1
    1b68:	f7ff ff74 	bl	1a54 <rx_queue_transfer>
    1b6c:	2c08      	cmp	r4, #8
    1b6e:	d1f9      	bne.n	1b64 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1b70:	4b11      	ldr	r3, [pc, #68]	; (1bb8 <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    1b72:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1b74:	4811      	ldr	r0, [pc, #68]	; (1bbc <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
    1b76:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1b78:	4c11      	ldr	r4, [pc, #68]	; (1bc0 <usb_seremu_configure+0xb0>)
    1b7a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1b7c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1b84:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1b88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1b8c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b92:	bf00      	nop
    1b94:	20001ce0 	.word	0x20001ce0
    1b98:	20001f87 	.word	0x20001f87
    1b9c:	20001f81 	.word	0x20001f81
    1ba0:	20001f78 	.word	0x20001f78
    1ba4:	20001b60 	.word	0x20001b60
    1ba8:	20001f08 	.word	0x20001f08
    1bac:	20001f83 	.word	0x20001f83
    1bb0:	20001f04 	.word	0x20001f04
    1bb4:	00001ab9 	.word	0x00001ab9
    1bb8:	402e0000 	.word	0x402e0000
    1bbc:	20001f70 	.word	0x20001f70
    1bc0:	00001d2d 	.word	0x00001d2d

00001bc4 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
    1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    1bc6:	4d14      	ldr	r5, [pc, #80]	; (1c18 <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
    1bc8:	4a14      	ldr	r2, [pc, #80]	; (1c1c <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    1bca:	782b      	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
    1bcc:	7812      	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    1bce:	b2db      	uxtb	r3, r3

	if (tail == rx_head) return -1;
    1bd0:	4293      	cmp	r3, r2
    1bd2:	d01d      	beq.n	1c10 <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
    1bd4:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1bd6:	4a12      	ldr	r2, [pc, #72]	; (1c20 <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
    1bd8:	4e12      	ldr	r6, [pc, #72]	; (1c24 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1bda:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1bdc:	4c12      	ldr	r4, [pc, #72]	; (1c28 <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1bde:	bf28      	it	cs
    1be0:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1be2:	5cd0      	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
    1be4:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1be8:	eb02 1140 	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    1bec:	3201      	adds	r2, #1
    1bee:	2a1f      	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    1bf0:	eb04 0701 	add.w	r7, r4, r1
	int c = *p;
    1bf4:	5c64      	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    1bf6:	d805      	bhi.n	1c04 <usb_seremu_getchar+0x40>
    1bf8:	7879      	ldrb	r1, [r7, #1]
    1bfa:	b119      	cbz	r1, 1c04 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
    1bfc:	f826 2010 	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
    1c00:	4620      	mov	r0, r4
    1c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
    1c04:	b2db      	uxtb	r3, r3
    1c06:	702b      	strb	r3, [r5, #0]
		rx_queue_transfer(i);
    1c08:	f7ff ff24 	bl	1a54 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
    1c0c:	4620      	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
    1c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
    1c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
    1c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c16:	bf00      	nop
    1c18:	20001f83 	.word	0x20001f83
    1c1c:	20001f81 	.word	0x20001f81
    1c20:	20001f20 	.word	0x20001f20
    1c24:	20001f08 	.word	0x20001f08
    1c28:	20200260 	.word	0x20200260

00001c2c <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1c2c:	4b0b      	ldr	r3, [pc, #44]	; (1c5c <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1c2e:	4a0c      	ldr	r2, [pc, #48]	; (1c60 <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1c30:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1c32:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    1c34:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1c36:	4293      	cmp	r3, r2
    1c38:	d00d      	beq.n	1c56 <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1c3a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1c3c:	4a09      	ldr	r2, [pc, #36]	; (1c64 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1c3e:	480a      	ldr	r0, [pc, #40]	; (1c68 <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1c40:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1c42:	490a      	ldr	r1, [pc, #40]	; (1c6c <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1c44:	bf28      	it	cs
    1c46:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1c48:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    1c4a:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    1c4e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1c52:	5cc8      	ldrb	r0, [r1, r3]
    1c54:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
    1c5a:	4770      	bx	lr
    1c5c:	20001f83 	.word	0x20001f83
    1c60:	20001f81 	.word	0x20001f81
    1c64:	20001f20 	.word	0x20001f20
    1c68:	20001f08 	.word	0x20001f08
    1c6c:	20200260 	.word	0x20200260

00001c70 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
    1c70:	b508      	push	{r3, lr}
	uint32_t tail = rx_tail;
    1c72:	4a06      	ldr	r2, [pc, #24]	; (1c8c <usb_seremu_available+0x1c>)
	if (tail == rx_head) {
    1c74:	4b06      	ldr	r3, [pc, #24]	; (1c90 <usb_seremu_available+0x20>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
    1c76:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) {
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	429a      	cmp	r2, r3
    1c7c:	d001      	beq.n	1c82 <usb_seremu_available+0x12>
		yield();
		return 0;
	}
	// TODO: how much is actually available?
	return 1;
    1c7e:	2001      	movs	r0, #1
}
    1c80:	bd08      	pop	{r3, pc}
// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) {
		yield();
    1c82:	f000 faf5 	bl	2270 <yield>
		return 0;
    1c86:	2000      	movs	r0, #0
    1c88:	bd08      	pop	{r3, pc}
    1c8a:	bf00      	nop
    1c8c:	20001f83 	.word	0x20001f83
    1c90:	20001f81 	.word	0x20001f81

00001c94 <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
    1c94:	b538      	push	{r3, r4, r5, lr}
	if (!tx_available) return;
    1c96:	4c08      	ldr	r4, [pc, #32]	; (1cb8 <tx_zero_pad+0x24>)
    1c98:	8822      	ldrh	r2, [r4, #0]
    1c9a:	b162      	cbz	r2, 1cb6 <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1c9c:	4907      	ldr	r1, [pc, #28]	; (1cbc <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
    1c9e:	f1c2 0340 	rsb	r3, r2, #64	; 0x40
    1ca2:	4807      	ldr	r0, [pc, #28]	; (1cc0 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1ca4:	780d      	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
    1ca6:	2100      	movs	r1, #0
    1ca8:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    1cac:	4418      	add	r0, r3
    1cae:	f001 f921 	bl	2ef4 <memset>
	tx_available = 0;
    1cb2:	2300      	movs	r3, #0
    1cb4:	8023      	strh	r3, [r4, #0]
    1cb6:	bd38      	pop	{r3, r4, r5, pc}
    1cb8:	20001f78 	.word	0x20001f78
    1cbc:	20001f87 	.word	0x20001f87
    1cc0:	20200360 	.word	0x20200360

00001cc4 <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    1cc6:	4e15      	ldr	r6, [pc, #84]	; (1d1c <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1cc8:	2300      	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1cca:	4d15      	ldr	r5, [pc, #84]	; (1d20 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1ccc:	2240      	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1cce:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    1cd0:	4c14      	ldr	r4, [pc, #80]	; (1d24 <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    1cd2:	eb05 1541 	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    1cd6:	eb04 1481 	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    1cda:	4628      	mov	r0, r5
    1cdc:	4621      	mov	r1, r4
    1cde:	f7ff fdc9 	bl	1874 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1ce2:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1ce6:	f104 0140 	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    1cea:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1cee:	4a0e      	ldr	r2, [pc, #56]	; (1d28 <tx_queue_transfer+0x64>)
    1cf0:	6013      	str	r3, [r2, #0]
		location += 32;
    1cf2:	3320      	adds	r3, #32
	} while (location < end_addr);
    1cf4:	4299      	cmp	r1, r3
    1cf6:	d8fb      	bhi.n	1cf0 <tx_queue_transfer+0x2c>
	asm("dsb");
    1cf8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1cfc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
    1d00:	2002      	movs	r0, #2
    1d02:	4629      	mov	r1, r5
    1d04:	f7ff fdce 	bl	18a4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1d08:	7833      	ldrb	r3, [r6, #0]
    1d0a:	4a04      	ldr	r2, [pc, #16]	; (1d1c <tx_queue_transfer+0x58>)
    1d0c:	3301      	adds	r3, #1
    1d0e:	b2db      	uxtb	r3, r3
    1d10:	2b0b      	cmp	r3, #11
    1d12:	bf88      	it	hi
    1d14:	2300      	movhi	r3, #0
    1d16:	7013      	strb	r3, [r2, #0]
    1d18:	bd70      	pop	{r4, r5, r6, pc}
    1d1a:	bf00      	nop
    1d1c:	20001f87 	.word	0x20001f87
    1d20:	20001ce0 	.word	0x20001ce0
    1d24:	20200360 	.word	0x20200360
    1d28:	e000ef70 	.word	0xe000ef70

00001d2c <usb_seremu_flush_callback>:
	timer_stop();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
    1d2c:	b508      	push	{r3, lr}
	if (tx_noautoflush) return;
    1d2e:	4b08      	ldr	r3, [pc, #32]	; (1d50 <usb_seremu_flush_callback+0x24>)
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	b92b      	cbnz	r3, 1d40 <usb_seremu_flush_callback+0x14>
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <usb_seremu_flush_callback+0x28>)
    1d36:	881b      	ldrh	r3, [r3, #0]
    1d38:	3b01      	subs	r3, #1
    1d3a:	b29b      	uxth	r3, r3
    1d3c:	2b3e      	cmp	r3, #62	; 0x3e
    1d3e:	d900      	bls.n	1d42 <usb_seremu_flush_callback+0x16>
    1d40:	bd08      	pop	{r3, pc}
	tx_zero_pad();
    1d42:	f7ff ffa7 	bl	1c94 <tx_zero_pad>
	tx_queue_transfer();
}
    1d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
	tx_zero_pad();
	tx_queue_transfer();
    1d4a:	f7ff bfbb 	b.w	1cc4 <tx_queue_transfer>
    1d4e:	bf00      	nop
    1d50:	20001f88 	.word	0x20001f88
    1d54:	20001f78 	.word	0x20001f78

00001d58 <usb_seremu_write.part.1>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
    1d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d5c:	b085      	sub	sp, #20
    1d5e:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1d60:	9100      	str	r1, [sp, #0]
    1d62:	2900      	cmp	r1, #0
    1d64:	f000 8084 	beq.w	1e70 <usb_seremu_write.part.1+0x118>
    1d68:	2300      	movs	r3, #0
    1d6a:	4f42      	ldr	r7, [pc, #264]	; (1e74 <usb_seremu_write.part.1+0x11c>)
    1d6c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1e90 <usb_seremu_write.part.1+0x138>
    1d70:	f8df a110 	ldr.w	sl, [pc, #272]	; 1e84 <usb_seremu_write.part.1+0x12c>
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1d74:	4e40      	ldr	r6, [pc, #256]	; (1e78 <usb_seremu_write.part.1+0x120>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    1d76:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1e94 <usb_seremu_write.part.1+0x13c>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1d7a:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    1d7c:	2101      	movs	r1, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1d7e:	4b3f      	ldr	r3, [pc, #252]	; (1e7c <usb_seremu_write.part.1+0x124>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    1d80:	7039      	strb	r1, [r7, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1d82:	781a      	ldrb	r2, [r3, #0]
    1d84:	493e      	ldr	r1, [pc, #248]	; (1e80 <usb_seremu_write.part.1+0x128>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1d86:	f8b8 3000 	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    1d8a:	eb01 1942 	add.w	r9, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1d8e:	bb0b      	cbnz	r3, 1dd4 <usb_seremu_write.part.1+0x7c>
    1d90:	461d      	mov	r5, r3
    1d92:	461c      	mov	r4, r3
			uint32_t status = usb_transfer_status(xfer);
    1d94:	4648      	mov	r0, r9
    1d96:	f7ff fdab 	bl	18f0 <usb_transfer_status>
			if (!(status & 0x80)) {
    1d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    1d9e:	f04f 0300 	mov.w	r3, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1da2:	4938      	ldr	r1, [pc, #224]	; (1e84 <usb_seremu_write.part.1+0x12c>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1da4:	d056      	beq.n	1e54 <usb_seremu_write.part.1+0xfc>
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1da6:	f89a 2000 	ldrb.w	r2, [sl]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    1daa:	703b      	strb	r3, [r7, #0]
			if (!waiting) {
    1dac:	b904      	cbnz	r4, 1db0 <usb_seremu_write.part.1+0x58>
				wait_begin_at = systick_millis_count;
    1dae:	6835      	ldr	r5, [r6, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1db0:	2a00      	cmp	r2, #0
    1db2:	d134      	bne.n	1e1e <usb_seremu_write.part.1+0xc6>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1db4:	6833      	ldr	r3, [r6, #0]
    1db6:	2401      	movs	r4, #1
    1db8:	1b5b      	subs	r3, r3, r5
    1dba:	2b32      	cmp	r3, #50	; 0x32
    1dbc:	d853      	bhi.n	1e66 <usb_seremu_write.part.1+0x10e>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    1dbe:	f89b 3000 	ldrb.w	r3, [fp]
    1dc2:	b363      	cbz	r3, 1e1e <usb_seremu_write.part.1+0xc6>
			yield();
    1dc4:	f000 fa54 	bl	2270 <yield>
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1dc8:	f8b8 3000 	ldrh.w	r3, [r8]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d0e1      	beq.n	1d94 <usb_seremu_write.part.1+0x3c>
    1dd0:	4a2a      	ldr	r2, [pc, #168]	; (1e7c <usb_seremu_write.part.1+0x124>)
    1dd2:	7812      	ldrb	r2, [r2, #0]
    1dd4:	461c      	mov	r4, r3
    1dd6:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    1dda:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    1dde:	4a2a      	ldr	r2, [pc, #168]	; (1e88 <usb_seremu_write.part.1+0x130>)
    1de0:	4410      	add	r0, r2
		if (size >= tx_available) {
    1de2:	9a00      	ldr	r2, [sp, #0]
    1de4:	42a2      	cmp	r2, r4
    1de6:	d31e      	bcc.n	1e26 <usb_seremu_write.part.1+0xce>
			memcpy(txdata, data, tx_available);
			size -= tx_available;
    1de8:	9b00      	ldr	r3, [sp, #0]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1dea:	2500      	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1dec:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1df0:	4622      	mov	r2, r4
			size -= tx_available;
    1df2:	1b1b      	subs	r3, r3, r4
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1df4:	4649      	mov	r1, r9
			size -= tx_available;
    1df6:	9300      	str	r3, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1df8:	f000 ff7e 	bl	2cf8 <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1dfc:	f8a8 5000 	strh.w	r5, [r8]
			tx_queue_transfer();
    1e00:	f7ff ff60 	bl	1cc4 <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    1e04:	9a01      	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1e06:	4b21      	ldr	r3, [pc, #132]	; (1e8c <usb_seremu_write.part.1+0x134>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    1e08:	4422      	add	r2, r4
    1e0a:	9201      	str	r2, [sp, #4]
			data += tx_available;
    1e0c:	464a      	mov	r2, r9
    1e0e:	4422      	add	r2, r4
    1e10:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1e12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1e16:	9b00      	ldr	r3, [sp, #0]
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1e18:	703d      	strb	r5, [r7, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d1ae      	bne.n	1d7c <usb_seremu_write.part.1+0x24>
    1e1e:	9801      	ldr	r0, [sp, #4]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1e20:	b005      	add	sp, #20
    1e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1e26:	9d00      	ldr	r5, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1e28:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1e2c:	9902      	ldr	r1, [sp, #8]
    1e2e:	462a      	mov	r2, r5
    1e30:	9303      	str	r3, [sp, #12]
    1e32:	f000 ff61 	bl	2cf8 <memcpy>
			tx_available -= size;
    1e36:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1e38:	4914      	ldr	r1, [pc, #80]	; (1e8c <usb_seremu_write.part.1+0x134>)
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1e3a:	2200      	movs	r2, #0
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1e3c:	1b5b      	subs	r3, r3, r5
    1e3e:	f8a8 3000 	strh.w	r3, [r8]
    1e42:	9b01      	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1e44:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    1e48:	4618      	mov	r0, r3
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    1e4a:	703a      	strb	r2, [r7, #0]
    1e4c:	4428      	add	r0, r5
	}
	return sent;
}
    1e4e:	b005      	add	sp, #20
    1e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    1e54:	2340      	movs	r3, #64	; 0x40
    1e56:	4a09      	ldr	r2, [pc, #36]	; (1e7c <usb_seremu_write.part.1+0x124>)
				transmit_previous_timeout = 0;
    1e58:	f88a 0000 	strb.w	r0, [sl]
    1e5c:	7812      	ldrb	r2, [r2, #0]
    1e5e:	461c      	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    1e60:	f8a8 3000 	strh.w	r3, [r8]
    1e64:	e7b9      	b.n	1dda <usb_seremu_write.part.1+0x82>
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
    1e66:	9801      	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1e68:	700c      	strb	r4, [r1, #0]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1e6a:	b005      	add	sp, #20
    1e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1e70:	9800      	ldr	r0, [sp, #0]
    1e72:	e7d5      	b.n	1e20 <usb_seremu_write.part.1+0xc8>
    1e74:	20001f88 	.word	0x20001f88
    1e78:	20001f44 	.word	0x20001f44
    1e7c:	20001f87 	.word	0x20001f87
    1e80:	20001ce0 	.word	0x20001ce0
    1e84:	20001f85 	.word	0x20001f85
    1e88:	20200360 	.word	0x20200360
    1e8c:	402e0000 	.word	0x402e0000
    1e90:	20001f78 	.word	0x20001f78
    1e94:	20001f89 	.word	0x20001f89

00001e98 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1e98:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    1e9a:	b500      	push	{lr}
    1e9c:	b083      	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1e9e:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    1ea0:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1ea4:	b923      	cbnz	r3, 1eb0 <usb_seremu_putchar+0x18>
    1ea6:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
    1eaa:	b003      	add	sp, #12
    1eac:	f85d fb04 	ldr.w	pc, [sp], #4
    1eb0:	2101      	movs	r1, #1
    1eb2:	f10d 0007 	add.w	r0, sp, #7
    1eb6:	f7ff ff4f 	bl	1d58 <usb_seremu_write.part.1>
    1eba:	b003      	add	sp, #12
    1ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    1ec0:	20001f89 	.word	0x20001f89

00001ec4 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1ec4:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <usb_seremu_write+0x14>)
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1ecc:	b10b      	cbz	r3, 1ed2 <usb_seremu_write+0xe>
    1ece:	f7ff bf43 	b.w	1d58 <usb_seremu_write.part.1>
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    1ed2:	4610      	mov	r0, r2
    1ed4:	4770      	bx	lr
    1ed6:	bf00      	nop
    1ed8:	20001f89 	.word	0x20001f89

00001edc <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
    1edc:	2001      	movs	r0, #1
    1ede:	4770      	bx	lr

00001ee0 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
    1ee0:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <usb_seremu_flush_output+0x2c>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	b113      	cbz	r3, 1eec <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
    1ee6:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <usb_seremu_flush_output+0x30>)
    1ee8:	881b      	ldrh	r3, [r3, #0]
    1eea:	b903      	cbnz	r3, 1eee <usb_seremu_flush_output+0xe>
    1eec:	4770      	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
    1eee:	b510      	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1ef0:	2301      	movs	r3, #1
    1ef2:	4c08      	ldr	r4, [pc, #32]	; (1f14 <usb_seremu_flush_output+0x34>)
    1ef4:	7023      	strb	r3, [r4, #0]
	tx_zero_pad();
    1ef6:	f7ff fecd 	bl	1c94 <tx_zero_pad>
	tx_queue_transfer();
    1efa:	f7ff fee3 	bl	1cc4 <tx_queue_transfer>
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1efe:	2300      	movs	r3, #0
    1f00:	4a05      	ldr	r2, [pc, #20]	; (1f18 <usb_seremu_flush_output+0x38>)
    1f02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	tx_zero_pad();
	tx_queue_transfer();
	timer_stop();
	tx_noautoflush = 0;
    1f06:	7023      	strb	r3, [r4, #0]
    1f08:	bd10      	pop	{r4, pc}
    1f0a:	bf00      	nop
    1f0c:	20001f89 	.word	0x20001f89
    1f10:	20001f78 	.word	0x20001f78
    1f14:	20001f88 	.word	0x20001f88
    1f18:	402e0000 	.word	0x402e0000

00001f1c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1f1c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f1e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1f22:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1f24:	4c0c      	ldr	r4, [pc, #48]	; (1f58 <EventResponder::runFromInterrupt()+0x3c>)
    1f26:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1f28:	b18b      	cbz	r3, 1f4e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1f2a:	4e0c      	ldr	r6, [pc, #48]	; (1f5c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1f2c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1f2e:	695a      	ldr	r2, [r3, #20]
    1f30:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    1f32:	b17a      	cbz	r2, 1f54 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1f34:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f36:	b901      	cbnz	r1, 1f3a <EventResponder::runFromInterrupt()+0x1e>
    1f38:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1f3a:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1f3c:	4618      	mov	r0, r3
    1f3e:	689b      	ldr	r3, [r3, #8]
    1f40:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f42:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1f46:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1f48:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d1ef      	bne.n	1f2e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f4e:	b901      	cbnz	r1, 1f52 <EventResponder::runFromInterrupt()+0x36>
    1f50:	b662      	cpsie	i
    1f52:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1f54:	6032      	str	r2, [r6, #0]
    1f56:	e7ee      	b.n	1f36 <EventResponder::runFromInterrupt()+0x1a>
    1f58:	20001e8c 	.word	0x20001e8c
    1f5c:	20001e88 	.word	0x20001e88

00001f60 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1f60:	f7ff bfdc 	b.w	1f1c <EventResponder::runFromInterrupt()>

00001f64 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1f64:	4a04      	ldr	r2, [pc, #16]	; (1f78 <systick_isr+0x14>)
    1f66:	4b05      	ldr	r3, [pc, #20]	; (1f7c <systick_isr+0x18>)
    1f68:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    1f6a:	4a05      	ldr	r2, [pc, #20]	; (1f80 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1f6c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1f6e:	6813      	ldr	r3, [r2, #0]
    1f70:	3301      	adds	r3, #1
    1f72:	6013      	str	r3, [r2, #0]
    1f74:	4770      	bx	lr
    1f76:	bf00      	nop
    1f78:	e0001004 	.word	0xe0001004
    1f7c:	20001f40 	.word	0x20001f40
    1f80:	20001f44 	.word	0x20001f44

00001f84 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    1f84:	6802      	ldr	r2, [r0, #0]
    1f86:	b30a      	cbz	r2, 1fcc <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    1f88:	4b11      	ldr	r3, [pc, #68]	; (1fd0 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1f8a:	4912      	ldr	r1, [pc, #72]	; (1fd4 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    1f8c:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    1f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    1f90:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1f92:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    1f94:	2400      	movs	r4, #0
    1f96:	f8df e044 	ldr.w	lr, [pc, #68]	; 1fdc <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    1f9a:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1f9c:	780e      	ldrb	r6, [r1, #0]
    1f9e:	784d      	ldrb	r5, [r1, #1]
    1fa0:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    1fa2:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    1fa4:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    1fa8:	bf28      	it	cs
    1faa:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    1fac:	788a      	ldrb	r2, [r1, #2]
    1fae:	78c9      	ldrb	r1, [r1, #3]
    1fb0:	42ae      	cmp	r6, r5
    1fb2:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    1fb4:	4f08      	ldr	r7, [pc, #32]	; (1fd8 <IntervalTimer::end()+0x54>)
    1fb6:	bf28      	it	cs
    1fb8:	462b      	movcs	r3, r5
    1fba:	4293      	cmp	r3, r2
    1fbc:	bf28      	it	cs
    1fbe:	4613      	movcs	r3, r2
    1fc0:	428b      	cmp	r3, r1
    1fc2:	bf28      	it	cs
    1fc4:	460b      	movcs	r3, r1
    1fc6:	703b      	strb	r3, [r7, #0]
		channel = 0;
    1fc8:	6004      	str	r4, [r0, #0]
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fcc:	4770      	bx	lr
    1fce:	bf00      	nop
    1fd0:	bff7bf00 	.word	0xbff7bf00
    1fd4:	20000e4c 	.word	0x20000e4c
    1fd8:	e000e47a 	.word	0xe000e47a
    1fdc:	20001ac0 	.word	0x20001ac0

00001fe0 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    1fe0:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1fe2:	4c06      	ldr	r4, [pc, #24]	; (1ffc <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    1fe4:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1fe6:	6803      	ldr	r3, [r0, #0]
    1fe8:	2202      	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1fea:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1fec:	a901      	add	r1, sp, #4
    1fee:	685b      	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1ff0:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1ff4:	4798      	blx	r3
}
    1ff6:	b002      	add	sp, #8
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	bf00      	nop
    1ffc:	20000370 	.word	0x20000370

00002000 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    2000:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    2002:	b510      	push	{r4, lr}
    2004:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    2006:	685b      	ldr	r3, [r3, #4]
    2008:	4798      	blx	r3
	return len;
}
    200a:	4620      	mov	r0, r4
    200c:	bd10      	pop	{r4, pc}
    200e:	bf00      	nop

00002010 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    2010:	b40e      	push	{r1, r2, r3}
    2012:	b500      	push	{lr}
    2014:	b082      	sub	sp, #8
    2016:	ab03      	add	r3, sp, #12
    2018:	f853 1b04 	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    201c:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    201e:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    2020:	f001 fa62 	bl	34e8 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    2024:	b002      	add	sp, #8
    2026:	f85d eb04 	ldr.w	lr, [sp], #4
    202a:	b003      	add	sp, #12
    202c:	4770      	bx	lr
    202e:	bf00      	nop

00002030 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2030:	b5f0      	push	{r4, r5, r6, r7, lr}
    2032:	4606      	mov	r6, r0
    2034:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2036:	2a00      	cmp	r2, #0
    2038:	d033      	beq.n	20a2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    203a:	2a01      	cmp	r2, #1
    203c:	bf08      	it	eq
    203e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    2040:	b351      	cbz	r1, 2098 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2042:	2521      	movs	r5, #33	; 0x21
    2044:	e000      	b.n	2048 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2046:	b2fd      	uxtb	r5, r7
    2048:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    204a:	fbb1 f4f2 	udiv	r4, r1, r2
    204e:	fb02 1114 	mls	r1, r2, r4, r1
    2052:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2054:	2909      	cmp	r1, #9
    2056:	f100 0137 	add.w	r1, r0, #55	; 0x37
    205a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    205e:	bf88      	it	hi
    2060:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    2062:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2064:	ac0a      	add	r4, sp, #40	; 0x28
    2066:	bf98      	it	ls
    2068:	b2c0      	uxtbls	r0, r0
    206a:	442c      	add	r4, r5
    206c:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    2070:	2900      	cmp	r1, #0
    2072:	d1e8      	bne.n	2046 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2074:	b133      	cbz	r3, 2084 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2076:	3d01      	subs	r5, #1
		buf[i] = '-';
    2078:	ab0a      	add	r3, sp, #40	; 0x28
    207a:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    207c:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    207e:	442b      	add	r3, r5
    2080:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2084:	6833      	ldr	r3, [r6, #0]
    2086:	a901      	add	r1, sp, #4
    2088:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    208c:	4630      	mov	r0, r6
    208e:	4429      	add	r1, r5
    2090:	685b      	ldr	r3, [r3, #4]
    2092:	4798      	blx	r3
}
    2094:	b00b      	add	sp, #44	; 0x2c
    2096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2098:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    209a:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    209c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    20a0:	e7e8      	b.n	2074 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    20a2:	6803      	ldr	r3, [r0, #0]
    20a4:	b2c9      	uxtb	r1, r1
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    20aa:	b00b      	add	sp, #44	; 0x2c
    20ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ae:	bf00      	nop

000020b0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    20b0:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    20b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    20b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    20ba:	4605      	mov	r5, r0
    20bc:	ed2d 8b02 	vpush	{d8}
    20c0:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    20c2:	f180 8091 	bvs.w	21e8 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    20c6:	eeb0 7bc0 	vabs.f64	d7, d0
    20ca:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 21f8 <Print::printFloat(double, unsigned char)+0x148>
    20ce:	eeb4 7b46 	vcmp.f64	d7, d6
    20d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20d6:	dd0a      	ble.n	20ee <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    20d8:	6803      	ldr	r3, [r0, #0]
    20da:	2203      	movs	r2, #3
    20dc:	494e      	ldr	r1, [pc, #312]	; (2218 <Print::printFloat(double, unsigned char)+0x168>)
    20de:	685b      	ldr	r3, [r3, #4]
    20e0:	4798      	blx	r3
    20e2:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    20e4:	4630      	mov	r0, r6
    20e6:	b006      	add	sp, #24
    20e8:	ecbd 8b02 	vpop	{d8}
    20ec:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    20ee:	ed9f 7b44 	vldr	d7, [pc, #272]	; 2200 <Print::printFloat(double, unsigned char)+0x150>
    20f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    20f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20fa:	dc58      	bgt.n	21ae <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    20fc:	ed9f 7b42 	vldr	d7, [pc, #264]	; 2208 <Print::printFloat(double, unsigned char)+0x158>
    2100:	eeb4 0bc7 	vcmpe.f64	d0, d7
    2104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2108:	d451      	bmi.n	21ae <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    210a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    210e:	460c      	mov	r4, r1
    2110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2114:	d456      	bmi.n	21c4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    2116:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    2118:	2c00      	cmp	r4, #0
    211a:	d057      	beq.n	21cc <Print::printFloat(double, unsigned char)+0x11c>
    211c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    2120:	2200      	movs	r2, #0
		rounding *= 0.1;
    2122:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2210 <Print::printFloat(double, unsigned char)+0x160>
    2126:	3201      	adds	r2, #1
    2128:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    212c:	b2d1      	uxtb	r1, r2
    212e:	428c      	cmp	r4, r1
    2130:	d8f9      	bhi.n	2126 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    2132:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2136:	220a      	movs	r2, #10
    2138:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    213a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    213e:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    2142:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    2146:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    214a:	f7ff ff71 	bl	2030 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    214e:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2150:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    2154:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2158:	f04f 032e 	mov.w	r3, #46	; 0x2e
    215c:	bf28      	it	cs
    215e:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2160:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2162:	f88d 3008 	strb.w	r3, [sp, #8]
    2166:	4414      	add	r4, r2
    2168:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    216a:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    216e:	1c53      	adds	r3, r2, #1
    2170:	a906      	add	r1, sp, #24
    2172:	4411      	add	r1, r2
    2174:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2176:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    2178:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    217c:	edcd 6a01 	vstr	s13, [sp, #4]
    2180:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    2184:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2188:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    218c:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2190:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    2194:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2198:	d1e7      	bne.n	216a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    219a:	682b      	ldr	r3, [r5, #0]
    219c:	4628      	mov	r0, r5
    219e:	a902      	add	r1, sp, #8
    21a0:	685b      	ldr	r3, [r3, #4]
    21a2:	4798      	blx	r3
	}
	return count;
}
    21a4:	4630      	mov	r0, r6
    21a6:	b006      	add	sp, #24
    21a8:	ecbd 8b02 	vpop	{d8}
    21ac:	bd70      	pop	{r4, r5, r6, pc}
    21ae:	682b      	ldr	r3, [r5, #0]
    21b0:	2203      	movs	r2, #3
    21b2:	491a      	ldr	r1, [pc, #104]	; (221c <Print::printFloat(double, unsigned char)+0x16c>)
    21b4:	685b      	ldr	r3, [r3, #4]
    21b6:	4798      	blx	r3
    21b8:	4606      	mov	r6, r0
    21ba:	4630      	mov	r0, r6
    21bc:	b006      	add	sp, #24
    21be:	ecbd 8b02 	vpop	{d8}
    21c2:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    21c4:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    21c8:	2301      	movs	r3, #1
    21ca:	e7a5      	b.n	2118 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    21cc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    21d0:	4628      	mov	r0, r5
    21d2:	220a      	movs	r2, #10
    21d4:	ee30 0b07 	vadd.f64	d0, d0, d7
    21d8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    21dc:	ee17 1a90 	vmov	r1, s15
    21e0:	f7ff ff26 	bl	2030 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    21e4:	4606      	mov	r6, r0
    21e6:	e77d      	b.n	20e4 <Print::printFloat(double, unsigned char)+0x34>
    21e8:	6803      	ldr	r3, [r0, #0]
    21ea:	2203      	movs	r2, #3
    21ec:	490c      	ldr	r1, [pc, #48]	; (2220 <Print::printFloat(double, unsigned char)+0x170>)
    21ee:	685b      	ldr	r3, [r3, #4]
    21f0:	4798      	blx	r3
    21f2:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    21f4:	e776      	b.n	20e4 <Print::printFloat(double, unsigned char)+0x34>
    21f6:	bf00      	nop
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	7fefffff 	.word	0x7fefffff
    2200:	e0000000 	.word	0xe0000000
    2204:	41efffff 	.word	0x41efffff
    2208:	e0000000 	.word	0xe0000000
    220c:	c1efffff 	.word	0xc1efffff
    2210:	9999999a 	.word	0x9999999a
    2214:	3fb99999 	.word	0x3fb99999
    2218:	200008f4 	.word	0x200008f4
    221c:	200008f0 	.word	0x200008f0
    2220:	200008ec 	.word	0x200008ec

00002224 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    2224:	b510      	push	{r4, lr}
    2226:	4604      	mov	r4, r0
		end();
    2228:	f7ff feac 	bl	1f84 <IntervalTimer::end()>
	}
    222c:	4620      	mov	r0, r4
    222e:	bd10      	pop	{r4, pc}

00002230 <_GLOBAL__sub_I__Z4tonehtm>:
static uint32_t tone_toggle_count;
static volatile uint32_t *tone_reg;
static uint32_t tone_mask;
static float tone_usec=0.0;
static uint32_t tone_new_count=0;
static IntervalTimer tone_timer;
    2230:	4a02      	ldr	r2, [pc, #8]	; (223c <_GLOBAL__sub_I__Z4tonehtm+0xc>)
    2232:	4903      	ldr	r1, [pc, #12]	; (2240 <_GLOBAL__sub_I__Z4tonehtm+0x10>)
    2234:	4803      	ldr	r0, [pc, #12]	; (2244 <_GLOBAL__sub_I__Z4tonehtm+0x14>)
    2236:	f000 b893 	b.w	2360 <__aeabi_atexit>
    223a:	bf00      	nop
    223c:	20000e28 	.word	0x20000e28
    2240:	00002225 	.word	0x00002225
    2244:	20000e44 	.word	0x20000e44

00002248 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    2248:	4770      	bx	lr
    224a:	bf00      	nop

0000224c <usb_seremu_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
    224c:	f7ff bcee 	b.w	1c2c <usb_seremu_peekchar>

00002250 <usb_seremu_class::read()>:
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
    2250:	f7ff bcb8 	b.w	1bc4 <usb_seremu_getchar>

00002254 <usb_seremu_class::available()>:
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    2254:	f7ff bd0c 	b.w	1c70 <usb_seremu_available>

00002258 <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
    2258:	f7ff be42 	b.w	1ee0 <usb_seremu_flush_output>

0000225c <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
    225c:	f7ff be3e 	b.w	1edc <usb_seremu_write_buffer_free>

00002260 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    2260:	4608      	mov	r0, r1
    2262:	4611      	mov	r1, r2
    2264:	f7ff be2e 	b.w	1ec4 <usb_seremu_write>

00002268 <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
    2268:	4608      	mov	r0, r1
    226a:	f7ff be15 	b.w	1e98 <usb_seremu_putchar>
    226e:	bf00      	nop

00002270 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2274:	4e32      	ldr	r6, [pc, #200]	; (2340 <yield+0xd0>)
    2276:	7833      	ldrb	r3, [r6, #0]
    2278:	b193      	cbz	r3, 22a0 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    227a:	4f32      	ldr	r7, [pc, #200]	; (2344 <yield+0xd4>)
    227c:	783a      	ldrb	r2, [r7, #0]
    227e:	b97a      	cbnz	r2, 22a0 <yield+0x30>
	running = 1;
    2280:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2282:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2284:	703a      	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2286:	d437      	bmi.n	22f8 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2288:	079a      	lsls	r2, r3, #30
    228a:	d419      	bmi.n	22c0 <yield+0x50>

	running = 0;
    228c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    228e:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2290:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2292:	d505      	bpl.n	22a0 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2294:	4b2c      	ldr	r3, [pc, #176]	; (2348 <yield+0xd8>)
    2296:	681a      	ldr	r2, [r3, #0]
    2298:	b112      	cbz	r2, 22a0 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    229a:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    229e:	b10a      	cbz	r2, 22a4 <yield+0x34>
    22a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    22a4:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    22a8:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    22aa:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    22ac:	b11a      	cbz	r2, 22b6 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    22ae:	4c27      	ldr	r4, [pc, #156]	; (234c <yield+0xdc>)
    22b0:	7821      	ldrb	r1, [r4, #0]
    22b2:	2900      	cmp	r1, #0
    22b4:	d02f      	beq.n	2316 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    22b6:	2800      	cmp	r0, #0
    22b8:	d1f2      	bne.n	22a0 <yield+0x30>
    22ba:	b662      	cpsie	i
    22bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    22c0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2358 <yield+0xe8>
    22c4:	f898 2000 	ldrb.w	r2, [r8]
    22c8:	2a00      	cmp	r2, #0
    22ca:	d0df      	beq.n	228c <yield+0x1c>
    22cc:	2400      	movs	r4, #0
    22ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 235c <yield+0xec>
    22d2:	e005      	b.n	22e0 <yield+0x70>
    22d4:	3401      	adds	r4, #1
    22d6:	f898 3000 	ldrb.w	r3, [r8]
    22da:	b2e4      	uxtb	r4, r4
    22dc:	42a3      	cmp	r3, r4
    22de:	d913      	bls.n	2308 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    22e0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    22e4:	682b      	ldr	r3, [r5, #0]
    22e6:	4628      	mov	r0, r5
    22e8:	691b      	ldr	r3, [r3, #16]
    22ea:	4798      	blx	r3
    22ec:	2800      	cmp	r0, #0
    22ee:	d0f1      	beq.n	22d4 <yield+0x64>
    22f0:	696b      	ldr	r3, [r5, #20]
    22f2:	689b      	ldr	r3, [r3, #8]
    22f4:	4798      	blx	r3
    22f6:	e7ed      	b.n	22d4 <yield+0x64>
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    22f8:	f7ff fcba 	bl	1c70 <usb_seremu_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    22fc:	b9d0      	cbnz	r0, 2334 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    22fe:	4b14      	ldr	r3, [pc, #80]	; (2350 <yield+0xe0>)
    2300:	781b      	ldrb	r3, [r3, #0]
    2302:	b91b      	cbnz	r3, 230c <yield+0x9c>
    2304:	7833      	ldrb	r3, [r6, #0]
    2306:	e7bf      	b.n	2288 <yield+0x18>
    2308:	7833      	ldrb	r3, [r6, #0]
    230a:	e7bf      	b.n	228c <yield+0x1c>
    230c:	7833      	ldrb	r3, [r6, #0]
    230e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2312:	7033      	strb	r3, [r6, #0]
    2314:	e7b8      	b.n	2288 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2316:	2601      	movs	r6, #1
		firstYield = first->_next;
    2318:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    231a:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    231c:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    231e:	b165      	cbz	r5, 233a <yield+0xca>
			firstYield->_prev = nullptr;
    2320:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2322:	b900      	cbnz	r0, 2326 <yield+0xb6>
    2324:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2326:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2328:	6893      	ldr	r3, [r2, #8]
    232a:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    232c:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    232e:	4798      	blx	r3
		runningFromYield = false;
    2330:	7025      	strb	r5, [r4, #0]
    2332:	e7b5      	b.n	22a0 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2334:	f7ff ff88 	bl	2248 <serialEvent()>
    2338:	e7e1      	b.n	22fe <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    233a:	4b06      	ldr	r3, [pc, #24]	; (2354 <yield+0xe4>)
    233c:	601d      	str	r5, [r3, #0]
    233e:	e7f0      	b.n	2322 <yield+0xb2>
    2340:	2000143e 	.word	0x2000143e
    2344:	20001f7c 	.word	0x20001f7c
    2348:	20001e84 	.word	0x20001e84
    234c:	20001f7a 	.word	0x20001f7a
    2350:	60001f5a 	.word	0x60001f5a
    2354:	20001e90 	.word	0x20001e90
    2358:	20001f7b 	.word	0x20001f7b
    235c:	20001e94 	.word	0x20001e94

00002360 <__aeabi_atexit>:
    2360:	460b      	mov	r3, r1
    2362:	4601      	mov	r1, r0
    2364:	4618      	mov	r0, r3
    2366:	f000 b9bd 	b.w	26e4 <__cxa_atexit>
    236a:	bf00      	nop

0000236c <__aeabi_uldivmod>:
    236c:	b953      	cbnz	r3, 2384 <__aeabi_uldivmod+0x18>
    236e:	b94a      	cbnz	r2, 2384 <__aeabi_uldivmod+0x18>
    2370:	2900      	cmp	r1, #0
    2372:	bf08      	it	eq
    2374:	2800      	cmpeq	r0, #0
    2376:	bf1c      	itt	ne
    2378:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    237c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2380:	f000 b97e 	b.w	2680 <__aeabi_idiv0>
    2384:	f1ad 0c08 	sub.w	ip, sp, #8
    2388:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    238c:	f000 f806 	bl	239c <__udivmoddi4>
    2390:	f8dd e004 	ldr.w	lr, [sp, #4]
    2394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2398:	b004      	add	sp, #16
    239a:	4770      	bx	lr

0000239c <__udivmoddi4>:
    239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23a0:	468c      	mov	ip, r1
    23a2:	460e      	mov	r6, r1
    23a4:	4604      	mov	r4, r0
    23a6:	9d08      	ldr	r5, [sp, #32]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d150      	bne.n	244e <__udivmoddi4+0xb2>
    23ac:	428a      	cmp	r2, r1
    23ae:	4617      	mov	r7, r2
    23b0:	d96c      	bls.n	248c <__udivmoddi4+0xf0>
    23b2:	fab2 fe82 	clz	lr, r2
    23b6:	f1be 0f00 	cmp.w	lr, #0
    23ba:	d00b      	beq.n	23d4 <__udivmoddi4+0x38>
    23bc:	f1ce 0420 	rsb	r4, lr, #32
    23c0:	fa20 f404 	lsr.w	r4, r0, r4
    23c4:	fa01 f60e 	lsl.w	r6, r1, lr
    23c8:	ea44 0c06 	orr.w	ip, r4, r6
    23cc:	fa02 f70e 	lsl.w	r7, r2, lr
    23d0:	fa00 f40e 	lsl.w	r4, r0, lr
    23d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
    23d8:	0c22      	lsrs	r2, r4, #16
    23da:	fbbc f0f9 	udiv	r0, ip, r9
    23de:	fa1f f887 	uxth.w	r8, r7
    23e2:	fb09 c610 	mls	r6, r9, r0, ip
    23e6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    23ea:	fb00 f308 	mul.w	r3, r0, r8
    23ee:	42b3      	cmp	r3, r6
    23f0:	d909      	bls.n	2406 <__udivmoddi4+0x6a>
    23f2:	19f6      	adds	r6, r6, r7
    23f4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    23f8:	f080 8122 	bcs.w	2640 <__udivmoddi4+0x2a4>
    23fc:	42b3      	cmp	r3, r6
    23fe:	f240 811f 	bls.w	2640 <__udivmoddi4+0x2a4>
    2402:	3802      	subs	r0, #2
    2404:	443e      	add	r6, r7
    2406:	1af6      	subs	r6, r6, r3
    2408:	b2a2      	uxth	r2, r4
    240a:	fbb6 f3f9 	udiv	r3, r6, r9
    240e:	fb09 6613 	mls	r6, r9, r3, r6
    2412:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    2416:	fb03 f808 	mul.w	r8, r3, r8
    241a:	45a0      	cmp	r8, r4
    241c:	d909      	bls.n	2432 <__udivmoddi4+0x96>
    241e:	19e4      	adds	r4, r4, r7
    2420:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2424:	f080 810a 	bcs.w	263c <__udivmoddi4+0x2a0>
    2428:	45a0      	cmp	r8, r4
    242a:	f240 8107 	bls.w	263c <__udivmoddi4+0x2a0>
    242e:	3b02      	subs	r3, #2
    2430:	443c      	add	r4, r7
    2432:	ebc8 0404 	rsb	r4, r8, r4
    2436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    243a:	2100      	movs	r1, #0
    243c:	2d00      	cmp	r5, #0
    243e:	d062      	beq.n	2506 <__udivmoddi4+0x16a>
    2440:	fa24 f40e 	lsr.w	r4, r4, lr
    2444:	2300      	movs	r3, #0
    2446:	602c      	str	r4, [r5, #0]
    2448:	606b      	str	r3, [r5, #4]
    244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    244e:	428b      	cmp	r3, r1
    2450:	d907      	bls.n	2462 <__udivmoddi4+0xc6>
    2452:	2d00      	cmp	r5, #0
    2454:	d055      	beq.n	2502 <__udivmoddi4+0x166>
    2456:	2100      	movs	r1, #0
    2458:	e885 0041 	stmia.w	r5, {r0, r6}
    245c:	4608      	mov	r0, r1
    245e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2462:	fab3 f183 	clz	r1, r3
    2466:	2900      	cmp	r1, #0
    2468:	f040 8090 	bne.w	258c <__udivmoddi4+0x1f0>
    246c:	42b3      	cmp	r3, r6
    246e:	d302      	bcc.n	2476 <__udivmoddi4+0xda>
    2470:	4282      	cmp	r2, r0
    2472:	f200 80f8 	bhi.w	2666 <__udivmoddi4+0x2ca>
    2476:	1a84      	subs	r4, r0, r2
    2478:	eb66 0603 	sbc.w	r6, r6, r3
    247c:	2001      	movs	r0, #1
    247e:	46b4      	mov	ip, r6
    2480:	2d00      	cmp	r5, #0
    2482:	d040      	beq.n	2506 <__udivmoddi4+0x16a>
    2484:	e885 1010 	stmia.w	r5, {r4, ip}
    2488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    248c:	b912      	cbnz	r2, 2494 <__udivmoddi4+0xf8>
    248e:	2701      	movs	r7, #1
    2490:	fbb7 f7f2 	udiv	r7, r7, r2
    2494:	fab7 fe87 	clz	lr, r7
    2498:	f1be 0f00 	cmp.w	lr, #0
    249c:	d135      	bne.n	250a <__udivmoddi4+0x16e>
    249e:	1bf3      	subs	r3, r6, r7
    24a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
    24a4:	fa1f fc87 	uxth.w	ip, r7
    24a8:	2101      	movs	r1, #1
    24aa:	fbb3 f0f8 	udiv	r0, r3, r8
    24ae:	0c22      	lsrs	r2, r4, #16
    24b0:	fb08 3610 	mls	r6, r8, r0, r3
    24b4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    24b8:	fb0c f300 	mul.w	r3, ip, r0
    24bc:	42b3      	cmp	r3, r6
    24be:	d907      	bls.n	24d0 <__udivmoddi4+0x134>
    24c0:	19f6      	adds	r6, r6, r7
    24c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    24c6:	d202      	bcs.n	24ce <__udivmoddi4+0x132>
    24c8:	42b3      	cmp	r3, r6
    24ca:	f200 80ce 	bhi.w	266a <__udivmoddi4+0x2ce>
    24ce:	4610      	mov	r0, r2
    24d0:	1af6      	subs	r6, r6, r3
    24d2:	b2a2      	uxth	r2, r4
    24d4:	fbb6 f3f8 	udiv	r3, r6, r8
    24d8:	fb08 6613 	mls	r6, r8, r3, r6
    24dc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    24e0:	fb0c fc03 	mul.w	ip, ip, r3
    24e4:	45a4      	cmp	ip, r4
    24e6:	d907      	bls.n	24f8 <__udivmoddi4+0x15c>
    24e8:	19e4      	adds	r4, r4, r7
    24ea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    24ee:	d202      	bcs.n	24f6 <__udivmoddi4+0x15a>
    24f0:	45a4      	cmp	ip, r4
    24f2:	f200 80b5 	bhi.w	2660 <__udivmoddi4+0x2c4>
    24f6:	4613      	mov	r3, r2
    24f8:	ebcc 0404 	rsb	r4, ip, r4
    24fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2500:	e79c      	b.n	243c <__udivmoddi4+0xa0>
    2502:	4629      	mov	r1, r5
    2504:	4628      	mov	r0, r5
    2506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    250a:	f1ce 0120 	rsb	r1, lr, #32
    250e:	fa06 f30e 	lsl.w	r3, r6, lr
    2512:	fa07 f70e 	lsl.w	r7, r7, lr
    2516:	fa20 f901 	lsr.w	r9, r0, r1
    251a:	ea4f 4817 	mov.w	r8, r7, lsr #16
    251e:	40ce      	lsrs	r6, r1
    2520:	ea49 0903 	orr.w	r9, r9, r3
    2524:	fbb6 faf8 	udiv	sl, r6, r8
    2528:	ea4f 4419 	mov.w	r4, r9, lsr #16
    252c:	fb08 661a 	mls	r6, r8, sl, r6
    2530:	fa1f fc87 	uxth.w	ip, r7
    2534:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    2538:	fb0a f20c 	mul.w	r2, sl, ip
    253c:	429a      	cmp	r2, r3
    253e:	fa00 f40e 	lsl.w	r4, r0, lr
    2542:	d90a      	bls.n	255a <__udivmoddi4+0x1be>
    2544:	19db      	adds	r3, r3, r7
    2546:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    254a:	f080 8087 	bcs.w	265c <__udivmoddi4+0x2c0>
    254e:	429a      	cmp	r2, r3
    2550:	f240 8084 	bls.w	265c <__udivmoddi4+0x2c0>
    2554:	f1aa 0a02 	sub.w	sl, sl, #2
    2558:	443b      	add	r3, r7
    255a:	1a9b      	subs	r3, r3, r2
    255c:	fa1f f989 	uxth.w	r9, r9
    2560:	fbb3 f1f8 	udiv	r1, r3, r8
    2564:	fb08 3311 	mls	r3, r8, r1, r3
    2568:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    256c:	fb01 f60c 	mul.w	r6, r1, ip
    2570:	429e      	cmp	r6, r3
    2572:	d907      	bls.n	2584 <__udivmoddi4+0x1e8>
    2574:	19db      	adds	r3, r3, r7
    2576:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    257a:	d26b      	bcs.n	2654 <__udivmoddi4+0x2b8>
    257c:	429e      	cmp	r6, r3
    257e:	d969      	bls.n	2654 <__udivmoddi4+0x2b8>
    2580:	3902      	subs	r1, #2
    2582:	443b      	add	r3, r7
    2584:	1b9b      	subs	r3, r3, r6
    2586:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    258a:	e78e      	b.n	24aa <__udivmoddi4+0x10e>
    258c:	f1c1 0e20 	rsb	lr, r1, #32
    2590:	fa22 f40e 	lsr.w	r4, r2, lr
    2594:	408b      	lsls	r3, r1
    2596:	4323      	orrs	r3, r4
    2598:	fa20 f70e 	lsr.w	r7, r0, lr
    259c:	fa06 f401 	lsl.w	r4, r6, r1
    25a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    25a4:	fa26 f60e 	lsr.w	r6, r6, lr
    25a8:	433c      	orrs	r4, r7
    25aa:	fbb6 f9fc 	udiv	r9, r6, ip
    25ae:	0c27      	lsrs	r7, r4, #16
    25b0:	fb0c 6619 	mls	r6, ip, r9, r6
    25b4:	fa1f f883 	uxth.w	r8, r3
    25b8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    25bc:	fb09 f708 	mul.w	r7, r9, r8
    25c0:	42b7      	cmp	r7, r6
    25c2:	fa02 f201 	lsl.w	r2, r2, r1
    25c6:	fa00 fa01 	lsl.w	sl, r0, r1
    25ca:	d908      	bls.n	25de <__udivmoddi4+0x242>
    25cc:	18f6      	adds	r6, r6, r3
    25ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    25d2:	d241      	bcs.n	2658 <__udivmoddi4+0x2bc>
    25d4:	42b7      	cmp	r7, r6
    25d6:	d93f      	bls.n	2658 <__udivmoddi4+0x2bc>
    25d8:	f1a9 0902 	sub.w	r9, r9, #2
    25dc:	441e      	add	r6, r3
    25de:	1bf6      	subs	r6, r6, r7
    25e0:	b2a0      	uxth	r0, r4
    25e2:	fbb6 f4fc 	udiv	r4, r6, ip
    25e6:	fb0c 6614 	mls	r6, ip, r4, r6
    25ea:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    25ee:	fb04 f808 	mul.w	r8, r4, r8
    25f2:	45b8      	cmp	r8, r7
    25f4:	d907      	bls.n	2606 <__udivmoddi4+0x26a>
    25f6:	18ff      	adds	r7, r7, r3
    25f8:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    25fc:	d228      	bcs.n	2650 <__udivmoddi4+0x2b4>
    25fe:	45b8      	cmp	r8, r7
    2600:	d926      	bls.n	2650 <__udivmoddi4+0x2b4>
    2602:	3c02      	subs	r4, #2
    2604:	441f      	add	r7, r3
    2606:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    260a:	ebc8 0707 	rsb	r7, r8, r7
    260e:	fba0 8902 	umull	r8, r9, r0, r2
    2612:	454f      	cmp	r7, r9
    2614:	4644      	mov	r4, r8
    2616:	464e      	mov	r6, r9
    2618:	d314      	bcc.n	2644 <__udivmoddi4+0x2a8>
    261a:	d029      	beq.n	2670 <__udivmoddi4+0x2d4>
    261c:	b365      	cbz	r5, 2678 <__udivmoddi4+0x2dc>
    261e:	ebba 0304 	subs.w	r3, sl, r4
    2622:	eb67 0706 	sbc.w	r7, r7, r6
    2626:	fa07 fe0e 	lsl.w	lr, r7, lr
    262a:	40cb      	lsrs	r3, r1
    262c:	40cf      	lsrs	r7, r1
    262e:	ea4e 0303 	orr.w	r3, lr, r3
    2632:	e885 0088 	stmia.w	r5, {r3, r7}
    2636:	2100      	movs	r1, #0
    2638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    263c:	4613      	mov	r3, r2
    263e:	e6f8      	b.n	2432 <__udivmoddi4+0x96>
    2640:	4610      	mov	r0, r2
    2642:	e6e0      	b.n	2406 <__udivmoddi4+0x6a>
    2644:	ebb8 0402 	subs.w	r4, r8, r2
    2648:	eb69 0603 	sbc.w	r6, r9, r3
    264c:	3801      	subs	r0, #1
    264e:	e7e5      	b.n	261c <__udivmoddi4+0x280>
    2650:	4604      	mov	r4, r0
    2652:	e7d8      	b.n	2606 <__udivmoddi4+0x26a>
    2654:	4611      	mov	r1, r2
    2656:	e795      	b.n	2584 <__udivmoddi4+0x1e8>
    2658:	4681      	mov	r9, r0
    265a:	e7c0      	b.n	25de <__udivmoddi4+0x242>
    265c:	468a      	mov	sl, r1
    265e:	e77c      	b.n	255a <__udivmoddi4+0x1be>
    2660:	3b02      	subs	r3, #2
    2662:	443c      	add	r4, r7
    2664:	e748      	b.n	24f8 <__udivmoddi4+0x15c>
    2666:	4608      	mov	r0, r1
    2668:	e70a      	b.n	2480 <__udivmoddi4+0xe4>
    266a:	3802      	subs	r0, #2
    266c:	443e      	add	r6, r7
    266e:	e72f      	b.n	24d0 <__udivmoddi4+0x134>
    2670:	45c2      	cmp	sl, r8
    2672:	d3e7      	bcc.n	2644 <__udivmoddi4+0x2a8>
    2674:	463e      	mov	r6, r7
    2676:	e7d1      	b.n	261c <__udivmoddi4+0x280>
    2678:	4629      	mov	r1, r5
    267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    267e:	bf00      	nop

00002680 <__aeabi_idiv0>:
    2680:	4770      	bx	lr
    2682:	bf00      	nop

00002684 <_calloc_r>:
    2684:	b510      	push	{r4, lr}
    2686:	fb02 f101 	mul.w	r1, r2, r1
    268a:	f000 f867 	bl	275c <_malloc_r>
    268e:	4604      	mov	r4, r0
    2690:	b1d8      	cbz	r0, 26ca <_calloc_r+0x46>
    2692:	f850 2c04 	ldr.w	r2, [r0, #-4]
    2696:	f022 0203 	bic.w	r2, r2, #3
    269a:	3a04      	subs	r2, #4
    269c:	2a24      	cmp	r2, #36	; 0x24
    269e:	d818      	bhi.n	26d2 <_calloc_r+0x4e>
    26a0:	2a13      	cmp	r2, #19
    26a2:	d914      	bls.n	26ce <_calloc_r+0x4a>
    26a4:	2300      	movs	r3, #0
    26a6:	2a1b      	cmp	r2, #27
    26a8:	6003      	str	r3, [r0, #0]
    26aa:	6043      	str	r3, [r0, #4]
    26ac:	d916      	bls.n	26dc <_calloc_r+0x58>
    26ae:	2a24      	cmp	r2, #36	; 0x24
    26b0:	6083      	str	r3, [r0, #8]
    26b2:	60c3      	str	r3, [r0, #12]
    26b4:	bf11      	iteee	ne
    26b6:	f100 0210 	addne.w	r2, r0, #16
    26ba:	6103      	streq	r3, [r0, #16]
    26bc:	6143      	streq	r3, [r0, #20]
    26be:	f100 0218 	addeq.w	r2, r0, #24
    26c2:	2300      	movs	r3, #0
    26c4:	6013      	str	r3, [r2, #0]
    26c6:	6053      	str	r3, [r2, #4]
    26c8:	6093      	str	r3, [r2, #8]
    26ca:	4620      	mov	r0, r4
    26cc:	bd10      	pop	{r4, pc}
    26ce:	4602      	mov	r2, r0
    26d0:	e7f7      	b.n	26c2 <_calloc_r+0x3e>
    26d2:	2100      	movs	r1, #0
    26d4:	f000 fc0e 	bl	2ef4 <memset>
    26d8:	4620      	mov	r0, r4
    26da:	bd10      	pop	{r4, pc}
    26dc:	f100 0208 	add.w	r2, r0, #8
    26e0:	e7ef      	b.n	26c2 <_calloc_r+0x3e>
    26e2:	bf00      	nop

000026e4 <__cxa_atexit>:
    26e4:	4613      	mov	r3, r2
    26e6:	460a      	mov	r2, r1
    26e8:	4601      	mov	r1, r0
    26ea:	2002      	movs	r0, #2
    26ec:	f000 bf2c 	b.w	3548 <__register_exitproc>

000026f0 <__errno>:
    26f0:	4b01      	ldr	r3, [pc, #4]	; (26f8 <__errno+0x8>)
    26f2:	6818      	ldr	r0, [r3, #0]
    26f4:	4770      	bx	lr
    26f6:	bf00      	nop
    26f8:	200013d0 	.word	0x200013d0

000026fc <__libc_init_array>:
    26fc:	b570      	push	{r4, r5, r6, lr}
    26fe:	4e0f      	ldr	r6, [pc, #60]	; (273c <__libc_init_array+0x40>)
    2700:	4d0f      	ldr	r5, [pc, #60]	; (2740 <__libc_init_array+0x44>)
    2702:	1b76      	subs	r6, r6, r5
    2704:	10b6      	asrs	r6, r6, #2
    2706:	bf18      	it	ne
    2708:	2400      	movne	r4, #0
    270a:	d005      	beq.n	2718 <__libc_init_array+0x1c>
    270c:	3401      	adds	r4, #1
    270e:	f855 3b04 	ldr.w	r3, [r5], #4
    2712:	4798      	blx	r3
    2714:	42a6      	cmp	r6, r4
    2716:	d1f9      	bne.n	270c <__libc_init_array+0x10>
    2718:	4e0a      	ldr	r6, [pc, #40]	; (2744 <__libc_init_array+0x48>)
    271a:	4d0b      	ldr	r5, [pc, #44]	; (2748 <__libc_init_array+0x4c>)
    271c:	1b76      	subs	r6, r6, r5
    271e:	f003 fe57 	bl	63d0 <___init_veneer>
    2722:	10b6      	asrs	r6, r6, #2
    2724:	bf18      	it	ne
    2726:	2400      	movne	r4, #0
    2728:	d006      	beq.n	2738 <__libc_init_array+0x3c>
    272a:	3401      	adds	r4, #1
    272c:	f855 3b04 	ldr.w	r3, [r5], #4
    2730:	4798      	blx	r3
    2732:	42a6      	cmp	r6, r4
    2734:	d1f9      	bne.n	272a <__libc_init_array+0x2e>
    2736:	bd70      	pop	{r4, r5, r6, pc}
    2738:	bd70      	pop	{r4, r5, r6, pc}
    273a:	bf00      	nop
    273c:	60001e68 	.word	0x60001e68
    2740:	60001e68 	.word	0x60001e68
    2744:	60001e74 	.word	0x60001e74
    2748:	60001e68 	.word	0x60001e68

0000274c <malloc>:
    274c:	4b02      	ldr	r3, [pc, #8]	; (2758 <malloc+0xc>)
    274e:	4601      	mov	r1, r0
    2750:	6818      	ldr	r0, [r3, #0]
    2752:	f000 b803 	b.w	275c <_malloc_r>
    2756:	bf00      	nop
    2758:	200013d0 	.word	0x200013d0

0000275c <_malloc_r>:
    275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2760:	f101 050b 	add.w	r5, r1, #11
    2764:	2d16      	cmp	r5, #22
    2766:	b083      	sub	sp, #12
    2768:	4606      	mov	r6, r0
    276a:	f240 809f 	bls.w	28ac <_malloc_r+0x150>
    276e:	f035 0507 	bics.w	r5, r5, #7
    2772:	f100 80bf 	bmi.w	28f4 <_malloc_r+0x198>
    2776:	42a9      	cmp	r1, r5
    2778:	f200 80bc 	bhi.w	28f4 <_malloc_r+0x198>
    277c:	f000 fc08 	bl	2f90 <__malloc_lock>
    2780:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    2784:	f0c0 829c 	bcc.w	2cc0 <_malloc_r+0x564>
    2788:	0a6b      	lsrs	r3, r5, #9
    278a:	f000 80ba 	beq.w	2902 <_malloc_r+0x1a6>
    278e:	2b04      	cmp	r3, #4
    2790:	f200 8183 	bhi.w	2a9a <_malloc_r+0x33e>
    2794:	09a8      	lsrs	r0, r5, #6
    2796:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    279a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    279e:	3038      	adds	r0, #56	; 0x38
    27a0:	4fc4      	ldr	r7, [pc, #784]	; (2ab4 <_malloc_r+0x358>)
    27a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    27a6:	f1a3 0108 	sub.w	r1, r3, #8
    27aa:	685c      	ldr	r4, [r3, #4]
    27ac:	42a1      	cmp	r1, r4
    27ae:	d107      	bne.n	27c0 <_malloc_r+0x64>
    27b0:	e0ac      	b.n	290c <_malloc_r+0x1b0>
    27b2:	2a00      	cmp	r2, #0
    27b4:	f280 80ac 	bge.w	2910 <_malloc_r+0x1b4>
    27b8:	68e4      	ldr	r4, [r4, #12]
    27ba:	42a1      	cmp	r1, r4
    27bc:	f000 80a6 	beq.w	290c <_malloc_r+0x1b0>
    27c0:	6863      	ldr	r3, [r4, #4]
    27c2:	f023 0303 	bic.w	r3, r3, #3
    27c6:	1b5a      	subs	r2, r3, r5
    27c8:	2a0f      	cmp	r2, #15
    27ca:	ddf2      	ble.n	27b2 <_malloc_r+0x56>
    27cc:	49b9      	ldr	r1, [pc, #740]	; (2ab4 <_malloc_r+0x358>)
    27ce:	693c      	ldr	r4, [r7, #16]
    27d0:	f101 0e08 	add.w	lr, r1, #8
    27d4:	4574      	cmp	r4, lr
    27d6:	f000 81b3 	beq.w	2b40 <_malloc_r+0x3e4>
    27da:	6863      	ldr	r3, [r4, #4]
    27dc:	f023 0303 	bic.w	r3, r3, #3
    27e0:	1b5a      	subs	r2, r3, r5
    27e2:	2a0f      	cmp	r2, #15
    27e4:	f300 8199 	bgt.w	2b1a <_malloc_r+0x3be>
    27e8:	2a00      	cmp	r2, #0
    27ea:	f8c1 e014 	str.w	lr, [r1, #20]
    27ee:	f8c1 e010 	str.w	lr, [r1, #16]
    27f2:	f280 809e 	bge.w	2932 <_malloc_r+0x1d6>
    27f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27fa:	f080 8167 	bcs.w	2acc <_malloc_r+0x370>
    27fe:	08db      	lsrs	r3, r3, #3
    2800:	f103 0c01 	add.w	ip, r3, #1
    2804:	2201      	movs	r2, #1
    2806:	109b      	asrs	r3, r3, #2
    2808:	fa02 f303 	lsl.w	r3, r2, r3
    280c:	684a      	ldr	r2, [r1, #4]
    280e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    2812:	f8c4 8008 	str.w	r8, [r4, #8]
    2816:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    281a:	431a      	orrs	r2, r3
    281c:	f1a9 0308 	sub.w	r3, r9, #8
    2820:	60e3      	str	r3, [r4, #12]
    2822:	604a      	str	r2, [r1, #4]
    2824:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2828:	f8c8 400c 	str.w	r4, [r8, #12]
    282c:	1083      	asrs	r3, r0, #2
    282e:	2401      	movs	r4, #1
    2830:	409c      	lsls	r4, r3
    2832:	4294      	cmp	r4, r2
    2834:	f200 808a 	bhi.w	294c <_malloc_r+0x1f0>
    2838:	4214      	tst	r4, r2
    283a:	d106      	bne.n	284a <_malloc_r+0xee>
    283c:	f020 0003 	bic.w	r0, r0, #3
    2840:	0064      	lsls	r4, r4, #1
    2842:	4214      	tst	r4, r2
    2844:	f100 0004 	add.w	r0, r0, #4
    2848:	d0fa      	beq.n	2840 <_malloc_r+0xe4>
    284a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    284e:	46cc      	mov	ip, r9
    2850:	4680      	mov	r8, r0
    2852:	f8dc 100c 	ldr.w	r1, [ip, #12]
    2856:	458c      	cmp	ip, r1
    2858:	d107      	bne.n	286a <_malloc_r+0x10e>
    285a:	e173      	b.n	2b44 <_malloc_r+0x3e8>
    285c:	2a00      	cmp	r2, #0
    285e:	f280 8181 	bge.w	2b64 <_malloc_r+0x408>
    2862:	68c9      	ldr	r1, [r1, #12]
    2864:	458c      	cmp	ip, r1
    2866:	f000 816d 	beq.w	2b44 <_malloc_r+0x3e8>
    286a:	684b      	ldr	r3, [r1, #4]
    286c:	f023 0303 	bic.w	r3, r3, #3
    2870:	1b5a      	subs	r2, r3, r5
    2872:	2a0f      	cmp	r2, #15
    2874:	ddf2      	ble.n	285c <_malloc_r+0x100>
    2876:	460c      	mov	r4, r1
    2878:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    287c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    2880:	194b      	adds	r3, r1, r5
    2882:	f045 0501 	orr.w	r5, r5, #1
    2886:	604d      	str	r5, [r1, #4]
    2888:	f042 0101 	orr.w	r1, r2, #1
    288c:	f8c8 c00c 	str.w	ip, [r8, #12]
    2890:	4630      	mov	r0, r6
    2892:	f8cc 8008 	str.w	r8, [ip, #8]
    2896:	617b      	str	r3, [r7, #20]
    2898:	613b      	str	r3, [r7, #16]
    289a:	f8c3 e00c 	str.w	lr, [r3, #12]
    289e:	f8c3 e008 	str.w	lr, [r3, #8]
    28a2:	6059      	str	r1, [r3, #4]
    28a4:	509a      	str	r2, [r3, r2]
    28a6:	f000 fb75 	bl	2f94 <__malloc_unlock>
    28aa:	e01f      	b.n	28ec <_malloc_r+0x190>
    28ac:	2910      	cmp	r1, #16
    28ae:	d821      	bhi.n	28f4 <_malloc_r+0x198>
    28b0:	f000 fb6e 	bl	2f90 <__malloc_lock>
    28b4:	2510      	movs	r5, #16
    28b6:	2306      	movs	r3, #6
    28b8:	2002      	movs	r0, #2
    28ba:	4f7e      	ldr	r7, [pc, #504]	; (2ab4 <_malloc_r+0x358>)
    28bc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    28c0:	f1a3 0208 	sub.w	r2, r3, #8
    28c4:	685c      	ldr	r4, [r3, #4]
    28c6:	4294      	cmp	r4, r2
    28c8:	f000 8145 	beq.w	2b56 <_malloc_r+0x3fa>
    28cc:	6863      	ldr	r3, [r4, #4]
    28ce:	68e1      	ldr	r1, [r4, #12]
    28d0:	68a5      	ldr	r5, [r4, #8]
    28d2:	f023 0303 	bic.w	r3, r3, #3
    28d6:	4423      	add	r3, r4
    28d8:	4630      	mov	r0, r6
    28da:	685a      	ldr	r2, [r3, #4]
    28dc:	60e9      	str	r1, [r5, #12]
    28de:	f042 0201 	orr.w	r2, r2, #1
    28e2:	608d      	str	r5, [r1, #8]
    28e4:	605a      	str	r2, [r3, #4]
    28e6:	f000 fb55 	bl	2f94 <__malloc_unlock>
    28ea:	3408      	adds	r4, #8
    28ec:	4620      	mov	r0, r4
    28ee:	b003      	add	sp, #12
    28f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28f4:	2400      	movs	r4, #0
    28f6:	230c      	movs	r3, #12
    28f8:	4620      	mov	r0, r4
    28fa:	6033      	str	r3, [r6, #0]
    28fc:	b003      	add	sp, #12
    28fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2902:	2380      	movs	r3, #128	; 0x80
    2904:	f04f 0e40 	mov.w	lr, #64	; 0x40
    2908:	203f      	movs	r0, #63	; 0x3f
    290a:	e749      	b.n	27a0 <_malloc_r+0x44>
    290c:	4670      	mov	r0, lr
    290e:	e75d      	b.n	27cc <_malloc_r+0x70>
    2910:	4423      	add	r3, r4
    2912:	68e1      	ldr	r1, [r4, #12]
    2914:	685a      	ldr	r2, [r3, #4]
    2916:	68a5      	ldr	r5, [r4, #8]
    2918:	f042 0201 	orr.w	r2, r2, #1
    291c:	60e9      	str	r1, [r5, #12]
    291e:	4630      	mov	r0, r6
    2920:	608d      	str	r5, [r1, #8]
    2922:	605a      	str	r2, [r3, #4]
    2924:	f000 fb36 	bl	2f94 <__malloc_unlock>
    2928:	3408      	adds	r4, #8
    292a:	4620      	mov	r0, r4
    292c:	b003      	add	sp, #12
    292e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2932:	4423      	add	r3, r4
    2934:	4630      	mov	r0, r6
    2936:	685a      	ldr	r2, [r3, #4]
    2938:	f042 0201 	orr.w	r2, r2, #1
    293c:	605a      	str	r2, [r3, #4]
    293e:	f000 fb29 	bl	2f94 <__malloc_unlock>
    2942:	3408      	adds	r4, #8
    2944:	4620      	mov	r0, r4
    2946:	b003      	add	sp, #12
    2948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    294c:	68bc      	ldr	r4, [r7, #8]
    294e:	6863      	ldr	r3, [r4, #4]
    2950:	f023 0803 	bic.w	r8, r3, #3
    2954:	45a8      	cmp	r8, r5
    2956:	d304      	bcc.n	2962 <_malloc_r+0x206>
    2958:	ebc5 0308 	rsb	r3, r5, r8
    295c:	2b0f      	cmp	r3, #15
    295e:	f300 808c 	bgt.w	2a7a <_malloc_r+0x31e>
    2962:	4b55      	ldr	r3, [pc, #340]	; (2ab8 <_malloc_r+0x35c>)
    2964:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2ac8 <_malloc_r+0x36c>
    2968:	681a      	ldr	r2, [r3, #0]
    296a:	f8d9 3000 	ldr.w	r3, [r9]
    296e:	3301      	adds	r3, #1
    2970:	442a      	add	r2, r5
    2972:	eb04 0a08 	add.w	sl, r4, r8
    2976:	f000 8160 	beq.w	2c3a <_malloc_r+0x4de>
    297a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    297e:	320f      	adds	r2, #15
    2980:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    2984:	f022 020f 	bic.w	r2, r2, #15
    2988:	4611      	mov	r1, r2
    298a:	4630      	mov	r0, r6
    298c:	9201      	str	r2, [sp, #4]
    298e:	f000 fcf3 	bl	3378 <_sbrk_r>
    2992:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2996:	4683      	mov	fp, r0
    2998:	9a01      	ldr	r2, [sp, #4]
    299a:	f000 8158 	beq.w	2c4e <_malloc_r+0x4f2>
    299e:	4582      	cmp	sl, r0
    29a0:	f200 80fc 	bhi.w	2b9c <_malloc_r+0x440>
    29a4:	4b45      	ldr	r3, [pc, #276]	; (2abc <_malloc_r+0x360>)
    29a6:	6819      	ldr	r1, [r3, #0]
    29a8:	45da      	cmp	sl, fp
    29aa:	4411      	add	r1, r2
    29ac:	6019      	str	r1, [r3, #0]
    29ae:	f000 8153 	beq.w	2c58 <_malloc_r+0x4fc>
    29b2:	f8d9 0000 	ldr.w	r0, [r9]
    29b6:	f8df e110 	ldr.w	lr, [pc, #272]	; 2ac8 <_malloc_r+0x36c>
    29ba:	3001      	adds	r0, #1
    29bc:	bf1b      	ittet	ne
    29be:	ebca 0a0b 	rsbne	sl, sl, fp
    29c2:	4451      	addne	r1, sl
    29c4:	f8ce b000 	streq.w	fp, [lr]
    29c8:	6019      	strne	r1, [r3, #0]
    29ca:	f01b 0107 	ands.w	r1, fp, #7
    29ce:	f000 8117 	beq.w	2c00 <_malloc_r+0x4a4>
    29d2:	f1c1 0008 	rsb	r0, r1, #8
    29d6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    29da:	4483      	add	fp, r0
    29dc:	3108      	adds	r1, #8
    29de:	445a      	add	r2, fp
    29e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    29e4:	ebc2 0901 	rsb	r9, r2, r1
    29e8:	4649      	mov	r1, r9
    29ea:	4630      	mov	r0, r6
    29ec:	9301      	str	r3, [sp, #4]
    29ee:	f000 fcc3 	bl	3378 <_sbrk_r>
    29f2:	1c43      	adds	r3, r0, #1
    29f4:	9b01      	ldr	r3, [sp, #4]
    29f6:	f000 813f 	beq.w	2c78 <_malloc_r+0x51c>
    29fa:	ebcb 0200 	rsb	r2, fp, r0
    29fe:	444a      	add	r2, r9
    2a00:	f042 0201 	orr.w	r2, r2, #1
    2a04:	6819      	ldr	r1, [r3, #0]
    2a06:	f8c7 b008 	str.w	fp, [r7, #8]
    2a0a:	4449      	add	r1, r9
    2a0c:	42bc      	cmp	r4, r7
    2a0e:	f8cb 2004 	str.w	r2, [fp, #4]
    2a12:	6019      	str	r1, [r3, #0]
    2a14:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2abc <_malloc_r+0x360>
    2a18:	d016      	beq.n	2a48 <_malloc_r+0x2ec>
    2a1a:	f1b8 0f0f 	cmp.w	r8, #15
    2a1e:	f240 80fd 	bls.w	2c1c <_malloc_r+0x4c0>
    2a22:	6862      	ldr	r2, [r4, #4]
    2a24:	f1a8 030c 	sub.w	r3, r8, #12
    2a28:	f023 0307 	bic.w	r3, r3, #7
    2a2c:	18e0      	adds	r0, r4, r3
    2a2e:	f002 0201 	and.w	r2, r2, #1
    2a32:	f04f 0e05 	mov.w	lr, #5
    2a36:	431a      	orrs	r2, r3
    2a38:	2b0f      	cmp	r3, #15
    2a3a:	6062      	str	r2, [r4, #4]
    2a3c:	f8c0 e004 	str.w	lr, [r0, #4]
    2a40:	f8c0 e008 	str.w	lr, [r0, #8]
    2a44:	f200 811c 	bhi.w	2c80 <_malloc_r+0x524>
    2a48:	4b1d      	ldr	r3, [pc, #116]	; (2ac0 <_malloc_r+0x364>)
    2a4a:	68bc      	ldr	r4, [r7, #8]
    2a4c:	681a      	ldr	r2, [r3, #0]
    2a4e:	4291      	cmp	r1, r2
    2a50:	bf88      	it	hi
    2a52:	6019      	strhi	r1, [r3, #0]
    2a54:	4b1b      	ldr	r3, [pc, #108]	; (2ac4 <_malloc_r+0x368>)
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	4291      	cmp	r1, r2
    2a5a:	6862      	ldr	r2, [r4, #4]
    2a5c:	bf88      	it	hi
    2a5e:	6019      	strhi	r1, [r3, #0]
    2a60:	f022 0203 	bic.w	r2, r2, #3
    2a64:	4295      	cmp	r5, r2
    2a66:	eba2 0305 	sub.w	r3, r2, r5
    2a6a:	d801      	bhi.n	2a70 <_malloc_r+0x314>
    2a6c:	2b0f      	cmp	r3, #15
    2a6e:	dc04      	bgt.n	2a7a <_malloc_r+0x31e>
    2a70:	4630      	mov	r0, r6
    2a72:	f000 fa8f 	bl	2f94 <__malloc_unlock>
    2a76:	2400      	movs	r4, #0
    2a78:	e738      	b.n	28ec <_malloc_r+0x190>
    2a7a:	1962      	adds	r2, r4, r5
    2a7c:	f043 0301 	orr.w	r3, r3, #1
    2a80:	f045 0501 	orr.w	r5, r5, #1
    2a84:	6065      	str	r5, [r4, #4]
    2a86:	4630      	mov	r0, r6
    2a88:	60ba      	str	r2, [r7, #8]
    2a8a:	6053      	str	r3, [r2, #4]
    2a8c:	f000 fa82 	bl	2f94 <__malloc_unlock>
    2a90:	3408      	adds	r4, #8
    2a92:	4620      	mov	r0, r4
    2a94:	b003      	add	sp, #12
    2a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a9a:	2b14      	cmp	r3, #20
    2a9c:	d971      	bls.n	2b82 <_malloc_r+0x426>
    2a9e:	2b54      	cmp	r3, #84	; 0x54
    2aa0:	f200 80a4 	bhi.w	2bec <_malloc_r+0x490>
    2aa4:	0b28      	lsrs	r0, r5, #12
    2aa6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    2aaa:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2aae:	306e      	adds	r0, #110	; 0x6e
    2ab0:	e676      	b.n	27a0 <_malloc_r+0x44>
    2ab2:	bf00      	nop
    2ab4:	20000fc0 	.word	0x20000fc0
    2ab8:	20001ee4 	.word	0x20001ee4
    2abc:	20001eb4 	.word	0x20001eb4
    2ac0:	20001edc 	.word	0x20001edc
    2ac4:	20001ee0 	.word	0x20001ee0
    2ac8:	200013c8 	.word	0x200013c8
    2acc:	0a5a      	lsrs	r2, r3, #9
    2ace:	2a04      	cmp	r2, #4
    2ad0:	d95e      	bls.n	2b90 <_malloc_r+0x434>
    2ad2:	2a14      	cmp	r2, #20
    2ad4:	f200 80b3 	bhi.w	2c3e <_malloc_r+0x4e2>
    2ad8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    2adc:	0049      	lsls	r1, r1, #1
    2ade:	325b      	adds	r2, #91	; 0x5b
    2ae0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    2ae4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    2ae8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2cc8 <_malloc_r+0x56c>
    2aec:	f1ac 0c08 	sub.w	ip, ip, #8
    2af0:	458c      	cmp	ip, r1
    2af2:	f000 8088 	beq.w	2c06 <_malloc_r+0x4aa>
    2af6:	684a      	ldr	r2, [r1, #4]
    2af8:	f022 0203 	bic.w	r2, r2, #3
    2afc:	4293      	cmp	r3, r2
    2afe:	d202      	bcs.n	2b06 <_malloc_r+0x3aa>
    2b00:	6889      	ldr	r1, [r1, #8]
    2b02:	458c      	cmp	ip, r1
    2b04:	d1f7      	bne.n	2af6 <_malloc_r+0x39a>
    2b06:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2b0a:	687a      	ldr	r2, [r7, #4]
    2b0c:	f8c4 c00c 	str.w	ip, [r4, #12]
    2b10:	60a1      	str	r1, [r4, #8]
    2b12:	f8cc 4008 	str.w	r4, [ip, #8]
    2b16:	60cc      	str	r4, [r1, #12]
    2b18:	e688      	b.n	282c <_malloc_r+0xd0>
    2b1a:	1963      	adds	r3, r4, r5
    2b1c:	f042 0701 	orr.w	r7, r2, #1
    2b20:	f045 0501 	orr.w	r5, r5, #1
    2b24:	6065      	str	r5, [r4, #4]
    2b26:	4630      	mov	r0, r6
    2b28:	614b      	str	r3, [r1, #20]
    2b2a:	610b      	str	r3, [r1, #16]
    2b2c:	f8c3 e00c 	str.w	lr, [r3, #12]
    2b30:	f8c3 e008 	str.w	lr, [r3, #8]
    2b34:	605f      	str	r7, [r3, #4]
    2b36:	509a      	str	r2, [r3, r2]
    2b38:	3408      	adds	r4, #8
    2b3a:	f000 fa2b 	bl	2f94 <__malloc_unlock>
    2b3e:	e6d5      	b.n	28ec <_malloc_r+0x190>
    2b40:	684a      	ldr	r2, [r1, #4]
    2b42:	e673      	b.n	282c <_malloc_r+0xd0>
    2b44:	f108 0801 	add.w	r8, r8, #1
    2b48:	f018 0f03 	tst.w	r8, #3
    2b4c:	f10c 0c08 	add.w	ip, ip, #8
    2b50:	f47f ae7f 	bne.w	2852 <_malloc_r+0xf6>
    2b54:	e030      	b.n	2bb8 <_malloc_r+0x45c>
    2b56:	68dc      	ldr	r4, [r3, #12]
    2b58:	42a3      	cmp	r3, r4
    2b5a:	bf08      	it	eq
    2b5c:	3002      	addeq	r0, #2
    2b5e:	f43f ae35 	beq.w	27cc <_malloc_r+0x70>
    2b62:	e6b3      	b.n	28cc <_malloc_r+0x170>
    2b64:	440b      	add	r3, r1
    2b66:	460c      	mov	r4, r1
    2b68:	685a      	ldr	r2, [r3, #4]
    2b6a:	68c9      	ldr	r1, [r1, #12]
    2b6c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    2b70:	f042 0201 	orr.w	r2, r2, #1
    2b74:	605a      	str	r2, [r3, #4]
    2b76:	4630      	mov	r0, r6
    2b78:	60e9      	str	r1, [r5, #12]
    2b7a:	608d      	str	r5, [r1, #8]
    2b7c:	f000 fa0a 	bl	2f94 <__malloc_unlock>
    2b80:	e6b4      	b.n	28ec <_malloc_r+0x190>
    2b82:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    2b86:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    2b8a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2b8e:	e607      	b.n	27a0 <_malloc_r+0x44>
    2b90:	099a      	lsrs	r2, r3, #6
    2b92:	f102 0139 	add.w	r1, r2, #57	; 0x39
    2b96:	0049      	lsls	r1, r1, #1
    2b98:	3238      	adds	r2, #56	; 0x38
    2b9a:	e7a1      	b.n	2ae0 <_malloc_r+0x384>
    2b9c:	42bc      	cmp	r4, r7
    2b9e:	4b4a      	ldr	r3, [pc, #296]	; (2cc8 <_malloc_r+0x56c>)
    2ba0:	f43f af00 	beq.w	29a4 <_malloc_r+0x248>
    2ba4:	689c      	ldr	r4, [r3, #8]
    2ba6:	6862      	ldr	r2, [r4, #4]
    2ba8:	f022 0203 	bic.w	r2, r2, #3
    2bac:	e75a      	b.n	2a64 <_malloc_r+0x308>
    2bae:	f859 3908 	ldr.w	r3, [r9], #-8
    2bb2:	4599      	cmp	r9, r3
    2bb4:	f040 8082 	bne.w	2cbc <_malloc_r+0x560>
    2bb8:	f010 0f03 	tst.w	r0, #3
    2bbc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    2bc0:	d1f5      	bne.n	2bae <_malloc_r+0x452>
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	ea23 0304 	bic.w	r3, r3, r4
    2bc8:	607b      	str	r3, [r7, #4]
    2bca:	0064      	lsls	r4, r4, #1
    2bcc:	429c      	cmp	r4, r3
    2bce:	f63f aebd 	bhi.w	294c <_malloc_r+0x1f0>
    2bd2:	2c00      	cmp	r4, #0
    2bd4:	f43f aeba 	beq.w	294c <_malloc_r+0x1f0>
    2bd8:	421c      	tst	r4, r3
    2bda:	4640      	mov	r0, r8
    2bdc:	f47f ae35 	bne.w	284a <_malloc_r+0xee>
    2be0:	0064      	lsls	r4, r4, #1
    2be2:	421c      	tst	r4, r3
    2be4:	f100 0004 	add.w	r0, r0, #4
    2be8:	d0fa      	beq.n	2be0 <_malloc_r+0x484>
    2bea:	e62e      	b.n	284a <_malloc_r+0xee>
    2bec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2bf0:	d818      	bhi.n	2c24 <_malloc_r+0x4c8>
    2bf2:	0be8      	lsrs	r0, r5, #15
    2bf4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2bf8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2bfc:	3077      	adds	r0, #119	; 0x77
    2bfe:	e5cf      	b.n	27a0 <_malloc_r+0x44>
    2c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2c04:	e6eb      	b.n	29de <_malloc_r+0x282>
    2c06:	2101      	movs	r1, #1
    2c08:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2c0c:	1092      	asrs	r2, r2, #2
    2c0e:	fa01 f202 	lsl.w	r2, r1, r2
    2c12:	431a      	orrs	r2, r3
    2c14:	f8c8 2004 	str.w	r2, [r8, #4]
    2c18:	4661      	mov	r1, ip
    2c1a:	e777      	b.n	2b0c <_malloc_r+0x3b0>
    2c1c:	2301      	movs	r3, #1
    2c1e:	f8cb 3004 	str.w	r3, [fp, #4]
    2c22:	e725      	b.n	2a70 <_malloc_r+0x314>
    2c24:	f240 5254 	movw	r2, #1364	; 0x554
    2c28:	4293      	cmp	r3, r2
    2c2a:	d820      	bhi.n	2c6e <_malloc_r+0x512>
    2c2c:	0ca8      	lsrs	r0, r5, #18
    2c2e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    2c32:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2c36:	307c      	adds	r0, #124	; 0x7c
    2c38:	e5b2      	b.n	27a0 <_malloc_r+0x44>
    2c3a:	3210      	adds	r2, #16
    2c3c:	e6a4      	b.n	2988 <_malloc_r+0x22c>
    2c3e:	2a54      	cmp	r2, #84	; 0x54
    2c40:	d826      	bhi.n	2c90 <_malloc_r+0x534>
    2c42:	0b1a      	lsrs	r2, r3, #12
    2c44:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2c48:	0049      	lsls	r1, r1, #1
    2c4a:	326e      	adds	r2, #110	; 0x6e
    2c4c:	e748      	b.n	2ae0 <_malloc_r+0x384>
    2c4e:	68bc      	ldr	r4, [r7, #8]
    2c50:	6862      	ldr	r2, [r4, #4]
    2c52:	f022 0203 	bic.w	r2, r2, #3
    2c56:	e705      	b.n	2a64 <_malloc_r+0x308>
    2c58:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2c5c:	2800      	cmp	r0, #0
    2c5e:	f47f aea8 	bne.w	29b2 <_malloc_r+0x256>
    2c62:	4442      	add	r2, r8
    2c64:	68bb      	ldr	r3, [r7, #8]
    2c66:	f042 0201 	orr.w	r2, r2, #1
    2c6a:	605a      	str	r2, [r3, #4]
    2c6c:	e6ec      	b.n	2a48 <_malloc_r+0x2ec>
    2c6e:	23fe      	movs	r3, #254	; 0xfe
    2c70:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    2c74:	207e      	movs	r0, #126	; 0x7e
    2c76:	e593      	b.n	27a0 <_malloc_r+0x44>
    2c78:	2201      	movs	r2, #1
    2c7a:	f04f 0900 	mov.w	r9, #0
    2c7e:	e6c1      	b.n	2a04 <_malloc_r+0x2a8>
    2c80:	f104 0108 	add.w	r1, r4, #8
    2c84:	4630      	mov	r0, r6
    2c86:	f000 fcff 	bl	3688 <_free_r>
    2c8a:	f8d9 1000 	ldr.w	r1, [r9]
    2c8e:	e6db      	b.n	2a48 <_malloc_r+0x2ec>
    2c90:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2c94:	d805      	bhi.n	2ca2 <_malloc_r+0x546>
    2c96:	0bda      	lsrs	r2, r3, #15
    2c98:	f102 0178 	add.w	r1, r2, #120	; 0x78
    2c9c:	0049      	lsls	r1, r1, #1
    2c9e:	3277      	adds	r2, #119	; 0x77
    2ca0:	e71e      	b.n	2ae0 <_malloc_r+0x384>
    2ca2:	f240 5154 	movw	r1, #1364	; 0x554
    2ca6:	428a      	cmp	r2, r1
    2ca8:	d805      	bhi.n	2cb6 <_malloc_r+0x55a>
    2caa:	0c9a      	lsrs	r2, r3, #18
    2cac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2cb0:	0049      	lsls	r1, r1, #1
    2cb2:	327c      	adds	r2, #124	; 0x7c
    2cb4:	e714      	b.n	2ae0 <_malloc_r+0x384>
    2cb6:	21fe      	movs	r1, #254	; 0xfe
    2cb8:	227e      	movs	r2, #126	; 0x7e
    2cba:	e711      	b.n	2ae0 <_malloc_r+0x384>
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	e784      	b.n	2bca <_malloc_r+0x46e>
    2cc0:	08e8      	lsrs	r0, r5, #3
    2cc2:	1c43      	adds	r3, r0, #1
    2cc4:	005b      	lsls	r3, r3, #1
    2cc6:	e5f8      	b.n	28ba <_malloc_r+0x15e>
    2cc8:	20000fc0 	.word	0x20000fc0

00002ccc <__ascii_mbtowc>:
    2ccc:	b082      	sub	sp, #8
    2cce:	b149      	cbz	r1, 2ce4 <__ascii_mbtowc+0x18>
    2cd0:	b15a      	cbz	r2, 2cea <__ascii_mbtowc+0x1e>
    2cd2:	b16b      	cbz	r3, 2cf0 <__ascii_mbtowc+0x24>
    2cd4:	7813      	ldrb	r3, [r2, #0]
    2cd6:	600b      	str	r3, [r1, #0]
    2cd8:	7812      	ldrb	r2, [r2, #0]
    2cda:	1c10      	adds	r0, r2, #0
    2cdc:	bf18      	it	ne
    2cde:	2001      	movne	r0, #1
    2ce0:	b002      	add	sp, #8
    2ce2:	4770      	bx	lr
    2ce4:	a901      	add	r1, sp, #4
    2ce6:	2a00      	cmp	r2, #0
    2ce8:	d1f3      	bne.n	2cd2 <__ascii_mbtowc+0x6>
    2cea:	4610      	mov	r0, r2
    2cec:	b002      	add	sp, #8
    2cee:	4770      	bx	lr
    2cf0:	f06f 0001 	mvn.w	r0, #1
    2cf4:	e7f4      	b.n	2ce0 <__ascii_mbtowc+0x14>
    2cf6:	bf00      	nop

00002cf8 <memcpy>:
    2cf8:	4684      	mov	ip, r0
    2cfa:	ea41 0300 	orr.w	r3, r1, r0
    2cfe:	f013 0303 	ands.w	r3, r3, #3
    2d02:	d16d      	bne.n	2de0 <memcpy+0xe8>
    2d04:	3a40      	subs	r2, #64	; 0x40
    2d06:	d341      	bcc.n	2d8c <memcpy+0x94>
    2d08:	f851 3b04 	ldr.w	r3, [r1], #4
    2d0c:	f840 3b04 	str.w	r3, [r0], #4
    2d10:	f851 3b04 	ldr.w	r3, [r1], #4
    2d14:	f840 3b04 	str.w	r3, [r0], #4
    2d18:	f851 3b04 	ldr.w	r3, [r1], #4
    2d1c:	f840 3b04 	str.w	r3, [r0], #4
    2d20:	f851 3b04 	ldr.w	r3, [r1], #4
    2d24:	f840 3b04 	str.w	r3, [r0], #4
    2d28:	f851 3b04 	ldr.w	r3, [r1], #4
    2d2c:	f840 3b04 	str.w	r3, [r0], #4
    2d30:	f851 3b04 	ldr.w	r3, [r1], #4
    2d34:	f840 3b04 	str.w	r3, [r0], #4
    2d38:	f851 3b04 	ldr.w	r3, [r1], #4
    2d3c:	f840 3b04 	str.w	r3, [r0], #4
    2d40:	f851 3b04 	ldr.w	r3, [r1], #4
    2d44:	f840 3b04 	str.w	r3, [r0], #4
    2d48:	f851 3b04 	ldr.w	r3, [r1], #4
    2d4c:	f840 3b04 	str.w	r3, [r0], #4
    2d50:	f851 3b04 	ldr.w	r3, [r1], #4
    2d54:	f840 3b04 	str.w	r3, [r0], #4
    2d58:	f851 3b04 	ldr.w	r3, [r1], #4
    2d5c:	f840 3b04 	str.w	r3, [r0], #4
    2d60:	f851 3b04 	ldr.w	r3, [r1], #4
    2d64:	f840 3b04 	str.w	r3, [r0], #4
    2d68:	f851 3b04 	ldr.w	r3, [r1], #4
    2d6c:	f840 3b04 	str.w	r3, [r0], #4
    2d70:	f851 3b04 	ldr.w	r3, [r1], #4
    2d74:	f840 3b04 	str.w	r3, [r0], #4
    2d78:	f851 3b04 	ldr.w	r3, [r1], #4
    2d7c:	f840 3b04 	str.w	r3, [r0], #4
    2d80:	f851 3b04 	ldr.w	r3, [r1], #4
    2d84:	f840 3b04 	str.w	r3, [r0], #4
    2d88:	3a40      	subs	r2, #64	; 0x40
    2d8a:	d2bd      	bcs.n	2d08 <memcpy+0x10>
    2d8c:	3230      	adds	r2, #48	; 0x30
    2d8e:	d311      	bcc.n	2db4 <memcpy+0xbc>
    2d90:	f851 3b04 	ldr.w	r3, [r1], #4
    2d94:	f840 3b04 	str.w	r3, [r0], #4
    2d98:	f851 3b04 	ldr.w	r3, [r1], #4
    2d9c:	f840 3b04 	str.w	r3, [r0], #4
    2da0:	f851 3b04 	ldr.w	r3, [r1], #4
    2da4:	f840 3b04 	str.w	r3, [r0], #4
    2da8:	f851 3b04 	ldr.w	r3, [r1], #4
    2dac:	f840 3b04 	str.w	r3, [r0], #4
    2db0:	3a10      	subs	r2, #16
    2db2:	d2ed      	bcs.n	2d90 <memcpy+0x98>
    2db4:	320c      	adds	r2, #12
    2db6:	d305      	bcc.n	2dc4 <memcpy+0xcc>
    2db8:	f851 3b04 	ldr.w	r3, [r1], #4
    2dbc:	f840 3b04 	str.w	r3, [r0], #4
    2dc0:	3a04      	subs	r2, #4
    2dc2:	d2f9      	bcs.n	2db8 <memcpy+0xc0>
    2dc4:	3204      	adds	r2, #4
    2dc6:	d008      	beq.n	2dda <memcpy+0xe2>
    2dc8:	07d2      	lsls	r2, r2, #31
    2dca:	bf1c      	itt	ne
    2dcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2dd0:	f800 3b01 	strbne.w	r3, [r0], #1
    2dd4:	d301      	bcc.n	2dda <memcpy+0xe2>
    2dd6:	880b      	ldrh	r3, [r1, #0]
    2dd8:	8003      	strh	r3, [r0, #0]
    2dda:	4660      	mov	r0, ip
    2ddc:	4770      	bx	lr
    2dde:	bf00      	nop
    2de0:	2a08      	cmp	r2, #8
    2de2:	d313      	bcc.n	2e0c <memcpy+0x114>
    2de4:	078b      	lsls	r3, r1, #30
    2de6:	d08d      	beq.n	2d04 <memcpy+0xc>
    2de8:	f010 0303 	ands.w	r3, r0, #3
    2dec:	d08a      	beq.n	2d04 <memcpy+0xc>
    2dee:	f1c3 0304 	rsb	r3, r3, #4
    2df2:	1ad2      	subs	r2, r2, r3
    2df4:	07db      	lsls	r3, r3, #31
    2df6:	bf1c      	itt	ne
    2df8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    2dfc:	f800 3b01 	strbne.w	r3, [r0], #1
    2e00:	d380      	bcc.n	2d04 <memcpy+0xc>
    2e02:	f831 3b02 	ldrh.w	r3, [r1], #2
    2e06:	f820 3b02 	strh.w	r3, [r0], #2
    2e0a:	e77b      	b.n	2d04 <memcpy+0xc>
    2e0c:	3a04      	subs	r2, #4
    2e0e:	d3d9      	bcc.n	2dc4 <memcpy+0xcc>
    2e10:	3a01      	subs	r2, #1
    2e12:	f811 3b01 	ldrb.w	r3, [r1], #1
    2e16:	f800 3b01 	strb.w	r3, [r0], #1
    2e1a:	d2f9      	bcs.n	2e10 <memcpy+0x118>
    2e1c:	780b      	ldrb	r3, [r1, #0]
    2e1e:	7003      	strb	r3, [r0, #0]
    2e20:	784b      	ldrb	r3, [r1, #1]
    2e22:	7043      	strb	r3, [r0, #1]
    2e24:	788b      	ldrb	r3, [r1, #2]
    2e26:	7083      	strb	r3, [r0, #2]
    2e28:	4660      	mov	r0, ip
    2e2a:	4770      	bx	lr

00002e2c <memmove>:
    2e2c:	4288      	cmp	r0, r1
    2e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e30:	d90d      	bls.n	2e4e <memmove+0x22>
    2e32:	188b      	adds	r3, r1, r2
    2e34:	4298      	cmp	r0, r3
    2e36:	d20a      	bcs.n	2e4e <memmove+0x22>
    2e38:	1881      	adds	r1, r0, r2
    2e3a:	2a00      	cmp	r2, #0
    2e3c:	d051      	beq.n	2ee2 <memmove+0xb6>
    2e3e:	1a9a      	subs	r2, r3, r2
    2e40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    2e44:	f801 4d01 	strb.w	r4, [r1, #-1]!
    2e48:	4293      	cmp	r3, r2
    2e4a:	d1f9      	bne.n	2e40 <memmove+0x14>
    2e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4e:	2a0f      	cmp	r2, #15
    2e50:	d948      	bls.n	2ee4 <memmove+0xb8>
    2e52:	ea41 0300 	orr.w	r3, r1, r0
    2e56:	079b      	lsls	r3, r3, #30
    2e58:	d146      	bne.n	2ee8 <memmove+0xbc>
    2e5a:	f100 0410 	add.w	r4, r0, #16
    2e5e:	f101 0310 	add.w	r3, r1, #16
    2e62:	4615      	mov	r5, r2
    2e64:	f853 6c10 	ldr.w	r6, [r3, #-16]
    2e68:	f844 6c10 	str.w	r6, [r4, #-16]
    2e6c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    2e70:	f844 6c0c 	str.w	r6, [r4, #-12]
    2e74:	f853 6c08 	ldr.w	r6, [r3, #-8]
    2e78:	f844 6c08 	str.w	r6, [r4, #-8]
    2e7c:	3d10      	subs	r5, #16
    2e7e:	f853 6c04 	ldr.w	r6, [r3, #-4]
    2e82:	f844 6c04 	str.w	r6, [r4, #-4]
    2e86:	2d0f      	cmp	r5, #15
    2e88:	f103 0310 	add.w	r3, r3, #16
    2e8c:	f104 0410 	add.w	r4, r4, #16
    2e90:	d8e8      	bhi.n	2e64 <memmove+0x38>
    2e92:	f1a2 0310 	sub.w	r3, r2, #16
    2e96:	f023 030f 	bic.w	r3, r3, #15
    2e9a:	f002 0e0f 	and.w	lr, r2, #15
    2e9e:	3310      	adds	r3, #16
    2ea0:	f1be 0f03 	cmp.w	lr, #3
    2ea4:	4419      	add	r1, r3
    2ea6:	4403      	add	r3, r0
    2ea8:	d921      	bls.n	2eee <memmove+0xc2>
    2eaa:	1f1e      	subs	r6, r3, #4
    2eac:	460d      	mov	r5, r1
    2eae:	4674      	mov	r4, lr
    2eb0:	3c04      	subs	r4, #4
    2eb2:	f855 7b04 	ldr.w	r7, [r5], #4
    2eb6:	f846 7f04 	str.w	r7, [r6, #4]!
    2eba:	2c03      	cmp	r4, #3
    2ebc:	d8f8      	bhi.n	2eb0 <memmove+0x84>
    2ebe:	f1ae 0404 	sub.w	r4, lr, #4
    2ec2:	f024 0403 	bic.w	r4, r4, #3
    2ec6:	3404      	adds	r4, #4
    2ec8:	4423      	add	r3, r4
    2eca:	4421      	add	r1, r4
    2ecc:	f002 0203 	and.w	r2, r2, #3
    2ed0:	b162      	cbz	r2, 2eec <memmove+0xc0>
    2ed2:	3b01      	subs	r3, #1
    2ed4:	440a      	add	r2, r1
    2ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
    2eda:	f803 4f01 	strb.w	r4, [r3, #1]!
    2ede:	428a      	cmp	r2, r1
    2ee0:	d1f9      	bne.n	2ed6 <memmove+0xaa>
    2ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee4:	4603      	mov	r3, r0
    2ee6:	e7f3      	b.n	2ed0 <memmove+0xa4>
    2ee8:	4603      	mov	r3, r0
    2eea:	e7f2      	b.n	2ed2 <memmove+0xa6>
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eee:	4672      	mov	r2, lr
    2ef0:	e7ee      	b.n	2ed0 <memmove+0xa4>
    2ef2:	bf00      	nop

00002ef4 <memset>:
    2ef4:	b470      	push	{r4, r5, r6}
    2ef6:	0784      	lsls	r4, r0, #30
    2ef8:	d046      	beq.n	2f88 <memset+0x94>
    2efa:	1e54      	subs	r4, r2, #1
    2efc:	2a00      	cmp	r2, #0
    2efe:	d041      	beq.n	2f84 <memset+0x90>
    2f00:	b2cd      	uxtb	r5, r1
    2f02:	4603      	mov	r3, r0
    2f04:	e002      	b.n	2f0c <memset+0x18>
    2f06:	1e62      	subs	r2, r4, #1
    2f08:	b3e4      	cbz	r4, 2f84 <memset+0x90>
    2f0a:	4614      	mov	r4, r2
    2f0c:	f803 5b01 	strb.w	r5, [r3], #1
    2f10:	079a      	lsls	r2, r3, #30
    2f12:	d1f8      	bne.n	2f06 <memset+0x12>
    2f14:	2c03      	cmp	r4, #3
    2f16:	d92e      	bls.n	2f76 <memset+0x82>
    2f18:	b2cd      	uxtb	r5, r1
    2f1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2f1e:	2c0f      	cmp	r4, #15
    2f20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2f24:	d919      	bls.n	2f5a <memset+0x66>
    2f26:	f103 0210 	add.w	r2, r3, #16
    2f2a:	4626      	mov	r6, r4
    2f2c:	3e10      	subs	r6, #16
    2f2e:	2e0f      	cmp	r6, #15
    2f30:	f842 5c10 	str.w	r5, [r2, #-16]
    2f34:	f842 5c0c 	str.w	r5, [r2, #-12]
    2f38:	f842 5c08 	str.w	r5, [r2, #-8]
    2f3c:	f842 5c04 	str.w	r5, [r2, #-4]
    2f40:	f102 0210 	add.w	r2, r2, #16
    2f44:	d8f2      	bhi.n	2f2c <memset+0x38>
    2f46:	f1a4 0210 	sub.w	r2, r4, #16
    2f4a:	f022 020f 	bic.w	r2, r2, #15
    2f4e:	f004 040f 	and.w	r4, r4, #15
    2f52:	3210      	adds	r2, #16
    2f54:	2c03      	cmp	r4, #3
    2f56:	4413      	add	r3, r2
    2f58:	d90d      	bls.n	2f76 <memset+0x82>
    2f5a:	461e      	mov	r6, r3
    2f5c:	4622      	mov	r2, r4
    2f5e:	3a04      	subs	r2, #4
    2f60:	2a03      	cmp	r2, #3
    2f62:	f846 5b04 	str.w	r5, [r6], #4
    2f66:	d8fa      	bhi.n	2f5e <memset+0x6a>
    2f68:	1f22      	subs	r2, r4, #4
    2f6a:	f022 0203 	bic.w	r2, r2, #3
    2f6e:	3204      	adds	r2, #4
    2f70:	4413      	add	r3, r2
    2f72:	f004 0403 	and.w	r4, r4, #3
    2f76:	b12c      	cbz	r4, 2f84 <memset+0x90>
    2f78:	b2c9      	uxtb	r1, r1
    2f7a:	441c      	add	r4, r3
    2f7c:	f803 1b01 	strb.w	r1, [r3], #1
    2f80:	42a3      	cmp	r3, r4
    2f82:	d1fb      	bne.n	2f7c <memset+0x88>
    2f84:	bc70      	pop	{r4, r5, r6}
    2f86:	4770      	bx	lr
    2f88:	4614      	mov	r4, r2
    2f8a:	4603      	mov	r3, r0
    2f8c:	e7c2      	b.n	2f14 <memset+0x20>
    2f8e:	bf00      	nop

00002f90 <__malloc_lock>:
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop

00002f94 <__malloc_unlock>:
    2f94:	4770      	bx	lr
    2f96:	bf00      	nop

00002f98 <_realloc_r>:
    2f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f9c:	4617      	mov	r7, r2
    2f9e:	b083      	sub	sp, #12
    2fa0:	2900      	cmp	r1, #0
    2fa2:	f000 80c1 	beq.w	3128 <_realloc_r+0x190>
    2fa6:	460e      	mov	r6, r1
    2fa8:	4681      	mov	r9, r0
    2faa:	f107 050b 	add.w	r5, r7, #11
    2fae:	f7ff ffef 	bl	2f90 <__malloc_lock>
    2fb2:	f856 ec04 	ldr.w	lr, [r6, #-4]
    2fb6:	2d16      	cmp	r5, #22
    2fb8:	f02e 0403 	bic.w	r4, lr, #3
    2fbc:	f1a6 0808 	sub.w	r8, r6, #8
    2fc0:	d840      	bhi.n	3044 <_realloc_r+0xac>
    2fc2:	2210      	movs	r2, #16
    2fc4:	4615      	mov	r5, r2
    2fc6:	42af      	cmp	r7, r5
    2fc8:	d841      	bhi.n	304e <_realloc_r+0xb6>
    2fca:	4294      	cmp	r4, r2
    2fcc:	da75      	bge.n	30ba <_realloc_r+0x122>
    2fce:	4bc9      	ldr	r3, [pc, #804]	; (32f4 <_realloc_r+0x35c>)
    2fd0:	6899      	ldr	r1, [r3, #8]
    2fd2:	eb08 0004 	add.w	r0, r8, r4
    2fd6:	4288      	cmp	r0, r1
    2fd8:	6841      	ldr	r1, [r0, #4]
    2fda:	f000 80d9 	beq.w	3190 <_realloc_r+0x1f8>
    2fde:	f021 0301 	bic.w	r3, r1, #1
    2fe2:	4403      	add	r3, r0
    2fe4:	685b      	ldr	r3, [r3, #4]
    2fe6:	07db      	lsls	r3, r3, #31
    2fe8:	d57d      	bpl.n	30e6 <_realloc_r+0x14e>
    2fea:	f01e 0f01 	tst.w	lr, #1
    2fee:	d035      	beq.n	305c <_realloc_r+0xc4>
    2ff0:	4639      	mov	r1, r7
    2ff2:	4648      	mov	r0, r9
    2ff4:	f7ff fbb2 	bl	275c <_malloc_r>
    2ff8:	4607      	mov	r7, r0
    2ffa:	b1e0      	cbz	r0, 3036 <_realloc_r+0x9e>
    2ffc:	f856 3c04 	ldr.w	r3, [r6, #-4]
    3000:	f023 0301 	bic.w	r3, r3, #1
    3004:	4443      	add	r3, r8
    3006:	f1a0 0208 	sub.w	r2, r0, #8
    300a:	429a      	cmp	r2, r3
    300c:	f000 8144 	beq.w	3298 <_realloc_r+0x300>
    3010:	1f22      	subs	r2, r4, #4
    3012:	2a24      	cmp	r2, #36	; 0x24
    3014:	f200 8131 	bhi.w	327a <_realloc_r+0x2e2>
    3018:	2a13      	cmp	r2, #19
    301a:	f200 8104 	bhi.w	3226 <_realloc_r+0x28e>
    301e:	4603      	mov	r3, r0
    3020:	4632      	mov	r2, r6
    3022:	6811      	ldr	r1, [r2, #0]
    3024:	6019      	str	r1, [r3, #0]
    3026:	6851      	ldr	r1, [r2, #4]
    3028:	6059      	str	r1, [r3, #4]
    302a:	6892      	ldr	r2, [r2, #8]
    302c:	609a      	str	r2, [r3, #8]
    302e:	4631      	mov	r1, r6
    3030:	4648      	mov	r0, r9
    3032:	f000 fb29 	bl	3688 <_free_r>
    3036:	4648      	mov	r0, r9
    3038:	f7ff ffac 	bl	2f94 <__malloc_unlock>
    303c:	4638      	mov	r0, r7
    303e:	b003      	add	sp, #12
    3040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3044:	f025 0507 	bic.w	r5, r5, #7
    3048:	2d00      	cmp	r5, #0
    304a:	462a      	mov	r2, r5
    304c:	dabb      	bge.n	2fc6 <_realloc_r+0x2e>
    304e:	230c      	movs	r3, #12
    3050:	2000      	movs	r0, #0
    3052:	f8c9 3000 	str.w	r3, [r9]
    3056:	b003      	add	sp, #12
    3058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    305c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3060:	ebc3 0a08 	rsb	sl, r3, r8
    3064:	f8da 3004 	ldr.w	r3, [sl, #4]
    3068:	f023 0c03 	bic.w	ip, r3, #3
    306c:	eb04 030c 	add.w	r3, r4, ip
    3070:	4293      	cmp	r3, r2
    3072:	dbbd      	blt.n	2ff0 <_realloc_r+0x58>
    3074:	4657      	mov	r7, sl
    3076:	f8da 100c 	ldr.w	r1, [sl, #12]
    307a:	f857 0f08 	ldr.w	r0, [r7, #8]!
    307e:	1f22      	subs	r2, r4, #4
    3080:	2a24      	cmp	r2, #36	; 0x24
    3082:	60c1      	str	r1, [r0, #12]
    3084:	6088      	str	r0, [r1, #8]
    3086:	f200 8117 	bhi.w	32b8 <_realloc_r+0x320>
    308a:	2a13      	cmp	r2, #19
    308c:	f240 8112 	bls.w	32b4 <_realloc_r+0x31c>
    3090:	6831      	ldr	r1, [r6, #0]
    3092:	f8ca 1008 	str.w	r1, [sl, #8]
    3096:	6871      	ldr	r1, [r6, #4]
    3098:	f8ca 100c 	str.w	r1, [sl, #12]
    309c:	2a1b      	cmp	r2, #27
    309e:	f200 812b 	bhi.w	32f8 <_realloc_r+0x360>
    30a2:	3608      	adds	r6, #8
    30a4:	f10a 0210 	add.w	r2, sl, #16
    30a8:	6831      	ldr	r1, [r6, #0]
    30aa:	6011      	str	r1, [r2, #0]
    30ac:	6871      	ldr	r1, [r6, #4]
    30ae:	6051      	str	r1, [r2, #4]
    30b0:	68b1      	ldr	r1, [r6, #8]
    30b2:	6091      	str	r1, [r2, #8]
    30b4:	463e      	mov	r6, r7
    30b6:	461c      	mov	r4, r3
    30b8:	46d0      	mov	r8, sl
    30ba:	1b63      	subs	r3, r4, r5
    30bc:	2b0f      	cmp	r3, #15
    30be:	d81d      	bhi.n	30fc <_realloc_r+0x164>
    30c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    30c4:	f003 0301 	and.w	r3, r3, #1
    30c8:	4323      	orrs	r3, r4
    30ca:	4444      	add	r4, r8
    30cc:	f8c8 3004 	str.w	r3, [r8, #4]
    30d0:	6863      	ldr	r3, [r4, #4]
    30d2:	f043 0301 	orr.w	r3, r3, #1
    30d6:	6063      	str	r3, [r4, #4]
    30d8:	4648      	mov	r0, r9
    30da:	f7ff ff5b 	bl	2f94 <__malloc_unlock>
    30de:	4630      	mov	r0, r6
    30e0:	b003      	add	sp, #12
    30e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30e6:	f021 0103 	bic.w	r1, r1, #3
    30ea:	4421      	add	r1, r4
    30ec:	4291      	cmp	r1, r2
    30ee:	db21      	blt.n	3134 <_realloc_r+0x19c>
    30f0:	68c3      	ldr	r3, [r0, #12]
    30f2:	6882      	ldr	r2, [r0, #8]
    30f4:	460c      	mov	r4, r1
    30f6:	60d3      	str	r3, [r2, #12]
    30f8:	609a      	str	r2, [r3, #8]
    30fa:	e7de      	b.n	30ba <_realloc_r+0x122>
    30fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3100:	eb08 0105 	add.w	r1, r8, r5
    3104:	f002 0201 	and.w	r2, r2, #1
    3108:	4315      	orrs	r5, r2
    310a:	f043 0201 	orr.w	r2, r3, #1
    310e:	440b      	add	r3, r1
    3110:	f8c8 5004 	str.w	r5, [r8, #4]
    3114:	604a      	str	r2, [r1, #4]
    3116:	685a      	ldr	r2, [r3, #4]
    3118:	f042 0201 	orr.w	r2, r2, #1
    311c:	3108      	adds	r1, #8
    311e:	605a      	str	r2, [r3, #4]
    3120:	4648      	mov	r0, r9
    3122:	f000 fab1 	bl	3688 <_free_r>
    3126:	e7d7      	b.n	30d8 <_realloc_r+0x140>
    3128:	4611      	mov	r1, r2
    312a:	b003      	add	sp, #12
    312c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3130:	f7ff bb14 	b.w	275c <_malloc_r>
    3134:	f01e 0f01 	tst.w	lr, #1
    3138:	f47f af5a 	bne.w	2ff0 <_realloc_r+0x58>
    313c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3140:	ebc3 0a08 	rsb	sl, r3, r8
    3144:	f8da 3004 	ldr.w	r3, [sl, #4]
    3148:	f023 0c03 	bic.w	ip, r3, #3
    314c:	eb01 0e0c 	add.w	lr, r1, ip
    3150:	4596      	cmp	lr, r2
    3152:	db8b      	blt.n	306c <_realloc_r+0xd4>
    3154:	68c3      	ldr	r3, [r0, #12]
    3156:	6882      	ldr	r2, [r0, #8]
    3158:	4657      	mov	r7, sl
    315a:	60d3      	str	r3, [r2, #12]
    315c:	609a      	str	r2, [r3, #8]
    315e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3162:	f8da 300c 	ldr.w	r3, [sl, #12]
    3166:	60cb      	str	r3, [r1, #12]
    3168:	1f22      	subs	r2, r4, #4
    316a:	2a24      	cmp	r2, #36	; 0x24
    316c:	6099      	str	r1, [r3, #8]
    316e:	f200 8099 	bhi.w	32a4 <_realloc_r+0x30c>
    3172:	2a13      	cmp	r2, #19
    3174:	d962      	bls.n	323c <_realloc_r+0x2a4>
    3176:	6833      	ldr	r3, [r6, #0]
    3178:	f8ca 3008 	str.w	r3, [sl, #8]
    317c:	6873      	ldr	r3, [r6, #4]
    317e:	f8ca 300c 	str.w	r3, [sl, #12]
    3182:	2a1b      	cmp	r2, #27
    3184:	f200 80a0 	bhi.w	32c8 <_realloc_r+0x330>
    3188:	3608      	adds	r6, #8
    318a:	f10a 0310 	add.w	r3, sl, #16
    318e:	e056      	b.n	323e <_realloc_r+0x2a6>
    3190:	f021 0b03 	bic.w	fp, r1, #3
    3194:	44a3      	add	fp, r4
    3196:	f105 0010 	add.w	r0, r5, #16
    319a:	4583      	cmp	fp, r0
    319c:	da59      	bge.n	3252 <_realloc_r+0x2ba>
    319e:	f01e 0f01 	tst.w	lr, #1
    31a2:	f47f af25 	bne.w	2ff0 <_realloc_r+0x58>
    31a6:	f856 1c08 	ldr.w	r1, [r6, #-8]
    31aa:	ebc1 0a08 	rsb	sl, r1, r8
    31ae:	f8da 1004 	ldr.w	r1, [sl, #4]
    31b2:	f021 0c03 	bic.w	ip, r1, #3
    31b6:	44e3      	add	fp, ip
    31b8:	4558      	cmp	r0, fp
    31ba:	f73f af57 	bgt.w	306c <_realloc_r+0xd4>
    31be:	4657      	mov	r7, sl
    31c0:	f8da 100c 	ldr.w	r1, [sl, #12]
    31c4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    31c8:	1f22      	subs	r2, r4, #4
    31ca:	2a24      	cmp	r2, #36	; 0x24
    31cc:	60c1      	str	r1, [r0, #12]
    31ce:	6088      	str	r0, [r1, #8]
    31d0:	f200 80b4 	bhi.w	333c <_realloc_r+0x3a4>
    31d4:	2a13      	cmp	r2, #19
    31d6:	f240 80a5 	bls.w	3324 <_realloc_r+0x38c>
    31da:	6831      	ldr	r1, [r6, #0]
    31dc:	f8ca 1008 	str.w	r1, [sl, #8]
    31e0:	6871      	ldr	r1, [r6, #4]
    31e2:	f8ca 100c 	str.w	r1, [sl, #12]
    31e6:	2a1b      	cmp	r2, #27
    31e8:	f200 80af 	bhi.w	334a <_realloc_r+0x3b2>
    31ec:	3608      	adds	r6, #8
    31ee:	f10a 0210 	add.w	r2, sl, #16
    31f2:	6831      	ldr	r1, [r6, #0]
    31f4:	6011      	str	r1, [r2, #0]
    31f6:	6871      	ldr	r1, [r6, #4]
    31f8:	6051      	str	r1, [r2, #4]
    31fa:	68b1      	ldr	r1, [r6, #8]
    31fc:	6091      	str	r1, [r2, #8]
    31fe:	eb0a 0105 	add.w	r1, sl, r5
    3202:	ebc5 020b 	rsb	r2, r5, fp
    3206:	f042 0201 	orr.w	r2, r2, #1
    320a:	6099      	str	r1, [r3, #8]
    320c:	604a      	str	r2, [r1, #4]
    320e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3212:	f003 0301 	and.w	r3, r3, #1
    3216:	431d      	orrs	r5, r3
    3218:	4648      	mov	r0, r9
    321a:	f8ca 5004 	str.w	r5, [sl, #4]
    321e:	f7ff feb9 	bl	2f94 <__malloc_unlock>
    3222:	4638      	mov	r0, r7
    3224:	e75c      	b.n	30e0 <_realloc_r+0x148>
    3226:	6833      	ldr	r3, [r6, #0]
    3228:	6003      	str	r3, [r0, #0]
    322a:	6873      	ldr	r3, [r6, #4]
    322c:	6043      	str	r3, [r0, #4]
    322e:	2a1b      	cmp	r2, #27
    3230:	d827      	bhi.n	3282 <_realloc_r+0x2ea>
    3232:	f100 0308 	add.w	r3, r0, #8
    3236:	f106 0208 	add.w	r2, r6, #8
    323a:	e6f2      	b.n	3022 <_realloc_r+0x8a>
    323c:	463b      	mov	r3, r7
    323e:	6832      	ldr	r2, [r6, #0]
    3240:	601a      	str	r2, [r3, #0]
    3242:	6872      	ldr	r2, [r6, #4]
    3244:	605a      	str	r2, [r3, #4]
    3246:	68b2      	ldr	r2, [r6, #8]
    3248:	609a      	str	r2, [r3, #8]
    324a:	463e      	mov	r6, r7
    324c:	4674      	mov	r4, lr
    324e:	46d0      	mov	r8, sl
    3250:	e733      	b.n	30ba <_realloc_r+0x122>
    3252:	eb08 0105 	add.w	r1, r8, r5
    3256:	ebc5 0b0b 	rsb	fp, r5, fp
    325a:	f04b 0201 	orr.w	r2, fp, #1
    325e:	6099      	str	r1, [r3, #8]
    3260:	604a      	str	r2, [r1, #4]
    3262:	f856 3c04 	ldr.w	r3, [r6, #-4]
    3266:	f003 0301 	and.w	r3, r3, #1
    326a:	431d      	orrs	r5, r3
    326c:	4648      	mov	r0, r9
    326e:	f846 5c04 	str.w	r5, [r6, #-4]
    3272:	f7ff fe8f 	bl	2f94 <__malloc_unlock>
    3276:	4630      	mov	r0, r6
    3278:	e732      	b.n	30e0 <_realloc_r+0x148>
    327a:	4631      	mov	r1, r6
    327c:	f7ff fdd6 	bl	2e2c <memmove>
    3280:	e6d5      	b.n	302e <_realloc_r+0x96>
    3282:	68b3      	ldr	r3, [r6, #8]
    3284:	6083      	str	r3, [r0, #8]
    3286:	68f3      	ldr	r3, [r6, #12]
    3288:	60c3      	str	r3, [r0, #12]
    328a:	2a24      	cmp	r2, #36	; 0x24
    328c:	d028      	beq.n	32e0 <_realloc_r+0x348>
    328e:	f100 0310 	add.w	r3, r0, #16
    3292:	f106 0210 	add.w	r2, r6, #16
    3296:	e6c4      	b.n	3022 <_realloc_r+0x8a>
    3298:	f850 3c04 	ldr.w	r3, [r0, #-4]
    329c:	f023 0303 	bic.w	r3, r3, #3
    32a0:	441c      	add	r4, r3
    32a2:	e70a      	b.n	30ba <_realloc_r+0x122>
    32a4:	4631      	mov	r1, r6
    32a6:	4638      	mov	r0, r7
    32a8:	4674      	mov	r4, lr
    32aa:	46d0      	mov	r8, sl
    32ac:	f7ff fdbe 	bl	2e2c <memmove>
    32b0:	463e      	mov	r6, r7
    32b2:	e702      	b.n	30ba <_realloc_r+0x122>
    32b4:	463a      	mov	r2, r7
    32b6:	e6f7      	b.n	30a8 <_realloc_r+0x110>
    32b8:	4631      	mov	r1, r6
    32ba:	4638      	mov	r0, r7
    32bc:	461c      	mov	r4, r3
    32be:	46d0      	mov	r8, sl
    32c0:	f7ff fdb4 	bl	2e2c <memmove>
    32c4:	463e      	mov	r6, r7
    32c6:	e6f8      	b.n	30ba <_realloc_r+0x122>
    32c8:	68b3      	ldr	r3, [r6, #8]
    32ca:	f8ca 3010 	str.w	r3, [sl, #16]
    32ce:	68f3      	ldr	r3, [r6, #12]
    32d0:	f8ca 3014 	str.w	r3, [sl, #20]
    32d4:	2a24      	cmp	r2, #36	; 0x24
    32d6:	d01b      	beq.n	3310 <_realloc_r+0x378>
    32d8:	3610      	adds	r6, #16
    32da:	f10a 0318 	add.w	r3, sl, #24
    32de:	e7ae      	b.n	323e <_realloc_r+0x2a6>
    32e0:	6933      	ldr	r3, [r6, #16]
    32e2:	6103      	str	r3, [r0, #16]
    32e4:	6973      	ldr	r3, [r6, #20]
    32e6:	6143      	str	r3, [r0, #20]
    32e8:	f106 0218 	add.w	r2, r6, #24
    32ec:	f100 0318 	add.w	r3, r0, #24
    32f0:	e697      	b.n	3022 <_realloc_r+0x8a>
    32f2:	bf00      	nop
    32f4:	20000fc0 	.word	0x20000fc0
    32f8:	68b1      	ldr	r1, [r6, #8]
    32fa:	f8ca 1010 	str.w	r1, [sl, #16]
    32fe:	68f1      	ldr	r1, [r6, #12]
    3300:	f8ca 1014 	str.w	r1, [sl, #20]
    3304:	2a24      	cmp	r2, #36	; 0x24
    3306:	d00f      	beq.n	3328 <_realloc_r+0x390>
    3308:	3610      	adds	r6, #16
    330a:	f10a 0218 	add.w	r2, sl, #24
    330e:	e6cb      	b.n	30a8 <_realloc_r+0x110>
    3310:	6933      	ldr	r3, [r6, #16]
    3312:	f8ca 3018 	str.w	r3, [sl, #24]
    3316:	6973      	ldr	r3, [r6, #20]
    3318:	f8ca 301c 	str.w	r3, [sl, #28]
    331c:	3618      	adds	r6, #24
    331e:	f10a 0320 	add.w	r3, sl, #32
    3322:	e78c      	b.n	323e <_realloc_r+0x2a6>
    3324:	463a      	mov	r2, r7
    3326:	e764      	b.n	31f2 <_realloc_r+0x25a>
    3328:	6932      	ldr	r2, [r6, #16]
    332a:	f8ca 2018 	str.w	r2, [sl, #24]
    332e:	6972      	ldr	r2, [r6, #20]
    3330:	f8ca 201c 	str.w	r2, [sl, #28]
    3334:	3618      	adds	r6, #24
    3336:	f10a 0220 	add.w	r2, sl, #32
    333a:	e6b5      	b.n	30a8 <_realloc_r+0x110>
    333c:	4631      	mov	r1, r6
    333e:	4638      	mov	r0, r7
    3340:	9301      	str	r3, [sp, #4]
    3342:	f7ff fd73 	bl	2e2c <memmove>
    3346:	9b01      	ldr	r3, [sp, #4]
    3348:	e759      	b.n	31fe <_realloc_r+0x266>
    334a:	68b1      	ldr	r1, [r6, #8]
    334c:	f8ca 1010 	str.w	r1, [sl, #16]
    3350:	68f1      	ldr	r1, [r6, #12]
    3352:	f8ca 1014 	str.w	r1, [sl, #20]
    3356:	2a24      	cmp	r2, #36	; 0x24
    3358:	d003      	beq.n	3362 <_realloc_r+0x3ca>
    335a:	3610      	adds	r6, #16
    335c:	f10a 0218 	add.w	r2, sl, #24
    3360:	e747      	b.n	31f2 <_realloc_r+0x25a>
    3362:	6932      	ldr	r2, [r6, #16]
    3364:	f8ca 2018 	str.w	r2, [sl, #24]
    3368:	6972      	ldr	r2, [r6, #20]
    336a:	f8ca 201c 	str.w	r2, [sl, #28]
    336e:	3618      	adds	r6, #24
    3370:	f10a 0220 	add.w	r2, sl, #32
    3374:	e73d      	b.n	31f2 <_realloc_r+0x25a>
    3376:	bf00      	nop

00003378 <_sbrk_r>:
    3378:	b538      	push	{r3, r4, r5, lr}
    337a:	4c07      	ldr	r4, [pc, #28]	; (3398 <_sbrk_r+0x20>)
    337c:	2300      	movs	r3, #0
    337e:	4605      	mov	r5, r0
    3380:	4608      	mov	r0, r1
    3382:	6023      	str	r3, [r4, #0]
    3384:	f7fd fe06 	bl	f94 <_sbrk>
    3388:	1c43      	adds	r3, r0, #1
    338a:	d000      	beq.n	338e <_sbrk_r+0x16>
    338c:	bd38      	pop	{r3, r4, r5, pc}
    338e:	6823      	ldr	r3, [r4, #0]
    3390:	2b00      	cmp	r3, #0
    3392:	d0fb      	beq.n	338c <_sbrk_r+0x14>
    3394:	602b      	str	r3, [r5, #0]
    3396:	bd38      	pop	{r3, r4, r5, pc}
    3398:	20001ff4 	.word	0x20001ff4
	...

000033c0 <strlen>:
    33c0:	f890 f000 	pld	[r0]
    33c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    33c8:	f020 0107 	bic.w	r1, r0, #7
    33cc:	f06f 0c00 	mvn.w	ip, #0
    33d0:	f010 0407 	ands.w	r4, r0, #7
    33d4:	f891 f020 	pld	[r1, #32]
    33d8:	f040 8049 	bne.w	346e <strlen+0xae>
    33dc:	f04f 0400 	mov.w	r4, #0
    33e0:	f06f 0007 	mvn.w	r0, #7
    33e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    33e8:	f891 f040 	pld	[r1, #64]	; 0x40
    33ec:	f100 0008 	add.w	r0, r0, #8
    33f0:	fa82 f24c 	uadd8	r2, r2, ip
    33f4:	faa4 f28c 	sel	r2, r4, ip
    33f8:	fa83 f34c 	uadd8	r3, r3, ip
    33fc:	faa2 f38c 	sel	r3, r2, ip
    3400:	bb4b      	cbnz	r3, 3456 <strlen+0x96>
    3402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    3406:	fa82 f24c 	uadd8	r2, r2, ip
    340a:	f100 0008 	add.w	r0, r0, #8
    340e:	faa4 f28c 	sel	r2, r4, ip
    3412:	fa83 f34c 	uadd8	r3, r3, ip
    3416:	faa2 f38c 	sel	r3, r2, ip
    341a:	b9e3      	cbnz	r3, 3456 <strlen+0x96>
    341c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    3420:	fa82 f24c 	uadd8	r2, r2, ip
    3424:	f100 0008 	add.w	r0, r0, #8
    3428:	faa4 f28c 	sel	r2, r4, ip
    342c:	fa83 f34c 	uadd8	r3, r3, ip
    3430:	faa2 f38c 	sel	r3, r2, ip
    3434:	b97b      	cbnz	r3, 3456 <strlen+0x96>
    3436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    343a:	f101 0120 	add.w	r1, r1, #32
    343e:	fa82 f24c 	uadd8	r2, r2, ip
    3442:	f100 0008 	add.w	r0, r0, #8
    3446:	faa4 f28c 	sel	r2, r4, ip
    344a:	fa83 f34c 	uadd8	r3, r3, ip
    344e:	faa2 f38c 	sel	r3, r2, ip
    3452:	2b00      	cmp	r3, #0
    3454:	d0c6      	beq.n	33e4 <strlen+0x24>
    3456:	2a00      	cmp	r2, #0
    3458:	bf04      	itt	eq
    345a:	3004      	addeq	r0, #4
    345c:	461a      	moveq	r2, r3
    345e:	ba12      	rev	r2, r2
    3460:	fab2 f282 	clz	r2, r2
    3464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    346c:	4770      	bx	lr
    346e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3472:	f004 0503 	and.w	r5, r4, #3
    3476:	f1c4 0000 	rsb	r0, r4, #0
    347a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    347e:	f014 0f04 	tst.w	r4, #4
    3482:	f891 f040 	pld	[r1, #64]	; 0x40
    3486:	fa0c f505 	lsl.w	r5, ip, r5
    348a:	ea62 0205 	orn	r2, r2, r5
    348e:	bf1c      	itt	ne
    3490:	ea63 0305 	ornne	r3, r3, r5
    3494:	4662      	movne	r2, ip
    3496:	f04f 0400 	mov.w	r4, #0
    349a:	e7a9      	b.n	33f0 <strlen+0x30>

0000349c <_vdprintf_r>:
    349c:	b5f0      	push	{r4, r5, r6, r7, lr}
    349e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    34a2:	ad04      	add	r5, sp, #16
    34a4:	9300      	str	r3, [sp, #0]
    34a6:	460f      	mov	r7, r1
    34a8:	4613      	mov	r3, r2
    34aa:	f44f 7400 	mov.w	r4, #512	; 0x200
    34ae:	aa03      	add	r2, sp, #12
    34b0:	4629      	mov	r1, r5
    34b2:	9403      	str	r4, [sp, #12]
    34b4:	4606      	mov	r6, r0
    34b6:	f000 fd45 	bl	3f44 <_vasnprintf_r>
    34ba:	b188      	cbz	r0, 34e0 <_vdprintf_r+0x44>
    34bc:	4604      	mov	r4, r0
    34be:	4602      	mov	r2, r0
    34c0:	4639      	mov	r1, r7
    34c2:	9b03      	ldr	r3, [sp, #12]
    34c4:	4630      	mov	r0, r6
    34c6:	f000 f829 	bl	351c <_write_r>
    34ca:	42ac      	cmp	r4, r5
    34cc:	9003      	str	r0, [sp, #12]
    34ce:	d004      	beq.n	34da <_vdprintf_r+0x3e>
    34d0:	4630      	mov	r0, r6
    34d2:	4621      	mov	r1, r4
    34d4:	f000 f8d8 	bl	3688 <_free_r>
    34d8:	9803      	ldr	r0, [sp, #12]
    34da:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    34de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34e4:	e7f9      	b.n	34da <_vdprintf_r+0x3e>
    34e6:	bf00      	nop

000034e8 <vdprintf>:
    34e8:	b410      	push	{r4}
    34ea:	4c04      	ldr	r4, [pc, #16]	; (34fc <vdprintf+0x14>)
    34ec:	4613      	mov	r3, r2
    34ee:	460a      	mov	r2, r1
    34f0:	4601      	mov	r1, r0
    34f2:	6820      	ldr	r0, [r4, #0]
    34f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    34f8:	f7ff bfd0 	b.w	349c <_vdprintf_r>
    34fc:	200013d0 	.word	0x200013d0

00003500 <__ascii_wctomb>:
    3500:	b121      	cbz	r1, 350c <__ascii_wctomb+0xc>
    3502:	2aff      	cmp	r2, #255	; 0xff
    3504:	d804      	bhi.n	3510 <__ascii_wctomb+0x10>
    3506:	700a      	strb	r2, [r1, #0]
    3508:	2001      	movs	r0, #1
    350a:	4770      	bx	lr
    350c:	4608      	mov	r0, r1
    350e:	4770      	bx	lr
    3510:	238a      	movs	r3, #138	; 0x8a
    3512:	6003      	str	r3, [r0, #0]
    3514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3518:	4770      	bx	lr
    351a:	bf00      	nop

0000351c <_write_r>:
    351c:	b570      	push	{r4, r5, r6, lr}
    351e:	460d      	mov	r5, r1
    3520:	4c08      	ldr	r4, [pc, #32]	; (3544 <_write_r+0x28>)
    3522:	4611      	mov	r1, r2
    3524:	4606      	mov	r6, r0
    3526:	461a      	mov	r2, r3
    3528:	4628      	mov	r0, r5
    352a:	2300      	movs	r3, #0
    352c:	6023      	str	r3, [r4, #0]
    352e:	f7fe fd67 	bl	2000 <_write>
    3532:	1c43      	adds	r3, r0, #1
    3534:	d000      	beq.n	3538 <_write_r+0x1c>
    3536:	bd70      	pop	{r4, r5, r6, pc}
    3538:	6823      	ldr	r3, [r4, #0]
    353a:	2b00      	cmp	r3, #0
    353c:	d0fb      	beq.n	3536 <_write_r+0x1a>
    353e:	6033      	str	r3, [r6, #0]
    3540:	bd70      	pop	{r4, r5, r6, pc}
    3542:	bf00      	nop
    3544:	20001ff4 	.word	0x20001ff4

00003548 <__register_exitproc>:
    3548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    354c:	4c25      	ldr	r4, [pc, #148]	; (35e4 <__register_exitproc+0x9c>)
    354e:	6825      	ldr	r5, [r4, #0]
    3550:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    3554:	4606      	mov	r6, r0
    3556:	4688      	mov	r8, r1
    3558:	4692      	mov	sl, r2
    355a:	4699      	mov	r9, r3
    355c:	b3c4      	cbz	r4, 35d0 <__register_exitproc+0x88>
    355e:	6860      	ldr	r0, [r4, #4]
    3560:	281f      	cmp	r0, #31
    3562:	dc17      	bgt.n	3594 <__register_exitproc+0x4c>
    3564:	1c43      	adds	r3, r0, #1
    3566:	b176      	cbz	r6, 3586 <__register_exitproc+0x3e>
    3568:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    356c:	2201      	movs	r2, #1
    356e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    3572:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    3576:	4082      	lsls	r2, r0
    3578:	4311      	orrs	r1, r2
    357a:	2e02      	cmp	r6, #2
    357c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    3580:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    3584:	d01e      	beq.n	35c4 <__register_exitproc+0x7c>
    3586:	3002      	adds	r0, #2
    3588:	6063      	str	r3, [r4, #4]
    358a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    358e:	2000      	movs	r0, #0
    3590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3594:	4b14      	ldr	r3, [pc, #80]	; (35e8 <__register_exitproc+0xa0>)
    3596:	b303      	cbz	r3, 35da <__register_exitproc+0x92>
    3598:	f44f 70c8 	mov.w	r0, #400	; 0x190
    359c:	f7ff f8d6 	bl	274c <malloc>
    35a0:	4604      	mov	r4, r0
    35a2:	b1d0      	cbz	r0, 35da <__register_exitproc+0x92>
    35a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    35a8:	2700      	movs	r7, #0
    35aa:	e880 0088 	stmia.w	r0, {r3, r7}
    35ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    35b2:	4638      	mov	r0, r7
    35b4:	2301      	movs	r3, #1
    35b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    35ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    35be:	2e00      	cmp	r6, #0
    35c0:	d0e1      	beq.n	3586 <__register_exitproc+0x3e>
    35c2:	e7d1      	b.n	3568 <__register_exitproc+0x20>
    35c4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    35c8:	430a      	orrs	r2, r1
    35ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    35ce:	e7da      	b.n	3586 <__register_exitproc+0x3e>
    35d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    35d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    35d8:	e7c1      	b.n	355e <__register_exitproc+0x16>
    35da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    35de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35e2:	bf00      	nop
    35e4:	2000049c 	.word	0x2000049c
    35e8:	0000274d 	.word	0x0000274d

000035ec <_malloc_trim_r>:
    35ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ee:	4f23      	ldr	r7, [pc, #140]	; (367c <_malloc_trim_r+0x90>)
    35f0:	460c      	mov	r4, r1
    35f2:	4606      	mov	r6, r0
    35f4:	f7ff fccc 	bl	2f90 <__malloc_lock>
    35f8:	68bb      	ldr	r3, [r7, #8]
    35fa:	685d      	ldr	r5, [r3, #4]
    35fc:	f025 0503 	bic.w	r5, r5, #3
    3600:	1b29      	subs	r1, r5, r4
    3602:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3606:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    360a:	f021 010f 	bic.w	r1, r1, #15
    360e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3612:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3616:	db07      	blt.n	3628 <_malloc_trim_r+0x3c>
    3618:	2100      	movs	r1, #0
    361a:	4630      	mov	r0, r6
    361c:	f7ff feac 	bl	3378 <_sbrk_r>
    3620:	68bb      	ldr	r3, [r7, #8]
    3622:	442b      	add	r3, r5
    3624:	4298      	cmp	r0, r3
    3626:	d004      	beq.n	3632 <_malloc_trim_r+0x46>
    3628:	4630      	mov	r0, r6
    362a:	f7ff fcb3 	bl	2f94 <__malloc_unlock>
    362e:	2000      	movs	r0, #0
    3630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3632:	4261      	negs	r1, r4
    3634:	4630      	mov	r0, r6
    3636:	f7ff fe9f 	bl	3378 <_sbrk_r>
    363a:	3001      	adds	r0, #1
    363c:	d00d      	beq.n	365a <_malloc_trim_r+0x6e>
    363e:	4b10      	ldr	r3, [pc, #64]	; (3680 <_malloc_trim_r+0x94>)
    3640:	68ba      	ldr	r2, [r7, #8]
    3642:	6819      	ldr	r1, [r3, #0]
    3644:	1b2d      	subs	r5, r5, r4
    3646:	f045 0501 	orr.w	r5, r5, #1
    364a:	4630      	mov	r0, r6
    364c:	1b09      	subs	r1, r1, r4
    364e:	6055      	str	r5, [r2, #4]
    3650:	6019      	str	r1, [r3, #0]
    3652:	f7ff fc9f 	bl	2f94 <__malloc_unlock>
    3656:	2001      	movs	r0, #1
    3658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    365a:	2100      	movs	r1, #0
    365c:	4630      	mov	r0, r6
    365e:	f7ff fe8b 	bl	3378 <_sbrk_r>
    3662:	68ba      	ldr	r2, [r7, #8]
    3664:	1a83      	subs	r3, r0, r2
    3666:	2b0f      	cmp	r3, #15
    3668:	ddde      	ble.n	3628 <_malloc_trim_r+0x3c>
    366a:	4c06      	ldr	r4, [pc, #24]	; (3684 <_malloc_trim_r+0x98>)
    366c:	4904      	ldr	r1, [pc, #16]	; (3680 <_malloc_trim_r+0x94>)
    366e:	6824      	ldr	r4, [r4, #0]
    3670:	f043 0301 	orr.w	r3, r3, #1
    3674:	1b00      	subs	r0, r0, r4
    3676:	6053      	str	r3, [r2, #4]
    3678:	6008      	str	r0, [r1, #0]
    367a:	e7d5      	b.n	3628 <_malloc_trim_r+0x3c>
    367c:	20000fc0 	.word	0x20000fc0
    3680:	20001eb4 	.word	0x20001eb4
    3684:	200013c8 	.word	0x200013c8

00003688 <_free_r>:
    3688:	2900      	cmp	r1, #0
    368a:	d045      	beq.n	3718 <_free_r+0x90>
    368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3690:	460d      	mov	r5, r1
    3692:	4680      	mov	r8, r0
    3694:	f7ff fc7c 	bl	2f90 <__malloc_lock>
    3698:	f855 7c04 	ldr.w	r7, [r5, #-4]
    369c:	496a      	ldr	r1, [pc, #424]	; (3848 <_free_r+0x1c0>)
    369e:	f027 0301 	bic.w	r3, r7, #1
    36a2:	f1a5 0408 	sub.w	r4, r5, #8
    36a6:	18e2      	adds	r2, r4, r3
    36a8:	688e      	ldr	r6, [r1, #8]
    36aa:	6850      	ldr	r0, [r2, #4]
    36ac:	42b2      	cmp	r2, r6
    36ae:	f020 0003 	bic.w	r0, r0, #3
    36b2:	d062      	beq.n	377a <_free_r+0xf2>
    36b4:	07fe      	lsls	r6, r7, #31
    36b6:	6050      	str	r0, [r2, #4]
    36b8:	d40b      	bmi.n	36d2 <_free_r+0x4a>
    36ba:	f855 7c08 	ldr.w	r7, [r5, #-8]
    36be:	1be4      	subs	r4, r4, r7
    36c0:	f101 0e08 	add.w	lr, r1, #8
    36c4:	68a5      	ldr	r5, [r4, #8]
    36c6:	4575      	cmp	r5, lr
    36c8:	443b      	add	r3, r7
    36ca:	d06f      	beq.n	37ac <_free_r+0x124>
    36cc:	68e7      	ldr	r7, [r4, #12]
    36ce:	60ef      	str	r7, [r5, #12]
    36d0:	60bd      	str	r5, [r7, #8]
    36d2:	1815      	adds	r5, r2, r0
    36d4:	686d      	ldr	r5, [r5, #4]
    36d6:	07ed      	lsls	r5, r5, #31
    36d8:	d542      	bpl.n	3760 <_free_r+0xd8>
    36da:	f043 0201 	orr.w	r2, r3, #1
    36de:	6062      	str	r2, [r4, #4]
    36e0:	50e3      	str	r3, [r4, r3]
    36e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    36e6:	d218      	bcs.n	371a <_free_r+0x92>
    36e8:	08db      	lsrs	r3, r3, #3
    36ea:	1c5a      	adds	r2, r3, #1
    36ec:	684d      	ldr	r5, [r1, #4]
    36ee:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    36f2:	60a7      	str	r7, [r4, #8]
    36f4:	2001      	movs	r0, #1
    36f6:	109b      	asrs	r3, r3, #2
    36f8:	fa00 f303 	lsl.w	r3, r0, r3
    36fc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3700:	431d      	orrs	r5, r3
    3702:	3808      	subs	r0, #8
    3704:	60e0      	str	r0, [r4, #12]
    3706:	604d      	str	r5, [r1, #4]
    3708:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    370c:	60fc      	str	r4, [r7, #12]
    370e:	4640      	mov	r0, r8
    3710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3714:	f7ff bc3e 	b.w	2f94 <__malloc_unlock>
    3718:	4770      	bx	lr
    371a:	0a5a      	lsrs	r2, r3, #9
    371c:	2a04      	cmp	r2, #4
    371e:	d853      	bhi.n	37c8 <_free_r+0x140>
    3720:	099a      	lsrs	r2, r3, #6
    3722:	f102 0739 	add.w	r7, r2, #57	; 0x39
    3726:	007f      	lsls	r7, r7, #1
    3728:	f102 0538 	add.w	r5, r2, #56	; 0x38
    372c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    3730:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3734:	4944      	ldr	r1, [pc, #272]	; (3848 <_free_r+0x1c0>)
    3736:	3808      	subs	r0, #8
    3738:	4290      	cmp	r0, r2
    373a:	d04d      	beq.n	37d8 <_free_r+0x150>
    373c:	6851      	ldr	r1, [r2, #4]
    373e:	f021 0103 	bic.w	r1, r1, #3
    3742:	428b      	cmp	r3, r1
    3744:	d202      	bcs.n	374c <_free_r+0xc4>
    3746:	6892      	ldr	r2, [r2, #8]
    3748:	4290      	cmp	r0, r2
    374a:	d1f7      	bne.n	373c <_free_r+0xb4>
    374c:	68d0      	ldr	r0, [r2, #12]
    374e:	60e0      	str	r0, [r4, #12]
    3750:	60a2      	str	r2, [r4, #8]
    3752:	6084      	str	r4, [r0, #8]
    3754:	60d4      	str	r4, [r2, #12]
    3756:	4640      	mov	r0, r8
    3758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    375c:	f7ff bc1a 	b.w	2f94 <__malloc_unlock>
    3760:	6895      	ldr	r5, [r2, #8]
    3762:	4f3a      	ldr	r7, [pc, #232]	; (384c <_free_r+0x1c4>)
    3764:	42bd      	cmp	r5, r7
    3766:	4403      	add	r3, r0
    3768:	d03f      	beq.n	37ea <_free_r+0x162>
    376a:	68d0      	ldr	r0, [r2, #12]
    376c:	60e8      	str	r0, [r5, #12]
    376e:	f043 0201 	orr.w	r2, r3, #1
    3772:	6085      	str	r5, [r0, #8]
    3774:	6062      	str	r2, [r4, #4]
    3776:	50e3      	str	r3, [r4, r3]
    3778:	e7b3      	b.n	36e2 <_free_r+0x5a>
    377a:	07ff      	lsls	r7, r7, #31
    377c:	4403      	add	r3, r0
    377e:	d407      	bmi.n	3790 <_free_r+0x108>
    3780:	f855 2c08 	ldr.w	r2, [r5, #-8]
    3784:	1aa4      	subs	r4, r4, r2
    3786:	4413      	add	r3, r2
    3788:	68a0      	ldr	r0, [r4, #8]
    378a:	68e2      	ldr	r2, [r4, #12]
    378c:	60c2      	str	r2, [r0, #12]
    378e:	6090      	str	r0, [r2, #8]
    3790:	4a2f      	ldr	r2, [pc, #188]	; (3850 <_free_r+0x1c8>)
    3792:	6812      	ldr	r2, [r2, #0]
    3794:	f043 0001 	orr.w	r0, r3, #1
    3798:	4293      	cmp	r3, r2
    379a:	6060      	str	r0, [r4, #4]
    379c:	608c      	str	r4, [r1, #8]
    379e:	d3b6      	bcc.n	370e <_free_r+0x86>
    37a0:	4b2c      	ldr	r3, [pc, #176]	; (3854 <_free_r+0x1cc>)
    37a2:	4640      	mov	r0, r8
    37a4:	6819      	ldr	r1, [r3, #0]
    37a6:	f7ff ff21 	bl	35ec <_malloc_trim_r>
    37aa:	e7b0      	b.n	370e <_free_r+0x86>
    37ac:	1811      	adds	r1, r2, r0
    37ae:	6849      	ldr	r1, [r1, #4]
    37b0:	07c9      	lsls	r1, r1, #31
    37b2:	d444      	bmi.n	383e <_free_r+0x1b6>
    37b4:	6891      	ldr	r1, [r2, #8]
    37b6:	68d2      	ldr	r2, [r2, #12]
    37b8:	60ca      	str	r2, [r1, #12]
    37ba:	4403      	add	r3, r0
    37bc:	f043 0001 	orr.w	r0, r3, #1
    37c0:	6091      	str	r1, [r2, #8]
    37c2:	6060      	str	r0, [r4, #4]
    37c4:	50e3      	str	r3, [r4, r3]
    37c6:	e7a2      	b.n	370e <_free_r+0x86>
    37c8:	2a14      	cmp	r2, #20
    37ca:	d817      	bhi.n	37fc <_free_r+0x174>
    37cc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    37d0:	007f      	lsls	r7, r7, #1
    37d2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    37d6:	e7a9      	b.n	372c <_free_r+0xa4>
    37d8:	10aa      	asrs	r2, r5, #2
    37da:	684b      	ldr	r3, [r1, #4]
    37dc:	2501      	movs	r5, #1
    37de:	fa05 f202 	lsl.w	r2, r5, r2
    37e2:	4313      	orrs	r3, r2
    37e4:	604b      	str	r3, [r1, #4]
    37e6:	4602      	mov	r2, r0
    37e8:	e7b1      	b.n	374e <_free_r+0xc6>
    37ea:	f043 0201 	orr.w	r2, r3, #1
    37ee:	614c      	str	r4, [r1, #20]
    37f0:	610c      	str	r4, [r1, #16]
    37f2:	60e5      	str	r5, [r4, #12]
    37f4:	60a5      	str	r5, [r4, #8]
    37f6:	6062      	str	r2, [r4, #4]
    37f8:	50e3      	str	r3, [r4, r3]
    37fa:	e788      	b.n	370e <_free_r+0x86>
    37fc:	2a54      	cmp	r2, #84	; 0x54
    37fe:	d806      	bhi.n	380e <_free_r+0x186>
    3800:	0b1a      	lsrs	r2, r3, #12
    3802:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3806:	007f      	lsls	r7, r7, #1
    3808:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    380c:	e78e      	b.n	372c <_free_r+0xa4>
    380e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3812:	d806      	bhi.n	3822 <_free_r+0x19a>
    3814:	0bda      	lsrs	r2, r3, #15
    3816:	f102 0778 	add.w	r7, r2, #120	; 0x78
    381a:	007f      	lsls	r7, r7, #1
    381c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    3820:	e784      	b.n	372c <_free_r+0xa4>
    3822:	f240 5054 	movw	r0, #1364	; 0x554
    3826:	4282      	cmp	r2, r0
    3828:	d806      	bhi.n	3838 <_free_r+0x1b0>
    382a:	0c9a      	lsrs	r2, r3, #18
    382c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    3830:	007f      	lsls	r7, r7, #1
    3832:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3836:	e779      	b.n	372c <_free_r+0xa4>
    3838:	27fe      	movs	r7, #254	; 0xfe
    383a:	257e      	movs	r5, #126	; 0x7e
    383c:	e776      	b.n	372c <_free_r+0xa4>
    383e:	f043 0201 	orr.w	r2, r3, #1
    3842:	6062      	str	r2, [r4, #4]
    3844:	50e3      	str	r3, [r4, r3]
    3846:	e762      	b.n	370e <_free_r+0x86>
    3848:	20000fc0 	.word	0x20000fc0
    384c:	20000fc8 	.word	0x20000fc8
    3850:	200013cc 	.word	0x200013cc
    3854:	20001ee4 	.word	0x20001ee4

00003858 <_localeconv_r>:
    3858:	4a04      	ldr	r2, [pc, #16]	; (386c <_localeconv_r+0x14>)
    385a:	4b05      	ldr	r3, [pc, #20]	; (3870 <_localeconv_r+0x18>)
    385c:	6812      	ldr	r2, [r2, #0]
    385e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    3860:	2800      	cmp	r0, #0
    3862:	bf08      	it	eq
    3864:	4618      	moveq	r0, r3
    3866:	30f0      	adds	r0, #240	; 0xf0
    3868:	4770      	bx	lr
    386a:	bf00      	nop
    386c:	200013d0 	.word	0x200013d0
    3870:	20000e54 	.word	0x20000e54
	...

00003880 <memchr>:
    3880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3884:	2a10      	cmp	r2, #16
    3886:	db2b      	blt.n	38e0 <memchr+0x60>
    3888:	f010 0f07 	tst.w	r0, #7
    388c:	d008      	beq.n	38a0 <memchr+0x20>
    388e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3892:	3a01      	subs	r2, #1
    3894:	428b      	cmp	r3, r1
    3896:	d02d      	beq.n	38f4 <memchr+0x74>
    3898:	f010 0f07 	tst.w	r0, #7
    389c:	b342      	cbz	r2, 38f0 <memchr+0x70>
    389e:	d1f6      	bne.n	388e <memchr+0xe>
    38a0:	b4f0      	push	{r4, r5, r6, r7}
    38a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    38a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    38aa:	f022 0407 	bic.w	r4, r2, #7
    38ae:	f07f 0700 	mvns.w	r7, #0
    38b2:	2300      	movs	r3, #0
    38b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    38b8:	3c08      	subs	r4, #8
    38ba:	ea85 0501 	eor.w	r5, r5, r1
    38be:	ea86 0601 	eor.w	r6, r6, r1
    38c2:	fa85 f547 	uadd8	r5, r5, r7
    38c6:	faa3 f587 	sel	r5, r3, r7
    38ca:	fa86 f647 	uadd8	r6, r6, r7
    38ce:	faa5 f687 	sel	r6, r5, r7
    38d2:	b98e      	cbnz	r6, 38f8 <memchr+0x78>
    38d4:	d1ee      	bne.n	38b4 <memchr+0x34>
    38d6:	bcf0      	pop	{r4, r5, r6, r7}
    38d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    38dc:	f002 0207 	and.w	r2, r2, #7
    38e0:	b132      	cbz	r2, 38f0 <memchr+0x70>
    38e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    38e6:	3a01      	subs	r2, #1
    38e8:	ea83 0301 	eor.w	r3, r3, r1
    38ec:	b113      	cbz	r3, 38f4 <memchr+0x74>
    38ee:	d1f8      	bne.n	38e2 <memchr+0x62>
    38f0:	2000      	movs	r0, #0
    38f2:	4770      	bx	lr
    38f4:	3801      	subs	r0, #1
    38f6:	4770      	bx	lr
    38f8:	2d00      	cmp	r5, #0
    38fa:	bf06      	itte	eq
    38fc:	4635      	moveq	r5, r6
    38fe:	3803      	subeq	r0, #3
    3900:	3807      	subne	r0, #7
    3902:	f015 0f01 	tst.w	r5, #1
    3906:	d107      	bne.n	3918 <memchr+0x98>
    3908:	3001      	adds	r0, #1
    390a:	f415 7f80 	tst.w	r5, #256	; 0x100
    390e:	bf02      	ittt	eq
    3910:	3001      	addeq	r0, #1
    3912:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3916:	3001      	addeq	r0, #1
    3918:	bcf0      	pop	{r4, r5, r6, r7}
    391a:	3801      	subs	r0, #1
    391c:	4770      	bx	lr
    391e:	bf00      	nop

00003920 <_Balloc>:
    3920:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3922:	b570      	push	{r4, r5, r6, lr}
    3924:	4605      	mov	r5, r0
    3926:	460c      	mov	r4, r1
    3928:	b14b      	cbz	r3, 393e <_Balloc+0x1e>
    392a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    392e:	b180      	cbz	r0, 3952 <_Balloc+0x32>
    3930:	6802      	ldr	r2, [r0, #0]
    3932:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3936:	2300      	movs	r3, #0
    3938:	6103      	str	r3, [r0, #16]
    393a:	60c3      	str	r3, [r0, #12]
    393c:	bd70      	pop	{r4, r5, r6, pc}
    393e:	2221      	movs	r2, #33	; 0x21
    3940:	2104      	movs	r1, #4
    3942:	f7fe fe9f 	bl	2684 <_calloc_r>
    3946:	64e8      	str	r0, [r5, #76]	; 0x4c
    3948:	4603      	mov	r3, r0
    394a:	2800      	cmp	r0, #0
    394c:	d1ed      	bne.n	392a <_Balloc+0xa>
    394e:	2000      	movs	r0, #0
    3950:	bd70      	pop	{r4, r5, r6, pc}
    3952:	2101      	movs	r1, #1
    3954:	fa01 f604 	lsl.w	r6, r1, r4
    3958:	1d72      	adds	r2, r6, #5
    395a:	4628      	mov	r0, r5
    395c:	0092      	lsls	r2, r2, #2
    395e:	f7fe fe91 	bl	2684 <_calloc_r>
    3962:	2800      	cmp	r0, #0
    3964:	d0f3      	beq.n	394e <_Balloc+0x2e>
    3966:	6044      	str	r4, [r0, #4]
    3968:	6086      	str	r6, [r0, #8]
    396a:	e7e4      	b.n	3936 <_Balloc+0x16>

0000396c <_Bfree>:
    396c:	b131      	cbz	r1, 397c <_Bfree+0x10>
    396e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3970:	684a      	ldr	r2, [r1, #4]
    3972:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3976:	6008      	str	r0, [r1, #0]
    3978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    397c:	4770      	bx	lr
    397e:	bf00      	nop

00003980 <__multadd>:
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
    3982:	690c      	ldr	r4, [r1, #16]
    3984:	b083      	sub	sp, #12
    3986:	460d      	mov	r5, r1
    3988:	4606      	mov	r6, r0
    398a:	f101 0e14 	add.w	lr, r1, #20
    398e:	2700      	movs	r7, #0
    3990:	f8de 0000 	ldr.w	r0, [lr]
    3994:	b281      	uxth	r1, r0
    3996:	fb02 3101 	mla	r1, r2, r1, r3
    399a:	0c0b      	lsrs	r3, r1, #16
    399c:	0c00      	lsrs	r0, r0, #16
    399e:	fb02 3300 	mla	r3, r2, r0, r3
    39a2:	b289      	uxth	r1, r1
    39a4:	3701      	adds	r7, #1
    39a6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    39aa:	42bc      	cmp	r4, r7
    39ac:	f84e 1b04 	str.w	r1, [lr], #4
    39b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    39b4:	dcec      	bgt.n	3990 <__multadd+0x10>
    39b6:	b13b      	cbz	r3, 39c8 <__multadd+0x48>
    39b8:	68aa      	ldr	r2, [r5, #8]
    39ba:	4294      	cmp	r4, r2
    39bc:	da07      	bge.n	39ce <__multadd+0x4e>
    39be:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    39c2:	3401      	adds	r4, #1
    39c4:	6153      	str	r3, [r2, #20]
    39c6:	612c      	str	r4, [r5, #16]
    39c8:	4628      	mov	r0, r5
    39ca:	b003      	add	sp, #12
    39cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ce:	6869      	ldr	r1, [r5, #4]
    39d0:	9301      	str	r3, [sp, #4]
    39d2:	3101      	adds	r1, #1
    39d4:	4630      	mov	r0, r6
    39d6:	f7ff ffa3 	bl	3920 <_Balloc>
    39da:	692a      	ldr	r2, [r5, #16]
    39dc:	3202      	adds	r2, #2
    39de:	f105 010c 	add.w	r1, r5, #12
    39e2:	4607      	mov	r7, r0
    39e4:	0092      	lsls	r2, r2, #2
    39e6:	300c      	adds	r0, #12
    39e8:	f7ff f986 	bl	2cf8 <memcpy>
    39ec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    39ee:	6869      	ldr	r1, [r5, #4]
    39f0:	9b01      	ldr	r3, [sp, #4]
    39f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    39f6:	6028      	str	r0, [r5, #0]
    39f8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    39fc:	463d      	mov	r5, r7
    39fe:	e7de      	b.n	39be <__multadd+0x3e>

00003a00 <__hi0bits>:
    3a00:	0c03      	lsrs	r3, r0, #16
    3a02:	041b      	lsls	r3, r3, #16
    3a04:	b9b3      	cbnz	r3, 3a34 <__hi0bits+0x34>
    3a06:	0400      	lsls	r0, r0, #16
    3a08:	2310      	movs	r3, #16
    3a0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    3a0e:	bf04      	itt	eq
    3a10:	0200      	lsleq	r0, r0, #8
    3a12:	3308      	addeq	r3, #8
    3a14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    3a18:	bf04      	itt	eq
    3a1a:	0100      	lsleq	r0, r0, #4
    3a1c:	3304      	addeq	r3, #4
    3a1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    3a22:	bf04      	itt	eq
    3a24:	0080      	lsleq	r0, r0, #2
    3a26:	3302      	addeq	r3, #2
    3a28:	2800      	cmp	r0, #0
    3a2a:	db07      	blt.n	3a3c <__hi0bits+0x3c>
    3a2c:	0042      	lsls	r2, r0, #1
    3a2e:	d403      	bmi.n	3a38 <__hi0bits+0x38>
    3a30:	2020      	movs	r0, #32
    3a32:	4770      	bx	lr
    3a34:	2300      	movs	r3, #0
    3a36:	e7e8      	b.n	3a0a <__hi0bits+0xa>
    3a38:	1c58      	adds	r0, r3, #1
    3a3a:	4770      	bx	lr
    3a3c:	4618      	mov	r0, r3
    3a3e:	4770      	bx	lr

00003a40 <__lo0bits>:
    3a40:	6803      	ldr	r3, [r0, #0]
    3a42:	f013 0207 	ands.w	r2, r3, #7
    3a46:	d007      	beq.n	3a58 <__lo0bits+0x18>
    3a48:	07d9      	lsls	r1, r3, #31
    3a4a:	d420      	bmi.n	3a8e <__lo0bits+0x4e>
    3a4c:	079a      	lsls	r2, r3, #30
    3a4e:	d420      	bmi.n	3a92 <__lo0bits+0x52>
    3a50:	089b      	lsrs	r3, r3, #2
    3a52:	6003      	str	r3, [r0, #0]
    3a54:	2002      	movs	r0, #2
    3a56:	4770      	bx	lr
    3a58:	b299      	uxth	r1, r3
    3a5a:	b909      	cbnz	r1, 3a60 <__lo0bits+0x20>
    3a5c:	0c1b      	lsrs	r3, r3, #16
    3a5e:	2210      	movs	r2, #16
    3a60:	f013 0fff 	tst.w	r3, #255	; 0xff
    3a64:	bf04      	itt	eq
    3a66:	0a1b      	lsreq	r3, r3, #8
    3a68:	3208      	addeq	r2, #8
    3a6a:	0719      	lsls	r1, r3, #28
    3a6c:	bf04      	itt	eq
    3a6e:	091b      	lsreq	r3, r3, #4
    3a70:	3204      	addeq	r2, #4
    3a72:	0799      	lsls	r1, r3, #30
    3a74:	bf04      	itt	eq
    3a76:	089b      	lsreq	r3, r3, #2
    3a78:	3202      	addeq	r2, #2
    3a7a:	07d9      	lsls	r1, r3, #31
    3a7c:	d404      	bmi.n	3a88 <__lo0bits+0x48>
    3a7e:	085b      	lsrs	r3, r3, #1
    3a80:	d101      	bne.n	3a86 <__lo0bits+0x46>
    3a82:	2020      	movs	r0, #32
    3a84:	4770      	bx	lr
    3a86:	3201      	adds	r2, #1
    3a88:	6003      	str	r3, [r0, #0]
    3a8a:	4610      	mov	r0, r2
    3a8c:	4770      	bx	lr
    3a8e:	2000      	movs	r0, #0
    3a90:	4770      	bx	lr
    3a92:	085b      	lsrs	r3, r3, #1
    3a94:	6003      	str	r3, [r0, #0]
    3a96:	2001      	movs	r0, #1
    3a98:	4770      	bx	lr
    3a9a:	bf00      	nop

00003a9c <__i2b>:
    3a9c:	b510      	push	{r4, lr}
    3a9e:	460c      	mov	r4, r1
    3aa0:	2101      	movs	r1, #1
    3aa2:	f7ff ff3d 	bl	3920 <_Balloc>
    3aa6:	2201      	movs	r2, #1
    3aa8:	6144      	str	r4, [r0, #20]
    3aaa:	6102      	str	r2, [r0, #16]
    3aac:	bd10      	pop	{r4, pc}
    3aae:	bf00      	nop

00003ab0 <__multiply>:
    3ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab4:	690d      	ldr	r5, [r1, #16]
    3ab6:	6917      	ldr	r7, [r2, #16]
    3ab8:	42bd      	cmp	r5, r7
    3aba:	b083      	sub	sp, #12
    3abc:	460c      	mov	r4, r1
    3abe:	4616      	mov	r6, r2
    3ac0:	da04      	bge.n	3acc <__multiply+0x1c>
    3ac2:	462a      	mov	r2, r5
    3ac4:	4634      	mov	r4, r6
    3ac6:	463d      	mov	r5, r7
    3ac8:	460e      	mov	r6, r1
    3aca:	4617      	mov	r7, r2
    3acc:	68a3      	ldr	r3, [r4, #8]
    3ace:	6861      	ldr	r1, [r4, #4]
    3ad0:	eb05 0807 	add.w	r8, r5, r7
    3ad4:	4598      	cmp	r8, r3
    3ad6:	bfc8      	it	gt
    3ad8:	3101      	addgt	r1, #1
    3ada:	f7ff ff21 	bl	3920 <_Balloc>
    3ade:	f100 0c14 	add.w	ip, r0, #20
    3ae2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    3ae6:	45cc      	cmp	ip, r9
    3ae8:	9000      	str	r0, [sp, #0]
    3aea:	d205      	bcs.n	3af8 <__multiply+0x48>
    3aec:	4663      	mov	r3, ip
    3aee:	2100      	movs	r1, #0
    3af0:	f843 1b04 	str.w	r1, [r3], #4
    3af4:	4599      	cmp	r9, r3
    3af6:	d8fb      	bhi.n	3af0 <__multiply+0x40>
    3af8:	f106 0214 	add.w	r2, r6, #20
    3afc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    3b00:	f104 0314 	add.w	r3, r4, #20
    3b04:	4552      	cmp	r2, sl
    3b06:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    3b0a:	d254      	bcs.n	3bb6 <__multiply+0x106>
    3b0c:	f8cd 9004 	str.w	r9, [sp, #4]
    3b10:	4699      	mov	r9, r3
    3b12:	f852 3b04 	ldr.w	r3, [r2], #4
    3b16:	fa1f fb83 	uxth.w	fp, r3
    3b1a:	f1bb 0f00 	cmp.w	fp, #0
    3b1e:	d020      	beq.n	3b62 <__multiply+0xb2>
    3b20:	2000      	movs	r0, #0
    3b22:	464f      	mov	r7, r9
    3b24:	4666      	mov	r6, ip
    3b26:	4605      	mov	r5, r0
    3b28:	e000      	b.n	3b2c <__multiply+0x7c>
    3b2a:	461e      	mov	r6, r3
    3b2c:	f857 4b04 	ldr.w	r4, [r7], #4
    3b30:	6830      	ldr	r0, [r6, #0]
    3b32:	b2a1      	uxth	r1, r4
    3b34:	b283      	uxth	r3, r0
    3b36:	fb0b 3101 	mla	r1, fp, r1, r3
    3b3a:	0c24      	lsrs	r4, r4, #16
    3b3c:	0c00      	lsrs	r0, r0, #16
    3b3e:	194b      	adds	r3, r1, r5
    3b40:	fb0b 0004 	mla	r0, fp, r4, r0
    3b44:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    3b48:	b299      	uxth	r1, r3
    3b4a:	4633      	mov	r3, r6
    3b4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    3b50:	45be      	cmp	lr, r7
    3b52:	ea4f 4510 	mov.w	r5, r0, lsr #16
    3b56:	f843 1b04 	str.w	r1, [r3], #4
    3b5a:	d8e6      	bhi.n	3b2a <__multiply+0x7a>
    3b5c:	6075      	str	r5, [r6, #4]
    3b5e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    3b62:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    3b66:	d020      	beq.n	3baa <__multiply+0xfa>
    3b68:	f8dc 3000 	ldr.w	r3, [ip]
    3b6c:	4667      	mov	r7, ip
    3b6e:	4618      	mov	r0, r3
    3b70:	464d      	mov	r5, r9
    3b72:	2100      	movs	r1, #0
    3b74:	e000      	b.n	3b78 <__multiply+0xc8>
    3b76:	4637      	mov	r7, r6
    3b78:	882c      	ldrh	r4, [r5, #0]
    3b7a:	0c00      	lsrs	r0, r0, #16
    3b7c:	fb0b 0004 	mla	r0, fp, r4, r0
    3b80:	4401      	add	r1, r0
    3b82:	b29c      	uxth	r4, r3
    3b84:	463e      	mov	r6, r7
    3b86:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    3b8a:	f846 3b04 	str.w	r3, [r6], #4
    3b8e:	6878      	ldr	r0, [r7, #4]
    3b90:	f855 4b04 	ldr.w	r4, [r5], #4
    3b94:	b283      	uxth	r3, r0
    3b96:	0c24      	lsrs	r4, r4, #16
    3b98:	fb0b 3404 	mla	r4, fp, r4, r3
    3b9c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    3ba0:	45ae      	cmp	lr, r5
    3ba2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    3ba6:	d8e6      	bhi.n	3b76 <__multiply+0xc6>
    3ba8:	607b      	str	r3, [r7, #4]
    3baa:	4592      	cmp	sl, r2
    3bac:	f10c 0c04 	add.w	ip, ip, #4
    3bb0:	d8af      	bhi.n	3b12 <__multiply+0x62>
    3bb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    3bb6:	f1b8 0f00 	cmp.w	r8, #0
    3bba:	dd0b      	ble.n	3bd4 <__multiply+0x124>
    3bbc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    3bc0:	f1a9 0904 	sub.w	r9, r9, #4
    3bc4:	b11b      	cbz	r3, 3bce <__multiply+0x11e>
    3bc6:	e005      	b.n	3bd4 <__multiply+0x124>
    3bc8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    3bcc:	b913      	cbnz	r3, 3bd4 <__multiply+0x124>
    3bce:	f1b8 0801 	subs.w	r8, r8, #1
    3bd2:	d1f9      	bne.n	3bc8 <__multiply+0x118>
    3bd4:	9800      	ldr	r0, [sp, #0]
    3bd6:	f8c0 8010 	str.w	r8, [r0, #16]
    3bda:	b003      	add	sp, #12
    3bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003be0 <__pow5mult>:
    3be0:	f012 0303 	ands.w	r3, r2, #3
    3be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3be8:	4614      	mov	r4, r2
    3bea:	4607      	mov	r7, r0
    3bec:	d12e      	bne.n	3c4c <__pow5mult+0x6c>
    3bee:	460e      	mov	r6, r1
    3bf0:	10a4      	asrs	r4, r4, #2
    3bf2:	d01c      	beq.n	3c2e <__pow5mult+0x4e>
    3bf4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    3bf6:	b395      	cbz	r5, 3c5e <__pow5mult+0x7e>
    3bf8:	07e3      	lsls	r3, r4, #31
    3bfa:	f04f 0800 	mov.w	r8, #0
    3bfe:	d406      	bmi.n	3c0e <__pow5mult+0x2e>
    3c00:	1064      	asrs	r4, r4, #1
    3c02:	d014      	beq.n	3c2e <__pow5mult+0x4e>
    3c04:	6828      	ldr	r0, [r5, #0]
    3c06:	b1a8      	cbz	r0, 3c34 <__pow5mult+0x54>
    3c08:	4605      	mov	r5, r0
    3c0a:	07e3      	lsls	r3, r4, #31
    3c0c:	d5f8      	bpl.n	3c00 <__pow5mult+0x20>
    3c0e:	462a      	mov	r2, r5
    3c10:	4631      	mov	r1, r6
    3c12:	4638      	mov	r0, r7
    3c14:	f7ff ff4c 	bl	3ab0 <__multiply>
    3c18:	b1b6      	cbz	r6, 3c48 <__pow5mult+0x68>
    3c1a:	6872      	ldr	r2, [r6, #4]
    3c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c1e:	1064      	asrs	r4, r4, #1
    3c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3c24:	6031      	str	r1, [r6, #0]
    3c26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    3c2a:	4606      	mov	r6, r0
    3c2c:	d1ea      	bne.n	3c04 <__pow5mult+0x24>
    3c2e:	4630      	mov	r0, r6
    3c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c34:	462a      	mov	r2, r5
    3c36:	4629      	mov	r1, r5
    3c38:	4638      	mov	r0, r7
    3c3a:	f7ff ff39 	bl	3ab0 <__multiply>
    3c3e:	6028      	str	r0, [r5, #0]
    3c40:	f8c0 8000 	str.w	r8, [r0]
    3c44:	4605      	mov	r5, r0
    3c46:	e7e0      	b.n	3c0a <__pow5mult+0x2a>
    3c48:	4606      	mov	r6, r0
    3c4a:	e7d9      	b.n	3c00 <__pow5mult+0x20>
    3c4c:	1e5a      	subs	r2, r3, #1
    3c4e:	4d0b      	ldr	r5, [pc, #44]	; (3c7c <__pow5mult+0x9c>)
    3c50:	2300      	movs	r3, #0
    3c52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3c56:	f7ff fe93 	bl	3980 <__multadd>
    3c5a:	4606      	mov	r6, r0
    3c5c:	e7c8      	b.n	3bf0 <__pow5mult+0x10>
    3c5e:	2101      	movs	r1, #1
    3c60:	4638      	mov	r0, r7
    3c62:	f7ff fe5d 	bl	3920 <_Balloc>
    3c66:	f240 2171 	movw	r1, #625	; 0x271
    3c6a:	2201      	movs	r2, #1
    3c6c:	2300      	movs	r3, #0
    3c6e:	6141      	str	r1, [r0, #20]
    3c70:	6102      	str	r2, [r0, #16]
    3c72:	4605      	mov	r5, r0
    3c74:	64b8      	str	r0, [r7, #72]	; 0x48
    3c76:	6003      	str	r3, [r0, #0]
    3c78:	e7be      	b.n	3bf8 <__pow5mult+0x18>
    3c7a:	bf00      	nop
    3c7c:	20000820 	.word	0x20000820

00003c80 <__lshift>:
    3c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c84:	4691      	mov	r9, r2
    3c86:	690a      	ldr	r2, [r1, #16]
    3c88:	688b      	ldr	r3, [r1, #8]
    3c8a:	ea4f 1469 	mov.w	r4, r9, asr #5
    3c8e:	eb04 0802 	add.w	r8, r4, r2
    3c92:	f108 0501 	add.w	r5, r8, #1
    3c96:	429d      	cmp	r5, r3
    3c98:	460e      	mov	r6, r1
    3c9a:	4682      	mov	sl, r0
    3c9c:	6849      	ldr	r1, [r1, #4]
    3c9e:	dd04      	ble.n	3caa <__lshift+0x2a>
    3ca0:	005b      	lsls	r3, r3, #1
    3ca2:	429d      	cmp	r5, r3
    3ca4:	f101 0101 	add.w	r1, r1, #1
    3ca8:	dcfa      	bgt.n	3ca0 <__lshift+0x20>
    3caa:	4650      	mov	r0, sl
    3cac:	f7ff fe38 	bl	3920 <_Balloc>
    3cb0:	2c00      	cmp	r4, #0
    3cb2:	f100 0214 	add.w	r2, r0, #20
    3cb6:	dd38      	ble.n	3d2a <__lshift+0xaa>
    3cb8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    3cbc:	2100      	movs	r1, #0
    3cbe:	f842 1b04 	str.w	r1, [r2], #4
    3cc2:	4293      	cmp	r3, r2
    3cc4:	d1fb      	bne.n	3cbe <__lshift+0x3e>
    3cc6:	6934      	ldr	r4, [r6, #16]
    3cc8:	f106 0114 	add.w	r1, r6, #20
    3ccc:	f019 091f 	ands.w	r9, r9, #31
    3cd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    3cd4:	d021      	beq.n	3d1a <__lshift+0x9a>
    3cd6:	f1c9 0220 	rsb	r2, r9, #32
    3cda:	2400      	movs	r4, #0
    3cdc:	680f      	ldr	r7, [r1, #0]
    3cde:	fa07 fc09 	lsl.w	ip, r7, r9
    3ce2:	ea4c 0404 	orr.w	r4, ip, r4
    3ce6:	469c      	mov	ip, r3
    3ce8:	f843 4b04 	str.w	r4, [r3], #4
    3cec:	f851 4b04 	ldr.w	r4, [r1], #4
    3cf0:	458e      	cmp	lr, r1
    3cf2:	fa24 f402 	lsr.w	r4, r4, r2
    3cf6:	d8f1      	bhi.n	3cdc <__lshift+0x5c>
    3cf8:	f8cc 4004 	str.w	r4, [ip, #4]
    3cfc:	b10c      	cbz	r4, 3d02 <__lshift+0x82>
    3cfe:	f108 0502 	add.w	r5, r8, #2
    3d02:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    3d06:	6872      	ldr	r2, [r6, #4]
    3d08:	3d01      	subs	r5, #1
    3d0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3d0e:	6105      	str	r5, [r0, #16]
    3d10:	6031      	str	r1, [r6, #0]
    3d12:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    3d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d1a:	3b04      	subs	r3, #4
    3d1c:	f851 2b04 	ldr.w	r2, [r1], #4
    3d20:	f843 2f04 	str.w	r2, [r3, #4]!
    3d24:	458e      	cmp	lr, r1
    3d26:	d8f9      	bhi.n	3d1c <__lshift+0x9c>
    3d28:	e7eb      	b.n	3d02 <__lshift+0x82>
    3d2a:	4613      	mov	r3, r2
    3d2c:	e7cb      	b.n	3cc6 <__lshift+0x46>
    3d2e:	bf00      	nop

00003d30 <__mcmp>:
    3d30:	6902      	ldr	r2, [r0, #16]
    3d32:	690b      	ldr	r3, [r1, #16]
    3d34:	1ad2      	subs	r2, r2, r3
    3d36:	d113      	bne.n	3d60 <__mcmp+0x30>
    3d38:	009b      	lsls	r3, r3, #2
    3d3a:	3014      	adds	r0, #20
    3d3c:	3114      	adds	r1, #20
    3d3e:	4419      	add	r1, r3
    3d40:	b410      	push	{r4}
    3d42:	4403      	add	r3, r0
    3d44:	e001      	b.n	3d4a <__mcmp+0x1a>
    3d46:	4298      	cmp	r0, r3
    3d48:	d20c      	bcs.n	3d64 <__mcmp+0x34>
    3d4a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    3d4e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    3d52:	4294      	cmp	r4, r2
    3d54:	d0f7      	beq.n	3d46 <__mcmp+0x16>
    3d56:	d309      	bcc.n	3d6c <__mcmp+0x3c>
    3d58:	2001      	movs	r0, #1
    3d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d5e:	4770      	bx	lr
    3d60:	4610      	mov	r0, r2
    3d62:	4770      	bx	lr
    3d64:	2000      	movs	r0, #0
    3d66:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d6a:	4770      	bx	lr
    3d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d70:	e7f3      	b.n	3d5a <__mcmp+0x2a>
    3d72:	bf00      	nop

00003d74 <__mdiff>:
    3d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d78:	690b      	ldr	r3, [r1, #16]
    3d7a:	460f      	mov	r7, r1
    3d7c:	6911      	ldr	r1, [r2, #16]
    3d7e:	1a5b      	subs	r3, r3, r1
    3d80:	2b00      	cmp	r3, #0
    3d82:	4690      	mov	r8, r2
    3d84:	d117      	bne.n	3db6 <__mdiff+0x42>
    3d86:	0089      	lsls	r1, r1, #2
    3d88:	f107 0214 	add.w	r2, r7, #20
    3d8c:	f108 0514 	add.w	r5, r8, #20
    3d90:	1853      	adds	r3, r2, r1
    3d92:	4429      	add	r1, r5
    3d94:	e001      	b.n	3d9a <__mdiff+0x26>
    3d96:	429a      	cmp	r2, r3
    3d98:	d25e      	bcs.n	3e58 <__mdiff+0xe4>
    3d9a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    3d9e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    3da2:	42a6      	cmp	r6, r4
    3da4:	d0f7      	beq.n	3d96 <__mdiff+0x22>
    3da6:	d260      	bcs.n	3e6a <__mdiff+0xf6>
    3da8:	463b      	mov	r3, r7
    3daa:	4614      	mov	r4, r2
    3dac:	4647      	mov	r7, r8
    3dae:	f04f 0901 	mov.w	r9, #1
    3db2:	4698      	mov	r8, r3
    3db4:	e006      	b.n	3dc4 <__mdiff+0x50>
    3db6:	db5d      	blt.n	3e74 <__mdiff+0x100>
    3db8:	f107 0514 	add.w	r5, r7, #20
    3dbc:	f102 0414 	add.w	r4, r2, #20
    3dc0:	f04f 0900 	mov.w	r9, #0
    3dc4:	6879      	ldr	r1, [r7, #4]
    3dc6:	f7ff fdab 	bl	3920 <_Balloc>
    3dca:	f8d8 3010 	ldr.w	r3, [r8, #16]
    3dce:	693e      	ldr	r6, [r7, #16]
    3dd0:	f8c0 900c 	str.w	r9, [r0, #12]
    3dd4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    3dd8:	46a6      	mov	lr, r4
    3dda:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    3dde:	f100 0414 	add.w	r4, r0, #20
    3de2:	2300      	movs	r3, #0
    3de4:	f85e 1b04 	ldr.w	r1, [lr], #4
    3de8:	f855 8b04 	ldr.w	r8, [r5], #4
    3dec:	b28a      	uxth	r2, r1
    3dee:	fa13 f388 	uxtah	r3, r3, r8
    3df2:	0c09      	lsrs	r1, r1, #16
    3df4:	1a9a      	subs	r2, r3, r2
    3df6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    3dfa:	eb03 4322 	add.w	r3, r3, r2, asr #16
    3dfe:	b292      	uxth	r2, r2
    3e00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3e04:	45f4      	cmp	ip, lr
    3e06:	f844 2b04 	str.w	r2, [r4], #4
    3e0a:	ea4f 4323 	mov.w	r3, r3, asr #16
    3e0e:	d8e9      	bhi.n	3de4 <__mdiff+0x70>
    3e10:	42af      	cmp	r7, r5
    3e12:	d917      	bls.n	3e44 <__mdiff+0xd0>
    3e14:	46a4      	mov	ip, r4
    3e16:	4629      	mov	r1, r5
    3e18:	f851 eb04 	ldr.w	lr, [r1], #4
    3e1c:	fa13 f28e 	uxtah	r2, r3, lr
    3e20:	1413      	asrs	r3, r2, #16
    3e22:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    3e26:	b292      	uxth	r2, r2
    3e28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    3e2c:	428f      	cmp	r7, r1
    3e2e:	f84c 2b04 	str.w	r2, [ip], #4
    3e32:	ea4f 4323 	mov.w	r3, r3, asr #16
    3e36:	d8ef      	bhi.n	3e18 <__mdiff+0xa4>
    3e38:	43ed      	mvns	r5, r5
    3e3a:	443d      	add	r5, r7
    3e3c:	f025 0503 	bic.w	r5, r5, #3
    3e40:	3504      	adds	r5, #4
    3e42:	442c      	add	r4, r5
    3e44:	3c04      	subs	r4, #4
    3e46:	b922      	cbnz	r2, 3e52 <__mdiff+0xde>
    3e48:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    3e4c:	3e01      	subs	r6, #1
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d0fa      	beq.n	3e48 <__mdiff+0xd4>
    3e52:	6106      	str	r6, [r0, #16]
    3e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e58:	2100      	movs	r1, #0
    3e5a:	f7ff fd61 	bl	3920 <_Balloc>
    3e5e:	2201      	movs	r2, #1
    3e60:	2300      	movs	r3, #0
    3e62:	6102      	str	r2, [r0, #16]
    3e64:	6143      	str	r3, [r0, #20]
    3e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e6a:	462c      	mov	r4, r5
    3e6c:	f04f 0900 	mov.w	r9, #0
    3e70:	4615      	mov	r5, r2
    3e72:	e7a7      	b.n	3dc4 <__mdiff+0x50>
    3e74:	463b      	mov	r3, r7
    3e76:	f107 0414 	add.w	r4, r7, #20
    3e7a:	f108 0514 	add.w	r5, r8, #20
    3e7e:	4647      	mov	r7, r8
    3e80:	f04f 0901 	mov.w	r9, #1
    3e84:	4698      	mov	r8, r3
    3e86:	e79d      	b.n	3dc4 <__mdiff+0x50>

00003e88 <__d2b>:
    3e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e8c:	ec57 6b10 	vmov	r6, r7, d0
    3e90:	b083      	sub	sp, #12
    3e92:	4688      	mov	r8, r1
    3e94:	2101      	movs	r1, #1
    3e96:	463c      	mov	r4, r7
    3e98:	f3c7 550a 	ubfx	r5, r7, #20, #11
    3e9c:	4617      	mov	r7, r2
    3e9e:	f7ff fd3f 	bl	3920 <_Balloc>
    3ea2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    3ea6:	4681      	mov	r9, r0
    3ea8:	b10d      	cbz	r5, 3eae <__d2b+0x26>
    3eaa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    3eae:	9401      	str	r4, [sp, #4]
    3eb0:	b31e      	cbz	r6, 3efa <__d2b+0x72>
    3eb2:	a802      	add	r0, sp, #8
    3eb4:	f840 6d08 	str.w	r6, [r0, #-8]!
    3eb8:	f7ff fdc2 	bl	3a40 <__lo0bits>
    3ebc:	2800      	cmp	r0, #0
    3ebe:	d134      	bne.n	3f2a <__d2b+0xa2>
    3ec0:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3ec4:	f8c9 2014 	str.w	r2, [r9, #20]
    3ec8:	2b00      	cmp	r3, #0
    3eca:	bf0c      	ite	eq
    3ecc:	2101      	moveq	r1, #1
    3ece:	2102      	movne	r1, #2
    3ed0:	f8c9 3018 	str.w	r3, [r9, #24]
    3ed4:	f8c9 1010 	str.w	r1, [r9, #16]
    3ed8:	b9dd      	cbnz	r5, 3f12 <__d2b+0x8a>
    3eda:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    3ede:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    3ee2:	f8c8 0000 	str.w	r0, [r8]
    3ee6:	6918      	ldr	r0, [r3, #16]
    3ee8:	f7ff fd8a 	bl	3a00 <__hi0bits>
    3eec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    3ef0:	6038      	str	r0, [r7, #0]
    3ef2:	4648      	mov	r0, r9
    3ef4:	b003      	add	sp, #12
    3ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3efa:	a801      	add	r0, sp, #4
    3efc:	f7ff fda0 	bl	3a40 <__lo0bits>
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	f8c9 3014 	str.w	r3, [r9, #20]
    3f06:	2101      	movs	r1, #1
    3f08:	3020      	adds	r0, #32
    3f0a:	f8c9 1010 	str.w	r1, [r9, #16]
    3f0e:	2d00      	cmp	r5, #0
    3f10:	d0e3      	beq.n	3eda <__d2b+0x52>
    3f12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    3f16:	4405      	add	r5, r0
    3f18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    3f1c:	f8c8 5000 	str.w	r5, [r8]
    3f20:	6038      	str	r0, [r7, #0]
    3f22:	4648      	mov	r0, r9
    3f24:	b003      	add	sp, #12
    3f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f2a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3f2e:	f1c0 0120 	rsb	r1, r0, #32
    3f32:	fa03 f101 	lsl.w	r1, r3, r1
    3f36:	430a      	orrs	r2, r1
    3f38:	40c3      	lsrs	r3, r0
    3f3a:	9301      	str	r3, [sp, #4]
    3f3c:	f8c9 2014 	str.w	r2, [r9, #20]
    3f40:	e7c2      	b.n	3ec8 <__d2b+0x40>
    3f42:	bf00      	nop

00003f44 <_vasnprintf_r>:
    3f44:	b570      	push	{r4, r5, r6, lr}
    3f46:	4615      	mov	r5, r2
    3f48:	b09a      	sub	sp, #104	; 0x68
    3f4a:	6814      	ldr	r4, [r2, #0]
    3f4c:	b109      	cbz	r1, 3f52 <_vasnprintf_r+0xe>
    3f4e:	2c00      	cmp	r4, #0
    3f50:	d11a      	bne.n	3f88 <_vasnprintf_r+0x44>
    3f52:	2400      	movs	r4, #0
    3f54:	f44f 7222 	mov.w	r2, #648	; 0x288
    3f58:	f8ad 200c 	strh.w	r2, [sp, #12]
    3f5c:	9400      	str	r4, [sp, #0]
    3f5e:	9404      	str	r4, [sp, #16]
    3f60:	461a      	mov	r2, r3
    3f62:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3f66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3f68:	9402      	str	r4, [sp, #8]
    3f6a:	4669      	mov	r1, sp
    3f6c:	9405      	str	r4, [sp, #20]
    3f6e:	f8ad 600e 	strh.w	r6, [sp, #14]
    3f72:	f000 fef1 	bl	4d58 <_svfprintf_r>
    3f76:	2800      	cmp	r0, #0
    3f78:	db11      	blt.n	3f9e <_vasnprintf_r+0x5a>
    3f7a:	9b00      	ldr	r3, [sp, #0]
    3f7c:	6028      	str	r0, [r5, #0]
    3f7e:	2200      	movs	r2, #0
    3f80:	701a      	strb	r2, [r3, #0]
    3f82:	9804      	ldr	r0, [sp, #16]
    3f84:	b01a      	add	sp, #104	; 0x68
    3f86:	bd70      	pop	{r4, r5, r6, pc}
    3f88:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    3f8c:	9100      	str	r1, [sp, #0]
    3f8e:	9104      	str	r1, [sp, #16]
    3f90:	f8ad 200c 	strh.w	r2, [sp, #12]
    3f94:	dae4      	bge.n	3f60 <_vasnprintf_r+0x1c>
    3f96:	238b      	movs	r3, #139	; 0x8b
    3f98:	6003      	str	r3, [r0, #0]
    3f9a:	2000      	movs	r0, #0
    3f9c:	e7f2      	b.n	3f84 <_vasnprintf_r+0x40>
    3f9e:	2000      	movs	r0, #0
    3fa0:	e7f0      	b.n	3f84 <_vasnprintf_r+0x40>
    3fa2:	bf00      	nop

00003fa4 <quorem>:
    3fa4:	6902      	ldr	r2, [r0, #16]
    3fa6:	690b      	ldr	r3, [r1, #16]
    3fa8:	4293      	cmp	r3, r2
    3faa:	f300 808d 	bgt.w	40c8 <quorem+0x124>
    3fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fb2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3fb6:	f101 0714 	add.w	r7, r1, #20
    3fba:	f100 0b14 	add.w	fp, r0, #20
    3fbe:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    3fc2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    3fc6:	ea4f 0488 	mov.w	r4, r8, lsl #2
    3fca:	b083      	sub	sp, #12
    3fcc:	3201      	adds	r2, #1
    3fce:	fbb3 f9f2 	udiv	r9, r3, r2
    3fd2:	eb0b 0304 	add.w	r3, fp, r4
    3fd6:	9400      	str	r4, [sp, #0]
    3fd8:	eb07 0a04 	add.w	sl, r7, r4
    3fdc:	9301      	str	r3, [sp, #4]
    3fde:	f1b9 0f00 	cmp.w	r9, #0
    3fe2:	d039      	beq.n	4058 <quorem+0xb4>
    3fe4:	2500      	movs	r5, #0
    3fe6:	46bc      	mov	ip, r7
    3fe8:	46de      	mov	lr, fp
    3fea:	462b      	mov	r3, r5
    3fec:	f85c 6b04 	ldr.w	r6, [ip], #4
    3ff0:	f8de 2000 	ldr.w	r2, [lr]
    3ff4:	b2b4      	uxth	r4, r6
    3ff6:	fb09 5504 	mla	r5, r9, r4, r5
    3ffa:	0c36      	lsrs	r6, r6, #16
    3ffc:	0c2c      	lsrs	r4, r5, #16
    3ffe:	fb09 4406 	mla	r4, r9, r6, r4
    4002:	b2ad      	uxth	r5, r5
    4004:	1b5b      	subs	r3, r3, r5
    4006:	b2a6      	uxth	r6, r4
    4008:	fa13 f382 	uxtah	r3, r3, r2
    400c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    4010:	eb06 4623 	add.w	r6, r6, r3, asr #16
    4014:	b29b      	uxth	r3, r3
    4016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    401a:	45e2      	cmp	sl, ip
    401c:	f84e 3b04 	str.w	r3, [lr], #4
    4020:	ea4f 4514 	mov.w	r5, r4, lsr #16
    4024:	ea4f 4326 	mov.w	r3, r6, asr #16
    4028:	d2e0      	bcs.n	3fec <quorem+0x48>
    402a:	9b00      	ldr	r3, [sp, #0]
    402c:	f85b 3003 	ldr.w	r3, [fp, r3]
    4030:	b993      	cbnz	r3, 4058 <quorem+0xb4>
    4032:	9c01      	ldr	r4, [sp, #4]
    4034:	1f23      	subs	r3, r4, #4
    4036:	459b      	cmp	fp, r3
    4038:	d20c      	bcs.n	4054 <quorem+0xb0>
    403a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    403e:	b94b      	cbnz	r3, 4054 <quorem+0xb0>
    4040:	f1a4 0308 	sub.w	r3, r4, #8
    4044:	e002      	b.n	404c <quorem+0xa8>
    4046:	681a      	ldr	r2, [r3, #0]
    4048:	3b04      	subs	r3, #4
    404a:	b91a      	cbnz	r2, 4054 <quorem+0xb0>
    404c:	459b      	cmp	fp, r3
    404e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4052:	d3f8      	bcc.n	4046 <quorem+0xa2>
    4054:	f8c0 8010 	str.w	r8, [r0, #16]
    4058:	4604      	mov	r4, r0
    405a:	f7ff fe69 	bl	3d30 <__mcmp>
    405e:	2800      	cmp	r0, #0
    4060:	db2e      	blt.n	40c0 <quorem+0x11c>
    4062:	f109 0901 	add.w	r9, r9, #1
    4066:	465d      	mov	r5, fp
    4068:	2300      	movs	r3, #0
    406a:	f857 1b04 	ldr.w	r1, [r7], #4
    406e:	6828      	ldr	r0, [r5, #0]
    4070:	b28a      	uxth	r2, r1
    4072:	1a9a      	subs	r2, r3, r2
    4074:	0c09      	lsrs	r1, r1, #16
    4076:	fa12 f280 	uxtah	r2, r2, r0
    407a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    407e:	eb03 4322 	add.w	r3, r3, r2, asr #16
    4082:	b291      	uxth	r1, r2
    4084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4088:	45ba      	cmp	sl, r7
    408a:	f845 1b04 	str.w	r1, [r5], #4
    408e:	ea4f 4323 	mov.w	r3, r3, asr #16
    4092:	d2ea      	bcs.n	406a <quorem+0xc6>
    4094:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    4098:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    409c:	b982      	cbnz	r2, 40c0 <quorem+0x11c>
    409e:	1f1a      	subs	r2, r3, #4
    40a0:	4593      	cmp	fp, r2
    40a2:	d20b      	bcs.n	40bc <quorem+0x118>
    40a4:	f853 2c04 	ldr.w	r2, [r3, #-4]
    40a8:	b942      	cbnz	r2, 40bc <quorem+0x118>
    40aa:	3b08      	subs	r3, #8
    40ac:	e002      	b.n	40b4 <quorem+0x110>
    40ae:	681a      	ldr	r2, [r3, #0]
    40b0:	3b04      	subs	r3, #4
    40b2:	b91a      	cbnz	r2, 40bc <quorem+0x118>
    40b4:	459b      	cmp	fp, r3
    40b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    40ba:	d3f8      	bcc.n	40ae <quorem+0x10a>
    40bc:	f8c4 8010 	str.w	r8, [r4, #16]
    40c0:	4648      	mov	r0, r9
    40c2:	b003      	add	sp, #12
    40c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40c8:	2000      	movs	r0, #0
    40ca:	4770      	bx	lr
    40cc:	0000      	movs	r0, r0
	...

000040d0 <_dtoa_r>:
    40d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40d4:	ec57 6b10 	vmov	r6, r7, d0
    40d8:	b093      	sub	sp, #76	; 0x4c
    40da:	6c05      	ldr	r5, [r0, #64]	; 0x40
    40dc:	9101      	str	r1, [sp, #4]
    40de:	4604      	mov	r4, r0
    40e0:	4690      	mov	r8, r2
    40e2:	9304      	str	r3, [sp, #16]
    40e4:	ee10 aa10 	vmov	sl, s0
    40e8:	46bb      	mov	fp, r7
    40ea:	b14d      	cbz	r5, 4100 <_dtoa_r+0x30>
    40ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
    40ee:	606a      	str	r2, [r5, #4]
    40f0:	2301      	movs	r3, #1
    40f2:	4093      	lsls	r3, r2
    40f4:	60ab      	str	r3, [r5, #8]
    40f6:	4629      	mov	r1, r5
    40f8:	f7ff fc38 	bl	396c <_Bfree>
    40fc:	2300      	movs	r3, #0
    40fe:	6423      	str	r3, [r4, #64]	; 0x40
    4100:	f1bb 0f00 	cmp.w	fp, #0
    4104:	465e      	mov	r6, fp
    4106:	db34      	blt.n	4172 <_dtoa_r+0xa2>
    4108:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    410a:	2300      	movs	r3, #0
    410c:	6013      	str	r3, [r2, #0]
    410e:	4bc4      	ldr	r3, [pc, #784]	; (4420 <_dtoa_r+0x350>)
    4110:	461a      	mov	r2, r3
    4112:	4033      	ands	r3, r6
    4114:	4293      	cmp	r3, r2
    4116:	d015      	beq.n	4144 <_dtoa_r+0x74>
    4118:	ec4b ab17 	vmov	d7, sl, fp
    411c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4124:	e9cd ab02 	strd	sl, fp, [sp, #8]
    4128:	d12a      	bne.n	4180 <_dtoa_r+0xb0>
    412a:	9a04      	ldr	r2, [sp, #16]
    412c:	2301      	movs	r3, #1
    412e:	6013      	str	r3, [r2, #0]
    4130:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4132:	2b00      	cmp	r3, #0
    4134:	f000 80b7 	beq.w	42a6 <_dtoa_r+0x1d6>
    4138:	48ba      	ldr	r0, [pc, #744]	; (4424 <_dtoa_r+0x354>)
    413a:	6018      	str	r0, [r3, #0]
    413c:	3801      	subs	r0, #1
    413e:	b013      	add	sp, #76	; 0x4c
    4140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4144:	9a04      	ldr	r2, [sp, #16]
    4146:	f242 730f 	movw	r3, #9999	; 0x270f
    414a:	6013      	str	r3, [r2, #0]
    414c:	f1ba 0f00 	cmp.w	sl, #0
    4150:	f000 8092 	beq.w	4278 <_dtoa_r+0x1a8>
    4154:	48b4      	ldr	r0, [pc, #720]	; (4428 <_dtoa_r+0x358>)
    4156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4158:	2b00      	cmp	r3, #0
    415a:	d0f0      	beq.n	413e <_dtoa_r+0x6e>
    415c:	78c3      	ldrb	r3, [r0, #3]
    415e:	2b00      	cmp	r3, #0
    4160:	f000 80a3 	beq.w	42aa <_dtoa_r+0x1da>
    4164:	f100 0308 	add.w	r3, r0, #8
    4168:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    416a:	6013      	str	r3, [r2, #0]
    416c:	b013      	add	sp, #76	; 0x4c
    416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4172:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4174:	2301      	movs	r3, #1
    4176:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    417a:	6013      	str	r3, [r2, #0]
    417c:	46b3      	mov	fp, r6
    417e:	e7c6      	b.n	410e <_dtoa_r+0x3e>
    4180:	a911      	add	r1, sp, #68	; 0x44
    4182:	aa10      	add	r2, sp, #64	; 0x40
    4184:	ed9d 0b02 	vldr	d0, [sp, #8]
    4188:	4620      	mov	r0, r4
    418a:	f7ff fe7d 	bl	3e88 <__d2b>
    418e:	0d31      	lsrs	r1, r6, #20
    4190:	9007      	str	r0, [sp, #28]
    4192:	d17a      	bne.n	428a <_dtoa_r+0x1ba>
    4194:	9810      	ldr	r0, [sp, #64]	; 0x40
    4196:	9911      	ldr	r1, [sp, #68]	; 0x44
    4198:	4401      	add	r1, r0
    419a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    419e:	2b20      	cmp	r3, #32
    41a0:	f340 8241 	ble.w	4626 <_dtoa_r+0x556>
    41a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    41a8:	f201 4212 	addw	r2, r1, #1042	; 0x412
    41ac:	409e      	lsls	r6, r3
    41ae:	fa2a f302 	lsr.w	r3, sl, r2
    41b2:	4333      	orrs	r3, r6
    41b4:	ee07 3a90 	vmov	s15, r3
    41b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    41bc:	2501      	movs	r5, #1
    41be:	ec53 2b17 	vmov	r2, r3, d7
    41c2:	3901      	subs	r1, #1
    41c4:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    41c8:	950a      	str	r5, [sp, #40]	; 0x28
    41ca:	ec43 2b17 	vmov	d7, r2, r3
    41ce:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    41d2:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 4408 <_dtoa_r+0x338>
    41d6:	ee37 6b46 	vsub.f64	d6, d7, d6
    41da:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 4410 <_dtoa_r+0x340>
    41de:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 4418 <_dtoa_r+0x348>
    41e2:	eea6 7b04 	vfma.f64	d7, d6, d4
    41e6:	ee06 1a90 	vmov	s13, r1
    41ea:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    41ee:	eea6 7b05 	vfma.f64	d7, d6, d5
    41f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    41f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    41fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41fe:	edcd 6a02 	vstr	s13, [sp, #8]
    4202:	f100 811c 	bmi.w	443e <_dtoa_r+0x36e>
    4206:	9d02      	ldr	r5, [sp, #8]
    4208:	2d16      	cmp	r5, #22
    420a:	f200 8115 	bhi.w	4438 <_dtoa_r+0x368>
    420e:	4b87      	ldr	r3, [pc, #540]	; (442c <_dtoa_r+0x35c>)
    4210:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4214:	ed93 7b00 	vldr	d7, [r3]
    4218:	ec4b ab16 	vmov	d6, sl, fp
    421c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4224:	f340 8206 	ble.w	4634 <_dtoa_r+0x564>
    4228:	1e6b      	subs	r3, r5, #1
    422a:	9302      	str	r3, [sp, #8]
    422c:	2300      	movs	r3, #0
    422e:	930c      	str	r3, [sp, #48]	; 0x30
    4230:	1a41      	subs	r1, r0, r1
    4232:	f1b1 0901 	subs.w	r9, r1, #1
    4236:	f100 8117 	bmi.w	4468 <_dtoa_r+0x398>
    423a:	2300      	movs	r3, #0
    423c:	9306      	str	r3, [sp, #24]
    423e:	9b02      	ldr	r3, [sp, #8]
    4240:	2b00      	cmp	r3, #0
    4242:	f2c0 8108 	blt.w	4456 <_dtoa_r+0x386>
    4246:	4499      	add	r9, r3
    4248:	930b      	str	r3, [sp, #44]	; 0x2c
    424a:	2300      	movs	r3, #0
    424c:	9305      	str	r3, [sp, #20]
    424e:	9b01      	ldr	r3, [sp, #4]
    4250:	2b09      	cmp	r3, #9
    4252:	d82c      	bhi.n	42ae <_dtoa_r+0x1de>
    4254:	2b05      	cmp	r3, #5
    4256:	f340 855f 	ble.w	4d18 <_dtoa_r+0xc48>
    425a:	3b04      	subs	r3, #4
    425c:	9301      	str	r3, [sp, #4]
    425e:	2300      	movs	r3, #0
    4260:	930e      	str	r3, [sp, #56]	; 0x38
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	3b02      	subs	r3, #2
    4266:	2b03      	cmp	r3, #3
    4268:	f200 855f 	bhi.w	4d2a <_dtoa_r+0xc5a>
    426c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4270:	01e502a9 	.word	0x01e502a9
    4274:	03c802b5 	.word	0x03c802b5
    4278:	4b6b      	ldr	r3, [pc, #428]	; (4428 <_dtoa_r+0x358>)
    427a:	4a6d      	ldr	r2, [pc, #436]	; (4430 <_dtoa_r+0x360>)
    427c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    4280:	2800      	cmp	r0, #0
    4282:	bf14      	ite	ne
    4284:	4618      	movne	r0, r3
    4286:	4610      	moveq	r0, r2
    4288:	e765      	b.n	4156 <_dtoa_r+0x86>
    428a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    428e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    4292:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    4296:	2500      	movs	r5, #0
    4298:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    429c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    42a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    42a2:	950a      	str	r5, [sp, #40]	; 0x28
    42a4:	e791      	b.n	41ca <_dtoa_r+0xfa>
    42a6:	4863      	ldr	r0, [pc, #396]	; (4434 <_dtoa_r+0x364>)
    42a8:	e749      	b.n	413e <_dtoa_r+0x6e>
    42aa:	1cc3      	adds	r3, r0, #3
    42ac:	e75c      	b.n	4168 <_dtoa_r+0x98>
    42ae:	2100      	movs	r1, #0
    42b0:	6461      	str	r1, [r4, #68]	; 0x44
    42b2:	4620      	mov	r0, r4
    42b4:	4688      	mov	r8, r1
    42b6:	9101      	str	r1, [sp, #4]
    42b8:	f7ff fb32 	bl	3920 <_Balloc>
    42bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    42c0:	2301      	movs	r3, #1
    42c2:	9008      	str	r0, [sp, #32]
    42c4:	6420      	str	r0, [r4, #64]	; 0x40
    42c6:	970d      	str	r7, [sp, #52]	; 0x34
    42c8:	9309      	str	r3, [sp, #36]	; 0x24
    42ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    42cc:	2b00      	cmp	r3, #0
    42ce:	db7a      	blt.n	43c6 <_dtoa_r+0x2f6>
    42d0:	9a02      	ldr	r2, [sp, #8]
    42d2:	2a0e      	cmp	r2, #14
    42d4:	dc77      	bgt.n	43c6 <_dtoa_r+0x2f6>
    42d6:	4b55      	ldr	r3, [pc, #340]	; (442c <_dtoa_r+0x35c>)
    42d8:	f1b8 0f00 	cmp.w	r8, #0
    42dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    42e0:	ed93 4b00 	vldr	d4, [r3]
    42e4:	f2c0 8284 	blt.w	47f0 <_dtoa_r+0x720>
    42e8:	eeb1 2b44 	vneg.f64	d2, d4
    42ec:	ec4b ab17 	vmov	d7, sl, fp
    42f0:	ee87 6b04 	vdiv.f64	d6, d7, d4
    42f4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    42f8:	9a08      	ldr	r2, [sp, #32]
    42fa:	ee16 3a10 	vmov	r3, s12
    42fe:	2f01      	cmp	r7, #1
    4300:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4304:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4308:	f102 0b01 	add.w	fp, r2, #1
    430c:	7013      	strb	r3, [r2, #0]
    430e:	eea2 7b05 	vfma.f64	d7, d2, d5
    4312:	d022      	beq.n	435a <_dtoa_r+0x28a>
    4314:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    4318:	ee27 7b03 	vmul.f64	d7, d7, d3
    431c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4324:	d03a      	beq.n	439c <_dtoa_r+0x2cc>
    4326:	9a08      	ldr	r2, [sp, #32]
    4328:	e006      	b.n	4338 <_dtoa_r+0x268>
    432a:	ee27 7b03 	vmul.f64	d7, d7, d3
    432e:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4336:	d031      	beq.n	439c <_dtoa_r+0x2cc>
    4338:	ee87 6b04 	vdiv.f64	d6, d7, d4
    433c:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4340:	ee16 3a10 	vmov	r3, s12
    4344:	3330      	adds	r3, #48	; 0x30
    4346:	f80b 3b01 	strb.w	r3, [fp], #1
    434a:	ebc2 030b 	rsb	r3, r2, fp
    434e:	42bb      	cmp	r3, r7
    4350:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4354:	eea2 7b05 	vfma.f64	d7, d2, d5
    4358:	d1e7      	bne.n	432a <_dtoa_r+0x25a>
    435a:	ee37 7b07 	vadd.f64	d7, d7, d7
    435e:	eeb4 4bc7 	vcmpe.f64	d4, d7
    4362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4366:	d408      	bmi.n	437a <_dtoa_r+0x2aa>
    4368:	eeb4 4b47 	vcmp.f64	d4, d7
    436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4370:	d114      	bne.n	439c <_dtoa_r+0x2cc>
    4372:	ee16 3a10 	vmov	r3, s12
    4376:	07db      	lsls	r3, r3, #31
    4378:	d510      	bpl.n	439c <_dtoa_r+0x2cc>
    437a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    437e:	9a08      	ldr	r2, [sp, #32]
    4380:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    4384:	e004      	b.n	4390 <_dtoa_r+0x2c0>
    4386:	429a      	cmp	r2, r3
    4388:	f000 83e5 	beq.w	4b56 <_dtoa_r+0xa86>
    438c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    4390:	2839      	cmp	r0, #57	; 0x39
    4392:	f103 0b01 	add.w	fp, r3, #1
    4396:	d0f6      	beq.n	4386 <_dtoa_r+0x2b6>
    4398:	3001      	adds	r0, #1
    439a:	7018      	strb	r0, [r3, #0]
    439c:	9907      	ldr	r1, [sp, #28]
    439e:	4620      	mov	r0, r4
    43a0:	f7ff fae4 	bl	396c <_Bfree>
    43a4:	2200      	movs	r2, #0
    43a6:	9b02      	ldr	r3, [sp, #8]
    43a8:	f88b 2000 	strb.w	r2, [fp]
    43ac:	9a04      	ldr	r2, [sp, #16]
    43ae:	3301      	adds	r3, #1
    43b0:	6013      	str	r3, [r2, #0]
    43b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    43b4:	2b00      	cmp	r3, #0
    43b6:	f000 8366 	beq.w	4a86 <_dtoa_r+0x9b6>
    43ba:	9808      	ldr	r0, [sp, #32]
    43bc:	f8c3 b000 	str.w	fp, [r3]
    43c0:	b013      	add	sp, #76	; 0x4c
    43c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43c8:	2a00      	cmp	r2, #0
    43ca:	d053      	beq.n	4474 <_dtoa_r+0x3a4>
    43cc:	9a01      	ldr	r2, [sp, #4]
    43ce:	2a01      	cmp	r2, #1
    43d0:	f340 822e 	ble.w	4830 <_dtoa_r+0x760>
    43d4:	9905      	ldr	r1, [sp, #20]
    43d6:	1e7a      	subs	r2, r7, #1
    43d8:	4291      	cmp	r1, r2
    43da:	f2c0 8357 	blt.w	4a8c <_dtoa_r+0x9bc>
    43de:	1a8b      	subs	r3, r1, r2
    43e0:	930e      	str	r3, [sp, #56]	; 0x38
    43e2:	2f00      	cmp	r7, #0
    43e4:	9b06      	ldr	r3, [sp, #24]
    43e6:	f2c0 8424 	blt.w	4c32 <_dtoa_r+0xb62>
    43ea:	930a      	str	r3, [sp, #40]	; 0x28
    43ec:	463b      	mov	r3, r7
    43ee:	9a06      	ldr	r2, [sp, #24]
    43f0:	2101      	movs	r1, #1
    43f2:	441a      	add	r2, r3
    43f4:	4620      	mov	r0, r4
    43f6:	9206      	str	r2, [sp, #24]
    43f8:	4499      	add	r9, r3
    43fa:	f7ff fb4f 	bl	3a9c <__i2b>
    43fe:	4606      	mov	r6, r0
    4400:	e03d      	b.n	447e <_dtoa_r+0x3ae>
    4402:	bf00      	nop
    4404:	f3af 8000 	nop.w
    4408:	636f4361 	.word	0x636f4361
    440c:	3fd287a7 	.word	0x3fd287a7
    4410:	8b60c8b3 	.word	0x8b60c8b3
    4414:	3fc68a28 	.word	0x3fc68a28
    4418:	509f79fb 	.word	0x509f79fb
    441c:	3fd34413 	.word	0x3fd34413
    4420:	7ff00000 	.word	0x7ff00000
    4424:	20000919 	.word	0x20000919
    4428:	20000914 	.word	0x20000914
    442c:	200002a8 	.word	0x200002a8
    4430:	20000908 	.word	0x20000908
    4434:	20000918 	.word	0x20000918
    4438:	2301      	movs	r3, #1
    443a:	930c      	str	r3, [sp, #48]	; 0x30
    443c:	e6f8      	b.n	4230 <_dtoa_r+0x160>
    443e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4442:	eeb4 7b46 	vcmp.f64	d7, d6
    4446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    444a:	f43f aedc 	beq.w	4206 <_dtoa_r+0x136>
    444e:	9b02      	ldr	r3, [sp, #8]
    4450:	3b01      	subs	r3, #1
    4452:	9302      	str	r3, [sp, #8]
    4454:	e6d7      	b.n	4206 <_dtoa_r+0x136>
    4456:	9a06      	ldr	r2, [sp, #24]
    4458:	9b02      	ldr	r3, [sp, #8]
    445a:	1ad2      	subs	r2, r2, r3
    445c:	425b      	negs	r3, r3
    445e:	9305      	str	r3, [sp, #20]
    4460:	2300      	movs	r3, #0
    4462:	9206      	str	r2, [sp, #24]
    4464:	930b      	str	r3, [sp, #44]	; 0x2c
    4466:	e6f2      	b.n	424e <_dtoa_r+0x17e>
    4468:	f1c9 0300 	rsb	r3, r9, #0
    446c:	9306      	str	r3, [sp, #24]
    446e:	f04f 0900 	mov.w	r9, #0
    4472:	e6e4      	b.n	423e <_dtoa_r+0x16e>
    4474:	9b05      	ldr	r3, [sp, #20]
    4476:	930e      	str	r3, [sp, #56]	; 0x38
    4478:	9e09      	ldr	r6, [sp, #36]	; 0x24
    447a:	9b06      	ldr	r3, [sp, #24]
    447c:	930a      	str	r3, [sp, #40]	; 0x28
    447e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4480:	460b      	mov	r3, r1
    4482:	b161      	cbz	r1, 449e <_dtoa_r+0x3ce>
    4484:	f1b9 0f00 	cmp.w	r9, #0
    4488:	dd09      	ble.n	449e <_dtoa_r+0x3ce>
    448a:	4549      	cmp	r1, r9
    448c:	9a06      	ldr	r2, [sp, #24]
    448e:	bfa8      	it	ge
    4490:	464b      	movge	r3, r9
    4492:	1ad2      	subs	r2, r2, r3
    4494:	9206      	str	r2, [sp, #24]
    4496:	1aca      	subs	r2, r1, r3
    4498:	920a      	str	r2, [sp, #40]	; 0x28
    449a:	ebc3 0909 	rsb	r9, r3, r9
    449e:	9b05      	ldr	r3, [sp, #20]
    44a0:	2b00      	cmp	r3, #0
    44a2:	f340 8280 	ble.w	49a6 <_dtoa_r+0x8d6>
    44a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    44a8:	2a00      	cmp	r2, #0
    44aa:	f000 819a 	beq.w	47e2 <_dtoa_r+0x712>
    44ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44b0:	2a00      	cmp	r2, #0
    44b2:	f000 8196 	beq.w	47e2 <_dtoa_r+0x712>
    44b6:	4631      	mov	r1, r6
    44b8:	4620      	mov	r0, r4
    44ba:	f7ff fb91 	bl	3be0 <__pow5mult>
    44be:	9a07      	ldr	r2, [sp, #28]
    44c0:	4601      	mov	r1, r0
    44c2:	4606      	mov	r6, r0
    44c4:	4620      	mov	r0, r4
    44c6:	f7ff faf3 	bl	3ab0 <__multiply>
    44ca:	9907      	ldr	r1, [sp, #28]
    44cc:	4605      	mov	r5, r0
    44ce:	4620      	mov	r0, r4
    44d0:	f7ff fa4c 	bl	396c <_Bfree>
    44d4:	9b05      	ldr	r3, [sp, #20]
    44d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44d8:	1a9b      	subs	r3, r3, r2
    44da:	9305      	str	r3, [sp, #20]
    44dc:	f040 8180 	bne.w	47e0 <_dtoa_r+0x710>
    44e0:	2101      	movs	r1, #1
    44e2:	4620      	mov	r0, r4
    44e4:	f7ff fada 	bl	3a9c <__i2b>
    44e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44ea:	9005      	str	r0, [sp, #20]
    44ec:	2b00      	cmp	r3, #0
    44ee:	f000 81ac 	beq.w	484a <_dtoa_r+0x77a>
    44f2:	4601      	mov	r1, r0
    44f4:	461a      	mov	r2, r3
    44f6:	4620      	mov	r0, r4
    44f8:	f7ff fb72 	bl	3be0 <__pow5mult>
    44fc:	9b01      	ldr	r3, [sp, #4]
    44fe:	9005      	str	r0, [sp, #20]
    4500:	2b01      	cmp	r3, #1
    4502:	f340 8280 	ble.w	4a06 <_dtoa_r+0x936>
    4506:	2300      	movs	r3, #0
    4508:	9307      	str	r3, [sp, #28]
    450a:	9a05      	ldr	r2, [sp, #20]
    450c:	6913      	ldr	r3, [r2, #16]
    450e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4512:	6918      	ldr	r0, [r3, #16]
    4514:	f7ff fa74 	bl	3a00 <__hi0bits>
    4518:	f1c0 0020 	rsb	r0, r0, #32
    451c:	4448      	add	r0, r9
    451e:	f010 001f 	ands.w	r0, r0, #31
    4522:	f000 8190 	beq.w	4846 <_dtoa_r+0x776>
    4526:	f1c0 0320 	rsb	r3, r0, #32
    452a:	2b04      	cmp	r3, #4
    452c:	f340 83f8 	ble.w	4d20 <_dtoa_r+0xc50>
    4530:	f1c0 001c 	rsb	r0, r0, #28
    4534:	9b06      	ldr	r3, [sp, #24]
    4536:	4403      	add	r3, r0
    4538:	9306      	str	r3, [sp, #24]
    453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    453c:	4403      	add	r3, r0
    453e:	930a      	str	r3, [sp, #40]	; 0x28
    4540:	4481      	add	r9, r0
    4542:	9b06      	ldr	r3, [sp, #24]
    4544:	2b00      	cmp	r3, #0
    4546:	dd05      	ble.n	4554 <_dtoa_r+0x484>
    4548:	4629      	mov	r1, r5
    454a:	461a      	mov	r2, r3
    454c:	4620      	mov	r0, r4
    454e:	f7ff fb97 	bl	3c80 <__lshift>
    4552:	4605      	mov	r5, r0
    4554:	f1b9 0f00 	cmp.w	r9, #0
    4558:	dd05      	ble.n	4566 <_dtoa_r+0x496>
    455a:	464a      	mov	r2, r9
    455c:	9905      	ldr	r1, [sp, #20]
    455e:	4620      	mov	r0, r4
    4560:	f7ff fb8e 	bl	3c80 <__lshift>
    4564:	9005      	str	r0, [sp, #20]
    4566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4568:	2b00      	cmp	r3, #0
    456a:	f040 8201 	bne.w	4970 <_dtoa_r+0x8a0>
    456e:	2f00      	cmp	r7, #0
    4570:	f340 8220 	ble.w	49b4 <_dtoa_r+0x8e4>
    4574:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4576:	2b00      	cmp	r3, #0
    4578:	f040 817b 	bne.w	4872 <_dtoa_r+0x7a2>
    457c:	f8dd b020 	ldr.w	fp, [sp, #32]
    4580:	f8dd a014 	ldr.w	sl, [sp, #20]
    4584:	46d8      	mov	r8, fp
    4586:	e002      	b.n	458e <_dtoa_r+0x4be>
    4588:	f7ff f9fa 	bl	3980 <__multadd>
    458c:	4605      	mov	r5, r0
    458e:	4651      	mov	r1, sl
    4590:	4628      	mov	r0, r5
    4592:	f7ff fd07 	bl	3fa4 <quorem>
    4596:	f100 0930 	add.w	r9, r0, #48	; 0x30
    459a:	f808 9b01 	strb.w	r9, [r8], #1
    459e:	ebcb 0308 	rsb	r3, fp, r8
    45a2:	42bb      	cmp	r3, r7
    45a4:	f04f 020a 	mov.w	r2, #10
    45a8:	f04f 0300 	mov.w	r3, #0
    45ac:	4629      	mov	r1, r5
    45ae:	4620      	mov	r0, r4
    45b0:	dbea      	blt.n	4588 <_dtoa_r+0x4b8>
    45b2:	9b08      	ldr	r3, [sp, #32]
    45b4:	2f01      	cmp	r7, #1
    45b6:	bfac      	ite	ge
    45b8:	19db      	addge	r3, r3, r7
    45ba:	3301      	addlt	r3, #1
    45bc:	469b      	mov	fp, r3
    45be:	f04f 0a00 	mov.w	sl, #0
    45c2:	4629      	mov	r1, r5
    45c4:	2201      	movs	r2, #1
    45c6:	4620      	mov	r0, r4
    45c8:	f7ff fb5a 	bl	3c80 <__lshift>
    45cc:	9905      	ldr	r1, [sp, #20]
    45ce:	9007      	str	r0, [sp, #28]
    45d0:	f7ff fbae 	bl	3d30 <__mcmp>
    45d4:	2800      	cmp	r0, #0
    45d6:	f340 828c 	ble.w	4af2 <_dtoa_r+0xa22>
    45da:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    45de:	9908      	ldr	r1, [sp, #32]
    45e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    45e4:	e004      	b.n	45f0 <_dtoa_r+0x520>
    45e6:	428b      	cmp	r3, r1
    45e8:	f000 8203 	beq.w	49f2 <_dtoa_r+0x922>
    45ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    45f0:	2a39      	cmp	r2, #57	; 0x39
    45f2:	f103 0b01 	add.w	fp, r3, #1
    45f6:	d0f6      	beq.n	45e6 <_dtoa_r+0x516>
    45f8:	3201      	adds	r2, #1
    45fa:	701a      	strb	r2, [r3, #0]
    45fc:	9905      	ldr	r1, [sp, #20]
    45fe:	4620      	mov	r0, r4
    4600:	f7ff f9b4 	bl	396c <_Bfree>
    4604:	2e00      	cmp	r6, #0
    4606:	f43f aec9 	beq.w	439c <_dtoa_r+0x2cc>
    460a:	f1ba 0f00 	cmp.w	sl, #0
    460e:	d005      	beq.n	461c <_dtoa_r+0x54c>
    4610:	45b2      	cmp	sl, r6
    4612:	d003      	beq.n	461c <_dtoa_r+0x54c>
    4614:	4651      	mov	r1, sl
    4616:	4620      	mov	r0, r4
    4618:	f7ff f9a8 	bl	396c <_Bfree>
    461c:	4631      	mov	r1, r6
    461e:	4620      	mov	r0, r4
    4620:	f7ff f9a4 	bl	396c <_Bfree>
    4624:	e6ba      	b.n	439c <_dtoa_r+0x2cc>
    4626:	f1c3 0320 	rsb	r3, r3, #32
    462a:	fa0a f303 	lsl.w	r3, sl, r3
    462e:	ee07 3a90 	vmov	s15, r3
    4632:	e5c1      	b.n	41b8 <_dtoa_r+0xe8>
    4634:	2300      	movs	r3, #0
    4636:	930c      	str	r3, [sp, #48]	; 0x30
    4638:	e5fa      	b.n	4230 <_dtoa_r+0x160>
    463a:	2300      	movs	r3, #0
    463c:	9309      	str	r3, [sp, #36]	; 0x24
    463e:	9b02      	ldr	r3, [sp, #8]
    4640:	4443      	add	r3, r8
    4642:	1c5f      	adds	r7, r3, #1
    4644:	2f00      	cmp	r7, #0
    4646:	930d      	str	r3, [sp, #52]	; 0x34
    4648:	f340 822d 	ble.w	4aa6 <_dtoa_r+0x9d6>
    464c:	463e      	mov	r6, r7
    464e:	463d      	mov	r5, r7
    4650:	2100      	movs	r1, #0
    4652:	2e17      	cmp	r6, #23
    4654:	6461      	str	r1, [r4, #68]	; 0x44
    4656:	d90a      	bls.n	466e <_dtoa_r+0x59e>
    4658:	2201      	movs	r2, #1
    465a:	2304      	movs	r3, #4
    465c:	005b      	lsls	r3, r3, #1
    465e:	f103 0014 	add.w	r0, r3, #20
    4662:	42b0      	cmp	r0, r6
    4664:	4611      	mov	r1, r2
    4666:	f102 0201 	add.w	r2, r2, #1
    466a:	d9f7      	bls.n	465c <_dtoa_r+0x58c>
    466c:	6461      	str	r1, [r4, #68]	; 0x44
    466e:	4620      	mov	r0, r4
    4670:	f7ff f956 	bl	3920 <_Balloc>
    4674:	2d0e      	cmp	r5, #14
    4676:	9008      	str	r0, [sp, #32]
    4678:	6420      	str	r0, [r4, #64]	; 0x40
    467a:	f63f ae26 	bhi.w	42ca <_dtoa_r+0x1fa>
    467e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4680:	2b00      	cmp	r3, #0
    4682:	f43f ae22 	beq.w	42ca <_dtoa_r+0x1fa>
    4686:	9902      	ldr	r1, [sp, #8]
    4688:	2900      	cmp	r1, #0
    468a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    468e:	f340 8241 	ble.w	4b14 <_dtoa_r+0xa44>
    4692:	4bc6      	ldr	r3, [pc, #792]	; (49ac <_dtoa_r+0x8dc>)
    4694:	f001 020f 	and.w	r2, r1, #15
    4698:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    469c:	110b      	asrs	r3, r1, #4
    469e:	06de      	lsls	r6, r3, #27
    46a0:	ed92 6b00 	vldr	d6, [r2]
    46a4:	f140 81fb 	bpl.w	4a9e <_dtoa_r+0x9ce>
    46a8:	4ac1      	ldr	r2, [pc, #772]	; (49b0 <_dtoa_r+0x8e0>)
    46aa:	ed92 7b08 	vldr	d7, [r2, #32]
    46ae:	ec4b ab14 	vmov	d4, sl, fp
    46b2:	f003 030f 	and.w	r3, r3, #15
    46b6:	2103      	movs	r1, #3
    46b8:	ee84 5b07 	vdiv.f64	d5, d4, d7
    46bc:	b15b      	cbz	r3, 46d6 <_dtoa_r+0x606>
    46be:	4abc      	ldr	r2, [pc, #752]	; (49b0 <_dtoa_r+0x8e0>)
    46c0:	07dd      	lsls	r5, r3, #31
    46c2:	d504      	bpl.n	46ce <_dtoa_r+0x5fe>
    46c4:	ed92 7b00 	vldr	d7, [r2]
    46c8:	3101      	adds	r1, #1
    46ca:	ee26 6b07 	vmul.f64	d6, d6, d7
    46ce:	105b      	asrs	r3, r3, #1
    46d0:	f102 0208 	add.w	r2, r2, #8
    46d4:	d1f4      	bne.n	46c0 <_dtoa_r+0x5f0>
    46d6:	ee85 4b06 	vdiv.f64	d4, d5, d6
    46da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    46dc:	b13b      	cbz	r3, 46ee <_dtoa_r+0x61e>
    46de:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    46e2:	eeb4 4bc7 	vcmpe.f64	d4, d7
    46e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46ea:	f100 82b7 	bmi.w	4c5c <_dtoa_r+0xb8c>
    46ee:	ee07 1a90 	vmov	s15, r1
    46f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    46f6:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    46fa:	eea6 7b04 	vfma.f64	d7, d6, d4
    46fe:	ec53 2b17 	vmov	r2, r3, d7
    4702:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4706:	2f00      	cmp	r7, #0
    4708:	f000 81a6 	beq.w	4a58 <_dtoa_r+0x988>
    470c:	9e02      	ldr	r6, [sp, #8]
    470e:	4639      	mov	r1, r7
    4710:	9809      	ldr	r0, [sp, #36]	; 0x24
    4712:	2800      	cmp	r0, #0
    4714:	f000 824d 	beq.w	4bb2 <_dtoa_r+0xae2>
    4718:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    471c:	48a3      	ldr	r0, [pc, #652]	; (49ac <_dtoa_r+0x8dc>)
    471e:	9d08      	ldr	r5, [sp, #32]
    4720:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4724:	ed10 6b02 	vldr	d6, [r0, #-8]
    4728:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    472c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    4730:	ee17 0a10 	vmov	r0, s14
    4734:	ec43 2b16 	vmov	d6, r2, r3
    4738:	3030      	adds	r0, #48	; 0x30
    473a:	b2c0      	uxtb	r0, r0
    473c:	ee35 5b46 	vsub.f64	d5, d5, d6
    4740:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    4744:	ee34 7b47 	vsub.f64	d7, d4, d7
    4748:	eeb4 5bc7 	vcmpe.f64	d5, d7
    474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4750:	7028      	strb	r0, [r5, #0]
    4752:	f105 0b01 	add.w	fp, r5, #1
    4756:	dc32      	bgt.n	47be <_dtoa_r+0x6ee>
    4758:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    475c:	ee33 6b47 	vsub.f64	d6, d3, d7
    4760:	eeb4 5bc6 	vcmpe.f64	d5, d6
    4764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4768:	f300 82ae 	bgt.w	4cc8 <_dtoa_r+0xbf8>
    476c:	2901      	cmp	r1, #1
    476e:	f340 81cd 	ble.w	4b0c <_dtoa_r+0xa3c>
    4772:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    4776:	9b08      	ldr	r3, [sp, #32]
    4778:	4419      	add	r1, r3
    477a:	e00a      	b.n	4792 <_dtoa_r+0x6c2>
    477c:	ee33 6b47 	vsub.f64	d6, d3, d7
    4780:	eeb4 6bc5 	vcmpe.f64	d6, d5
    4784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4788:	f100 829e 	bmi.w	4cc8 <_dtoa_r+0xbf8>
    478c:	458b      	cmp	fp, r1
    478e:	f000 81bd 	beq.w	4b0c <_dtoa_r+0xa3c>
    4792:	ee27 7b04 	vmul.f64	d7, d7, d4
    4796:	ee25 5b04 	vmul.f64	d5, d5, d4
    479a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    479e:	ee16 3a10 	vmov	r3, s12
    47a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
    47a6:	b2c0      	uxtb	r0, r0
    47a8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    47ac:	ee37 7b46 	vsub.f64	d7, d7, d6
    47b0:	eeb4 7bc5 	vcmpe.f64	d7, d5
    47b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47b8:	f80b 0b01 	strb.w	r0, [fp], #1
    47bc:	d5de      	bpl.n	477c <_dtoa_r+0x6ac>
    47be:	9602      	str	r6, [sp, #8]
    47c0:	e5ec      	b.n	439c <_dtoa_r+0x2cc>
    47c2:	2300      	movs	r3, #0
    47c4:	9309      	str	r3, [sp, #36]	; 0x24
    47c6:	f1b8 0f00 	cmp.w	r8, #0
    47ca:	f340 8170 	ble.w	4aae <_dtoa_r+0x9de>
    47ce:	4646      	mov	r6, r8
    47d0:	4645      	mov	r5, r8
    47d2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    47d6:	4647      	mov	r7, r8
    47d8:	e73a      	b.n	4650 <_dtoa_r+0x580>
    47da:	2301      	movs	r3, #1
    47dc:	9309      	str	r3, [sp, #36]	; 0x24
    47de:	e7f2      	b.n	47c6 <_dtoa_r+0x6f6>
    47e0:	9507      	str	r5, [sp, #28]
    47e2:	9a05      	ldr	r2, [sp, #20]
    47e4:	9907      	ldr	r1, [sp, #28]
    47e6:	4620      	mov	r0, r4
    47e8:	f7ff f9fa 	bl	3be0 <__pow5mult>
    47ec:	4605      	mov	r5, r0
    47ee:	e677      	b.n	44e0 <_dtoa_r+0x410>
    47f0:	2f00      	cmp	r7, #0
    47f2:	f73f ad79 	bgt.w	42e8 <_dtoa_r+0x218>
    47f6:	f040 8142 	bne.w	4a7e <_dtoa_r+0x9ae>
    47fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    47fe:	ee24 4b07 	vmul.f64	d4, d4, d7
    4802:	ec4b ab17 	vmov	d7, sl, fp
    4806:	eeb4 4bc7 	vcmpe.f64	d4, d7
    480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    480e:	463e      	mov	r6, r7
    4810:	9705      	str	r7, [sp, #20]
    4812:	f2c0 80e5 	blt.w	49e0 <_dtoa_r+0x910>
    4816:	ea6f 0308 	mvn.w	r3, r8
    481a:	f8dd b020 	ldr.w	fp, [sp, #32]
    481e:	9302      	str	r3, [sp, #8]
    4820:	9905      	ldr	r1, [sp, #20]
    4822:	4620      	mov	r0, r4
    4824:	f7ff f8a2 	bl	396c <_Bfree>
    4828:	2e00      	cmp	r6, #0
    482a:	f43f adb7 	beq.w	439c <_dtoa_r+0x2cc>
    482e:	e6f5      	b.n	461c <_dtoa_r+0x54c>
    4830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4832:	2a00      	cmp	r2, #0
    4834:	f000 8202 	beq.w	4c3c <_dtoa_r+0xb6c>
    4838:	9a05      	ldr	r2, [sp, #20]
    483a:	920e      	str	r2, [sp, #56]	; 0x38
    483c:	9a06      	ldr	r2, [sp, #24]
    483e:	920a      	str	r2, [sp, #40]	; 0x28
    4840:	f203 4333 	addw	r3, r3, #1075	; 0x433
    4844:	e5d3      	b.n	43ee <_dtoa_r+0x31e>
    4846:	201c      	movs	r0, #28
    4848:	e674      	b.n	4534 <_dtoa_r+0x464>
    484a:	9b01      	ldr	r3, [sp, #4]
    484c:	2b01      	cmp	r3, #1
    484e:	f340 8240 	ble.w	4cd2 <_dtoa_r+0xc02>
    4852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4854:	9307      	str	r3, [sp, #28]
    4856:	2001      	movs	r0, #1
    4858:	e660      	b.n	451c <_dtoa_r+0x44c>
    485a:	4631      	mov	r1, r6
    485c:	2300      	movs	r3, #0
    485e:	220a      	movs	r2, #10
    4860:	4620      	mov	r0, r4
    4862:	f7ff f88d 	bl	3980 <__multadd>
    4866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4868:	2b00      	cmp	r3, #0
    486a:	4606      	mov	r6, r0
    486c:	f340 824d 	ble.w	4d0a <_dtoa_r+0xc3a>
    4870:	461f      	mov	r7, r3
    4872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4874:	2b00      	cmp	r3, #0
    4876:	dd05      	ble.n	4884 <_dtoa_r+0x7b4>
    4878:	4631      	mov	r1, r6
    487a:	461a      	mov	r2, r3
    487c:	4620      	mov	r0, r4
    487e:	f7ff f9ff 	bl	3c80 <__lshift>
    4882:	4606      	mov	r6, r0
    4884:	9b07      	ldr	r3, [sp, #28]
    4886:	2b00      	cmp	r3, #0
    4888:	f040 816e 	bne.w	4b68 <_dtoa_r+0xa98>
    488c:	46b0      	mov	r8, r6
    488e:	9b08      	ldr	r3, [sp, #32]
    4890:	3f01      	subs	r7, #1
    4892:	19da      	adds	r2, r3, r7
    4894:	9209      	str	r2, [sp, #36]	; 0x24
    4896:	f00a 0201 	and.w	r2, sl, #1
    489a:	920a      	str	r2, [sp, #40]	; 0x28
    489c:	461f      	mov	r7, r3
    489e:	f8dd b014 	ldr.w	fp, [sp, #20]
    48a2:	4628      	mov	r0, r5
    48a4:	4659      	mov	r1, fp
    48a6:	f7ff fb7d 	bl	3fa4 <quorem>
    48aa:	4631      	mov	r1, r6
    48ac:	4682      	mov	sl, r0
    48ae:	4628      	mov	r0, r5
    48b0:	f7ff fa3e 	bl	3d30 <__mcmp>
    48b4:	4642      	mov	r2, r8
    48b6:	4659      	mov	r1, fp
    48b8:	4681      	mov	r9, r0
    48ba:	4620      	mov	r0, r4
    48bc:	f7ff fa5a 	bl	3d74 <__mdiff>
    48c0:	68c3      	ldr	r3, [r0, #12]
    48c2:	4683      	mov	fp, r0
    48c4:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    48c8:	2b00      	cmp	r3, #0
    48ca:	d149      	bne.n	4960 <_dtoa_r+0x890>
    48cc:	4601      	mov	r1, r0
    48ce:	4628      	mov	r0, r5
    48d0:	9207      	str	r2, [sp, #28]
    48d2:	f7ff fa2d 	bl	3d30 <__mcmp>
    48d6:	4659      	mov	r1, fp
    48d8:	9006      	str	r0, [sp, #24]
    48da:	4620      	mov	r0, r4
    48dc:	f7ff f846 	bl	396c <_Bfree>
    48e0:	9b06      	ldr	r3, [sp, #24]
    48e2:	9a07      	ldr	r2, [sp, #28]
    48e4:	b92b      	cbnz	r3, 48f2 <_dtoa_r+0x822>
    48e6:	9901      	ldr	r1, [sp, #4]
    48e8:	b919      	cbnz	r1, 48f2 <_dtoa_r+0x822>
    48ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    48ec:	2900      	cmp	r1, #0
    48ee:	f000 81f5 	beq.w	4cdc <_dtoa_r+0xc0c>
    48f2:	f1b9 0f00 	cmp.w	r9, #0
    48f6:	f2c0 80df 	blt.w	4ab8 <_dtoa_r+0x9e8>
    48fa:	d105      	bne.n	4908 <_dtoa_r+0x838>
    48fc:	9901      	ldr	r1, [sp, #4]
    48fe:	b919      	cbnz	r1, 4908 <_dtoa_r+0x838>
    4900:	990a      	ldr	r1, [sp, #40]	; 0x28
    4902:	2900      	cmp	r1, #0
    4904:	f000 80d8 	beq.w	4ab8 <_dtoa_r+0x9e8>
    4908:	2b00      	cmp	r3, #0
    490a:	f300 8141 	bgt.w	4b90 <_dtoa_r+0xac0>
    490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4910:	703a      	strb	r2, [r7, #0]
    4912:	f107 0901 	add.w	r9, r7, #1
    4916:	429f      	cmp	r7, r3
    4918:	46cb      	mov	fp, r9
    491a:	f000 8146 	beq.w	4baa <_dtoa_r+0xada>
    491e:	4629      	mov	r1, r5
    4920:	2300      	movs	r3, #0
    4922:	220a      	movs	r2, #10
    4924:	4620      	mov	r0, r4
    4926:	f7ff f82b 	bl	3980 <__multadd>
    492a:	4546      	cmp	r6, r8
    492c:	4605      	mov	r5, r0
    492e:	4631      	mov	r1, r6
    4930:	f04f 0300 	mov.w	r3, #0
    4934:	f04f 020a 	mov.w	r2, #10
    4938:	4620      	mov	r0, r4
    493a:	d00b      	beq.n	4954 <_dtoa_r+0x884>
    493c:	f7ff f820 	bl	3980 <__multadd>
    4940:	4641      	mov	r1, r8
    4942:	4606      	mov	r6, r0
    4944:	2300      	movs	r3, #0
    4946:	220a      	movs	r2, #10
    4948:	4620      	mov	r0, r4
    494a:	f7ff f819 	bl	3980 <__multadd>
    494e:	464f      	mov	r7, r9
    4950:	4680      	mov	r8, r0
    4952:	e7a4      	b.n	489e <_dtoa_r+0x7ce>
    4954:	f7ff f814 	bl	3980 <__multadd>
    4958:	464f      	mov	r7, r9
    495a:	4606      	mov	r6, r0
    495c:	4680      	mov	r8, r0
    495e:	e79e      	b.n	489e <_dtoa_r+0x7ce>
    4960:	4601      	mov	r1, r0
    4962:	4620      	mov	r0, r4
    4964:	9206      	str	r2, [sp, #24]
    4966:	f7ff f801 	bl	396c <_Bfree>
    496a:	2301      	movs	r3, #1
    496c:	9a06      	ldr	r2, [sp, #24]
    496e:	e7c0      	b.n	48f2 <_dtoa_r+0x822>
    4970:	9905      	ldr	r1, [sp, #20]
    4972:	4628      	mov	r0, r5
    4974:	f7ff f9dc 	bl	3d30 <__mcmp>
    4978:	2800      	cmp	r0, #0
    497a:	f6bf adf8 	bge.w	456e <_dtoa_r+0x49e>
    497e:	4629      	mov	r1, r5
    4980:	9d02      	ldr	r5, [sp, #8]
    4982:	2300      	movs	r3, #0
    4984:	3d01      	subs	r5, #1
    4986:	220a      	movs	r2, #10
    4988:	4620      	mov	r0, r4
    498a:	9502      	str	r5, [sp, #8]
    498c:	f7fe fff8 	bl	3980 <__multadd>
    4990:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4992:	4605      	mov	r5, r0
    4994:	2b00      	cmp	r3, #0
    4996:	f47f af60 	bne.w	485a <_dtoa_r+0x78a>
    499a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    499c:	2b00      	cmp	r3, #0
    499e:	f340 81ad 	ble.w	4cfc <_dtoa_r+0xc2c>
    49a2:	461f      	mov	r7, r3
    49a4:	e5ea      	b.n	457c <_dtoa_r+0x4ac>
    49a6:	9d07      	ldr	r5, [sp, #28]
    49a8:	e59a      	b.n	44e0 <_dtoa_r+0x410>
    49aa:	bf00      	nop
    49ac:	200002a8 	.word	0x200002a8
    49b0:	20000280 	.word	0x20000280
    49b4:	9b01      	ldr	r3, [sp, #4]
    49b6:	2b02      	cmp	r3, #2
    49b8:	f77f addc 	ble.w	4574 <_dtoa_r+0x4a4>
    49bc:	2f00      	cmp	r7, #0
    49be:	f040 8169 	bne.w	4c94 <_dtoa_r+0xbc4>
    49c2:	463b      	mov	r3, r7
    49c4:	9905      	ldr	r1, [sp, #20]
    49c6:	2205      	movs	r2, #5
    49c8:	4620      	mov	r0, r4
    49ca:	f7fe ffd9 	bl	3980 <__multadd>
    49ce:	4601      	mov	r1, r0
    49d0:	9005      	str	r0, [sp, #20]
    49d2:	4628      	mov	r0, r5
    49d4:	f7ff f9ac 	bl	3d30 <__mcmp>
    49d8:	2800      	cmp	r0, #0
    49da:	9507      	str	r5, [sp, #28]
    49dc:	f77f af1b 	ble.w	4816 <_dtoa_r+0x746>
    49e0:	9a02      	ldr	r2, [sp, #8]
    49e2:	9908      	ldr	r1, [sp, #32]
    49e4:	2331      	movs	r3, #49	; 0x31
    49e6:	3201      	adds	r2, #1
    49e8:	9202      	str	r2, [sp, #8]
    49ea:	700b      	strb	r3, [r1, #0]
    49ec:	f101 0b01 	add.w	fp, r1, #1
    49f0:	e716      	b.n	4820 <_dtoa_r+0x750>
    49f2:	9a02      	ldr	r2, [sp, #8]
    49f4:	3201      	adds	r2, #1
    49f6:	9202      	str	r2, [sp, #8]
    49f8:	9a08      	ldr	r2, [sp, #32]
    49fa:	2331      	movs	r3, #49	; 0x31
    49fc:	7013      	strb	r3, [r2, #0]
    49fe:	e5fd      	b.n	45fc <_dtoa_r+0x52c>
    4a00:	2301      	movs	r3, #1
    4a02:	9309      	str	r3, [sp, #36]	; 0x24
    4a04:	e61b      	b.n	463e <_dtoa_r+0x56e>
    4a06:	f1ba 0f00 	cmp.w	sl, #0
    4a0a:	f47f ad7c 	bne.w	4506 <_dtoa_r+0x436>
    4a0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    4a12:	2b00      	cmp	r3, #0
    4a14:	f040 811b 	bne.w	4c4e <_dtoa_r+0xb7e>
    4a18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    4a1c:	0d1b      	lsrs	r3, r3, #20
    4a1e:	051b      	lsls	r3, r3, #20
    4a20:	2b00      	cmp	r3, #0
    4a22:	f000 8154 	beq.w	4cce <_dtoa_r+0xbfe>
    4a26:	9b06      	ldr	r3, [sp, #24]
    4a28:	3301      	adds	r3, #1
    4a2a:	9306      	str	r3, [sp, #24]
    4a2c:	2301      	movs	r3, #1
    4a2e:	f109 0901 	add.w	r9, r9, #1
    4a32:	9307      	str	r3, [sp, #28]
    4a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a36:	2001      	movs	r0, #1
    4a38:	2b00      	cmp	r3, #0
    4a3a:	f43f ad6f 	beq.w	451c <_dtoa_r+0x44c>
    4a3e:	e564      	b.n	450a <_dtoa_r+0x43a>
    4a40:	ee07 1a90 	vmov	s15, r1
    4a44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    4a48:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    4a4c:	eea4 7b06 	vfma.f64	d7, d4, d6
    4a50:	ec53 2b17 	vmov	r2, r3, d7
    4a54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4a58:	ec43 2b16 	vmov	d6, r2, r3
    4a5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    4a60:	ee34 7b47 	vsub.f64	d7, d4, d7
    4a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a6c:	f300 80dd 	bgt.w	4c2a <_dtoa_r+0xb5a>
    4a70:	eeb1 6b46 	vneg.f64	d6, d6
    4a74:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a7c:	d546      	bpl.n	4b0c <_dtoa_r+0xa3c>
    4a7e:	2300      	movs	r3, #0
    4a80:	9305      	str	r3, [sp, #20]
    4a82:	461e      	mov	r6, r3
    4a84:	e6c7      	b.n	4816 <_dtoa_r+0x746>
    4a86:	9808      	ldr	r0, [sp, #32]
    4a88:	f7ff bb59 	b.w	413e <_dtoa_r+0x6e>
    4a8c:	9b05      	ldr	r3, [sp, #20]
    4a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4a90:	9205      	str	r2, [sp, #20]
    4a92:	1ad3      	subs	r3, r2, r3
    4a94:	4419      	add	r1, r3
    4a96:	2300      	movs	r3, #0
    4a98:	910b      	str	r1, [sp, #44]	; 0x2c
    4a9a:	930e      	str	r3, [sp, #56]	; 0x38
    4a9c:	e4a1      	b.n	43e2 <_dtoa_r+0x312>
    4a9e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    4aa2:	2102      	movs	r1, #2
    4aa4:	e60a      	b.n	46bc <_dtoa_r+0x5ec>
    4aa6:	463d      	mov	r5, r7
    4aa8:	2100      	movs	r1, #0
    4aaa:	6461      	str	r1, [r4, #68]	; 0x44
    4aac:	e5df      	b.n	466e <_dtoa_r+0x59e>
    4aae:	2501      	movs	r5, #1
    4ab0:	950d      	str	r5, [sp, #52]	; 0x34
    4ab2:	462f      	mov	r7, r5
    4ab4:	46a8      	mov	r8, r5
    4ab6:	e7f7      	b.n	4aa8 <_dtoa_r+0x9d8>
    4ab8:	2b00      	cmp	r3, #0
    4aba:	4691      	mov	r9, r2
    4abc:	dd11      	ble.n	4ae2 <_dtoa_r+0xa12>
    4abe:	4629      	mov	r1, r5
    4ac0:	2201      	movs	r2, #1
    4ac2:	4620      	mov	r0, r4
    4ac4:	f7ff f8dc 	bl	3c80 <__lshift>
    4ac8:	9905      	ldr	r1, [sp, #20]
    4aca:	4605      	mov	r5, r0
    4acc:	f7ff f930 	bl	3d30 <__mcmp>
    4ad0:	2800      	cmp	r0, #0
    4ad2:	f340 810c 	ble.w	4cee <_dtoa_r+0xc1e>
    4ad6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    4ada:	f000 80dd 	beq.w	4c98 <_dtoa_r+0xbc8>
    4ade:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    4ae2:	46b2      	mov	sl, r6
    4ae4:	f887 9000 	strb.w	r9, [r7]
    4ae8:	f107 0b01 	add.w	fp, r7, #1
    4aec:	4646      	mov	r6, r8
    4aee:	9507      	str	r5, [sp, #28]
    4af0:	e584      	b.n	45fc <_dtoa_r+0x52c>
    4af2:	d104      	bne.n	4afe <_dtoa_r+0xa2e>
    4af4:	f019 0f01 	tst.w	r9, #1
    4af8:	d001      	beq.n	4afe <_dtoa_r+0xa2e>
    4afa:	e56e      	b.n	45da <_dtoa_r+0x50a>
    4afc:	4693      	mov	fp, r2
    4afe:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4b02:	2b30      	cmp	r3, #48	; 0x30
    4b04:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    4b08:	d0f8      	beq.n	4afc <_dtoa_r+0xa2c>
    4b0a:	e577      	b.n	45fc <_dtoa_r+0x52c>
    4b0c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    4b10:	f7ff bbdb 	b.w	42ca <_dtoa_r+0x1fa>
    4b14:	9b02      	ldr	r3, [sp, #8]
    4b16:	425b      	negs	r3, r3
    4b18:	2b00      	cmp	r3, #0
    4b1a:	f000 809b 	beq.w	4c54 <_dtoa_r+0xb84>
    4b1e:	4a8b      	ldr	r2, [pc, #556]	; (4d4c <_dtoa_r+0xc7c>)
    4b20:	f003 010f 	and.w	r1, r3, #15
    4b24:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4b28:	ed92 7b00 	vldr	d7, [r2]
    4b2c:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    4b30:	111b      	asrs	r3, r3, #4
    4b32:	ee26 4b07 	vmul.f64	d4, d6, d7
    4b36:	f000 80e6 	beq.w	4d06 <_dtoa_r+0xc36>
    4b3a:	4a85      	ldr	r2, [pc, #532]	; (4d50 <_dtoa_r+0xc80>)
    4b3c:	2102      	movs	r1, #2
    4b3e:	07d8      	lsls	r0, r3, #31
    4b40:	d504      	bpl.n	4b4c <_dtoa_r+0xa7c>
    4b42:	ed92 7b00 	vldr	d7, [r2]
    4b46:	3101      	adds	r1, #1
    4b48:	ee24 4b07 	vmul.f64	d4, d4, d7
    4b4c:	105b      	asrs	r3, r3, #1
    4b4e:	f102 0208 	add.w	r2, r2, #8
    4b52:	d1f4      	bne.n	4b3e <_dtoa_r+0xa6e>
    4b54:	e5c1      	b.n	46da <_dtoa_r+0x60a>
    4b56:	9908      	ldr	r1, [sp, #32]
    4b58:	2230      	movs	r2, #48	; 0x30
    4b5a:	700a      	strb	r2, [r1, #0]
    4b5c:	9a02      	ldr	r2, [sp, #8]
    4b5e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4b62:	3201      	adds	r2, #1
    4b64:	9202      	str	r2, [sp, #8]
    4b66:	e417      	b.n	4398 <_dtoa_r+0x2c8>
    4b68:	6871      	ldr	r1, [r6, #4]
    4b6a:	4620      	mov	r0, r4
    4b6c:	f7fe fed8 	bl	3920 <_Balloc>
    4b70:	6933      	ldr	r3, [r6, #16]
    4b72:	1c9a      	adds	r2, r3, #2
    4b74:	4680      	mov	r8, r0
    4b76:	0092      	lsls	r2, r2, #2
    4b78:	f106 010c 	add.w	r1, r6, #12
    4b7c:	300c      	adds	r0, #12
    4b7e:	f7fe f8bb 	bl	2cf8 <memcpy>
    4b82:	4641      	mov	r1, r8
    4b84:	2201      	movs	r2, #1
    4b86:	4620      	mov	r0, r4
    4b88:	f7ff f87a 	bl	3c80 <__lshift>
    4b8c:	4680      	mov	r8, r0
    4b8e:	e67e      	b.n	488e <_dtoa_r+0x7be>
    4b90:	2a39      	cmp	r2, #57	; 0x39
    4b92:	f000 8081 	beq.w	4c98 <_dtoa_r+0xbc8>
    4b96:	f102 0901 	add.w	r9, r2, #1
    4b9a:	46b2      	mov	sl, r6
    4b9c:	f887 9000 	strb.w	r9, [r7]
    4ba0:	f107 0b01 	add.w	fp, r7, #1
    4ba4:	4646      	mov	r6, r8
    4ba6:	9507      	str	r5, [sp, #28]
    4ba8:	e528      	b.n	45fc <_dtoa_r+0x52c>
    4baa:	46b2      	mov	sl, r6
    4bac:	4691      	mov	r9, r2
    4bae:	4646      	mov	r6, r8
    4bb0:	e507      	b.n	45c2 <_dtoa_r+0x4f2>
    4bb2:	4866      	ldr	r0, [pc, #408]	; (4d4c <_dtoa_r+0xc7c>)
    4bb4:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    4bb8:	1e4d      	subs	r5, r1, #1
    4bba:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    4bbe:	ec43 2b17 	vmov	d7, r2, r3
    4bc2:	ed90 3b00 	vldr	d3, [r0]
    4bc6:	ee16 3a10 	vmov	r3, s12
    4bca:	ee23 3b07 	vmul.f64	d3, d3, d7
    4bce:	9808      	ldr	r0, [sp, #32]
    4bd0:	3330      	adds	r3, #48	; 0x30
    4bd2:	2901      	cmp	r1, #1
    4bd4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4bd8:	7003      	strb	r3, [r0, #0]
    4bda:	f100 0b01 	add.w	fp, r0, #1
    4bde:	ee34 7b46 	vsub.f64	d7, d4, d6
    4be2:	d014      	beq.n	4c0e <_dtoa_r+0xb3e>
    4be4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    4be8:	9b08      	ldr	r3, [sp, #32]
    4bea:	4419      	add	r1, r3
    4bec:	465b      	mov	r3, fp
    4bee:	ee27 7b05 	vmul.f64	d7, d7, d5
    4bf2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    4bf6:	ee16 2a10 	vmov	r2, s12
    4bfa:	3230      	adds	r2, #48	; 0x30
    4bfc:	f803 2b01 	strb.w	r2, [r3], #1
    4c00:	4299      	cmp	r1, r3
    4c02:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    4c06:	ee37 7b46 	vsub.f64	d7, d7, d6
    4c0a:	d1f0      	bne.n	4bee <_dtoa_r+0xb1e>
    4c0c:	44ab      	add	fp, r5
    4c0e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    4c12:	ee33 5b06 	vadd.f64	d5, d3, d6
    4c16:	eeb4 5bc7 	vcmpe.f64	d5, d7
    4c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c1e:	d543      	bpl.n	4ca8 <_dtoa_r+0xbd8>
    4c20:	9602      	str	r6, [sp, #8]
    4c22:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4c26:	f7ff bbaa 	b.w	437e <_dtoa_r+0x2ae>
    4c2a:	2300      	movs	r3, #0
    4c2c:	9305      	str	r3, [sp, #20]
    4c2e:	461e      	mov	r6, r3
    4c30:	e6d6      	b.n	49e0 <_dtoa_r+0x910>
    4c32:	1bdb      	subs	r3, r3, r7
    4c34:	930a      	str	r3, [sp, #40]	; 0x28
    4c36:	2300      	movs	r3, #0
    4c38:	f7ff bbd9 	b.w	43ee <_dtoa_r+0x31e>
    4c3c:	9a05      	ldr	r2, [sp, #20]
    4c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c40:	920e      	str	r2, [sp, #56]	; 0x38
    4c42:	9a06      	ldr	r2, [sp, #24]
    4c44:	920a      	str	r2, [sp, #40]	; 0x28
    4c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4c4a:	f7ff bbd0 	b.w	43ee <_dtoa_r+0x31e>
    4c4e:	2300      	movs	r3, #0
    4c50:	9307      	str	r3, [sp, #28]
    4c52:	e6ef      	b.n	4a34 <_dtoa_r+0x964>
    4c54:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    4c58:	2102      	movs	r1, #2
    4c5a:	e53e      	b.n	46da <_dtoa_r+0x60a>
    4c5c:	2f00      	cmp	r7, #0
    4c5e:	f43f aeef 	beq.w	4a40 <_dtoa_r+0x970>
    4c62:	980d      	ldr	r0, [sp, #52]	; 0x34
    4c64:	2800      	cmp	r0, #0
    4c66:	f77f af51 	ble.w	4b0c <_dtoa_r+0xa3c>
    4c6a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    4c6e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    4c72:	3101      	adds	r1, #1
    4c74:	ee06 1a90 	vmov	s13, r1
    4c78:	ee24 4b05 	vmul.f64	d4, d4, d5
    4c7c:	9b02      	ldr	r3, [sp, #8]
    4c7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4c82:	1e5e      	subs	r6, r3, #1
    4c84:	eea4 7b06 	vfma.f64	d7, d4, d6
    4c88:	ec53 2b17 	vmov	r2, r3, d7
    4c8c:	4601      	mov	r1, r0
    4c8e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    4c92:	e53d      	b.n	4710 <_dtoa_r+0x640>
    4c94:	9507      	str	r5, [sp, #28]
    4c96:	e5be      	b.n	4816 <_dtoa_r+0x746>
    4c98:	2239      	movs	r2, #57	; 0x39
    4c9a:	46b2      	mov	sl, r6
    4c9c:	9507      	str	r5, [sp, #28]
    4c9e:	4646      	mov	r6, r8
    4ca0:	703a      	strb	r2, [r7, #0]
    4ca2:	f107 0b01 	add.w	fp, r7, #1
    4ca6:	e49a      	b.n	45de <_dtoa_r+0x50e>
    4ca8:	ee36 6b43 	vsub.f64	d6, d6, d3
    4cac:	eeb4 6bc7 	vcmpe.f64	d6, d7
    4cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4cb4:	dc01      	bgt.n	4cba <_dtoa_r+0xbea>
    4cb6:	e729      	b.n	4b0c <_dtoa_r+0xa3c>
    4cb8:	4693      	mov	fp, r2
    4cba:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    4cbe:	2b30      	cmp	r3, #48	; 0x30
    4cc0:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    4cc4:	d0f8      	beq.n	4cb8 <_dtoa_r+0xbe8>
    4cc6:	e57a      	b.n	47be <_dtoa_r+0x6ee>
    4cc8:	9602      	str	r6, [sp, #8]
    4cca:	f7ff bb58 	b.w	437e <_dtoa_r+0x2ae>
    4cce:	9307      	str	r3, [sp, #28]
    4cd0:	e6b0      	b.n	4a34 <_dtoa_r+0x964>
    4cd2:	f1ba 0f00 	cmp.w	sl, #0
    4cd6:	f47f adbc 	bne.w	4852 <_dtoa_r+0x782>
    4cda:	e698      	b.n	4a0e <_dtoa_r+0x93e>
    4cdc:	2a39      	cmp	r2, #57	; 0x39
    4cde:	46cb      	mov	fp, r9
    4ce0:	4691      	mov	r9, r2
    4ce2:	d0d9      	beq.n	4c98 <_dtoa_r+0xbc8>
    4ce4:	f1bb 0f00 	cmp.w	fp, #0
    4ce8:	f73f aef9 	bgt.w	4ade <_dtoa_r+0xa0e>
    4cec:	e6f9      	b.n	4ae2 <_dtoa_r+0xa12>
    4cee:	f47f aef8 	bne.w	4ae2 <_dtoa_r+0xa12>
    4cf2:	f019 0f01 	tst.w	r9, #1
    4cf6:	f43f aef4 	beq.w	4ae2 <_dtoa_r+0xa12>
    4cfa:	e6ec      	b.n	4ad6 <_dtoa_r+0xa06>
    4cfc:	9b01      	ldr	r3, [sp, #4]
    4cfe:	2b02      	cmp	r3, #2
    4d00:	dc08      	bgt.n	4d14 <_dtoa_r+0xc44>
    4d02:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d04:	e43a      	b.n	457c <_dtoa_r+0x4ac>
    4d06:	2102      	movs	r1, #2
    4d08:	e4e7      	b.n	46da <_dtoa_r+0x60a>
    4d0a:	9b01      	ldr	r3, [sp, #4]
    4d0c:	2b02      	cmp	r3, #2
    4d0e:	dc01      	bgt.n	4d14 <_dtoa_r+0xc44>
    4d10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d12:	e5ae      	b.n	4872 <_dtoa_r+0x7a2>
    4d14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4d16:	e651      	b.n	49bc <_dtoa_r+0x8ec>
    4d18:	2301      	movs	r3, #1
    4d1a:	930e      	str	r3, [sp, #56]	; 0x38
    4d1c:	f7ff baa1 	b.w	4262 <_dtoa_r+0x192>
    4d20:	f43f ac0f 	beq.w	4542 <_dtoa_r+0x472>
    4d24:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    4d28:	e404      	b.n	4534 <_dtoa_r+0x464>
    4d2a:	2500      	movs	r5, #0
    4d2c:	6465      	str	r5, [r4, #68]	; 0x44
    4d2e:	4629      	mov	r1, r5
    4d30:	4620      	mov	r0, r4
    4d32:	f7fe fdf5 	bl	3920 <_Balloc>
    4d36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4d3a:	2301      	movs	r3, #1
    4d3c:	9008      	str	r0, [sp, #32]
    4d3e:	46a8      	mov	r8, r5
    4d40:	6420      	str	r0, [r4, #64]	; 0x40
    4d42:	970d      	str	r7, [sp, #52]	; 0x34
    4d44:	9309      	str	r3, [sp, #36]	; 0x24
    4d46:	f7ff bac0 	b.w	42ca <_dtoa_r+0x1fa>
    4d4a:	bf00      	nop
    4d4c:	200002a8 	.word	0x200002a8
    4d50:	20000280 	.word	0x20000280
    4d54:	00000000 	.word	0x00000000

00004d58 <_svfprintf_r>:
    4d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d5c:	ed2d 8b06 	vpush	{d8-d10}
    4d60:	b0b9      	sub	sp, #228	; 0xe4
    4d62:	460c      	mov	r4, r1
    4d64:	9103      	str	r1, [sp, #12]
    4d66:	4692      	mov	sl, r2
    4d68:	9309      	str	r3, [sp, #36]	; 0x24
    4d6a:	9005      	str	r0, [sp, #20]
    4d6c:	f7fe fd74 	bl	3858 <_localeconv_r>
    4d70:	6803      	ldr	r3, [r0, #0]
    4d72:	9310      	str	r3, [sp, #64]	; 0x40
    4d74:	4618      	mov	r0, r3
    4d76:	f7fe fb23 	bl	33c0 <strlen>
    4d7a:	89a3      	ldrh	r3, [r4, #12]
    4d7c:	900f      	str	r0, [sp, #60]	; 0x3c
    4d7e:	0619      	lsls	r1, r3, #24
    4d80:	d503      	bpl.n	4d8a <_svfprintf_r+0x32>
    4d82:	6923      	ldr	r3, [r4, #16]
    4d84:	2b00      	cmp	r3, #0
    4d86:	f001 807d 	beq.w	5e84 <_svfprintf_r+0x112c>
    4d8a:	2300      	movs	r3, #0
    4d8c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 5020 <_svfprintf_r+0x2c8>
    4d90:	ed9f 9ba5 	vldr	d9, [pc, #660]	; 5028 <_svfprintf_r+0x2d0>
    4d94:	930d      	str	r3, [sp, #52]	; 0x34
    4d96:	931d      	str	r3, [sp, #116]	; 0x74
    4d98:	931c      	str	r3, [sp, #112]	; 0x70
    4d9a:	9311      	str	r3, [sp, #68]	; 0x44
    4d9c:	9306      	str	r3, [sp, #24]
    4d9e:	ab28      	add	r3, sp, #160	; 0xa0
    4da0:	931b      	str	r3, [sp, #108]	; 0x6c
    4da2:	4699      	mov	r9, r3
    4da4:	f89a 3000 	ldrb.w	r3, [sl]
    4da8:	4654      	mov	r4, sl
    4daa:	b1eb      	cbz	r3, 4de8 <_svfprintf_r+0x90>
    4dac:	2b25      	cmp	r3, #37	; 0x25
    4dae:	d102      	bne.n	4db6 <_svfprintf_r+0x5e>
    4db0:	e01a      	b.n	4de8 <_svfprintf_r+0x90>
    4db2:	2b25      	cmp	r3, #37	; 0x25
    4db4:	d003      	beq.n	4dbe <_svfprintf_r+0x66>
    4db6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d1f9      	bne.n	4db2 <_svfprintf_r+0x5a>
    4dbe:	ebca 0504 	rsb	r5, sl, r4
    4dc2:	b18d      	cbz	r5, 4de8 <_svfprintf_r+0x90>
    4dc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4dc6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4dc8:	f8c9 a000 	str.w	sl, [r9]
    4dcc:	3301      	adds	r3, #1
    4dce:	442a      	add	r2, r5
    4dd0:	2b07      	cmp	r3, #7
    4dd2:	f8c9 5004 	str.w	r5, [r9, #4]
    4dd6:	921d      	str	r2, [sp, #116]	; 0x74
    4dd8:	931c      	str	r3, [sp, #112]	; 0x70
    4dda:	f300 80a3 	bgt.w	4f24 <_svfprintf_r+0x1cc>
    4dde:	f109 0908 	add.w	r9, r9, #8
    4de2:	9b06      	ldr	r3, [sp, #24]
    4de4:	442b      	add	r3, r5
    4de6:	9306      	str	r3, [sp, #24]
    4de8:	7823      	ldrb	r3, [r4, #0]
    4dea:	2b00      	cmp	r3, #0
    4dec:	f000 80a3 	beq.w	4f36 <_svfprintf_r+0x1de>
    4df0:	2300      	movs	r3, #0
    4df2:	461a      	mov	r2, r3
    4df4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    4df8:	4619      	mov	r1, r3
    4dfa:	9307      	str	r3, [sp, #28]
    4dfc:	469b      	mov	fp, r3
    4dfe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e02:	7863      	ldrb	r3, [r4, #1]
    4e04:	f104 0a01 	add.w	sl, r4, #1
    4e08:	4645      	mov	r5, r8
    4e0a:	f10a 0a01 	add.w	sl, sl, #1
    4e0e:	f1a3 0020 	sub.w	r0, r3, #32
    4e12:	2858      	cmp	r0, #88	; 0x58
    4e14:	f200 83f8 	bhi.w	5608 <_svfprintf_r+0x8b0>
    4e18:	e8df f010 	tbh	[pc, r0, lsl #1]
    4e1c:	03f60363 	.word	0x03f60363
    4e20:	036b03f6 	.word	0x036b03f6
    4e24:	03f603f6 	.word	0x03f603f6
    4e28:	03f603f6 	.word	0x03f603f6
    4e2c:	03f603f6 	.word	0x03f603f6
    4e30:	037e0370 	.word	0x037e0370
    4e34:	005d03f6 	.word	0x005d03f6
    4e38:	03f600df 	.word	0x03f600df
    4e3c:	010c00fb 	.word	0x010c00fb
    4e40:	010c010c 	.word	0x010c010c
    4e44:	010c010c 	.word	0x010c010c
    4e48:	010c010c 	.word	0x010c010c
    4e4c:	010c010c 	.word	0x010c010c
    4e50:	03f603f6 	.word	0x03f603f6
    4e54:	03f603f6 	.word	0x03f603f6
    4e58:	03f603f6 	.word	0x03f603f6
    4e5c:	03f603f6 	.word	0x03f603f6
    4e60:	03f603f6 	.word	0x03f603f6
    4e64:	015e011c 	.word	0x015e011c
    4e68:	015e03f6 	.word	0x015e03f6
    4e6c:	03f603f6 	.word	0x03f603f6
    4e70:	03f603f6 	.word	0x03f603f6
    4e74:	03f602a1 	.word	0x03f602a1
    4e78:	02a603f6 	.word	0x02a603f6
    4e7c:	03f603f6 	.word	0x03f603f6
    4e80:	03f603f6 	.word	0x03f603f6
    4e84:	02d803f6 	.word	0x02d803f6
    4e88:	03f603f6 	.word	0x03f603f6
    4e8c:	03f60305 	.word	0x03f60305
    4e90:	03f603f6 	.word	0x03f603f6
    4e94:	03f603f6 	.word	0x03f603f6
    4e98:	03f603f6 	.word	0x03f603f6
    4e9c:	03f603f6 	.word	0x03f603f6
    4ea0:	034303f6 	.word	0x034303f6
    4ea4:	015e0356 	.word	0x015e0356
    4ea8:	015e015e 	.word	0x015e015e
    4eac:	0356035e 	.word	0x0356035e
    4eb0:	03f603f6 	.word	0x03f603f6
    4eb4:	03f603a4 	.word	0x03f603a4
    4eb8:	00a203b1 	.word	0x00a203b1
    4ebc:	03c30062 	.word	0x03c30062
    4ec0:	03c803f6 	.word	0x03c803f6
    4ec4:	038303f6 	.word	0x038303f6
    4ec8:	03f603f6 	.word	0x03f603f6
    4ecc:	038b      	.short	0x038b
    4ece:	9807      	ldr	r0, [sp, #28]
    4ed0:	9309      	str	r3, [sp, #36]	; 0x24
    4ed2:	4240      	negs	r0, r0
    4ed4:	9007      	str	r0, [sp, #28]
    4ed6:	f04b 0b04 	orr.w	fp, fp, #4
    4eda:	f89a 3000 	ldrb.w	r3, [sl]
    4ede:	e794      	b.n	4e0a <_svfprintf_r+0xb2>
    4ee0:	46a8      	mov	r8, r5
    4ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
    4ee4:	2100      	movs	r1, #0
    4ee6:	2330      	movs	r3, #48	; 0x30
    4ee8:	2278      	movs	r2, #120	; 0x78
    4eea:	4588      	cmp	r8, r1
    4eec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    4ef0:	6804      	ldr	r4, [r0, #0]
    4ef2:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    4ef6:	f100 0704 	add.w	r7, r0, #4
    4efa:	f04f 0500 	mov.w	r5, #0
    4efe:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    4f02:	f04b 0302 	orr.w	r3, fp, #2
    4f06:	f2c0 839c 	blt.w	5642 <_svfprintf_r+0x8ea>
    4f0a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    4f0e:	f043 0b02 	orr.w	fp, r3, #2
    4f12:	ea54 0305 	orrs.w	r3, r4, r5
    4f16:	9709      	str	r7, [sp, #36]	; 0x24
    4f18:	f000 8369 	beq.w	55ee <_svfprintf_r+0x896>
    4f1c:	460f      	mov	r7, r1
    4f1e:	920c      	str	r2, [sp, #48]	; 0x30
    4f20:	4843      	ldr	r0, [pc, #268]	; (5030 <_svfprintf_r+0x2d8>)
    4f22:	e2ae      	b.n	5482 <_svfprintf_r+0x72a>
    4f24:	aa1b      	add	r2, sp, #108	; 0x6c
    4f26:	9903      	ldr	r1, [sp, #12]
    4f28:	9805      	ldr	r0, [sp, #20]
    4f2a:	f001 f9cd 	bl	62c8 <__ssprint_r>
    4f2e:	b948      	cbnz	r0, 4f44 <_svfprintf_r+0x1ec>
    4f30:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    4f34:	e755      	b.n	4de2 <_svfprintf_r+0x8a>
    4f36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4f38:	b123      	cbz	r3, 4f44 <_svfprintf_r+0x1ec>
    4f3a:	9805      	ldr	r0, [sp, #20]
    4f3c:	9903      	ldr	r1, [sp, #12]
    4f3e:	aa1b      	add	r2, sp, #108	; 0x6c
    4f40:	f001 f9c2 	bl	62c8 <__ssprint_r>
    4f44:	9b03      	ldr	r3, [sp, #12]
    4f46:	899b      	ldrh	r3, [r3, #12]
    4f48:	f013 0f40 	tst.w	r3, #64	; 0x40
    4f4c:	9b06      	ldr	r3, [sp, #24]
    4f4e:	bf18      	it	ne
    4f50:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    4f54:	4618      	mov	r0, r3
    4f56:	b039      	add	sp, #228	; 0xe4
    4f58:	ecbd 8b06 	vpop	{d8-d10}
    4f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f60:	930c      	str	r3, [sp, #48]	; 0x30
    4f62:	46a8      	mov	r8, r5
    4f64:	2a00      	cmp	r2, #0
    4f66:	f041 819a 	bne.w	629e <_svfprintf_r+0x1546>
    4f6a:	f01b 0320 	ands.w	r3, fp, #32
    4f6e:	f000 8206 	beq.w	537e <_svfprintf_r+0x626>
    4f72:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4f74:	3707      	adds	r7, #7
    4f76:	f027 0307 	bic.w	r3, r7, #7
    4f7a:	2700      	movs	r7, #0
    4f7c:	f103 0208 	add.w	r2, r3, #8
    4f80:	45b8      	cmp	r8, r7
    4f82:	9209      	str	r2, [sp, #36]	; 0x24
    4f84:	e9d3 4500 	ldrd	r4, r5, [r3]
    4f88:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    4f8c:	f2c0 865e 	blt.w	5c4c <_svfprintf_r+0xef4>
    4f90:	ea54 0305 	orrs.w	r3, r4, r5
    4f94:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    4f98:	f000 834b 	beq.w	5632 <_svfprintf_r+0x8da>
    4f9c:	ae28      	add	r6, sp, #160	; 0xa0
    4f9e:	08e2      	lsrs	r2, r4, #3
    4fa0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    4fa4:	08e9      	lsrs	r1, r5, #3
    4fa6:	f004 0307 	and.w	r3, r4, #7
    4faa:	460d      	mov	r5, r1
    4fac:	4614      	mov	r4, r2
    4fae:	3330      	adds	r3, #48	; 0x30
    4fb0:	ea54 0205 	orrs.w	r2, r4, r5
    4fb4:	f806 3d01 	strb.w	r3, [r6, #-1]!
    4fb8:	d1f1      	bne.n	4f9e <_svfprintf_r+0x246>
    4fba:	f01b 0f01 	tst.w	fp, #1
    4fbe:	f000 8227 	beq.w	5410 <_svfprintf_r+0x6b8>
    4fc2:	2b30      	cmp	r3, #48	; 0x30
    4fc4:	f000 8224 	beq.w	5410 <_svfprintf_r+0x6b8>
    4fc8:	2230      	movs	r2, #48	; 0x30
    4fca:	1e73      	subs	r3, r6, #1
    4fcc:	f806 2c01 	strb.w	r2, [r6, #-1]
    4fd0:	aa28      	add	r2, sp, #160	; 0xa0
    4fd2:	1ad2      	subs	r2, r2, r3
    4fd4:	9208      	str	r2, [sp, #32]
    4fd6:	461e      	mov	r6, r3
    4fd8:	e21d      	b.n	5416 <_svfprintf_r+0x6be>
    4fda:	f89a 3000 	ldrb.w	r3, [sl]
    4fde:	2b2a      	cmp	r3, #42	; 0x2a
    4fe0:	f10a 0401 	add.w	r4, sl, #1
    4fe4:	f001 812f 	beq.w	6246 <_svfprintf_r+0x14ee>
    4fe8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4fec:	2809      	cmp	r0, #9
    4fee:	bf98      	it	ls
    4ff0:	2500      	movls	r5, #0
    4ff2:	f201 80d5 	bhi.w	61a0 <_svfprintf_r+0x1448>
    4ff6:	f814 3b01 	ldrb.w	r3, [r4], #1
    4ffa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4ffe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    5002:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5006:	2809      	cmp	r0, #9
    5008:	d9f5      	bls.n	4ff6 <_svfprintf_r+0x29e>
    500a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    500e:	46a2      	mov	sl, r4
    5010:	e6fd      	b.n	4e0e <_svfprintf_r+0xb6>
    5012:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    5016:	f89a 3000 	ldrb.w	r3, [sl]
    501a:	e6f6      	b.n	4e0a <_svfprintf_r+0xb2>
    501c:	f3af 8000 	nop.w
	...
    5028:	ffffffff 	.word	0xffffffff
    502c:	7fefffff 	.word	0x7fefffff
    5030:	20000938 	.word	0x20000938
    5034:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5038:	2300      	movs	r3, #0
    503a:	461c      	mov	r4, r3
    503c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    5040:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5044:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    5048:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    504c:	2809      	cmp	r0, #9
    504e:	d9f5      	bls.n	503c <_svfprintf_r+0x2e4>
    5050:	9407      	str	r4, [sp, #28]
    5052:	e6dc      	b.n	4e0e <_svfprintf_r+0xb6>
    5054:	930c      	str	r3, [sp, #48]	; 0x30
    5056:	46a8      	mov	r8, r5
    5058:	2a00      	cmp	r2, #0
    505a:	f041 812c 	bne.w	62b6 <_svfprintf_r+0x155e>
    505e:	f04b 0b10 	orr.w	fp, fp, #16
    5062:	f01b 0f20 	tst.w	fp, #32
    5066:	f000 8503 	beq.w	5a70 <_svfprintf_r+0xd18>
    506a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    506c:	3707      	adds	r7, #7
    506e:	f027 0707 	bic.w	r7, r7, #7
    5072:	e9d7 2300 	ldrd	r2, r3, [r7]
    5076:	f107 0108 	add.w	r1, r7, #8
    507a:	9109      	str	r1, [sp, #36]	; 0x24
    507c:	4614      	mov	r4, r2
    507e:	461d      	mov	r5, r3
    5080:	2a00      	cmp	r2, #0
    5082:	f173 0300 	sbcs.w	r3, r3, #0
    5086:	f2c0 8537 	blt.w	5af8 <_svfprintf_r+0xda0>
    508a:	f1b8 0f00 	cmp.w	r8, #0
    508e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5092:	f2c0 81b5 	blt.w	5400 <_svfprintf_r+0x6a8>
    5096:	ea54 0305 	orrs.w	r3, r4, r5
    509a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    509e:	f000 83f6 	beq.w	588e <_svfprintf_r+0xb36>
    50a2:	2d00      	cmp	r5, #0
    50a4:	bf08      	it	eq
    50a6:	2c0a      	cmpeq	r4, #10
    50a8:	f0c0 81ae 	bcc.w	5408 <_svfprintf_r+0x6b0>
    50ac:	ae28      	add	r6, sp, #160	; 0xa0
    50ae:	4620      	mov	r0, r4
    50b0:	4629      	mov	r1, r5
    50b2:	220a      	movs	r2, #10
    50b4:	2300      	movs	r3, #0
    50b6:	f7fd f959 	bl	236c <__aeabi_uldivmod>
    50ba:	3230      	adds	r2, #48	; 0x30
    50bc:	f806 2d01 	strb.w	r2, [r6, #-1]!
    50c0:	4620      	mov	r0, r4
    50c2:	4629      	mov	r1, r5
    50c4:	2300      	movs	r3, #0
    50c6:	220a      	movs	r2, #10
    50c8:	f7fd f950 	bl	236c <__aeabi_uldivmod>
    50cc:	4604      	mov	r4, r0
    50ce:	460d      	mov	r5, r1
    50d0:	ea54 0305 	orrs.w	r3, r4, r5
    50d4:	d1eb      	bne.n	50ae <_svfprintf_r+0x356>
    50d6:	e19b      	b.n	5410 <_svfprintf_r+0x6b8>
    50d8:	930c      	str	r3, [sp, #48]	; 0x30
    50da:	46a8      	mov	r8, r5
    50dc:	2a00      	cmp	r2, #0
    50de:	f041 80e6 	bne.w	62ae <_svfprintf_r+0x1556>
    50e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    50e4:	f01b 0f08 	tst.w	fp, #8
    50e8:	f107 0707 	add.w	r7, r7, #7
    50ec:	f000 8640 	beq.w	5d70 <_svfprintf_r+0x1018>
    50f0:	f027 0307 	bic.w	r3, r7, #7
    50f4:	ed93 8b00 	vldr	d8, [r3]
    50f8:	f103 0208 	add.w	r2, r3, #8
    50fc:	9209      	str	r2, [sp, #36]	; 0x24
    50fe:	eeb0 7bc8 	vabs.f64	d7, d8
    5102:	eeb4 7b49 	vcmp.f64	d7, d9
    5106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    510a:	f340 85bc 	ble.w	5c86 <_svfprintf_r+0xf2e>
    510e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5116:	f100 87ca 	bmi.w	60ae <_svfprintf_r+0x1356>
    511a:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    511e:	4ea7      	ldr	r6, [pc, #668]	; (53bc <_svfprintf_r+0x664>)
    5120:	4ba7      	ldr	r3, [pc, #668]	; (53c0 <_svfprintf_r+0x668>)
    5122:	990c      	ldr	r1, [sp, #48]	; 0x30
    5124:	2203      	movs	r2, #3
    5126:	f04f 0800 	mov.w	r8, #0
    512a:	9204      	str	r2, [sp, #16]
    512c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5130:	2947      	cmp	r1, #71	; 0x47
    5132:	bfd8      	it	le
    5134:	461e      	movle	r6, r3
    5136:	9208      	str	r2, [sp, #32]
    5138:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    513c:	b117      	cbz	r7, 5144 <_svfprintf_r+0x3ec>
    513e:	9b04      	ldr	r3, [sp, #16]
    5140:	3301      	adds	r3, #1
    5142:	9304      	str	r3, [sp, #16]
    5144:	f01b 0302 	ands.w	r3, fp, #2
    5148:	930a      	str	r3, [sp, #40]	; 0x28
    514a:	d002      	beq.n	5152 <_svfprintf_r+0x3fa>
    514c:	9b04      	ldr	r3, [sp, #16]
    514e:	3302      	adds	r3, #2
    5150:	9304      	str	r3, [sp, #16]
    5152:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    5156:	930b      	str	r3, [sp, #44]	; 0x2c
    5158:	f040 8280 	bne.w	565c <_svfprintf_r+0x904>
    515c:	9b07      	ldr	r3, [sp, #28]
    515e:	9a04      	ldr	r2, [sp, #16]
    5160:	1a9c      	subs	r4, r3, r2
    5162:	2c00      	cmp	r4, #0
    5164:	f340 827a 	ble.w	565c <_svfprintf_r+0x904>
    5168:	2c10      	cmp	r4, #16
    516a:	991d      	ldr	r1, [sp, #116]	; 0x74
    516c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    516e:	4f95      	ldr	r7, [pc, #596]	; (53c4 <_svfprintf_r+0x66c>)
    5170:	dd23      	ble.n	51ba <_svfprintf_r+0x462>
    5172:	4648      	mov	r0, r9
    5174:	2510      	movs	r5, #16
    5176:	46c1      	mov	r9, r8
    5178:	46b0      	mov	r8, r6
    517a:	9e05      	ldr	r6, [sp, #20]
    517c:	e004      	b.n	5188 <_svfprintf_r+0x430>
    517e:	3c10      	subs	r4, #16
    5180:	2c10      	cmp	r4, #16
    5182:	f100 0008 	add.w	r0, r0, #8
    5186:	dd15      	ble.n	51b4 <_svfprintf_r+0x45c>
    5188:	3201      	adds	r2, #1
    518a:	3110      	adds	r1, #16
    518c:	2a07      	cmp	r2, #7
    518e:	911d      	str	r1, [sp, #116]	; 0x74
    5190:	921c      	str	r2, [sp, #112]	; 0x70
    5192:	6007      	str	r7, [r0, #0]
    5194:	6045      	str	r5, [r0, #4]
    5196:	ddf2      	ble.n	517e <_svfprintf_r+0x426>
    5198:	aa1b      	add	r2, sp, #108	; 0x6c
    519a:	9903      	ldr	r1, [sp, #12]
    519c:	4630      	mov	r0, r6
    519e:	f001 f893 	bl	62c8 <__ssprint_r>
    51a2:	2800      	cmp	r0, #0
    51a4:	f47f aece 	bne.w	4f44 <_svfprintf_r+0x1ec>
    51a8:	3c10      	subs	r4, #16
    51aa:	2c10      	cmp	r4, #16
    51ac:	991d      	ldr	r1, [sp, #116]	; 0x74
    51ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51b0:	a828      	add	r0, sp, #160	; 0xa0
    51b2:	dce9      	bgt.n	5188 <_svfprintf_r+0x430>
    51b4:	4646      	mov	r6, r8
    51b6:	46c8      	mov	r8, r9
    51b8:	4681      	mov	r9, r0
    51ba:	3201      	adds	r2, #1
    51bc:	1863      	adds	r3, r4, r1
    51be:	2a07      	cmp	r2, #7
    51c0:	931d      	str	r3, [sp, #116]	; 0x74
    51c2:	921c      	str	r2, [sp, #112]	; 0x70
    51c4:	f8c9 7000 	str.w	r7, [r9]
    51c8:	f8c9 4004 	str.w	r4, [r9, #4]
    51cc:	f300 83e2 	bgt.w	5994 <_svfprintf_r+0xc3c>
    51d0:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    51d4:	f109 0908 	add.w	r9, r9, #8
    51d8:	b177      	cbz	r7, 51f8 <_svfprintf_r+0x4a0>
    51da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51dc:	3201      	adds	r2, #1
    51de:	3301      	adds	r3, #1
    51e0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    51e4:	2101      	movs	r1, #1
    51e6:	2a07      	cmp	r2, #7
    51e8:	931d      	str	r3, [sp, #116]	; 0x74
    51ea:	921c      	str	r2, [sp, #112]	; 0x70
    51ec:	e889 0003 	stmia.w	r9, {r0, r1}
    51f0:	f300 835f 	bgt.w	58b2 <_svfprintf_r+0xb5a>
    51f4:	f109 0908 	add.w	r9, r9, #8
    51f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    51fa:	b16a      	cbz	r2, 5218 <_svfprintf_r+0x4c0>
    51fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    51fe:	3201      	adds	r2, #1
    5200:	3302      	adds	r3, #2
    5202:	a814      	add	r0, sp, #80	; 0x50
    5204:	2102      	movs	r1, #2
    5206:	2a07      	cmp	r2, #7
    5208:	931d      	str	r3, [sp, #116]	; 0x74
    520a:	921c      	str	r2, [sp, #112]	; 0x70
    520c:	e889 0003 	stmia.w	r9, {r0, r1}
    5210:	f300 835b 	bgt.w	58ca <_svfprintf_r+0xb72>
    5214:	f109 0908 	add.w	r9, r9, #8
    5218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    521a:	2a80      	cmp	r2, #128	; 0x80
    521c:	f000 827e 	beq.w	571c <_svfprintf_r+0x9c4>
    5220:	9a08      	ldr	r2, [sp, #32]
    5222:	ebc2 0408 	rsb	r4, r2, r8
    5226:	2c00      	cmp	r4, #0
    5228:	dd34      	ble.n	5294 <_svfprintf_r+0x53c>
    522a:	2c10      	cmp	r4, #16
    522c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    522e:	4f66      	ldr	r7, [pc, #408]	; (53c8 <_svfprintf_r+0x670>)
    5230:	dd23      	ble.n	527a <_svfprintf_r+0x522>
    5232:	4649      	mov	r1, r9
    5234:	f04f 0810 	mov.w	r8, #16
    5238:	46b1      	mov	r9, r6
    523a:	9d05      	ldr	r5, [sp, #20]
    523c:	9e03      	ldr	r6, [sp, #12]
    523e:	e004      	b.n	524a <_svfprintf_r+0x4f2>
    5240:	3c10      	subs	r4, #16
    5242:	2c10      	cmp	r4, #16
    5244:	f101 0108 	add.w	r1, r1, #8
    5248:	dd15      	ble.n	5276 <_svfprintf_r+0x51e>
    524a:	3201      	adds	r2, #1
    524c:	3310      	adds	r3, #16
    524e:	2a07      	cmp	r2, #7
    5250:	931d      	str	r3, [sp, #116]	; 0x74
    5252:	921c      	str	r2, [sp, #112]	; 0x70
    5254:	e881 0180 	stmia.w	r1, {r7, r8}
    5258:	ddf2      	ble.n	5240 <_svfprintf_r+0x4e8>
    525a:	aa1b      	add	r2, sp, #108	; 0x6c
    525c:	4631      	mov	r1, r6
    525e:	4628      	mov	r0, r5
    5260:	f001 f832 	bl	62c8 <__ssprint_r>
    5264:	2800      	cmp	r0, #0
    5266:	f47f ae6d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    526a:	3c10      	subs	r4, #16
    526c:	2c10      	cmp	r4, #16
    526e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5270:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5272:	a928      	add	r1, sp, #160	; 0xa0
    5274:	dce9      	bgt.n	524a <_svfprintf_r+0x4f2>
    5276:	464e      	mov	r6, r9
    5278:	4689      	mov	r9, r1
    527a:	3201      	adds	r2, #1
    527c:	4423      	add	r3, r4
    527e:	2a07      	cmp	r2, #7
    5280:	931d      	str	r3, [sp, #116]	; 0x74
    5282:	921c      	str	r2, [sp, #112]	; 0x70
    5284:	f8c9 7000 	str.w	r7, [r9]
    5288:	f8c9 4004 	str.w	r4, [r9, #4]
    528c:	f300 8305 	bgt.w	589a <_svfprintf_r+0xb42>
    5290:	f109 0908 	add.w	r9, r9, #8
    5294:	f41b 7f80 	tst.w	fp, #256	; 0x100
    5298:	f040 81e2 	bne.w	5660 <_svfprintf_r+0x908>
    529c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    529e:	9808      	ldr	r0, [sp, #32]
    52a0:	f8c9 6000 	str.w	r6, [r9]
    52a4:	3201      	adds	r2, #1
    52a6:	4403      	add	r3, r0
    52a8:	2a07      	cmp	r2, #7
    52aa:	931d      	str	r3, [sp, #116]	; 0x74
    52ac:	f8c9 0004 	str.w	r0, [r9, #4]
    52b0:	921c      	str	r2, [sp, #112]	; 0x70
    52b2:	f300 82c2 	bgt.w	583a <_svfprintf_r+0xae2>
    52b6:	f109 0908 	add.w	r9, r9, #8
    52ba:	f01b 0f04 	tst.w	fp, #4
    52be:	d03e      	beq.n	533e <_svfprintf_r+0x5e6>
    52c0:	9a07      	ldr	r2, [sp, #28]
    52c2:	9904      	ldr	r1, [sp, #16]
    52c4:	1a54      	subs	r4, r2, r1
    52c6:	2c00      	cmp	r4, #0
    52c8:	dd39      	ble.n	533e <_svfprintf_r+0x5e6>
    52ca:	2c10      	cmp	r4, #16
    52cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    52ce:	4f3d      	ldr	r7, [pc, #244]	; (53c4 <_svfprintf_r+0x66c>)
    52d0:	dd22      	ble.n	5318 <_svfprintf_r+0x5c0>
    52d2:	2510      	movs	r5, #16
    52d4:	9e05      	ldr	r6, [sp, #20]
    52d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    52da:	e004      	b.n	52e6 <_svfprintf_r+0x58e>
    52dc:	3c10      	subs	r4, #16
    52de:	2c10      	cmp	r4, #16
    52e0:	f109 0908 	add.w	r9, r9, #8
    52e4:	dd18      	ble.n	5318 <_svfprintf_r+0x5c0>
    52e6:	3201      	adds	r2, #1
    52e8:	3310      	adds	r3, #16
    52ea:	2a07      	cmp	r2, #7
    52ec:	931d      	str	r3, [sp, #116]	; 0x74
    52ee:	921c      	str	r2, [sp, #112]	; 0x70
    52f0:	f8c9 7000 	str.w	r7, [r9]
    52f4:	f8c9 5004 	str.w	r5, [r9, #4]
    52f8:	ddf0      	ble.n	52dc <_svfprintf_r+0x584>
    52fa:	aa1b      	add	r2, sp, #108	; 0x6c
    52fc:	4641      	mov	r1, r8
    52fe:	4630      	mov	r0, r6
    5300:	f000 ffe2 	bl	62c8 <__ssprint_r>
    5304:	2800      	cmp	r0, #0
    5306:	f47f ae1d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    530a:	3c10      	subs	r4, #16
    530c:	2c10      	cmp	r4, #16
    530e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5310:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5312:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5316:	dce6      	bgt.n	52e6 <_svfprintf_r+0x58e>
    5318:	3201      	adds	r2, #1
    531a:	4423      	add	r3, r4
    531c:	2a07      	cmp	r2, #7
    531e:	931d      	str	r3, [sp, #116]	; 0x74
    5320:	921c      	str	r2, [sp, #112]	; 0x70
    5322:	f8c9 7000 	str.w	r7, [r9]
    5326:	f8c9 4004 	str.w	r4, [r9, #4]
    532a:	dd08      	ble.n	533e <_svfprintf_r+0x5e6>
    532c:	aa1b      	add	r2, sp, #108	; 0x6c
    532e:	9903      	ldr	r1, [sp, #12]
    5330:	9805      	ldr	r0, [sp, #20]
    5332:	f000 ffc9 	bl	62c8 <__ssprint_r>
    5336:	2800      	cmp	r0, #0
    5338:	f47f ae04 	bne.w	4f44 <_svfprintf_r+0x1ec>
    533c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    533e:	9a06      	ldr	r2, [sp, #24]
    5340:	9907      	ldr	r1, [sp, #28]
    5342:	9804      	ldr	r0, [sp, #16]
    5344:	4281      	cmp	r1, r0
    5346:	bfac      	ite	ge
    5348:	1852      	addge	r2, r2, r1
    534a:	1812      	addlt	r2, r2, r0
    534c:	9206      	str	r2, [sp, #24]
    534e:	2b00      	cmp	r3, #0
    5350:	f040 827f 	bne.w	5852 <_svfprintf_r+0xafa>
    5354:	2300      	movs	r3, #0
    5356:	931c      	str	r3, [sp, #112]	; 0x70
    5358:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    535c:	e522      	b.n	4da4 <_svfprintf_r+0x4c>
    535e:	f04b 0b08 	orr.w	fp, fp, #8
    5362:	f89a 3000 	ldrb.w	r3, [sl]
    5366:	e550      	b.n	4e0a <_svfprintf_r+0xb2>
    5368:	930c      	str	r3, [sp, #48]	; 0x30
    536a:	46a8      	mov	r8, r5
    536c:	2a00      	cmp	r2, #0
    536e:	f040 879a 	bne.w	62a6 <_svfprintf_r+0x154e>
    5372:	f04b 0b10 	orr.w	fp, fp, #16
    5376:	f01b 0320 	ands.w	r3, fp, #32
    537a:	f47f adfa 	bne.w	4f72 <_svfprintf_r+0x21a>
    537e:	f01b 0210 	ands.w	r2, fp, #16
    5382:	f040 8391 	bne.w	5aa8 <_svfprintf_r+0xd50>
    5386:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    538a:	f000 838d 	beq.w	5aa8 <_svfprintf_r+0xd50>
    538e:	9909      	ldr	r1, [sp, #36]	; 0x24
    5390:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    5394:	460b      	mov	r3, r1
    5396:	f1b8 0f00 	cmp.w	r8, #0
    539a:	f103 0304 	add.w	r3, r3, #4
    539e:	880c      	ldrh	r4, [r1, #0]
    53a0:	f04f 0500 	mov.w	r5, #0
    53a4:	f2c0 85ab 	blt.w	5efe <_svfprintf_r+0x11a6>
    53a8:	ea54 0105 	orrs.w	r1, r4, r5
    53ac:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    53b0:	9309      	str	r3, [sp, #36]	; 0x24
    53b2:	f000 813e 	beq.w	5632 <_svfprintf_r+0x8da>
    53b6:	4617      	mov	r7, r2
    53b8:	e5f0      	b.n	4f9c <_svfprintf_r+0x244>
    53ba:	bf00      	nop
    53bc:	200008f4 	.word	0x200008f4
    53c0:	2000091c 	.word	0x2000091c
    53c4:	200004a0 	.word	0x200004a0
    53c8:	200009f0 	.word	0x200009f0
    53cc:	930c      	str	r3, [sp, #48]	; 0x30
    53ce:	46a8      	mov	r8, r5
    53d0:	2a00      	cmp	r2, #0
    53d2:	f040 8759 	bne.w	6288 <_svfprintf_r+0x1530>
    53d6:	f04b 0b10 	orr.w	fp, fp, #16
    53da:	f01b 0320 	ands.w	r3, fp, #32
    53de:	f000 82e7 	beq.w	59b0 <_svfprintf_r+0xc58>
    53e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    53e4:	3707      	adds	r7, #7
    53e6:	f027 0307 	bic.w	r3, r7, #7
    53ea:	2700      	movs	r7, #0
    53ec:	f103 0208 	add.w	r2, r3, #8
    53f0:	45b8      	cmp	r8, r7
    53f2:	9209      	str	r2, [sp, #36]	; 0x24
    53f4:	e9d3 4500 	ldrd	r4, r5, [r3]
    53f8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    53fc:	f6bf ae4b 	bge.w	5096 <_svfprintf_r+0x33e>
    5400:	ea54 0305 	orrs.w	r3, r4, r5
    5404:	f47f ae4d 	bne.w	50a2 <_svfprintf_r+0x34a>
    5408:	ae38      	add	r6, sp, #224	; 0xe0
    540a:	3430      	adds	r4, #48	; 0x30
    540c:	f806 4d41 	strb.w	r4, [r6, #-65]!
    5410:	ab28      	add	r3, sp, #160	; 0xa0
    5412:	1b9b      	subs	r3, r3, r6
    5414:	9308      	str	r3, [sp, #32]
    5416:	9b08      	ldr	r3, [sp, #32]
    5418:	4543      	cmp	r3, r8
    541a:	bfb8      	it	lt
    541c:	4643      	movlt	r3, r8
    541e:	9304      	str	r3, [sp, #16]
    5420:	2300      	movs	r3, #0
    5422:	930e      	str	r3, [sp, #56]	; 0x38
    5424:	e68a      	b.n	513c <_svfprintf_r+0x3e4>
    5426:	930c      	str	r3, [sp, #48]	; 0x30
    5428:	46a8      	mov	r8, r5
    542a:	2a00      	cmp	r2, #0
    542c:	f040 8728 	bne.w	6280 <_svfprintf_r+0x1528>
    5430:	f01b 0f20 	tst.w	fp, #32
    5434:	48c2      	ldr	r0, [pc, #776]	; (5740 <_svfprintf_r+0x9e8>)
    5436:	f000 8086 	beq.w	5546 <_svfprintf_r+0x7ee>
    543a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    543c:	3707      	adds	r7, #7
    543e:	f027 0307 	bic.w	r3, r7, #7
    5442:	e9d3 4500 	ldrd	r4, r5, [r3]
    5446:	f103 0208 	add.w	r2, r3, #8
    544a:	9209      	str	r2, [sp, #36]	; 0x24
    544c:	f01b 0701 	ands.w	r7, fp, #1
    5450:	f000 8247 	beq.w	58e2 <_svfprintf_r+0xb8a>
    5454:	ea54 0305 	orrs.w	r3, r4, r5
    5458:	f000 84a3 	beq.w	5da2 <_svfprintf_r+0x104a>
    545c:	2700      	movs	r7, #0
    545e:	2330      	movs	r3, #48	; 0x30
    5460:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5464:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    5468:	45b8      	cmp	r8, r7
    546a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    546e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5472:	f04b 0302 	orr.w	r3, fp, #2
    5476:	f2c0 8617 	blt.w	60a8 <_svfprintf_r+0x1350>
    547a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    547e:	f043 0b02 	orr.w	fp, r3, #2
    5482:	ae28      	add	r6, sp, #160	; 0xa0
    5484:	0923      	lsrs	r3, r4, #4
    5486:	f004 010f 	and.w	r1, r4, #15
    548a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    548e:	092a      	lsrs	r2, r5, #4
    5490:	461c      	mov	r4, r3
    5492:	4615      	mov	r5, r2
    5494:	5c43      	ldrb	r3, [r0, r1]
    5496:	f806 3d01 	strb.w	r3, [r6, #-1]!
    549a:	ea54 0305 	orrs.w	r3, r4, r5
    549e:	d1f1      	bne.n	5484 <_svfprintf_r+0x72c>
    54a0:	e7b6      	b.n	5410 <_svfprintf_r+0x6b8>
    54a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    54a4:	930c      	str	r3, [sp, #48]	; 0x30
    54a6:	680a      	ldr	r2, [r1, #0]
    54a8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    54ac:	2300      	movs	r3, #0
    54ae:	460a      	mov	r2, r1
    54b0:	461f      	mov	r7, r3
    54b2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    54b6:	3204      	adds	r2, #4
    54b8:	2301      	movs	r3, #1
    54ba:	9304      	str	r3, [sp, #16]
    54bc:	46b8      	mov	r8, r7
    54be:	970e      	str	r7, [sp, #56]	; 0x38
    54c0:	9209      	str	r2, [sp, #36]	; 0x24
    54c2:	9308      	str	r3, [sp, #32]
    54c4:	ae1e      	add	r6, sp, #120	; 0x78
    54c6:	e63d      	b.n	5144 <_svfprintf_r+0x3ec>
    54c8:	930c      	str	r3, [sp, #48]	; 0x30
    54ca:	46a8      	mov	r8, r5
    54cc:	2a00      	cmp	r2, #0
    54ce:	f43f adc8 	beq.w	5062 <_svfprintf_r+0x30a>
    54d2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    54d6:	e5c4      	b.n	5062 <_svfprintf_r+0x30a>
    54d8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    54dc:	f89a 3000 	ldrb.w	r3, [sl]
    54e0:	e493      	b.n	4e0a <_svfprintf_r+0xb2>
    54e2:	f89a 3000 	ldrb.w	r3, [sl]
    54e6:	2900      	cmp	r1, #0
    54e8:	f47f ac8f 	bne.w	4e0a <_svfprintf_r+0xb2>
    54ec:	2201      	movs	r2, #1
    54ee:	2120      	movs	r1, #32
    54f0:	e48b      	b.n	4e0a <_svfprintf_r+0xb2>
    54f2:	f04b 0b01 	orr.w	fp, fp, #1
    54f6:	f89a 3000 	ldrb.w	r3, [sl]
    54fa:	e486      	b.n	4e0a <_svfprintf_r+0xb2>
    54fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    54fe:	6823      	ldr	r3, [r4, #0]
    5500:	9307      	str	r3, [sp, #28]
    5502:	4618      	mov	r0, r3
    5504:	2800      	cmp	r0, #0
    5506:	4623      	mov	r3, r4
    5508:	f103 0304 	add.w	r3, r3, #4
    550c:	f6ff acdf 	blt.w	4ece <_svfprintf_r+0x176>
    5510:	9309      	str	r3, [sp, #36]	; 0x24
    5512:	f89a 3000 	ldrb.w	r3, [sl]
    5516:	e478      	b.n	4e0a <_svfprintf_r+0xb2>
    5518:	f89a 3000 	ldrb.w	r3, [sl]
    551c:	2201      	movs	r2, #1
    551e:	212b      	movs	r1, #43	; 0x2b
    5520:	e473      	b.n	4e0a <_svfprintf_r+0xb2>
    5522:	930c      	str	r3, [sp, #48]	; 0x30
    5524:	46a8      	mov	r8, r5
    5526:	2a00      	cmp	r2, #0
    5528:	f43f af57 	beq.w	53da <_svfprintf_r+0x682>
    552c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5530:	e753      	b.n	53da <_svfprintf_r+0x682>
    5532:	930c      	str	r3, [sp, #48]	; 0x30
    5534:	46a8      	mov	r8, r5
    5536:	2a00      	cmp	r2, #0
    5538:	f040 86aa 	bne.w	6290 <_svfprintf_r+0x1538>
    553c:	f01b 0f20 	tst.w	fp, #32
    5540:	4880      	ldr	r0, [pc, #512]	; (5744 <_svfprintf_r+0x9ec>)
    5542:	f47f af7a 	bne.w	543a <_svfprintf_r+0x6e2>
    5546:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5548:	f01b 0f10 	tst.w	fp, #16
    554c:	4613      	mov	r3, r2
    554e:	f040 82c1 	bne.w	5ad4 <_svfprintf_r+0xd7c>
    5552:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5556:	f000 82bd 	beq.w	5ad4 <_svfprintf_r+0xd7c>
    555a:	3304      	adds	r3, #4
    555c:	8814      	ldrh	r4, [r2, #0]
    555e:	9309      	str	r3, [sp, #36]	; 0x24
    5560:	2500      	movs	r5, #0
    5562:	e773      	b.n	544c <_svfprintf_r+0x6f4>
    5564:	f89a 3000 	ldrb.w	r3, [sl]
    5568:	2b6c      	cmp	r3, #108	; 0x6c
    556a:	bf03      	ittte	eq
    556c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    5570:	f04b 0b20 	orreq.w	fp, fp, #32
    5574:	f10a 0a01 	addeq.w	sl, sl, #1
    5578:	f04b 0b10 	orrne.w	fp, fp, #16
    557c:	e445      	b.n	4e0a <_svfprintf_r+0xb2>
    557e:	2a00      	cmp	r2, #0
    5580:	f040 866f 	bne.w	6262 <_svfprintf_r+0x150a>
    5584:	f01b 0f20 	tst.w	fp, #32
    5588:	f000 8366 	beq.w	5c58 <_svfprintf_r+0xf00>
    558c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    558e:	9906      	ldr	r1, [sp, #24]
    5590:	6813      	ldr	r3, [r2, #0]
    5592:	17cd      	asrs	r5, r1, #31
    5594:	4608      	mov	r0, r1
    5596:	3204      	adds	r2, #4
    5598:	4629      	mov	r1, r5
    559a:	9209      	str	r2, [sp, #36]	; 0x24
    559c:	e9c3 0100 	strd	r0, r1, [r3]
    55a0:	e400      	b.n	4da4 <_svfprintf_r+0x4c>
    55a2:	f04b 0b20 	orr.w	fp, fp, #32
    55a6:	f89a 3000 	ldrb.w	r3, [sl]
    55aa:	e42e      	b.n	4e0a <_svfprintf_r+0xb2>
    55ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55ae:	930c      	str	r3, [sp, #48]	; 0x30
    55b0:	6816      	ldr	r6, [r2, #0]
    55b2:	2400      	movs	r4, #0
    55b4:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    55b8:	1d17      	adds	r7, r2, #4
    55ba:	2e00      	cmp	r6, #0
    55bc:	f000 8565 	beq.w	608a <_svfprintf_r+0x1332>
    55c0:	2d00      	cmp	r5, #0
    55c2:	f2c0 84a2 	blt.w	5f0a <_svfprintf_r+0x11b2>
    55c6:	462a      	mov	r2, r5
    55c8:	4621      	mov	r1, r4
    55ca:	4630      	mov	r0, r6
    55cc:	f7fe f958 	bl	3880 <memchr>
    55d0:	2800      	cmp	r0, #0
    55d2:	f000 85cc 	beq.w	616e <_svfprintf_r+0x1416>
    55d6:	1b83      	subs	r3, r0, r6
    55d8:	9308      	str	r3, [sp, #32]
    55da:	46a0      	mov	r8, r4
    55dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    55e0:	9709      	str	r7, [sp, #36]	; 0x24
    55e2:	9304      	str	r3, [sp, #16]
    55e4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    55e8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    55ec:	e5a6      	b.n	513c <_svfprintf_r+0x3e4>
    55ee:	4855      	ldr	r0, [pc, #340]	; (5744 <_svfprintf_r+0x9ec>)
    55f0:	920c      	str	r2, [sp, #48]	; 0x30
    55f2:	f1b8 0f00 	cmp.w	r8, #0
    55f6:	f040 8184 	bne.w	5902 <_svfprintf_r+0xbaa>
    55fa:	4647      	mov	r7, r8
    55fc:	f04f 0800 	mov.w	r8, #0
    5600:	f8cd 8020 	str.w	r8, [sp, #32]
    5604:	ae28      	add	r6, sp, #160	; 0xa0
    5606:	e706      	b.n	5416 <_svfprintf_r+0x6be>
    5608:	930c      	str	r3, [sp, #48]	; 0x30
    560a:	2a00      	cmp	r2, #0
    560c:	f040 862d 	bne.w	626a <_svfprintf_r+0x1512>
    5610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5612:	2a00      	cmp	r2, #0
    5614:	f43f ac8f 	beq.w	4f36 <_svfprintf_r+0x1de>
    5618:	2300      	movs	r3, #0
    561a:	2101      	movs	r1, #1
    561c:	461f      	mov	r7, r3
    561e:	9104      	str	r1, [sp, #16]
    5620:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    5624:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5628:	4698      	mov	r8, r3
    562a:	930e      	str	r3, [sp, #56]	; 0x38
    562c:	9108      	str	r1, [sp, #32]
    562e:	ae1e      	add	r6, sp, #120	; 0x78
    5630:	e588      	b.n	5144 <_svfprintf_r+0x3ec>
    5632:	f1b8 0f00 	cmp.w	r8, #0
    5636:	f000 858b 	beq.w	6150 <_svfprintf_r+0x13f8>
    563a:	2700      	movs	r7, #0
    563c:	2400      	movs	r4, #0
    563e:	2500      	movs	r5, #0
    5640:	e4ac      	b.n	4f9c <_svfprintf_r+0x244>
    5642:	4840      	ldr	r0, [pc, #256]	; (5744 <_svfprintf_r+0x9ec>)
    5644:	920c      	str	r2, [sp, #48]	; 0x30
    5646:	469b      	mov	fp, r3
    5648:	ea54 0305 	orrs.w	r3, r4, r5
    564c:	9709      	str	r7, [sp, #36]	; 0x24
    564e:	f04f 0700 	mov.w	r7, #0
    5652:	f47f af16 	bne.w	5482 <_svfprintf_r+0x72a>
    5656:	2400      	movs	r4, #0
    5658:	2500      	movs	r5, #0
    565a:	e712      	b.n	5482 <_svfprintf_r+0x72a>
    565c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    565e:	e5bb      	b.n	51d8 <_svfprintf_r+0x480>
    5660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5662:	2a65      	cmp	r2, #101	; 0x65
    5664:	f340 80a1 	ble.w	57aa <_svfprintf_r+0xa52>
    5668:	eeb5 8b40 	vcmp.f64	d8, #0.0
    566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5670:	f040 8149 	bne.w	5906 <_svfprintf_r+0xbae>
    5674:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5676:	4934      	ldr	r1, [pc, #208]	; (5748 <_svfprintf_r+0x9f0>)
    5678:	f8c9 1000 	str.w	r1, [r9]
    567c:	3201      	adds	r2, #1
    567e:	3301      	adds	r3, #1
    5680:	2101      	movs	r1, #1
    5682:	2a07      	cmp	r2, #7
    5684:	931d      	str	r3, [sp, #116]	; 0x74
    5686:	921c      	str	r2, [sp, #112]	; 0x70
    5688:	f8c9 1004 	str.w	r1, [r9, #4]
    568c:	f300 8392 	bgt.w	5db4 <_svfprintf_r+0x105c>
    5690:	f109 0908 	add.w	r9, r9, #8
    5694:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5696:	990d      	ldr	r1, [sp, #52]	; 0x34
    5698:	428a      	cmp	r2, r1
    569a:	db03      	blt.n	56a4 <_svfprintf_r+0x94c>
    569c:	f01b 0f01 	tst.w	fp, #1
    56a0:	f43f ae0b 	beq.w	52ba <_svfprintf_r+0x562>
    56a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    56a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    56a8:	9910      	ldr	r1, [sp, #64]	; 0x40
    56aa:	f8c9 1000 	str.w	r1, [r9]
    56ae:	3201      	adds	r2, #1
    56b0:	4403      	add	r3, r0
    56b2:	2a07      	cmp	r2, #7
    56b4:	931d      	str	r3, [sp, #116]	; 0x74
    56b6:	f8c9 0004 	str.w	r0, [r9, #4]
    56ba:	921c      	str	r2, [sp, #112]	; 0x70
    56bc:	f300 83d6 	bgt.w	5e6c <_svfprintf_r+0x1114>
    56c0:	f109 0908 	add.w	r9, r9, #8
    56c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    56c6:	1e54      	subs	r4, r2, #1
    56c8:	2c00      	cmp	r4, #0
    56ca:	f77f adf6 	ble.w	52ba <_svfprintf_r+0x562>
    56ce:	2c10      	cmp	r4, #16
    56d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    56d2:	4f1e      	ldr	r7, [pc, #120]	; (574c <_svfprintf_r+0x9f4>)
    56d4:	f340 81dc 	ble.w	5a90 <_svfprintf_r+0xd38>
    56d8:	2510      	movs	r5, #16
    56da:	9e05      	ldr	r6, [sp, #20]
    56dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
    56e0:	e005      	b.n	56ee <_svfprintf_r+0x996>
    56e2:	f109 0908 	add.w	r9, r9, #8
    56e6:	3c10      	subs	r4, #16
    56e8:	2c10      	cmp	r4, #16
    56ea:	f340 81d1 	ble.w	5a90 <_svfprintf_r+0xd38>
    56ee:	3201      	adds	r2, #1
    56f0:	3310      	adds	r3, #16
    56f2:	2a07      	cmp	r2, #7
    56f4:	931d      	str	r3, [sp, #116]	; 0x74
    56f6:	921c      	str	r2, [sp, #112]	; 0x70
    56f8:	f8c9 7000 	str.w	r7, [r9]
    56fc:	f8c9 5004 	str.w	r5, [r9, #4]
    5700:	ddef      	ble.n	56e2 <_svfprintf_r+0x98a>
    5702:	aa1b      	add	r2, sp, #108	; 0x6c
    5704:	4641      	mov	r1, r8
    5706:	4630      	mov	r0, r6
    5708:	f000 fdde 	bl	62c8 <__ssprint_r>
    570c:	2800      	cmp	r0, #0
    570e:	f47f ac19 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5712:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5714:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5716:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    571a:	e7e4      	b.n	56e6 <_svfprintf_r+0x98e>
    571c:	9a07      	ldr	r2, [sp, #28]
    571e:	9904      	ldr	r1, [sp, #16]
    5720:	1a54      	subs	r4, r2, r1
    5722:	2c00      	cmp	r4, #0
    5724:	f77f ad7c 	ble.w	5220 <_svfprintf_r+0x4c8>
    5728:	2c10      	cmp	r4, #16
    572a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    572c:	4f07      	ldr	r7, [pc, #28]	; (574c <_svfprintf_r+0x9f4>)
    572e:	dd2e      	ble.n	578e <_svfprintf_r+0xa36>
    5730:	4649      	mov	r1, r9
    5732:	2510      	movs	r5, #16
    5734:	46c1      	mov	r9, r8
    5736:	4618      	mov	r0, r3
    5738:	46b0      	mov	r8, r6
    573a:	9e05      	ldr	r6, [sp, #20]
    573c:	e00d      	b.n	575a <_svfprintf_r+0xa02>
    573e:	bf00      	nop
    5740:	20000924 	.word	0x20000924
    5744:	20000938 	.word	0x20000938
    5748:	20000918 	.word	0x20000918
    574c:	200009f0 	.word	0x200009f0
    5750:	3c10      	subs	r4, #16
    5752:	2c10      	cmp	r4, #16
    5754:	f101 0108 	add.w	r1, r1, #8
    5758:	dd15      	ble.n	5786 <_svfprintf_r+0xa2e>
    575a:	3201      	adds	r2, #1
    575c:	3010      	adds	r0, #16
    575e:	2a07      	cmp	r2, #7
    5760:	901d      	str	r0, [sp, #116]	; 0x74
    5762:	921c      	str	r2, [sp, #112]	; 0x70
    5764:	600f      	str	r7, [r1, #0]
    5766:	604d      	str	r5, [r1, #4]
    5768:	ddf2      	ble.n	5750 <_svfprintf_r+0x9f8>
    576a:	aa1b      	add	r2, sp, #108	; 0x6c
    576c:	9903      	ldr	r1, [sp, #12]
    576e:	4630      	mov	r0, r6
    5770:	f000 fdaa 	bl	62c8 <__ssprint_r>
    5774:	2800      	cmp	r0, #0
    5776:	f47f abe5 	bne.w	4f44 <_svfprintf_r+0x1ec>
    577a:	3c10      	subs	r4, #16
    577c:	2c10      	cmp	r4, #16
    577e:	981d      	ldr	r0, [sp, #116]	; 0x74
    5780:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5782:	a928      	add	r1, sp, #160	; 0xa0
    5784:	dce9      	bgt.n	575a <_svfprintf_r+0xa02>
    5786:	4646      	mov	r6, r8
    5788:	4603      	mov	r3, r0
    578a:	46c8      	mov	r8, r9
    578c:	4689      	mov	r9, r1
    578e:	3201      	adds	r2, #1
    5790:	4423      	add	r3, r4
    5792:	2a07      	cmp	r2, #7
    5794:	931d      	str	r3, [sp, #116]	; 0x74
    5796:	921c      	str	r2, [sp, #112]	; 0x70
    5798:	f8c9 7000 	str.w	r7, [r9]
    579c:	f8c9 4004 	str.w	r4, [r9, #4]
    57a0:	f300 8246 	bgt.w	5c30 <_svfprintf_r+0xed8>
    57a4:	f109 0908 	add.w	r9, r9, #8
    57a8:	e53a      	b.n	5220 <_svfprintf_r+0x4c8>
    57aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    57ac:	f8c9 6000 	str.w	r6, [r9]
    57b0:	2a01      	cmp	r2, #1
    57b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    57b4:	f103 0301 	add.w	r3, r3, #1
    57b8:	f102 0201 	add.w	r2, r2, #1
    57bc:	f04f 0101 	mov.w	r1, #1
    57c0:	931d      	str	r3, [sp, #116]	; 0x74
    57c2:	921c      	str	r2, [sp, #112]	; 0x70
    57c4:	f8c9 1004 	str.w	r1, [r9, #4]
    57c8:	f340 8210 	ble.w	5bec <_svfprintf_r+0xe94>
    57cc:	2a07      	cmp	r2, #7
    57ce:	f300 8215 	bgt.w	5bfc <_svfprintf_r+0xea4>
    57d2:	f109 0908 	add.w	r9, r9, #8
    57d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    57d8:	9910      	ldr	r1, [sp, #64]	; 0x40
    57da:	f8c9 1000 	str.w	r1, [r9]
    57de:	3201      	adds	r2, #1
    57e0:	4403      	add	r3, r0
    57e2:	2a07      	cmp	r2, #7
    57e4:	931d      	str	r3, [sp, #116]	; 0x74
    57e6:	921c      	str	r2, [sp, #112]	; 0x70
    57e8:	f8c9 0004 	str.w	r0, [r9, #4]
    57ec:	f300 8213 	bgt.w	5c16 <_svfprintf_r+0xebe>
    57f0:	f109 0908 	add.w	r9, r9, #8
    57f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    57f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57fc:	990d      	ldr	r1, [sp, #52]	; 0x34
    57fe:	f000 80f5 	beq.w	59ec <_svfprintf_r+0xc94>
    5802:	3901      	subs	r1, #1
    5804:	3201      	adds	r2, #1
    5806:	3601      	adds	r6, #1
    5808:	440b      	add	r3, r1
    580a:	2a07      	cmp	r2, #7
    580c:	f8c9 6000 	str.w	r6, [r9]
    5810:	921c      	str	r2, [sp, #112]	; 0x70
    5812:	931d      	str	r3, [sp, #116]	; 0x74
    5814:	f8c9 1004 	str.w	r1, [r9, #4]
    5818:	f300 811d 	bgt.w	5a56 <_svfprintf_r+0xcfe>
    581c:	f109 0908 	add.w	r9, r9, #8
    5820:	9811      	ldr	r0, [sp, #68]	; 0x44
    5822:	f8c9 0004 	str.w	r0, [r9, #4]
    5826:	3201      	adds	r2, #1
    5828:	4403      	add	r3, r0
    582a:	a917      	add	r1, sp, #92	; 0x5c
    582c:	2a07      	cmp	r2, #7
    582e:	931d      	str	r3, [sp, #116]	; 0x74
    5830:	921c      	str	r2, [sp, #112]	; 0x70
    5832:	f8c9 1000 	str.w	r1, [r9]
    5836:	f77f ad3e 	ble.w	52b6 <_svfprintf_r+0x55e>
    583a:	aa1b      	add	r2, sp, #108	; 0x6c
    583c:	9903      	ldr	r1, [sp, #12]
    583e:	9805      	ldr	r0, [sp, #20]
    5840:	f000 fd42 	bl	62c8 <__ssprint_r>
    5844:	2800      	cmp	r0, #0
    5846:	f47f ab7d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    584a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    584c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5850:	e533      	b.n	52ba <_svfprintf_r+0x562>
    5852:	aa1b      	add	r2, sp, #108	; 0x6c
    5854:	9903      	ldr	r1, [sp, #12]
    5856:	9805      	ldr	r0, [sp, #20]
    5858:	f000 fd36 	bl	62c8 <__ssprint_r>
    585c:	2800      	cmp	r0, #0
    585e:	f43f ad79 	beq.w	5354 <_svfprintf_r+0x5fc>
    5862:	f7ff bb6f 	b.w	4f44 <_svfprintf_r+0x1ec>
    5866:	9909      	ldr	r1, [sp, #36]	; 0x24
    5868:	f1b8 0f00 	cmp.w	r8, #0
    586c:	680c      	ldr	r4, [r1, #0]
    586e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5872:	f101 0704 	add.w	r7, r1, #4
    5876:	f04f 0500 	mov.w	r5, #0
    587a:	f2c0 8371 	blt.w	5f60 <_svfprintf_r+0x1208>
    587e:	ea54 0205 	orrs.w	r2, r4, r5
    5882:	9709      	str	r7, [sp, #36]	; 0x24
    5884:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5888:	461f      	mov	r7, r3
    588a:	f47f ac0a 	bne.w	50a2 <_svfprintf_r+0x34a>
    588e:	f1b8 0f00 	cmp.w	r8, #0
    5892:	f43f aeb3 	beq.w	55fc <_svfprintf_r+0x8a4>
    5896:	2400      	movs	r4, #0
    5898:	e5b6      	b.n	5408 <_svfprintf_r+0x6b0>
    589a:	aa1b      	add	r2, sp, #108	; 0x6c
    589c:	9903      	ldr	r1, [sp, #12]
    589e:	9805      	ldr	r0, [sp, #20]
    58a0:	f000 fd12 	bl	62c8 <__ssprint_r>
    58a4:	2800      	cmp	r0, #0
    58a6:	f47f ab4d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    58aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58ac:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58b0:	e4f0      	b.n	5294 <_svfprintf_r+0x53c>
    58b2:	aa1b      	add	r2, sp, #108	; 0x6c
    58b4:	9903      	ldr	r1, [sp, #12]
    58b6:	9805      	ldr	r0, [sp, #20]
    58b8:	f000 fd06 	bl	62c8 <__ssprint_r>
    58bc:	2800      	cmp	r0, #0
    58be:	f47f ab41 	bne.w	4f44 <_svfprintf_r+0x1ec>
    58c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58c4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58c8:	e496      	b.n	51f8 <_svfprintf_r+0x4a0>
    58ca:	aa1b      	add	r2, sp, #108	; 0x6c
    58cc:	9903      	ldr	r1, [sp, #12]
    58ce:	9805      	ldr	r0, [sp, #20]
    58d0:	f000 fcfa 	bl	62c8 <__ssprint_r>
    58d4:	2800      	cmp	r0, #0
    58d6:	f47f ab35 	bne.w	4f44 <_svfprintf_r+0x1ec>
    58da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58dc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58e0:	e49a      	b.n	5218 <_svfprintf_r+0x4c0>
    58e2:	f1b8 0f00 	cmp.w	r8, #0
    58e6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    58ea:	f2c0 826f 	blt.w	5dcc <_svfprintf_r+0x1074>
    58ee:	ea54 0305 	orrs.w	r3, r4, r5
    58f2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    58f6:	f47f adc4 	bne.w	5482 <_svfprintf_r+0x72a>
    58fa:	f1b8 0f00 	cmp.w	r8, #0
    58fe:	f43f ae7c 	beq.w	55fa <_svfprintf_r+0x8a2>
    5902:	2700      	movs	r7, #0
    5904:	e6a7      	b.n	5656 <_svfprintf_r+0x8fe>
    5906:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5908:	2c00      	cmp	r4, #0
    590a:	f340 8261 	ble.w	5dd0 <_svfprintf_r+0x1078>
    590e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5910:	990d      	ldr	r1, [sp, #52]	; 0x34
    5912:	428a      	cmp	r2, r1
    5914:	bfa8      	it	ge
    5916:	460a      	movge	r2, r1
    5918:	2a00      	cmp	r2, #0
    591a:	4614      	mov	r4, r2
    591c:	dd0d      	ble.n	593a <_svfprintf_r+0xbe2>
    591e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5920:	f8c9 6000 	str.w	r6, [r9]
    5924:	3201      	adds	r2, #1
    5926:	4423      	add	r3, r4
    5928:	2a07      	cmp	r2, #7
    592a:	931d      	str	r3, [sp, #116]	; 0x74
    592c:	f8c9 4004 	str.w	r4, [r9, #4]
    5930:	921c      	str	r2, [sp, #112]	; 0x70
    5932:	f300 8372 	bgt.w	601a <_svfprintf_r+0x12c2>
    5936:	f109 0908 	add.w	r9, r9, #8
    593a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    593c:	2c00      	cmp	r4, #0
    593e:	bfa8      	it	ge
    5940:	1b12      	subge	r2, r2, r4
    5942:	2a00      	cmp	r2, #0
    5944:	4614      	mov	r4, r2
    5946:	f340 80f1 	ble.w	5b2c <_svfprintf_r+0xdd4>
    594a:	2c10      	cmp	r4, #16
    594c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    594e:	4fc1      	ldr	r7, [pc, #772]	; (5c54 <_svfprintf_r+0xefc>)
    5950:	f340 8219 	ble.w	5d86 <_svfprintf_r+0x102e>
    5954:	4649      	mov	r1, r9
    5956:	2510      	movs	r5, #16
    5958:	46b1      	mov	r9, r6
    595a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    595e:	9e03      	ldr	r6, [sp, #12]
    5960:	e004      	b.n	596c <_svfprintf_r+0xc14>
    5962:	3108      	adds	r1, #8
    5964:	3c10      	subs	r4, #16
    5966:	2c10      	cmp	r4, #16
    5968:	f340 820b 	ble.w	5d82 <_svfprintf_r+0x102a>
    596c:	3201      	adds	r2, #1
    596e:	3310      	adds	r3, #16
    5970:	2a07      	cmp	r2, #7
    5972:	931d      	str	r3, [sp, #116]	; 0x74
    5974:	921c      	str	r2, [sp, #112]	; 0x70
    5976:	600f      	str	r7, [r1, #0]
    5978:	604d      	str	r5, [r1, #4]
    597a:	ddf2      	ble.n	5962 <_svfprintf_r+0xc0a>
    597c:	aa1b      	add	r2, sp, #108	; 0x6c
    597e:	4631      	mov	r1, r6
    5980:	4640      	mov	r0, r8
    5982:	f000 fca1 	bl	62c8 <__ssprint_r>
    5986:	2800      	cmp	r0, #0
    5988:	f47f aadc 	bne.w	4f44 <_svfprintf_r+0x1ec>
    598c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    598e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5990:	a928      	add	r1, sp, #160	; 0xa0
    5992:	e7e7      	b.n	5964 <_svfprintf_r+0xc0c>
    5994:	aa1b      	add	r2, sp, #108	; 0x6c
    5996:	9903      	ldr	r1, [sp, #12]
    5998:	9805      	ldr	r0, [sp, #20]
    599a:	f000 fc95 	bl	62c8 <__ssprint_r>
    599e:	2800      	cmp	r0, #0
    59a0:	f47f aad0 	bne.w	4f44 <_svfprintf_r+0x1ec>
    59a4:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    59a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    59aa:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    59ae:	e413      	b.n	51d8 <_svfprintf_r+0x480>
    59b0:	f01b 0210 	ands.w	r2, fp, #16
    59b4:	f47f af57 	bne.w	5866 <_svfprintf_r+0xb0e>
    59b8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    59bc:	f43f af53 	beq.w	5866 <_svfprintf_r+0xb0e>
    59c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    59c2:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    59c6:	460b      	mov	r3, r1
    59c8:	f1b8 0f00 	cmp.w	r8, #0
    59cc:	f103 0304 	add.w	r3, r3, #4
    59d0:	880c      	ldrh	r4, [r1, #0]
    59d2:	f04f 0500 	mov.w	r5, #0
    59d6:	f2c0 8294 	blt.w	5f02 <_svfprintf_r+0x11aa>
    59da:	ea54 0105 	orrs.w	r1, r4, r5
    59de:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    59e2:	9309      	str	r3, [sp, #36]	; 0x24
    59e4:	4617      	mov	r7, r2
    59e6:	f47f ab5c 	bne.w	50a2 <_svfprintf_r+0x34a>
    59ea:	e750      	b.n	588e <_svfprintf_r+0xb36>
    59ec:	1e4c      	subs	r4, r1, #1
    59ee:	2c00      	cmp	r4, #0
    59f0:	f77f af16 	ble.w	5820 <_svfprintf_r+0xac8>
    59f4:	2c10      	cmp	r4, #16
    59f6:	4f97      	ldr	r7, [pc, #604]	; (5c54 <_svfprintf_r+0xefc>)
    59f8:	dd22      	ble.n	5a40 <_svfprintf_r+0xce8>
    59fa:	2510      	movs	r5, #16
    59fc:	9e05      	ldr	r6, [sp, #20]
    59fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5a02:	e004      	b.n	5a0e <_svfprintf_r+0xcb6>
    5a04:	3c10      	subs	r4, #16
    5a06:	2c10      	cmp	r4, #16
    5a08:	f109 0908 	add.w	r9, r9, #8
    5a0c:	dd18      	ble.n	5a40 <_svfprintf_r+0xce8>
    5a0e:	3201      	adds	r2, #1
    5a10:	3310      	adds	r3, #16
    5a12:	2a07      	cmp	r2, #7
    5a14:	931d      	str	r3, [sp, #116]	; 0x74
    5a16:	921c      	str	r2, [sp, #112]	; 0x70
    5a18:	f8c9 7000 	str.w	r7, [r9]
    5a1c:	f8c9 5004 	str.w	r5, [r9, #4]
    5a20:	ddf0      	ble.n	5a04 <_svfprintf_r+0xcac>
    5a22:	aa1b      	add	r2, sp, #108	; 0x6c
    5a24:	4641      	mov	r1, r8
    5a26:	4630      	mov	r0, r6
    5a28:	f000 fc4e 	bl	62c8 <__ssprint_r>
    5a2c:	2800      	cmp	r0, #0
    5a2e:	f47f aa89 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5a32:	3c10      	subs	r4, #16
    5a34:	2c10      	cmp	r4, #16
    5a36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5a38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a3a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5a3e:	dce6      	bgt.n	5a0e <_svfprintf_r+0xcb6>
    5a40:	3201      	adds	r2, #1
    5a42:	4423      	add	r3, r4
    5a44:	2a07      	cmp	r2, #7
    5a46:	931d      	str	r3, [sp, #116]	; 0x74
    5a48:	921c      	str	r2, [sp, #112]	; 0x70
    5a4a:	f8c9 7000 	str.w	r7, [r9]
    5a4e:	f8c9 4004 	str.w	r4, [r9, #4]
    5a52:	f77f aee3 	ble.w	581c <_svfprintf_r+0xac4>
    5a56:	aa1b      	add	r2, sp, #108	; 0x6c
    5a58:	9903      	ldr	r1, [sp, #12]
    5a5a:	9805      	ldr	r0, [sp, #20]
    5a5c:	f000 fc34 	bl	62c8 <__ssprint_r>
    5a60:	2800      	cmp	r0, #0
    5a62:	f47f aa6f 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5a66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5a68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5a6a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5a6e:	e6d7      	b.n	5820 <_svfprintf_r+0xac8>
    5a70:	f01b 0f10 	tst.w	fp, #16
    5a74:	d133      	bne.n	5ade <_svfprintf_r+0xd86>
    5a76:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5a7a:	d030      	beq.n	5ade <_svfprintf_r+0xd86>
    5a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    5a7e:	f9b1 4000 	ldrsh.w	r4, [r1]
    5a82:	3104      	adds	r1, #4
    5a84:	17e5      	asrs	r5, r4, #31
    5a86:	4622      	mov	r2, r4
    5a88:	462b      	mov	r3, r5
    5a8a:	9109      	str	r1, [sp, #36]	; 0x24
    5a8c:	f7ff baf8 	b.w	5080 <_svfprintf_r+0x328>
    5a90:	3201      	adds	r2, #1
    5a92:	4423      	add	r3, r4
    5a94:	2a07      	cmp	r2, #7
    5a96:	931d      	str	r3, [sp, #116]	; 0x74
    5a98:	921c      	str	r2, [sp, #112]	; 0x70
    5a9a:	f8c9 7000 	str.w	r7, [r9]
    5a9e:	f8c9 4004 	str.w	r4, [r9, #4]
    5aa2:	f77f ac08 	ble.w	52b6 <_svfprintf_r+0x55e>
    5aa6:	e6c8      	b.n	583a <_svfprintf_r+0xae2>
    5aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
    5aaa:	f1b8 0f00 	cmp.w	r8, #0
    5aae:	680c      	ldr	r4, [r1, #0]
    5ab0:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5ab4:	f101 0704 	add.w	r7, r1, #4
    5ab8:	f04f 0500 	mov.w	r5, #0
    5abc:	f2c0 80c5 	blt.w	5c4a <_svfprintf_r+0xef2>
    5ac0:	ea54 0205 	orrs.w	r2, r4, r5
    5ac4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5ac8:	9709      	str	r7, [sp, #36]	; 0x24
    5aca:	f43f adb2 	beq.w	5632 <_svfprintf_r+0x8da>
    5ace:	461f      	mov	r7, r3
    5ad0:	f7ff ba64 	b.w	4f9c <_svfprintf_r+0x244>
    5ad4:	681c      	ldr	r4, [r3, #0]
    5ad6:	3304      	adds	r3, #4
    5ad8:	9309      	str	r3, [sp, #36]	; 0x24
    5ada:	2500      	movs	r5, #0
    5adc:	e4b6      	b.n	544c <_svfprintf_r+0x6f4>
    5ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ae0:	6814      	ldr	r4, [r2, #0]
    5ae2:	4613      	mov	r3, r2
    5ae4:	3304      	adds	r3, #4
    5ae6:	17e5      	asrs	r5, r4, #31
    5ae8:	4622      	mov	r2, r4
    5aea:	9309      	str	r3, [sp, #36]	; 0x24
    5aec:	2a00      	cmp	r2, #0
    5aee:	462b      	mov	r3, r5
    5af0:	f173 0300 	sbcs.w	r3, r3, #0
    5af4:	f6bf aac9 	bge.w	508a <_svfprintf_r+0x332>
    5af8:	4264      	negs	r4, r4
    5afa:	f04f 072d 	mov.w	r7, #45	; 0x2d
    5afe:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    5b02:	f1b8 0f00 	cmp.w	r8, #0
    5b06:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5b0a:	f6ff aaca 	blt.w	50a2 <_svfprintf_r+0x34a>
    5b0e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5b12:	f7ff bac6 	b.w	50a2 <_svfprintf_r+0x34a>
    5b16:	aa1b      	add	r2, sp, #108	; 0x6c
    5b18:	9903      	ldr	r1, [sp, #12]
    5b1a:	9805      	ldr	r0, [sp, #20]
    5b1c:	f000 fbd4 	bl	62c8 <__ssprint_r>
    5b20:	2800      	cmp	r0, #0
    5b22:	f47f aa0f 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5b26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5b28:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5b2c:	990e      	ldr	r1, [sp, #56]	; 0x38
    5b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5b30:	4431      	add	r1, r6
    5b32:	460d      	mov	r5, r1
    5b34:	990d      	ldr	r1, [sp, #52]	; 0x34
    5b36:	428a      	cmp	r2, r1
    5b38:	db47      	blt.n	5bca <_svfprintf_r+0xe72>
    5b3a:	f01b 0f01 	tst.w	fp, #1
    5b3e:	d144      	bne.n	5bca <_svfprintf_r+0xe72>
    5b40:	980d      	ldr	r0, [sp, #52]	; 0x34
    5b42:	4406      	add	r6, r0
    5b44:	1b74      	subs	r4, r6, r5
    5b46:	1a82      	subs	r2, r0, r2
    5b48:	4294      	cmp	r4, r2
    5b4a:	bfa8      	it	ge
    5b4c:	4614      	movge	r4, r2
    5b4e:	2c00      	cmp	r4, #0
    5b50:	4626      	mov	r6, r4
    5b52:	dd0d      	ble.n	5b70 <_svfprintf_r+0xe18>
    5b54:	991c      	ldr	r1, [sp, #112]	; 0x70
    5b56:	f8c9 5000 	str.w	r5, [r9]
    5b5a:	3101      	adds	r1, #1
    5b5c:	4423      	add	r3, r4
    5b5e:	2907      	cmp	r1, #7
    5b60:	931d      	str	r3, [sp, #116]	; 0x74
    5b62:	f8c9 4004 	str.w	r4, [r9, #4]
    5b66:	911c      	str	r1, [sp, #112]	; 0x70
    5b68:	f300 8280 	bgt.w	606c <_svfprintf_r+0x1314>
    5b6c:	f109 0908 	add.w	r9, r9, #8
    5b70:	2e00      	cmp	r6, #0
    5b72:	bfac      	ite	ge
    5b74:	1b94      	subge	r4, r2, r6
    5b76:	4614      	movlt	r4, r2
    5b78:	2c00      	cmp	r4, #0
    5b7a:	f77f ab9e 	ble.w	52ba <_svfprintf_r+0x562>
    5b7e:	2c10      	cmp	r4, #16
    5b80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b82:	4f34      	ldr	r7, [pc, #208]	; (5c54 <_svfprintf_r+0xefc>)
    5b84:	dd84      	ble.n	5a90 <_svfprintf_r+0xd38>
    5b86:	2510      	movs	r5, #16
    5b88:	9e05      	ldr	r6, [sp, #20]
    5b8a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5b8e:	e005      	b.n	5b9c <_svfprintf_r+0xe44>
    5b90:	f109 0908 	add.w	r9, r9, #8
    5b94:	3c10      	subs	r4, #16
    5b96:	2c10      	cmp	r4, #16
    5b98:	f77f af7a 	ble.w	5a90 <_svfprintf_r+0xd38>
    5b9c:	3201      	adds	r2, #1
    5b9e:	3310      	adds	r3, #16
    5ba0:	2a07      	cmp	r2, #7
    5ba2:	931d      	str	r3, [sp, #116]	; 0x74
    5ba4:	921c      	str	r2, [sp, #112]	; 0x70
    5ba6:	f8c9 7000 	str.w	r7, [r9]
    5baa:	f8c9 5004 	str.w	r5, [r9, #4]
    5bae:	ddef      	ble.n	5b90 <_svfprintf_r+0xe38>
    5bb0:	aa1b      	add	r2, sp, #108	; 0x6c
    5bb2:	4641      	mov	r1, r8
    5bb4:	4630      	mov	r0, r6
    5bb6:	f000 fb87 	bl	62c8 <__ssprint_r>
    5bba:	2800      	cmp	r0, #0
    5bbc:	f47f a9c2 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5bc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5bc4:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5bc8:	e7e4      	b.n	5b94 <_svfprintf_r+0xe3c>
    5bca:	991c      	ldr	r1, [sp, #112]	; 0x70
    5bcc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    5bce:	9810      	ldr	r0, [sp, #64]	; 0x40
    5bd0:	f8c9 0000 	str.w	r0, [r9]
    5bd4:	3101      	adds	r1, #1
    5bd6:	4423      	add	r3, r4
    5bd8:	2907      	cmp	r1, #7
    5bda:	931d      	str	r3, [sp, #116]	; 0x74
    5bdc:	f8c9 4004 	str.w	r4, [r9, #4]
    5be0:	911c      	str	r1, [sp, #112]	; 0x70
    5be2:	f300 8226 	bgt.w	6032 <_svfprintf_r+0x12da>
    5be6:	f109 0908 	add.w	r9, r9, #8
    5bea:	e7a9      	b.n	5b40 <_svfprintf_r+0xde8>
    5bec:	f01b 0f01 	tst.w	fp, #1
    5bf0:	f47f adec 	bne.w	57cc <_svfprintf_r+0xa74>
    5bf4:	2a07      	cmp	r2, #7
    5bf6:	f77f ae11 	ble.w	581c <_svfprintf_r+0xac4>
    5bfa:	e72c      	b.n	5a56 <_svfprintf_r+0xcfe>
    5bfc:	aa1b      	add	r2, sp, #108	; 0x6c
    5bfe:	9903      	ldr	r1, [sp, #12]
    5c00:	9805      	ldr	r0, [sp, #20]
    5c02:	f000 fb61 	bl	62c8 <__ssprint_r>
    5c06:	2800      	cmp	r0, #0
    5c08:	f47f a99c 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c10:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c14:	e5df      	b.n	57d6 <_svfprintf_r+0xa7e>
    5c16:	aa1b      	add	r2, sp, #108	; 0x6c
    5c18:	9903      	ldr	r1, [sp, #12]
    5c1a:	9805      	ldr	r0, [sp, #20]
    5c1c:	f000 fb54 	bl	62c8 <__ssprint_r>
    5c20:	2800      	cmp	r0, #0
    5c22:	f47f a98f 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c2a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c2e:	e5e1      	b.n	57f4 <_svfprintf_r+0xa9c>
    5c30:	aa1b      	add	r2, sp, #108	; 0x6c
    5c32:	9903      	ldr	r1, [sp, #12]
    5c34:	9805      	ldr	r0, [sp, #20]
    5c36:	f000 fb47 	bl	62c8 <__ssprint_r>
    5c3a:	2800      	cmp	r0, #0
    5c3c:	f47f a982 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c42:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5c46:	f7ff baeb 	b.w	5220 <_svfprintf_r+0x4c8>
    5c4a:	9709      	str	r7, [sp, #36]	; 0x24
    5c4c:	2700      	movs	r7, #0
    5c4e:	f7ff b9a5 	b.w	4f9c <_svfprintf_r+0x244>
    5c52:	bf00      	nop
    5c54:	200009f0 	.word	0x200009f0
    5c58:	f01b 0f10 	tst.w	fp, #16
    5c5c:	d10b      	bne.n	5c76 <_svfprintf_r+0xf1e>
    5c5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5c62:	d008      	beq.n	5c76 <_svfprintf_r+0xf1e>
    5c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c66:	6813      	ldr	r3, [r2, #0]
    5c68:	3204      	adds	r2, #4
    5c6a:	9209      	str	r2, [sp, #36]	; 0x24
    5c6c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    5c70:	801a      	strh	r2, [r3, #0]
    5c72:	f7ff b897 	b.w	4da4 <_svfprintf_r+0x4c>
    5c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c78:	6813      	ldr	r3, [r2, #0]
    5c7a:	3204      	adds	r2, #4
    5c7c:	9209      	str	r2, [sp, #36]	; 0x24
    5c7e:	9a06      	ldr	r2, [sp, #24]
    5c80:	601a      	str	r2, [r3, #0]
    5c82:	f7ff b88f 	b.w	4da4 <_svfprintf_r+0x4c>
    5c86:	eeb4 8b48 	vcmp.f64	d8, d8
    5c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c8e:	f180 829e 	bvs.w	61ce <_svfprintf_r+0x1476>
    5c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c94:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    5c98:	f023 0520 	bic.w	r5, r3, #32
    5c9c:	f000 8225 	beq.w	60ea <_svfprintf_r+0x1392>
    5ca0:	2d47      	cmp	r5, #71	; 0x47
    5ca2:	f000 8126 	beq.w	5ef2 <_svfprintf_r+0x119a>
    5ca6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    5caa:	930a      	str	r3, [sp, #40]	; 0x28
    5cac:	ee18 3a90 	vmov	r3, s17
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	f2c0 821d 	blt.w	60f0 <_svfprintf_r+0x1398>
    5cb6:	eeb0 ab48 	vmov.f64	d10, d8
    5cba:	2700      	movs	r7, #0
    5cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cbe:	2b66      	cmp	r3, #102	; 0x66
    5cc0:	f000 8202 	beq.w	60c8 <_svfprintf_r+0x1370>
    5cc4:	2b46      	cmp	r3, #70	; 0x46
    5cc6:	f000 80ec 	beq.w	5ea2 <_svfprintf_r+0x114a>
    5cca:	eeb0 0b4a 	vmov.f64	d0, d10
    5cce:	2d45      	cmp	r5, #69	; 0x45
    5cd0:	bf0c      	ite	eq
    5cd2:	f108 0401 	addeq.w	r4, r8, #1
    5cd6:	4644      	movne	r4, r8
    5cd8:	aa19      	add	r2, sp, #100	; 0x64
    5cda:	ab16      	add	r3, sp, #88	; 0x58
    5cdc:	9201      	str	r2, [sp, #4]
    5cde:	9300      	str	r3, [sp, #0]
    5ce0:	4622      	mov	r2, r4
    5ce2:	ab15      	add	r3, sp, #84	; 0x54
    5ce4:	2102      	movs	r1, #2
    5ce6:	9805      	ldr	r0, [sp, #20]
    5ce8:	f7fe f9f2 	bl	40d0 <_dtoa_r>
    5cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cee:	2b67      	cmp	r3, #103	; 0x67
    5cf0:	4606      	mov	r6, r0
    5cf2:	f040 820e 	bne.w	6112 <_svfprintf_r+0x13ba>
    5cf6:	f01b 0f01 	tst.w	fp, #1
    5cfa:	f000 8266 	beq.w	61ca <_svfprintf_r+0x1472>
    5cfe:	1931      	adds	r1, r6, r4
    5d00:	eeb5 ab40 	vcmp.f64	d10, #0.0
    5d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d08:	f000 8185 	beq.w	6016 <_svfprintf_r+0x12be>
    5d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5d0e:	4299      	cmp	r1, r3
    5d10:	d906      	bls.n	5d20 <_svfprintf_r+0xfc8>
    5d12:	2030      	movs	r0, #48	; 0x30
    5d14:	1c5a      	adds	r2, r3, #1
    5d16:	9219      	str	r2, [sp, #100]	; 0x64
    5d18:	7018      	strb	r0, [r3, #0]
    5d1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5d1c:	4299      	cmp	r1, r3
    5d1e:	d8f9      	bhi.n	5d14 <_svfprintf_r+0xfbc>
    5d20:	1b9b      	subs	r3, r3, r6
    5d22:	2d47      	cmp	r5, #71	; 0x47
    5d24:	930d      	str	r3, [sp, #52]	; 0x34
    5d26:	f000 811f 	beq.w	5f68 <_svfprintf_r+0x1210>
    5d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d2c:	2b65      	cmp	r3, #101	; 0x65
    5d2e:	f340 81ff 	ble.w	6130 <_svfprintf_r+0x13d8>
    5d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d34:	2b66      	cmp	r3, #102	; 0x66
    5d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5d38:	f000 81fc 	beq.w	6134 <_svfprintf_r+0x13dc>
    5d3c:	930e      	str	r3, [sp, #56]	; 0x38
    5d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5d40:	990d      	ldr	r1, [sp, #52]	; 0x34
    5d42:	428a      	cmp	r2, r1
    5d44:	f2c0 81d8 	blt.w	60f8 <_svfprintf_r+0x13a0>
    5d48:	f01b 0f01 	tst.w	fp, #1
    5d4c:	f040 8234 	bne.w	61b8 <_svfprintf_r+0x1460>
    5d50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    5d54:	9208      	str	r2, [sp, #32]
    5d56:	2267      	movs	r2, #103	; 0x67
    5d58:	920c      	str	r2, [sp, #48]	; 0x30
    5d5a:	2f00      	cmp	r7, #0
    5d5c:	f040 80f6 	bne.w	5f4c <_svfprintf_r+0x11f4>
    5d60:	46b8      	mov	r8, r7
    5d62:	9304      	str	r3, [sp, #16]
    5d64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5d68:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5d6c:	f7ff b9e6 	b.w	513c <_svfprintf_r+0x3e4>
    5d70:	f027 0707 	bic.w	r7, r7, #7
    5d74:	f107 0308 	add.w	r3, r7, #8
    5d78:	ed97 8b00 	vldr	d8, [r7]
    5d7c:	9309      	str	r3, [sp, #36]	; 0x24
    5d7e:	f7ff b9be 	b.w	50fe <_svfprintf_r+0x3a6>
    5d82:	464e      	mov	r6, r9
    5d84:	4689      	mov	r9, r1
    5d86:	3201      	adds	r2, #1
    5d88:	4423      	add	r3, r4
    5d8a:	2a07      	cmp	r2, #7
    5d8c:	931d      	str	r3, [sp, #116]	; 0x74
    5d8e:	921c      	str	r2, [sp, #112]	; 0x70
    5d90:	f8c9 7000 	str.w	r7, [r9]
    5d94:	f8c9 4004 	str.w	r4, [r9, #4]
    5d98:	f73f aebd 	bgt.w	5b16 <_svfprintf_r+0xdbe>
    5d9c:	f109 0908 	add.w	r9, r9, #8
    5da0:	e6c4      	b.n	5b2c <_svfprintf_r+0xdd4>
    5da2:	2700      	movs	r7, #0
    5da4:	45b8      	cmp	r8, r7
    5da6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5daa:	f6ff ac54 	blt.w	5656 <_svfprintf_r+0x8fe>
    5dae:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5db2:	e41e      	b.n	55f2 <_svfprintf_r+0x89a>
    5db4:	aa1b      	add	r2, sp, #108	; 0x6c
    5db6:	9903      	ldr	r1, [sp, #12]
    5db8:	9805      	ldr	r0, [sp, #20]
    5dba:	f000 fa85 	bl	62c8 <__ssprint_r>
    5dbe:	2800      	cmp	r0, #0
    5dc0:	f47f a8c0 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5dc6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5dca:	e463      	b.n	5694 <_svfprintf_r+0x93c>
    5dcc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5dce:	e43b      	b.n	5648 <_svfprintf_r+0x8f0>
    5dd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5dd2:	49b9      	ldr	r1, [pc, #740]	; (60b8 <_svfprintf_r+0x1360>)
    5dd4:	f8c9 1000 	str.w	r1, [r9]
    5dd8:	3201      	adds	r2, #1
    5dda:	3301      	adds	r3, #1
    5ddc:	2101      	movs	r1, #1
    5dde:	2a07      	cmp	r2, #7
    5de0:	931d      	str	r3, [sp, #116]	; 0x74
    5de2:	921c      	str	r2, [sp, #112]	; 0x70
    5de4:	f8c9 1004 	str.w	r1, [r9, #4]
    5de8:	dc76      	bgt.n	5ed8 <_svfprintf_r+0x1180>
    5dea:	f109 0908 	add.w	r9, r9, #8
    5dee:	b92c      	cbnz	r4, 5dfc <_svfprintf_r+0x10a4>
    5df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5df2:	b91a      	cbnz	r2, 5dfc <_svfprintf_r+0x10a4>
    5df4:	f01b 0f01 	tst.w	fp, #1
    5df8:	f43f aa5f 	beq.w	52ba <_svfprintf_r+0x562>
    5dfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5dfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5e00:	9910      	ldr	r1, [sp, #64]	; 0x40
    5e02:	f8c9 1000 	str.w	r1, [r9]
    5e06:	3201      	adds	r2, #1
    5e08:	4403      	add	r3, r0
    5e0a:	2a07      	cmp	r2, #7
    5e0c:	931d      	str	r3, [sp, #116]	; 0x74
    5e0e:	f8c9 0004 	str.w	r0, [r9, #4]
    5e12:	921c      	str	r2, [sp, #112]	; 0x70
    5e14:	f300 81b6 	bgt.w	6184 <_svfprintf_r+0x142c>
    5e18:	f109 0908 	add.w	r9, r9, #8
    5e1c:	4264      	negs	r4, r4
    5e1e:	2c00      	cmp	r4, #0
    5e20:	f340 8087 	ble.w	5f32 <_svfprintf_r+0x11da>
    5e24:	2c10      	cmp	r4, #16
    5e26:	4fa5      	ldr	r7, [pc, #660]	; (60bc <_svfprintf_r+0x1364>)
    5e28:	f340 8112 	ble.w	6050 <_svfprintf_r+0x12f8>
    5e2c:	4649      	mov	r1, r9
    5e2e:	2510      	movs	r5, #16
    5e30:	46b1      	mov	r9, r6
    5e32:	f8dd 8014 	ldr.w	r8, [sp, #20]
    5e36:	9e03      	ldr	r6, [sp, #12]
    5e38:	e004      	b.n	5e44 <_svfprintf_r+0x10ec>
    5e3a:	3108      	adds	r1, #8
    5e3c:	3c10      	subs	r4, #16
    5e3e:	2c10      	cmp	r4, #16
    5e40:	f340 8104 	ble.w	604c <_svfprintf_r+0x12f4>
    5e44:	3201      	adds	r2, #1
    5e46:	3310      	adds	r3, #16
    5e48:	2a07      	cmp	r2, #7
    5e4a:	931d      	str	r3, [sp, #116]	; 0x74
    5e4c:	921c      	str	r2, [sp, #112]	; 0x70
    5e4e:	600f      	str	r7, [r1, #0]
    5e50:	604d      	str	r5, [r1, #4]
    5e52:	ddf2      	ble.n	5e3a <_svfprintf_r+0x10e2>
    5e54:	aa1b      	add	r2, sp, #108	; 0x6c
    5e56:	4631      	mov	r1, r6
    5e58:	4640      	mov	r0, r8
    5e5a:	f000 fa35 	bl	62c8 <__ssprint_r>
    5e5e:	2800      	cmp	r0, #0
    5e60:	f47f a870 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5e66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5e68:	a928      	add	r1, sp, #160	; 0xa0
    5e6a:	e7e7      	b.n	5e3c <_svfprintf_r+0x10e4>
    5e6c:	aa1b      	add	r2, sp, #108	; 0x6c
    5e6e:	9903      	ldr	r1, [sp, #12]
    5e70:	9805      	ldr	r0, [sp, #20]
    5e72:	f000 fa29 	bl	62c8 <__ssprint_r>
    5e76:	2800      	cmp	r0, #0
    5e78:	f47f a864 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5e7e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5e82:	e41f      	b.n	56c4 <_svfprintf_r+0x96c>
    5e84:	2140      	movs	r1, #64	; 0x40
    5e86:	9805      	ldr	r0, [sp, #20]
    5e88:	f7fc fc68 	bl	275c <_malloc_r>
    5e8c:	9a03      	ldr	r2, [sp, #12]
    5e8e:	6010      	str	r0, [r2, #0]
    5e90:	6110      	str	r0, [r2, #16]
    5e92:	2800      	cmp	r0, #0
    5e94:	f000 81ed 	beq.w	6272 <_svfprintf_r+0x151a>
    5e98:	9a03      	ldr	r2, [sp, #12]
    5e9a:	2340      	movs	r3, #64	; 0x40
    5e9c:	6153      	str	r3, [r2, #20]
    5e9e:	f7fe bf74 	b.w	4d8a <_svfprintf_r+0x32>
    5ea2:	aa19      	add	r2, sp, #100	; 0x64
    5ea4:	ab16      	add	r3, sp, #88	; 0x58
    5ea6:	9201      	str	r2, [sp, #4]
    5ea8:	9300      	str	r3, [sp, #0]
    5eaa:	4642      	mov	r2, r8
    5eac:	ab15      	add	r3, sp, #84	; 0x54
    5eae:	2103      	movs	r1, #3
    5eb0:	eeb0 0b4a 	vmov.f64	d0, d10
    5eb4:	9805      	ldr	r0, [sp, #20]
    5eb6:	f7fe f90b 	bl	40d0 <_dtoa_r>
    5eba:	4644      	mov	r4, r8
    5ebc:	4606      	mov	r6, r0
    5ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ec0:	2b46      	cmp	r3, #70	; 0x46
    5ec2:	eb06 0104 	add.w	r1, r6, r4
    5ec6:	f47f af1b 	bne.w	5d00 <_svfprintf_r+0xfa8>
    5eca:	7833      	ldrb	r3, [r6, #0]
    5ecc:	2b30      	cmp	r3, #48	; 0x30
    5ece:	f000 818d 	beq.w	61ec <_svfprintf_r+0x1494>
    5ed2:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5ed4:	4421      	add	r1, r4
    5ed6:	e713      	b.n	5d00 <_svfprintf_r+0xfa8>
    5ed8:	aa1b      	add	r2, sp, #108	; 0x6c
    5eda:	9903      	ldr	r1, [sp, #12]
    5edc:	9805      	ldr	r0, [sp, #20]
    5ede:	f000 f9f3 	bl	62c8 <__ssprint_r>
    5ee2:	2800      	cmp	r0, #0
    5ee4:	f47f a82e 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5ee8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5eea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5eec:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5ef0:	e77d      	b.n	5dee <_svfprintf_r+0x1096>
    5ef2:	f1b8 0f00 	cmp.w	r8, #0
    5ef6:	bf08      	it	eq
    5ef8:	f04f 0801 	moveq.w	r8, #1
    5efc:	e6d3      	b.n	5ca6 <_svfprintf_r+0xf4e>
    5efe:	9309      	str	r3, [sp, #36]	; 0x24
    5f00:	e6a4      	b.n	5c4c <_svfprintf_r+0xef4>
    5f02:	9309      	str	r3, [sp, #36]	; 0x24
    5f04:	4617      	mov	r7, r2
    5f06:	f7ff ba7b 	b.w	5400 <_svfprintf_r+0x6a8>
    5f0a:	4630      	mov	r0, r6
    5f0c:	f7fd fa58 	bl	33c0 <strlen>
    5f10:	46a0      	mov	r8, r4
    5f12:	4603      	mov	r3, r0
    5f14:	9008      	str	r0, [sp, #32]
    5f16:	f7ff bb61 	b.w	55dc <_svfprintf_r+0x884>
    5f1a:	aa1b      	add	r2, sp, #108	; 0x6c
    5f1c:	9903      	ldr	r1, [sp, #12]
    5f1e:	9805      	ldr	r0, [sp, #20]
    5f20:	f000 f9d2 	bl	62c8 <__ssprint_r>
    5f24:	2800      	cmp	r0, #0
    5f26:	f47f a80d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    5f2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5f2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5f2e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5f32:	980d      	ldr	r0, [sp, #52]	; 0x34
    5f34:	f8c9 6000 	str.w	r6, [r9]
    5f38:	3201      	adds	r2, #1
    5f3a:	4403      	add	r3, r0
    5f3c:	2a07      	cmp	r2, #7
    5f3e:	931d      	str	r3, [sp, #116]	; 0x74
    5f40:	921c      	str	r2, [sp, #112]	; 0x70
    5f42:	f8c9 0004 	str.w	r0, [r9, #4]
    5f46:	f77f a9b6 	ble.w	52b6 <_svfprintf_r+0x55e>
    5f4a:	e476      	b.n	583a <_svfprintf_r+0xae2>
    5f4c:	272d      	movs	r7, #45	; 0x2d
    5f4e:	9304      	str	r3, [sp, #16]
    5f50:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    5f54:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5f58:	f04f 0800 	mov.w	r8, #0
    5f5c:	f7ff b8ef 	b.w	513e <_svfprintf_r+0x3e6>
    5f60:	9709      	str	r7, [sp, #36]	; 0x24
    5f62:	461f      	mov	r7, r3
    5f64:	f7ff ba4c 	b.w	5400 <_svfprintf_r+0x6a8>
    5f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5f6a:	1cda      	adds	r2, r3, #3
    5f6c:	db02      	blt.n	5f74 <_svfprintf_r+0x121c>
    5f6e:	4598      	cmp	r8, r3
    5f70:	f6bf aee4 	bge.w	5d3c <_svfprintf_r+0xfe4>
    5f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5f76:	3a02      	subs	r2, #2
    5f78:	920c      	str	r2, [sp, #48]	; 0x30
    5f7a:	3b01      	subs	r3, #1
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5f82:	9315      	str	r3, [sp, #84]	; 0x54
    5f84:	bfb8      	it	lt
    5f86:	425b      	neglt	r3, r3
    5f88:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    5f8c:	bfb4      	ite	lt
    5f8e:	222d      	movlt	r2, #45	; 0x2d
    5f90:	222b      	movge	r2, #43	; 0x2b
    5f92:	2b09      	cmp	r3, #9
    5f94:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    5f98:	f340 8106 	ble.w	61a8 <_svfprintf_r+0x1450>
    5f9c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    5fa0:	4604      	mov	r4, r0
    5fa2:	4a47      	ldr	r2, [pc, #284]	; (60c0 <_svfprintf_r+0x1368>)
    5fa4:	fb82 2103 	smull	r2, r1, r2, r3
    5fa8:	17da      	asrs	r2, r3, #31
    5faa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    5fae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    5fb2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    5fb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    5fba:	2a09      	cmp	r2, #9
    5fbc:	4613      	mov	r3, r2
    5fbe:	f804 1d01 	strb.w	r1, [r4, #-1]!
    5fc2:	dcee      	bgt.n	5fa2 <_svfprintf_r+0x124a>
    5fc4:	4621      	mov	r1, r4
    5fc6:	3330      	adds	r3, #48	; 0x30
    5fc8:	b2da      	uxtb	r2, r3
    5fca:	f801 2d01 	strb.w	r2, [r1, #-1]!
    5fce:	4288      	cmp	r0, r1
    5fd0:	f240 8162 	bls.w	6298 <_svfprintf_r+0x1540>
    5fd4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    5fd8:	4623      	mov	r3, r4
    5fda:	e001      	b.n	5fe0 <_svfprintf_r+0x1288>
    5fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
    5fe0:	f801 2b01 	strb.w	r2, [r1], #1
    5fe4:	4298      	cmp	r0, r3
    5fe6:	d1f9      	bne.n	5fdc <_svfprintf_r+0x1284>
    5fe8:	1c43      	adds	r3, r0, #1
    5fea:	1b1b      	subs	r3, r3, r4
    5fec:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    5ff0:	4413      	add	r3, r2
    5ff2:	aa17      	add	r2, sp, #92	; 0x5c
    5ff4:	1a9b      	subs	r3, r3, r2
    5ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5ff8:	9311      	str	r3, [sp, #68]	; 0x44
    5ffa:	2a01      	cmp	r2, #1
    5ffc:	4413      	add	r3, r2
    5ffe:	9308      	str	r3, [sp, #32]
    6000:	f340 80ff 	ble.w	6202 <_svfprintf_r+0x14aa>
    6004:	9b08      	ldr	r3, [sp, #32]
    6006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6008:	4413      	add	r3, r2
    600a:	2200      	movs	r2, #0
    600c:	9308      	str	r3, [sp, #32]
    600e:	920e      	str	r2, [sp, #56]	; 0x38
    6010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6014:	e6a1      	b.n	5d5a <_svfprintf_r+0x1002>
    6016:	460b      	mov	r3, r1
    6018:	e682      	b.n	5d20 <_svfprintf_r+0xfc8>
    601a:	aa1b      	add	r2, sp, #108	; 0x6c
    601c:	9903      	ldr	r1, [sp, #12]
    601e:	9805      	ldr	r0, [sp, #20]
    6020:	f000 f952 	bl	62c8 <__ssprint_r>
    6024:	2800      	cmp	r0, #0
    6026:	f47e af8d 	bne.w	4f44 <_svfprintf_r+0x1ec>
    602a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    602c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6030:	e483      	b.n	593a <_svfprintf_r+0xbe2>
    6032:	aa1b      	add	r2, sp, #108	; 0x6c
    6034:	9903      	ldr	r1, [sp, #12]
    6036:	9805      	ldr	r0, [sp, #20]
    6038:	f000 f946 	bl	62c8 <__ssprint_r>
    603c:	2800      	cmp	r0, #0
    603e:	f47e af81 	bne.w	4f44 <_svfprintf_r+0x1ec>
    6042:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6046:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    604a:	e579      	b.n	5b40 <_svfprintf_r+0xde8>
    604c:	464e      	mov	r6, r9
    604e:	4689      	mov	r9, r1
    6050:	3201      	adds	r2, #1
    6052:	4423      	add	r3, r4
    6054:	2a07      	cmp	r2, #7
    6056:	931d      	str	r3, [sp, #116]	; 0x74
    6058:	921c      	str	r2, [sp, #112]	; 0x70
    605a:	f8c9 7000 	str.w	r7, [r9]
    605e:	f8c9 4004 	str.w	r4, [r9, #4]
    6062:	f73f af5a 	bgt.w	5f1a <_svfprintf_r+0x11c2>
    6066:	f109 0908 	add.w	r9, r9, #8
    606a:	e762      	b.n	5f32 <_svfprintf_r+0x11da>
    606c:	aa1b      	add	r2, sp, #108	; 0x6c
    606e:	9903      	ldr	r1, [sp, #12]
    6070:	9805      	ldr	r0, [sp, #20]
    6072:	f000 f929 	bl	62c8 <__ssprint_r>
    6076:	2800      	cmp	r0, #0
    6078:	f47e af64 	bne.w	4f44 <_svfprintf_r+0x1ec>
    607c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    607e:	990d      	ldr	r1, [sp, #52]	; 0x34
    6080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6082:	1a8a      	subs	r2, r1, r2
    6084:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6088:	e572      	b.n	5b70 <_svfprintf_r+0xe18>
    608a:	2d06      	cmp	r5, #6
    608c:	462b      	mov	r3, r5
    608e:	bf28      	it	cs
    6090:	2306      	movcs	r3, #6
    6092:	9308      	str	r3, [sp, #32]
    6094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6098:	46b0      	mov	r8, r6
    609a:	9709      	str	r7, [sp, #36]	; 0x24
    609c:	960e      	str	r6, [sp, #56]	; 0x38
    609e:	4637      	mov	r7, r6
    60a0:	9304      	str	r3, [sp, #16]
    60a2:	4e08      	ldr	r6, [pc, #32]	; (60c4 <_svfprintf_r+0x136c>)
    60a4:	f7ff b84a 	b.w	513c <_svfprintf_r+0x3e4>
    60a8:	469b      	mov	fp, r3
    60aa:	f7ff b9ea 	b.w	5482 <_svfprintf_r+0x72a>
    60ae:	272d      	movs	r7, #45	; 0x2d
    60b0:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    60b4:	f7ff b833 	b.w	511e <_svfprintf_r+0x3c6>
    60b8:	20000918 	.word	0x20000918
    60bc:	200009f0 	.word	0x200009f0
    60c0:	66666667 	.word	0x66666667
    60c4:	2000094c 	.word	0x2000094c
    60c8:	aa19      	add	r2, sp, #100	; 0x64
    60ca:	ab16      	add	r3, sp, #88	; 0x58
    60cc:	9201      	str	r2, [sp, #4]
    60ce:	9300      	str	r3, [sp, #0]
    60d0:	2103      	movs	r1, #3
    60d2:	ab15      	add	r3, sp, #84	; 0x54
    60d4:	4642      	mov	r2, r8
    60d6:	eeb0 0b4a 	vmov.f64	d0, d10
    60da:	9805      	ldr	r0, [sp, #20]
    60dc:	f7fd fff8 	bl	40d0 <_dtoa_r>
    60e0:	4644      	mov	r4, r8
    60e2:	4606      	mov	r6, r0
    60e4:	eb00 0108 	add.w	r1, r0, r8
    60e8:	e6ef      	b.n	5eca <_svfprintf_r+0x1172>
    60ea:	f04f 0806 	mov.w	r8, #6
    60ee:	e5da      	b.n	5ca6 <_svfprintf_r+0xf4e>
    60f0:	eeb1 ab48 	vneg.f64	d10, d8
    60f4:	272d      	movs	r7, #45	; 0x2d
    60f6:	e5e1      	b.n	5cbc <_svfprintf_r+0xf64>
    60f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    60fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60fc:	4413      	add	r3, r2
    60fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6100:	9308      	str	r3, [sp, #32]
    6102:	2a00      	cmp	r2, #0
    6104:	f340 8086 	ble.w	6214 <_svfprintf_r+0x14bc>
    6108:	2267      	movs	r2, #103	; 0x67
    610a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    610e:	920c      	str	r2, [sp, #48]	; 0x30
    6110:	e623      	b.n	5d5a <_svfprintf_r+0x1002>
    6112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6114:	2b47      	cmp	r3, #71	; 0x47
    6116:	f47f adf2 	bne.w	5cfe <_svfprintf_r+0xfa6>
    611a:	f01b 0f01 	tst.w	fp, #1
    611e:	f47f aece 	bne.w	5ebe <_svfprintf_r+0x1166>
    6122:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6124:	2d47      	cmp	r5, #71	; 0x47
    6126:	eba3 0306 	sub.w	r3, r3, r6
    612a:	930d      	str	r3, [sp, #52]	; 0x34
    612c:	f43f af1c 	beq.w	5f68 <_svfprintf_r+0x1210>
    6130:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6132:	e722      	b.n	5f7a <_svfprintf_r+0x1222>
    6134:	2b00      	cmp	r3, #0
    6136:	461a      	mov	r2, r3
    6138:	930e      	str	r3, [sp, #56]	; 0x38
    613a:	dd73      	ble.n	6224 <_svfprintf_r+0x14cc>
    613c:	f1b8 0f00 	cmp.w	r8, #0
    6140:	d14b      	bne.n	61da <_svfprintf_r+0x1482>
    6142:	f01b 0f01 	tst.w	fp, #1
    6146:	d148      	bne.n	61da <_svfprintf_r+0x1482>
    6148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    614c:	9208      	str	r2, [sp, #32]
    614e:	e604      	b.n	5d5a <_svfprintf_r+0x1002>
    6150:	f01b 0f01 	tst.w	fp, #1
    6154:	4647      	mov	r7, r8
    6156:	d005      	beq.n	6164 <_svfprintf_r+0x140c>
    6158:	ae38      	add	r6, sp, #224	; 0xe0
    615a:	2330      	movs	r3, #48	; 0x30
    615c:	f806 3d41 	strb.w	r3, [r6, #-65]!
    6160:	f7ff b956 	b.w	5410 <_svfprintf_r+0x6b8>
    6164:	f8cd 8020 	str.w	r8, [sp, #32]
    6168:	ae28      	add	r6, sp, #160	; 0xa0
    616a:	f7ff b954 	b.w	5416 <_svfprintf_r+0x6be>
    616e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    6172:	9709      	str	r7, [sp, #36]	; 0x24
    6174:	9304      	str	r3, [sp, #16]
    6176:	9508      	str	r5, [sp, #32]
    6178:	4680      	mov	r8, r0
    617a:	900e      	str	r0, [sp, #56]	; 0x38
    617c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    6180:	f7fe bfdc 	b.w	513c <_svfprintf_r+0x3e4>
    6184:	aa1b      	add	r2, sp, #108	; 0x6c
    6186:	9903      	ldr	r1, [sp, #12]
    6188:	9805      	ldr	r0, [sp, #20]
    618a:	f000 f89d 	bl	62c8 <__ssprint_r>
    618e:	2800      	cmp	r0, #0
    6190:	f47e aed8 	bne.w	4f44 <_svfprintf_r+0x1ec>
    6194:	9c15      	ldr	r4, [sp, #84]	; 0x54
    6196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6198:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    619a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    619e:	e63d      	b.n	5e1c <_svfprintf_r+0x10c4>
    61a0:	46a2      	mov	sl, r4
    61a2:	2500      	movs	r5, #0
    61a4:	f7fe be33 	b.w	4e0e <_svfprintf_r+0xb6>
    61a8:	3330      	adds	r3, #48	; 0x30
    61aa:	2230      	movs	r2, #48	; 0x30
    61ac:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    61b0:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    61b4:	ab18      	add	r3, sp, #96	; 0x60
    61b6:	e71c      	b.n	5ff2 <_svfprintf_r+0x129a>
    61b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    61ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    61bc:	4413      	add	r3, r2
    61be:	2267      	movs	r2, #103	; 0x67
    61c0:	9308      	str	r3, [sp, #32]
    61c2:	920c      	str	r2, [sp, #48]	; 0x30
    61c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61c8:	e5c7      	b.n	5d5a <_svfprintf_r+0x1002>
    61ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    61cc:	e5a8      	b.n	5d20 <_svfprintf_r+0xfc8>
    61ce:	4e3c      	ldr	r6, [pc, #240]	; (62c0 <_svfprintf_r+0x1568>)
    61d0:	4b3c      	ldr	r3, [pc, #240]	; (62c4 <_svfprintf_r+0x156c>)
    61d2:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    61d6:	f7fe bfa4 	b.w	5122 <_svfprintf_r+0x3ca>
    61da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    61dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    61de:	189d      	adds	r5, r3, r2
    61e0:	eb05 0308 	add.w	r3, r5, r8
    61e4:	9308      	str	r3, [sp, #32]
    61e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61ea:	e5b6      	b.n	5d5a <_svfprintf_r+0x1002>
    61ec:	eeb5 ab40 	vcmp.f64	d10, #0.0
    61f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61f4:	f43f ae6d 	beq.w	5ed2 <_svfprintf_r+0x117a>
    61f8:	f1c4 0401 	rsb	r4, r4, #1
    61fc:	9415      	str	r4, [sp, #84]	; 0x54
    61fe:	4421      	add	r1, r4
    6200:	e57e      	b.n	5d00 <_svfprintf_r+0xfa8>
    6202:	f01b 0301 	ands.w	r3, fp, #1
    6206:	f47f aefd 	bne.w	6004 <_svfprintf_r+0x12ac>
    620a:	930e      	str	r3, [sp, #56]	; 0x38
    620c:	9b08      	ldr	r3, [sp, #32]
    620e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6212:	e5a2      	b.n	5d5a <_svfprintf_r+0x1002>
    6214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6216:	9a08      	ldr	r2, [sp, #32]
    6218:	f1c3 0301 	rsb	r3, r3, #1
    621c:	441a      	add	r2, r3
    621e:	4613      	mov	r3, r2
    6220:	9208      	str	r2, [sp, #32]
    6222:	e771      	b.n	6108 <_svfprintf_r+0x13b0>
    6224:	f1b8 0f00 	cmp.w	r8, #0
    6228:	d102      	bne.n	6230 <_svfprintf_r+0x14d8>
    622a:	f01b 0f01 	tst.w	fp, #1
    622e:	d007      	beq.n	6240 <_svfprintf_r+0x14e8>
    6230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6232:	1c5d      	adds	r5, r3, #1
    6234:	eb05 0308 	add.w	r3, r5, r8
    6238:	9308      	str	r3, [sp, #32]
    623a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    623e:	e58c      	b.n	5d5a <_svfprintf_r+0x1002>
    6240:	2301      	movs	r3, #1
    6242:	9308      	str	r3, [sp, #32]
    6244:	e589      	b.n	5d5a <_svfprintf_r+0x1002>
    6246:	9809      	ldr	r0, [sp, #36]	; 0x24
    6248:	f89a 3001 	ldrb.w	r3, [sl, #1]
    624c:	6805      	ldr	r5, [r0, #0]
    624e:	3004      	adds	r0, #4
    6250:	2d00      	cmp	r5, #0
    6252:	9009      	str	r0, [sp, #36]	; 0x24
    6254:	46a2      	mov	sl, r4
    6256:	f6be add8 	bge.w	4e0a <_svfprintf_r+0xb2>
    625a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    625e:	f7fe bdd4 	b.w	4e0a <_svfprintf_r+0xb2>
    6262:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6266:	f7ff b98d 	b.w	5584 <_svfprintf_r+0x82c>
    626a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    626e:	f7ff b9cf 	b.w	5610 <_svfprintf_r+0x8b8>
    6272:	9a05      	ldr	r2, [sp, #20]
    6274:	230c      	movs	r3, #12
    6276:	6013      	str	r3, [r2, #0]
    6278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    627c:	f7fe be6b 	b.w	4f56 <_svfprintf_r+0x1fe>
    6280:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6284:	f7ff b8d4 	b.w	5430 <_svfprintf_r+0x6d8>
    6288:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    628c:	f7ff b8a3 	b.w	53d6 <_svfprintf_r+0x67e>
    6290:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6294:	f7ff b952 	b.w	553c <_svfprintf_r+0x7e4>
    6298:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    629c:	e6a9      	b.n	5ff2 <_svfprintf_r+0x129a>
    629e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62a2:	f7fe be62 	b.w	4f6a <_svfprintf_r+0x212>
    62a6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62aa:	f7ff b862 	b.w	5372 <_svfprintf_r+0x61a>
    62ae:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62b2:	f7fe bf16 	b.w	50e2 <_svfprintf_r+0x38a>
    62b6:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    62ba:	f7fe bed0 	b.w	505e <_svfprintf_r+0x306>
    62be:	bf00      	nop
    62c0:	200008ec 	.word	0x200008ec
    62c4:	20000920 	.word	0x20000920

000062c8 <__ssprint_r>:
    62c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62cc:	6893      	ldr	r3, [r2, #8]
    62ce:	b083      	sub	sp, #12
    62d0:	4690      	mov	r8, r2
    62d2:	2b00      	cmp	r3, #0
    62d4:	d072      	beq.n	63bc <__ssprint_r+0xf4>
    62d6:	4683      	mov	fp, r0
    62d8:	f04f 0900 	mov.w	r9, #0
    62dc:	6816      	ldr	r6, [r2, #0]
    62de:	6808      	ldr	r0, [r1, #0]
    62e0:	688b      	ldr	r3, [r1, #8]
    62e2:	460d      	mov	r5, r1
    62e4:	464c      	mov	r4, r9
    62e6:	2c00      	cmp	r4, #0
    62e8:	d045      	beq.n	6376 <__ssprint_r+0xae>
    62ea:	429c      	cmp	r4, r3
    62ec:	461f      	mov	r7, r3
    62ee:	469a      	mov	sl, r3
    62f0:	d346      	bcc.n	6380 <__ssprint_r+0xb8>
    62f2:	89ab      	ldrh	r3, [r5, #12]
    62f4:	f413 6f90 	tst.w	r3, #1152	; 0x480
    62f8:	d02d      	beq.n	6356 <__ssprint_r+0x8e>
    62fa:	696f      	ldr	r7, [r5, #20]
    62fc:	6929      	ldr	r1, [r5, #16]
    62fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    6302:	ebc1 0a00 	rsb	sl, r1, r0
    6306:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    630a:	1c60      	adds	r0, r4, #1
    630c:	107f      	asrs	r7, r7, #1
    630e:	4450      	add	r0, sl
    6310:	42b8      	cmp	r0, r7
    6312:	463a      	mov	r2, r7
    6314:	bf84      	itt	hi
    6316:	4607      	movhi	r7, r0
    6318:	463a      	movhi	r2, r7
    631a:	055b      	lsls	r3, r3, #21
    631c:	d533      	bpl.n	6386 <__ssprint_r+0xbe>
    631e:	4611      	mov	r1, r2
    6320:	4658      	mov	r0, fp
    6322:	f7fc fa1b 	bl	275c <_malloc_r>
    6326:	2800      	cmp	r0, #0
    6328:	d037      	beq.n	639a <__ssprint_r+0xd2>
    632a:	4652      	mov	r2, sl
    632c:	6929      	ldr	r1, [r5, #16]
    632e:	9001      	str	r0, [sp, #4]
    6330:	f7fc fce2 	bl	2cf8 <memcpy>
    6334:	89aa      	ldrh	r2, [r5, #12]
    6336:	9b01      	ldr	r3, [sp, #4]
    6338:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    633c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6340:	81aa      	strh	r2, [r5, #12]
    6342:	ebca 0207 	rsb	r2, sl, r7
    6346:	eb03 000a 	add.w	r0, r3, sl
    634a:	616f      	str	r7, [r5, #20]
    634c:	612b      	str	r3, [r5, #16]
    634e:	6028      	str	r0, [r5, #0]
    6350:	60aa      	str	r2, [r5, #8]
    6352:	4627      	mov	r7, r4
    6354:	46a2      	mov	sl, r4
    6356:	4652      	mov	r2, sl
    6358:	4649      	mov	r1, r9
    635a:	f7fc fd67 	bl	2e2c <memmove>
    635e:	f8d8 2008 	ldr.w	r2, [r8, #8]
    6362:	68ab      	ldr	r3, [r5, #8]
    6364:	6828      	ldr	r0, [r5, #0]
    6366:	1bdb      	subs	r3, r3, r7
    6368:	4450      	add	r0, sl
    636a:	1b14      	subs	r4, r2, r4
    636c:	60ab      	str	r3, [r5, #8]
    636e:	6028      	str	r0, [r5, #0]
    6370:	f8c8 4008 	str.w	r4, [r8, #8]
    6374:	b314      	cbz	r4, 63bc <__ssprint_r+0xf4>
    6376:	f8d6 9000 	ldr.w	r9, [r6]
    637a:	6874      	ldr	r4, [r6, #4]
    637c:	3608      	adds	r6, #8
    637e:	e7b2      	b.n	62e6 <__ssprint_r+0x1e>
    6380:	4627      	mov	r7, r4
    6382:	46a2      	mov	sl, r4
    6384:	e7e7      	b.n	6356 <__ssprint_r+0x8e>
    6386:	4658      	mov	r0, fp
    6388:	f7fc fe06 	bl	2f98 <_realloc_r>
    638c:	4603      	mov	r3, r0
    638e:	2800      	cmp	r0, #0
    6390:	d1d7      	bne.n	6342 <__ssprint_r+0x7a>
    6392:	6929      	ldr	r1, [r5, #16]
    6394:	4658      	mov	r0, fp
    6396:	f7fd f977 	bl	3688 <_free_r>
    639a:	230c      	movs	r3, #12
    639c:	f8cb 3000 	str.w	r3, [fp]
    63a0:	89ab      	ldrh	r3, [r5, #12]
    63a2:	2200      	movs	r2, #0
    63a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    63a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63ac:	81ab      	strh	r3, [r5, #12]
    63ae:	f8c8 2008 	str.w	r2, [r8, #8]
    63b2:	f8c8 2004 	str.w	r2, [r8, #4]
    63b6:	b003      	add	sp, #12
    63b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63bc:	2000      	movs	r0, #0
    63be:	f8c8 0004 	str.w	r0, [r8, #4]
    63c2:	b003      	add	sp, #12
    63c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000063c8 <___reboot_Teensyduino__veneer>:
    63c8:	f85f f000 	ldr.w	pc, [pc]	; 63cc <___reboot_Teensyduino__veneer+0x4>
    63cc:	60001dc5 	.word	0x60001dc5

000063d0 <___init_veneer>:
    63d0:	f85f f000 	ldr.w	pc, [pc]	; 63d4 <___init_veneer+0x4>
    63d4:	60001e19 	.word	0x60001e19
	...

Disassembly of section .fini:

000063e0 <_fini>:
    63e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63e2:	bf00      	nop

Disassembly of section .text.csf:

60009e08 <_heap_end+0x3fd89e08>:
60009e08:	ffffffff 	.word	0xffffffff
60009e0c:	ffffffff 	.word	0xffffffff
60009e10:	ffffffff 	.word	0xffffffff
60009e14:	ffffffff 	.word	0xffffffff
60009e18:	ffffffff 	.word	0xffffffff
60009e1c:	ffffffff 	.word	0xffffffff
60009e20:	ffffffff 	.word	0xffffffff
60009e24:	ffffffff 	.word	0xffffffff
60009e28:	ffffffff 	.word	0xffffffff
60009e2c:	ffffffff 	.word	0xffffffff
60009e30:	ffffffff 	.word	0xffffffff
60009e34:	ffffffff 	.word	0xffffffff
60009e38:	ffffffff 	.word	0xffffffff
60009e3c:	ffffffff 	.word	0xffffffff
60009e40:	ffffffff 	.word	0xffffffff
60009e44:	ffffffff 	.word	0xffffffff
60009e48:	ffffffff 	.word	0xffffffff
60009e4c:	ffffffff 	.word	0xffffffff
60009e50:	ffffffff 	.word	0xffffffff
60009e54:	ffffffff 	.word	0xffffffff
60009e58:	ffffffff 	.word	0xffffffff
60009e5c:	ffffffff 	.word	0xffffffff
60009e60:	ffffffff 	.word	0xffffffff
60009e64:	ffffffff 	.word	0xffffffff
60009e68:	ffffffff 	.word	0xffffffff
60009e6c:	ffffffff 	.word	0xffffffff
60009e70:	ffffffff 	.word	0xffffffff
60009e74:	ffffffff 	.word	0xffffffff
60009e78:	ffffffff 	.word	0xffffffff
60009e7c:	ffffffff 	.word	0xffffffff
60009e80:	ffffffff 	.word	0xffffffff
60009e84:	ffffffff 	.word	0xffffffff
60009e88:	ffffffff 	.word	0xffffffff
60009e8c:	ffffffff 	.word	0xffffffff
60009e90:	ffffffff 	.word	0xffffffff
60009e94:	ffffffff 	.word	0xffffffff
60009e98:	ffffffff 	.word	0xffffffff
60009e9c:	ffffffff 	.word	0xffffffff
60009ea0:	ffffffff 	.word	0xffffffff
60009ea4:	ffffffff 	.word	0xffffffff
60009ea8:	ffffffff 	.word	0xffffffff
60009eac:	ffffffff 	.word	0xffffffff
60009eb0:	ffffffff 	.word	0xffffffff
60009eb4:	ffffffff 	.word	0xffffffff
60009eb8:	ffffffff 	.word	0xffffffff
60009ebc:	ffffffff 	.word	0xffffffff
60009ec0:	ffffffff 	.word	0xffffffff
60009ec4:	ffffffff 	.word	0xffffffff
60009ec8:	ffffffff 	.word	0xffffffff
60009ecc:	ffffffff 	.word	0xffffffff
60009ed0:	ffffffff 	.word	0xffffffff
60009ed4:	ffffffff 	.word	0xffffffff
60009ed8:	ffffffff 	.word	0xffffffff
60009edc:	ffffffff 	.word	0xffffffff
60009ee0:	ffffffff 	.word	0xffffffff
60009ee4:	ffffffff 	.word	0xffffffff
60009ee8:	ffffffff 	.word	0xffffffff
60009eec:	ffffffff 	.word	0xffffffff
60009ef0:	ffffffff 	.word	0xffffffff
60009ef4:	ffffffff 	.word	0xffffffff
60009ef8:	ffffffff 	.word	0xffffffff
60009efc:	ffffffff 	.word	0xffffffff
60009f00:	ffffffff 	.word	0xffffffff
60009f04:	ffffffff 	.word	0xffffffff
60009f08:	ffffffff 	.word	0xffffffff
60009f0c:	ffffffff 	.word	0xffffffff
60009f10:	ffffffff 	.word	0xffffffff
60009f14:	ffffffff 	.word	0xffffffff
60009f18:	ffffffff 	.word	0xffffffff
60009f1c:	ffffffff 	.word	0xffffffff
60009f20:	ffffffff 	.word	0xffffffff
60009f24:	ffffffff 	.word	0xffffffff
60009f28:	ffffffff 	.word	0xffffffff
60009f2c:	ffffffff 	.word	0xffffffff
60009f30:	ffffffff 	.word	0xffffffff
60009f34:	ffffffff 	.word	0xffffffff
60009f38:	ffffffff 	.word	0xffffffff
60009f3c:	ffffffff 	.word	0xffffffff
60009f40:	ffffffff 	.word	0xffffffff
60009f44:	ffffffff 	.word	0xffffffff
60009f48:	ffffffff 	.word	0xffffffff
60009f4c:	ffffffff 	.word	0xffffffff
60009f50:	ffffffff 	.word	0xffffffff
60009f54:	ffffffff 	.word	0xffffffff
60009f58:	ffffffff 	.word	0xffffffff
60009f5c:	ffffffff 	.word	0xffffffff
60009f60:	ffffffff 	.word	0xffffffff
60009f64:	ffffffff 	.word	0xffffffff
60009f68:	ffffffff 	.word	0xffffffff
60009f6c:	ffffffff 	.word	0xffffffff
60009f70:	ffffffff 	.word	0xffffffff
60009f74:	ffffffff 	.word	0xffffffff
60009f78:	ffffffff 	.word	0xffffffff
60009f7c:	ffffffff 	.word	0xffffffff
60009f80:	ffffffff 	.word	0xffffffff
60009f84:	ffffffff 	.word	0xffffffff
60009f88:	ffffffff 	.word	0xffffffff
60009f8c:	ffffffff 	.word	0xffffffff
60009f90:	ffffffff 	.word	0xffffffff
60009f94:	ffffffff 	.word	0xffffffff
60009f98:	ffffffff 	.word	0xffffffff
60009f9c:	ffffffff 	.word	0xffffffff
60009fa0:	ffffffff 	.word	0xffffffff
60009fa4:	ffffffff 	.word	0xffffffff
60009fa8:	ffffffff 	.word	0xffffffff
60009fac:	ffffffff 	.word	0xffffffff
60009fb0:	ffffffff 	.word	0xffffffff
60009fb4:	ffffffff 	.word	0xffffffff
60009fb8:	ffffffff 	.word	0xffffffff
60009fbc:	ffffffff 	.word	0xffffffff
60009fc0:	ffffffff 	.word	0xffffffff
60009fc4:	ffffffff 	.word	0xffffffff
60009fc8:	ffffffff 	.word	0xffffffff
60009fcc:	ffffffff 	.word	0xffffffff
60009fd0:	ffffffff 	.word	0xffffffff
60009fd4:	ffffffff 	.word	0xffffffff
60009fd8:	ffffffff 	.word	0xffffffff
60009fdc:	ffffffff 	.word	0xffffffff
60009fe0:	ffffffff 	.word	0xffffffff
60009fe4:	ffffffff 	.word	0xffffffff
60009fe8:	ffffffff 	.word	0xffffffff
60009fec:	ffffffff 	.word	0xffffffff
60009ff0:	ffffffff 	.word	0xffffffff
60009ff4:	ffffffff 	.word	0xffffffff
60009ff8:	ffffffff 	.word	0xffffffff
60009ffc:	ffffffff 	.word	0xffffffff

6000a000 <hab_csf>:
	...
