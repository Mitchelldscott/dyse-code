
/Users/mitchellscott/Desktop/rufous/src/firmware/build/examples/utilities/vector_tests.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
60001426:	4770      	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	4b66      	ldr	r3, [pc, #408]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	4a66      	ldr	r2, [pc, #408]	; (600015c8 <ResetHandler+0x1a0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	4866      	ldr	r0, [pc, #408]	; (600015cc <ResetHandler+0x1a4>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	4a65      	ldr	r2, [pc, #404]	; (600015d0 <ResetHandler+0x1a8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	f3bf 8f6f 	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	f000 f930 	bl	600016ac <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	4b61      	ldr	r3, [pc, #388]	; (600015d4 <ResetHandler+0x1ac>)
6000144e:	2008      	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	4a61      	ldr	r2, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
60001452:	4962      	ldr	r1, [pc, #392]	; (600015dc <ResetHandler+0x1b4>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	4861      	ldr	r0, [pc, #388]	; (600015e0 <ResetHandler+0x1b8>)
6000145a:	f7ff ffd1 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	4a61      	ldr	r2, [pc, #388]	; (600015e4 <ResetHandler+0x1bc>)
60001460:	4961      	ldr	r1, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001462:	4862      	ldr	r0, [pc, #392]	; (600015ec <ResetHandler+0x1c4>)
60001464:	f7ff ffcc 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	4961      	ldr	r1, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146a:	4862      	ldr	r0, [pc, #392]	; (600015f4 <ResetHandler+0x1cc>)
6000146c:	f7ff ffd4 	bl	60001418 <memory_clear>
60001470:	4c61      	ldr	r4, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	4962      	ldr	r1, [pc, #392]	; (600015fc <ResetHandler+0x1d4>)
60001474:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	2300      	movs	r3, #0
6000147a:	4a61      	ldr	r2, [pc, #388]	; (60001600 <ResetHandler+0x1d8>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	6008      	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
60001482:	3301      	adds	r3, #1
60001484:	2bb0      	cmp	r3, #176	; 0xb0
60001486:	d1fa      	bne.n	6000147e <ResetHandler+0x56>
60001488:	4b5e      	ldr	r3, [pc, #376]	; (60001604 <ResetHandler+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	2180      	movs	r1, #128	; 0x80
6000148c:	4a5e      	ldr	r2, [pc, #376]	; (60001608 <ResetHandler+0x1e0>)
6000148e:	f803 1b01 	strb.w	r1, [r3], #1
60001492:	4293      	cmp	r3, r2
60001494:	d1fb      	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	4d4f      	ldr	r5, [pc, #316]	; (600015d4 <ResetHandler+0x1ac>)
60001498:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	495b      	ldr	r1, [pc, #364]	; (6000160c <ResetHandler+0x1e4>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	4b5b      	ldr	r3, [pc, #364]	; (60001610 <ResetHandler+0x1e8>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	2600      	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 6000164c <ResetHandler+0x224>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 60001650 <ResetHandler+0x228>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	601c      	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	680b      	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	4f54      	ldr	r7, [pc, #336]	; (60001614 <ResetHandler+0x1ec>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014c8:	600b      	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	69fb      	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	493d      	ldr	r1, [pc, #244]	; (600015c4 <ResetHandler+0x19c>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d6:	61fb      	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014e2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	f000 f8e4 	bl	600016b8 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	4a49      	ldr	r2, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[15] = systick_isr;
600014f2:	4b4a      	ldr	r3, [pc, #296]	; (6000161c <ResetHandler+0x1f4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	2063      	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	63a2      	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	2103      	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	4a48      	ldr	r2, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
	SYST_CVR = 0;
600014fe:	4b49      	ldr	r3, [pc, #292]	; (60001624 <ResetHandler+0x1fc>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	601e      	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	f842 1c04 	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	f600 70a1 	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	4945      	ldr	r1, [pc, #276]	; (60001628 <ResetHandler+0x200>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	4a46      	ldr	r2, [pc, #280]	; (6000162c <ResetHandler+0x204>)
60001514:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	4a45      	ldr	r2, [pc, #276]	; (60001630 <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	4943      	ldr	r1, [pc, #268]	; (60001634 <ResetHandler+0x20c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	f043 0301 	orr.w	r3, r3, #1
6000152a:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	6803      	ldr	r3, [r0, #0]
6000152e:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	f000 fb12 	bl	60001b58 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	483f      	ldr	r0, [pc, #252]	; (60001638 <ResetHandler+0x210>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	f000 fc7f 	bl	60001e48 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	4a3b      	ldr	r2, [pc, #236]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	4b3b      	ldr	r3, [pc, #236]	; (60001640 <ResetHandler+0x218>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	66f9      	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	6016      	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	f8c2 6118 	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	f8c2 6128 	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	f8c2 6138 	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000156a:	07d2      	lsls	r2, r2, #31
6000156c:	d408      	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	4934      	ldr	r1, [pc, #208]	; (60001644 <ResetHandler+0x21c>)
60001574:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
6000157a:	f042 0201 	orr.w	r2, r2, #1
6000157e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	4a2f      	ldr	r2, [pc, #188]	; (60001640 <ResetHandler+0x218>)
60001582:	4c31      	ldr	r4, [pc, #196]	; (60001648 <ResetHandler+0x220>)
60001584:	6893      	ldr	r3, [r2, #8]
60001586:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000158a:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000158c:	f000 f906 	bl	6000179c <configure_external_ram>
#endif
	analog_init();
60001590:	f000 f860 	bl	60001654 <analog_init>
	pwm_init();
60001594:	f000 fc60 	bl	60001e58 <__pwm_init_veneer>
	tempmon_init();
60001598:	f000 fb10 	bl	60001bbc <tempmon_init>
	startup_middle_hook();
6000159c:	f000 f888 	bl	600016b0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015a0:	6823      	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015a2:	2b13      	cmp	r3, #19
600015a4:	d9fc      	bls.n	600015a0 <ResetHandler+0x178>
	usb_init();
600015a6:	f000 fb97 	bl	60001cd8 <usb_init>
600015aa:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015b0:	d3fb      	bcc.n	600015aa <ResetHandler+0x182>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015b2:	f000 f87f 	bl	600016b4 <startup_default_late_hook>
	__libc_init_array();
600015b6:	f000 fc43 	bl	60001e40 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015ba:	f000 fc35 	bl	60001e28 <__main_veneer>
	
	while (1) asm("WFI");
600015be:	bf30      	wfi
600015c0:	e7fd      	b.n	600015be <ResetHandler+0x196>
600015c2:	bf00      	nop
600015c4:	400ac000 	.word	0x400ac000
600015c8:	aaaaaaab 	.word	0xaaaaaaab
600015cc:	00200007 	.word	0x00200007
600015d0:	20078000 	.word	0x20078000
600015d4:	400d8000 	.word	0x400d8000
600015d8:	00006d88 	.word	0x00006d88
600015dc:	60001f58 	.word	0x60001f58
600015e0:	00000000 	.word	0x00000000
600015e4:	20001ac0 	.word	0x20001ac0
600015e8:	60008ce4 	.word	0x60008ce4
600015ec:	20000000 	.word	0x20000000
600015f0:	20002000 	.word	0x20002000
600015f4:	20001ac0 	.word	0x20001ac0
600015f8:	20001800 	.word	0x20001800
600015fc:	e000ed88 	.word	0xe000ed88
60001600:	00001495 	.word	0x00001495
60001604:	e000e400 	.word	0xe000e400
60001608:	e000e4a0 	.word	0xe000e4a0
6000160c:	e000ed24 	.word	0xe000ed24
60001610:	e000ed08 	.word	0xe000ed08
60001614:	400fc000 	.word	0x400fc000
60001618:	000025f5 	.word	0x000025f5
6000161c:	000025f9 	.word	0x000025f9
60001620:	e000e014 	.word	0xe000e014
60001624:	e000e018 	.word	0xe000e018
60001628:	e000edfc 	.word	0xe000edfc
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	20001f40 	.word	0x20001f40
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	20001f44 	.word	0x20001f44
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001654:	4b11      	ldr	r3, [pc, #68]	; (6000169c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001656:	4912      	ldr	r1, [pc, #72]	; (600016a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001658:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000165a:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000165c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001660:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001662:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001664:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001668:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000166a:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000166c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001670:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001672:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001674:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001676:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001678:	061b      	lsls	r3, r3, #24
6000167a:	d4fc      	bmi.n	60001676 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000167c:	4b09      	ldr	r3, [pc, #36]	; (600016a4 <analog_init+0x50>)
6000167e:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001682:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001684:	461a      	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001686:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001688:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000168a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000168c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001690:	d1fb      	bne.n	6000168a <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
60001692:	4a05      	ldr	r2, [pc, #20]	; (600016a8 <analog_init+0x54>)
60001694:	7013      	strb	r3, [r2, #0]
}
60001696:	bc30      	pop	{r4, r5}
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	400fc000 	.word	0x400fc000
600016a0:	400c4000 	.word	0x400c4000
600016a4:	400c8000 	.word	0x400c8000
600016a8:	20001f56 	.word	0x20001f56

600016ac <startup_default_early_hook>:
600016ac:	4770      	bx	lr
600016ae:	bf00      	nop

600016b0 <startup_default_middle_hook>:
600016b0:	4770      	bx	lr
600016b2:	bf00      	nop

600016b4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600016b4:	4770      	bx	lr
600016b6:	bf00      	nop

600016b8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016ba:	4a24      	ldr	r2, [pc, #144]	; (6000174c <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016bc:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016be:	4b24      	ldr	r3, [pc, #144]	; (60001750 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016c0:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016c4:	4c23      	ldr	r4, [pc, #140]	; (60001754 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016c6:	2611      	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001794 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016cc:	2712      	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600016ce:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016d0:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016d2:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016d6:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016dc:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 60001798 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016e0:	4e1d      	ldr	r6, [pc, #116]	; (60001758 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600016e2:	f8c3 e000 	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016e6:	491d      	ldr	r1, [pc, #116]	; (6000175c <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016e8:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ea:	601e      	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ec:	f041 0115 	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f0:	4f1b      	ldr	r7, [pc, #108]	; (60001760 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f2:	4e1c      	ldr	r6, [pc, #112]	; (60001764 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016f4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016f8:	4f1b      	ldr	r7, [pc, #108]	; (60001768 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fa:	4e1c      	ldr	r6, [pc, #112]	; (6000176c <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016fc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016fe:	601e      	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001700:	4f1b      	ldr	r7, [pc, #108]	; (60001770 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001702:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001704:	4e1b      	ldr	r6, [pc, #108]	; (60001774 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001706:	491c      	ldr	r1, [pc, #112]	; (60001778 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001708:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000170a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000170c:	4f1b      	ldr	r7, [pc, #108]	; (6000177c <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000170e:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001710:	4e1b      	ldr	r6, [pc, #108]	; (60001780 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001712:	491c      	ldr	r1, [pc, #112]	; (60001784 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001714:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001716:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001718:	4f1b      	ldr	r7, [pc, #108]	; (60001788 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000171a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000171c:	4e1b      	ldr	r6, [pc, #108]	; (6000178c <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000171e:	491c      	ldr	r1, [pc, #112]	; (60001790 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001720:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001722:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001724:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001726:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001728:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001730:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001734:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001738:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001740:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001744:	f842 3c88 	str.w	r3, [r2, #-136]
60001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000174a:	bf00      	nop
6000174c:	e000ed9c 	.word	0xe000ed9c
60001750:	e000eda0 	.word	0xe000eda0
60001754:	e000ed94 	.word	0xe000ed94
60001758:	00100009 	.word	0x00100009
6000175c:	20002000 	.word	0x20002000
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	13100033 	.word	0x13100033
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	130b002f 	.word	0x130b002f
60001794:	1000003f 	.word	0x1000003f
60001798:	03080025 	.word	0x03080025

6000179c <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000179c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179e:	4b8d      	ldr	r3, [pc, #564]	; (600019d4 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017a0:	2218      	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017a2:	4e8d      	ldr	r6, [pc, #564]	; (600019d8 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a4:	2001      	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a6:	498d      	ldr	r1, [pc, #564]	; (600019dc <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017a8:	f248 7e0c 	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ac:	4d8c      	ldr	r5, [pc, #560]	; (600019e0 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	4c8c      	ldr	r4, [pc, #560]	; (600019e4 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600017b4:	b083      	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017b6:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017ba:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600017be:	2500      	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017c0:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017c4:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017c8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017cc:	f8c3 626c 	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017d0:	4985      	ldr	r1, [pc, #532]	; (600019e8 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d2:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017d6:	f8c3 6274 	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017da:	f8c3 6278 	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017de:	4e83      	ldr	r6, [pc, #524]	; (600019ec <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017e0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017e2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017e4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017e6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017e8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600017f6:	f240 6205 	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017fa:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017fe:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001802:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001806:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000180a:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
6000180e:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001812:	4629      	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001814:	69b3      	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001816:	4876      	ldr	r0, [pc, #472]	; (600019f0 <configure_external_ram+0x254>)
60001818:	4018      	ands	r0, r3
6000181a:	4b76      	ldr	r3, [pc, #472]	; (600019f4 <configure_external_ram+0x258>)
6000181c:	4303      	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000181e:	4876      	ldr	r0, [pc, #472]	; (600019f8 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001820:	61b3      	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001822:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001826:	f043 030c 	orr.w	r3, r3, #12
6000182a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000182e:	2602      	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001830:	6803      	ldr	r3, [r0, #0]
60001832:	4333      	orrs	r3, r6
60001834:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001836:	6803      	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001838:	ea03 0e0e 	and.w	lr, r3, lr
6000183c:	4b6f      	ldr	r3, [pc, #444]	; (600019fc <configure_external_ram+0x260>)
6000183e:	ea4e 0303 	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001842:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 60001a34 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001846:	6003      	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001848:	4b6d      	ldr	r3, [pc, #436]	; (60001a00 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000184a:	6047      	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000184c:	f8de 7008 	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001850:	403b      	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4f6c      	ldr	r7, [pc, #432]	; (60001a04 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001858:	6083      	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000185a:	68c3      	ldr	r3, [r0, #12]
6000185c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001860:	60c3      	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001862:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001864:	401f      	ands	r7, r3
60001866:	4b68      	ldr	r3, [pc, #416]	; (60001a08 <configure_external_ram+0x26c>)
60001868:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000186a:	4f66      	ldr	r7, [pc, #408]	; (60001a04 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186c:	6203      	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000186e:	6a03      	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001870:	401f      	ands	r7, r3
60001872:	4b65      	ldr	r3, [pc, #404]	; (60001a08 <configure_external_ram+0x26c>)
60001874:	433b      	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001876:	4f65      	ldr	r7, [pc, #404]	; (60001a0c <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001878:	6243      	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000187a:	6287      	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000187c:	62c7      	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000187e:	f8de 30b8 	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001882:	4f63      	ldr	r7, [pc, #396]	; (60001a10 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001888:	f043 0301 	orr.w	r3, r3, #1
6000188c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001890:	f8de 30bc 	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	f8df e184 	ldr.w	lr, [pc, #388]	; 60001a1c <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000189c:	f043 0301 	orr.w	r3, r3, #1
600018a0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600018a4:	6105      	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018a6:	6604      	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018a8:	6707      	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018aa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600018ae:	6644      	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600018b0:	6747      	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018b2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018b6:	6804      	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b8:	4b56      	ldr	r3, [pc, #344]	; (60001a14 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018ba:	f024 0402 	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018be:	4a56      	ldr	r2, [pc, #344]	; (60001a18 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018c0:	6004      	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018c2:	f8c0 e018 	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018c6:	61c6      	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018c8:	f843 1b04 	str.w	r1, [r3], #4
600018cc:	4293      	cmp	r3, r2
600018ce:	d1fb      	bne.n	600018c8 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d0:	4b49      	ldr	r3, [pc, #292]	; (600019f8 <configure_external_ram+0x25c>)
600018d2:	681a      	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018d4:	4619      	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018d6:	f042 0201 	orr.w	r2, r2, #1
600018da:	601a      	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018dc:	680b      	ldr	r3, [r1, #0]
600018de:	4a46      	ldr	r2, [pc, #280]	; (600019f8 <configure_external_ram+0x25c>)
600018e0:	f013 0301 	ands.w	r3, r3, #1
600018e4:	d1fa      	bne.n	600018dc <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018e6:	4e4d      	ldr	r6, [pc, #308]	; (60001a1c <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018e8:	2502      	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018ea:	f240 64f5 	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018ee:	f240 4066 	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018f2:	f240 4199 	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f6:	4f4a      	ldr	r7, [pc, #296]	; (60001a20 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018f8:	6196      	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fa:	f242 4601 	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018fe:	61d5      	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f240 4535 	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001904:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001908:	f242 2401 	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000190c:	f8c2 0210 	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001910:	2001      	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001912:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001916:	4611      	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001918:	f8c2 7230 	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000191c:	f107 475a 	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001920:	f8c2 6234 	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001924:	f507 7713 	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001928:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000192c:	4e3d      	ldr	r6, [pc, #244]	; (60001a24 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000192e:	4d3e      	ldr	r5, [pc, #248]	; (60001a28 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001930:	f8c2 7250 	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001934:	f8c2 6254 	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001938:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000193c:	f8c2 4264 	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001944:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	4a2a      	ldr	r2, [pc, #168]	; (600019f8 <configure_external_ram+0x25c>)
60001950:	07dd      	lsls	r5, r3, #31
60001952:	d5fb      	bpl.n	6000194c <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001954:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001956:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001958:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000195c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001960:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001964:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001968:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	694b      	ldr	r3, [r1, #20]
6000196e:	4a22      	ldr	r2, [pc, #136]	; (600019f8 <configure_external_ram+0x25c>)
60001970:	07dc      	lsls	r4, r3, #31
60001972:	d5fb      	bpl.n	6000196c <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001974:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001976:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001978:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197c:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000197e:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001980:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001984:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001988:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000198c:	694b      	ldr	r3, [r1, #20]
6000198e:	4a1a      	ldr	r2, [pc, #104]	; (600019f8 <configure_external_ram+0x25c>)
60001990:	07d8      	lsls	r0, r3, #31
60001992:	d5fb      	bpl.n	6000198c <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001994:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001996:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001998:	4824      	ldr	r0, [pc, #144]	; (60001a2c <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000199a:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199c:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000199e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019a2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019aa:	694b      	ldr	r3, [r1, #20]
600019ac:	4a12      	ldr	r2, [pc, #72]	; (600019f8 <configure_external_ram+0x25c>)
600019ae:	07db      	lsls	r3, r3, #31
600019b0:	d5fb      	bpl.n	600019aa <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
600019b2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019b6:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019ba:	2021      	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019bc:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600019be:	6150      	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600019c0:	428b      	cmp	r3, r1
600019c2:	d039      	beq.n	60001a38 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600019c4:	4b1a      	ldr	r3, [pc, #104]	; (60001a30 <configure_external_ram+0x294>)
600019c6:	2200      	movs	r2, #0
600019c8:	601a      	str	r2, [r3, #0]
600019ca:	605a      	str	r2, [r3, #4]
600019cc:	609a      	str	r2, [r3, #8]
600019ce:	60da      	str	r2, [r3, #12]
	}
}
600019d0:	b003      	add	sp, #12
600019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
600019d4:	401f8000 	.word	0x401f8000
600019d8:	000170f9 	.word	0x000170f9
600019dc:	0001b0f9 	.word	0x0001b0f9
600019e0:	000110f9 	.word	0x000110f9
600019e4:	000100f9 	.word	0x000100f9
600019e8:	401f8400 	.word	0x401f8400
600019ec:	400fc000 	.word	0x400fc000
600019f0:	1ffffcff 	.word	0x1ffffcff
600019f4:	a0000300 	.word	0xa0000300
600019f8:	402a4000 	.word	0x402a4000
600019fc:	ffff0012 	.word	0xffff0012
60001a00:	00f737ff 	.word	0x00f737ff
60001a04:	7cf0ff00 	.word	0x7cf0ff00
60001a08:	80000040 	.word	0x80000040
60001a0c:	830f00ff 	.word	0x830f00ff
60001a10:	00020063 	.word	0x00020063
60001a14:	402a4200 	.word	0x402a4200
60001a18:	402a4300 	.word	0x402a4300
60001a1c:	5af05af0 	.word	0x5af05af0
60001a20:	3018049f 	.word	0x3018049f
60001a24:	26013206 	.word	0x26013206
60001a28:	0a180638 	.word	0x0a180638
60001a2c:	00030004 	.word	0x00030004
60001a30:	20001fc4 	.word	0x20001fc4
60001a34:	402a8000 	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a38:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	4611      	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a42:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a46:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4e:	694b      	ldr	r3, [r1, #20]
60001a50:	4a3b      	ldr	r2, [pc, #236]	; (60001b40 <configure_external_ram+0x3a4>)
60001a52:	07df      	lsls	r7, r3, #31
60001a54:	d5fb      	bpl.n	60001a4e <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a56:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a58:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a5c:	2000      	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5e:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a60:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a62:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a66:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a6e:	694b      	ldr	r3, [r1, #20]
60001a70:	4a33      	ldr	r2, [pc, #204]	; (60001b40 <configure_external_ram+0x3a4>)
60001a72:	07de      	lsls	r6, r3, #31
60001a74:	d5fb      	bpl.n	60001a6e <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a78:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a82:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a84:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a88:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a90:	694b      	ldr	r3, [r1, #20]
60001a92:	4a2b      	ldr	r2, [pc, #172]	; (60001b40 <configure_external_ram+0x3a4>)
60001a94:	07dd      	lsls	r5, r3, #31
60001a96:	d5fb      	bpl.n	60001a90 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a98:	2301      	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a9a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa2:	4611      	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aa4:	6153      	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001aa6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aaa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab2:	694b      	ldr	r3, [r1, #20]
60001ab4:	4a22      	ldr	r2, [pc, #136]	; (60001b40 <configure_external_ram+0x3a4>)
60001ab6:	07dc      	lsls	r4, r3, #31
60001ab8:	d5fb      	bpl.n	60001ab2 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	2301      	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001abc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	4820      	ldr	r0, [pc, #128]	; (60001b44 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac2:	4611      	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ac4:	6153      	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001ac6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aca:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ace:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad2:	694b      	ldr	r3, [r1, #20]
60001ad4:	4a1a      	ldr	r2, [pc, #104]	; (60001b40 <configure_external_ram+0x3a4>)
60001ad6:	07d8      	lsls	r0, r3, #31
60001ad8:	d5fb      	bpl.n	60001ad2 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001ada:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ade:	f645 510d 	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae2:	2021      	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae4:	b29b      	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ae6:	6150      	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ae8:	428b      	cmp	r3, r1
60001aea:	d010      	beq.n	60001b0e <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001aec:	4b16      	ldr	r3, [pc, #88]	; (60001b48 <configure_external_ram+0x3ac>)
60001aee:	2208      	movs	r2, #8
60001af0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
60001af4:	701a      	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af6:	4915      	ldr	r1, [pc, #84]	; (60001b4c <configure_external_ram+0x3b0>)
60001af8:	2000      	movs	r0, #0
60001afa:	4a15      	ldr	r2, [pc, #84]	; (60001b50 <configure_external_ram+0x3b4>)
60001afc:	2301      	movs	r3, #1
60001afe:	9000      	str	r0, [sp, #0]
60001b00:	1a52      	subs	r2, r2, r1
60001b02:	4814      	ldr	r0, [pc, #80]	; (60001b54 <configure_external_ram+0x3b8>)
60001b04:	4422      	add	r2, r4
60001b06:	f000 f993 	bl	60001e30 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001b0a:	b003      	add	sp, #12
60001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b0e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b12:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b16:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b18:	4610      	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b1a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1e:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b26:	6943      	ldr	r3, [r0, #20]
60001b28:	4905      	ldr	r1, [pc, #20]	; (60001b40 <configure_external_ram+0x3a4>)
60001b2a:	07db      	lsls	r3, r3, #31
60001b2c:	d5fb      	bpl.n	60001b26 <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b2e:	2001      	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b30:	4b05      	ldr	r3, [pc, #20]	; (60001b48 <configure_external_ram+0x3ac>)
60001b32:	2210      	movs	r2, #16
60001b34:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b38:	6148      	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001b3a:	701a      	strb	r2, [r3, #0]
60001b3c:	e7db      	b.n	60001af6 <configure_external_ram+0x35a>
60001b3e:	bf00      	nop
60001b40:	402a4000 	.word	0x402a4000
60001b44:	00030004 	.word	0x00030004
60001b48:	20001f57 	.word	0x20001f57
60001b4c:	70000000 	.word	0x70000000
60001b50:	70000000 	.word	0x70000000
60001b54:	20001fc4 	.word	0x20001fc4

60001b58 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001b58:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b5a:	4a17      	ldr	r2, [pc, #92]	; (60001bb8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b5c:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b62:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b66:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b6a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b6e:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b72:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b74:	f013 0f02 	tst.w	r3, #2
60001b78:	d006      	beq.n	60001b88 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b7a:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b7c:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b7e:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b80:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b82:	f013 0f02 	tst.w	r3, #2
60001b86:	d1f8      	bne.n	60001b7a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b8c:	d101      	bne.n	60001b92 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b8e:	6155      	str	r5, [r2, #20]
			continue;
60001b90:	e7ef      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b96:	d101      	bne.n	60001b9c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b98:	6156      	str	r6, [r2, #20]
			continue;
60001b9a:	e7ea      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b9c:	2b00      	cmp	r3, #0
60001b9e:	dae8      	bge.n	60001b72 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001ba0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001ba4:	d001      	beq.n	60001baa <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ba6:	6191      	str	r1, [r2, #24]
			continue;
60001ba8:	e7e3      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001baa:	065b      	lsls	r3, r3, #25
60001bac:	d401      	bmi.n	60001bb2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bae:	6157      	str	r7, [r2, #20]
			continue;
60001bb0:	e7df      	b.n	60001b72 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001bb2:	bcf0      	pop	{r4, r5, r6, r7}
60001bb4:	4770      	bx	lr
60001bb6:	bf00      	nop
60001bb8:	400d8000 	.word	0x400d8000

60001bbc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bbc:	4a39      	ldr	r2, [pc, #228]	; (60001ca4 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bbe:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bc0:	4939      	ldr	r1, [pc, #228]	; (60001ca8 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bc2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc6:	6813      	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bc8:	ed9f 6a38 	vldr	s12, [pc, #224]	; 60001cac <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bcc:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bd0:	eddf 6a37 	vldr	s13, [pc, #220]	; 60001cb0 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001bd4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd6:	6013      	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bd8:	2400      	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bda:	6110      	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bdc:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be0:	4f34      	ldr	r7, [pc, #208]	; (60001cb4 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001be2:	b2d8      	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001be4:	f3c3 210b 	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be8:	0d1b      	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bea:	4e33      	ldr	r6, [pc, #204]	; (60001cb8 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bec:	ee07 0a10 	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bf0:	ee05 1a10 	vmov	s10, r1
60001bf4:	ee07 3a90 	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf8:	4b30      	ldr	r3, [pc, #192]	; (60001cbc <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bfa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bfe:	4d30      	ldr	r5, [pc, #192]	; (60001cc0 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c04:	6030      	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c0a:	6029      	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c0c:	492d      	ldr	r1, [pc, #180]	; (60001cc4 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c0e:	ee37 6a46 	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c12:	4e2d      	ldr	r6, [pc, #180]	; (60001cc8 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c14:	ee77 7ac5 	vsub.f32	s15, s15, s10
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c18:	482c      	ldr	r0, [pc, #176]	; (60001ccc <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c1a:	ee77 6a66 	vsub.f32	s13, s14, s13
60001c1e:	4d2c      	ldr	r5, [pc, #176]	; (60001cd0 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c20:	ee37 7a65 	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c24:	ee26 6a27 	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c28:	edc7 7a00 	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c30:	6817      	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c36:	ed83 7a00 	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c3a:	eec6 5a07 	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3e:	ee86 6a87 	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c42:	eec7 6a87 	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c46:	ee35 7a85 	vadd.f32	s14, s11, s10
60001c4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c4e:	ee36 7a05 	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c52:	ee17 3a90 	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c56:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c5a:	ea47 5303 	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c5e:	ee76 7a85 	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c62:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c64:	ee17 3a10 	vmov	r3, s14
60001c68:	f8d2 7110 	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c70:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c74:	4339      	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c76:	ee17 3a90 	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7a:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c82:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001c86:	430b      	orrs	r3, r1
60001c88:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c8c:	6813      	ldr	r3, [r2, #0]
60001c8e:	f043 0302 	orr.w	r3, r3, #2
60001c92:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c94:	7034      	strb	r4, [r6, #0]
60001c96:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c9a:	4b0e      	ldr	r3, [pc, #56]	; (60001cd4 <tempmon_init+0x118>)
60001c9c:	2201      	movs	r2, #1
}
60001c9e:	bcf0      	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ca0:	601a      	str	r2, [r3, #0]
}
60001ca2:	4770      	bx	lr
60001ca4:	400d8180 	.word	0x400d8180
60001ca8:	401f4400 	.word	0x401f4400
60001cac:	42aa0000 	.word	0x42aa0000
60001cb0:	42b40000 	.word	0x42b40000
60001cb4:	20001f38 	.word	0x20001f38
60001cb8:	20001f30 	.word	0x20001f30
60001cbc:	20001f34 	.word	0x20001f34
60001cc0:	20001f2c 	.word	0x20001f2c
60001cc4:	0fff0000 	.word	0x0fff0000
60001cc8:	e000e440 	.word	0xe000e440
60001ccc:	20001800 	.word	0x20001800
60001cd0:	00001659 	.word	0x00001659
60001cd4:	e000e108 	.word	0xe000e108

60001cd8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cd8:	4b30      	ldr	r3, [pc, #192]	; (60001d9c <usb_init+0xc4>)
60001cda:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001cde:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ce0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001ce4:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001ce8:	f000 f8a6 	bl	60001e38 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cec:	492c      	ldr	r1, [pc, #176]	; (60001da0 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cee:	482d      	ldr	r0, [pc, #180]	; (60001da4 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cf4:	4c2c      	ldr	r4, [pc, #176]	; (60001da8 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cf6:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cfa:	4b2c      	ldr	r3, [pc, #176]	; (60001dac <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cfc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001d00:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001d04:	6822      	ldr	r2, [r4, #0]
60001d06:	4013      	ands	r3, r2
60001d08:	b91b      	cbnz	r3, 60001d12 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001d0a:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001d0e:	079a      	lsls	r2, r3, #30
60001d10:	d01a      	beq.n	60001d48 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d12:	4b24      	ldr	r3, [pc, #144]	; (60001da4 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001d18:	4a23      	ldr	r2, [pc, #140]	; (60001da8 <usb_init+0xd0>)
60001d1a:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d1c:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001d1e:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001d22:	f041 0102 	orr.w	r1, r1, #2
60001d26:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001d2a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001d2e:	079b      	lsls	r3, r3, #30
60001d30:	d4fb      	bmi.n	60001d2a <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d36:	491e      	ldr	r1, [pc, #120]	; (60001db0 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d38:	4b1b      	ldr	r3, [pc, #108]	; (60001da8 <usb_init+0xd0>)
60001d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d3e:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d40:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d42:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d44:	f000 f884 	bl	60001e50 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d48:	4d1a      	ldr	r5, [pc, #104]	; (60001db4 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d4a:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d4c:	4b16      	ldr	r3, [pc, #88]	; (60001da8 <usb_init+0xd0>)
60001d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d52:	4c14      	ldr	r4, [pc, #80]	; (60001da4 <usb_init+0xcc>)
60001d54:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d56:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d58:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001d5a:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d5c:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d5e:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d62:	f44f 7220 	mov.w	r2, #640	; 0x280
60001d66:	f000 f87b 	bl	60001e60 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d6a:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d6e:	f240 1143 	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d72:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
60001d76:	4b10      	ldr	r3, [pc, #64]	; (60001db8 <usb_init+0xe0>)
60001d78:	4a10      	ldr	r2, [pc, #64]	; (60001dbc <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d7a:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001d7c:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d7e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d82:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d8a:	4a0d      	ldr	r2, [pc, #52]	; (60001dc0 <usb_init+0xe8>)
60001d8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d90:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d92:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d94:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001d98:	bd70      	pop	{r4, r5, r6, pc}
60001d9a:	bf00      	nop
60001d9c:	400d8000 	.word	0x400d8000
60001da0:	400fc000 	.word	0x400fc000
60001da4:	402e0000 	.word	0x402e0000
60001da8:	400d9000 	.word	0x400d9000
60001dac:	001e1c00 	.word	0x001e1c00
60001db0:	e000e28c 	.word	0xe000e28c
60001db4:	20000000 	.word	0x20000000
60001db8:	20001800 	.word	0x20001800
60001dbc:	00001825 	.word	0x00001825
60001dc0:	e000e10c 	.word	0xe000e10c

60001dc4 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001dc4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001dc6:	4b0e      	ldr	r3, [pc, #56]	; (60001e00 <_reboot_Teensyduino_+0x3c>)
60001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001dca:	079b      	lsls	r3, r3, #30
60001dcc:	d400      	bmi.n	60001dd0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001dce:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001dd0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001dd2:	4b0c      	ldr	r3, [pc, #48]	; (60001e04 <_reboot_Teensyduino_+0x40>)
60001dd4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dd6:	4a0c      	ldr	r2, [pc, #48]	; (60001e08 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001dd8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ddc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de0:	490a      	ldr	r1, [pc, #40]	; (60001e0c <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001de6:	6411      	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001de8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001dea:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dee:	4a08      	ldr	r2, [pc, #32]	; (60001e10 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001df0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
60001df4:	4907      	ldr	r1, [pc, #28]	; (60001e14 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001df6:	6812      	ldr	r2, [r2, #0]
60001df8:	4618      	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001dfa:	6019      	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dfc:	6893      	ldr	r3, [r2, #8]
60001dfe:	4798      	blx	r3
60001e00:	401f4400 	.word	0x401f4400
60001e04:	402e0000 	.word	0x402e0000
60001e08:	400ac000 	.word	0x400ac000
60001e0c:	00200003 	.word	0x00200003
60001e10:	0020001c 	.word	0x0020001c
60001e14:	eb120000 	.word	0xeb120000

60001e18 <_init>:
60001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e1a:	bf00      	nop
60001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e1e:	bc08      	pop	{r3}
60001e20:	469e      	mov	lr, r3
60001e22:	4770      	bx	lr
60001e24:	0000      	movs	r0, r0
	...

60001e28 <__main_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__main_veneer+0x4>
60001e2c:	000009bd 	.word	0x000009bd

60001e30 <__sm_set_pool_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__sm_set_pool_veneer+0x4>
60001e34:	00001405 	.word	0x00001405

60001e38 <__usb_init_serialnumber_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__usb_init_serialnumber_veneer+0x4>
60001e3c:	00001f89 	.word	0x00001f89

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	00002d8d 	.word	0x00002d8d

60001e48 <__set_arm_clock_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__set_arm_clock_veneer+0x4>
60001e4c:	00000c15 	.word	0x00000c15

60001e50 <__delay_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__delay_veneer+0x4>
60001e54:	00000ed9 	.word	0x00000ed9

60001e58 <__pwm_init_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__pwm_init_veneer+0x4>
60001e5c:	000010cd 	.word	0x000010cd

60001e60 <__memset_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__memset_veneer+0x4>
60001e64:	000035c9 	.word	0x000035c9

60001e68 <__init_array_start>:
60001e68:	00000045 	.word	0x00000045
60001e6c:	0000271d 	.word	0x0000271d

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	b933      	.short	0xb933
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xd>
      2c:	f3af4804 	.word	0xf3af4804
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	7023      	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	bd10      	.short	0xbd10
      38:	1e68      	subs	r0, r5, #1
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	6d84      	ldr	r4, [r0, #88]	; 0x58
	...

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	b5104b08 	.word	0xb5104b08
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	0000      	movs	r0, r0
      6a:	0000      	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	1e6c      	subs	r4, r5, #1
      6e:	2000      	.short	0x2000
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	6d84      	ldr	r4, [r0, #88]	; 0x58
      72:	0000      	movs	r0, r0
      74:	1ac0      	subs	r0, r0, r3
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]>:
// int assert_not_nan(float, String);
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
      7c:	b530      	push	{r4, r5, lr}
      7e:	4605      	mov	r5, r0
	if (abs(a - b) > 1E-20) {
		TEST_INFO(message, "!=", a, b);
      80:	4c11      	ldr	r4, [pc, #68]	; (c8 <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]+0x4c>)
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
      82:	210c      	movs	r1, #12
      84:	ed2d4811 	.word	0xed2d4811
// int assert_not_nan(float, String);
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
      88:	8b02      	ldrh	r2, [r0, #24]
      8a:	eeb0      	.short	0xeeb0
      8c:	8a60      	ldrh	r0, [r4, #18]
      8e:	b085      	.short	0xb085
      90:	eef0 8a40 	vmov.f32	s17, s0
      94:	fa60f002 	.word	0xfa60f002
	if (abs(a - b) > 1E-20) {
		TEST_INFO(message, "!=", a, b);
      98:	4629      	mov	r1, r5
      9a:	4620      	.short	0x4620
      9c:	f002 faea 	bl	2674 <Print::print(String const&)>
      a0:	7ac8eeb7 	.word	0x7ac8eeb7
      a4:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
      a8:	4d09      	ldr	r5, [pc, #36]	; (d0 <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]+0x54>)
      aa:	4620      	.short	0x4620
      ac:	4909      	ldr	r1, [pc, #36]	; (d4 <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]+0x58>)
      ae:	9500      	str	r5, [sp, #0]
      b0:	2b16ec53 	.word	0x2b16ec53
      b4:	ed8d 7b02 	vstr	d7, [sp, #8]
      b8:	f002 fb1a 	bl	26f0 <Print::printf(char const*, ...)>
		return 1;
	}
	return 0;
}
      bc:	2001      	movs	r0, #1
      be:	b005      	add	sp, #20
      c0:	8b02ecbd 	.word	0x8b02ecbd
      c4:	bd30      	pop	{r4, r5, pc}
      c6:	bf00      	nop
      c8:	20000fc4 	.word	0x20000fc4
      cc:	082c      	lsrs	r4, r5, #32
      ce:	2000      	.short	0x2000
      d0:	0848      	lsrs	r0, r1, #1
      d2:	2000      	movs	r0, #0
      d4:	083c      	lsrs	r4, r7, #32
      d6:	2000      	movs	r0, #0

000000d8 <incremental_vector_fill(int)>:
#include "utilities/blink.h"
#include "utilities/vector.h"
#include "utilities/assertions.h"


Vector<float> incremental_vector_fill(int target_length) {
      d8:	b570      	push	{r4, r5, r6, lr}
      da:	460e      	mov	r6, r1
      dc:	4605      	mov	r5, r0
	Vector<float> data(target_length);
      de:	f000      	.short	0xf000
      e0:	fd01 2e00 	stc2	14, cr2, [r1, #-0]

	for (int i = 0; i < target_length; i++) {
      e4:	2400dd0d 	.word	0x2400dd0d
		data[i] = i + 1;
      e8:	4621      	mov	r1, r4
      ea:	3401      	.short	0x3401
      ec:	4628      	mov	r0, r5
      ee:	f000      	.short	0xf000
      f0:	fd73 ee07 	ldc2l	14, cr14, [r3, #-28]!	; 0xffffffe4
      f4:	4a90      	ldr	r2, [pc, #576]	; (338 <recursive_test(Vector<float>*, int, int)+0x8>)


Vector<float> incremental_vector_fill(int target_length) {
	Vector<float> data(target_length);

	for (int i = 0; i < target_length; i++) {
      f6:	42a6      	cmp	r6, r4
		data[i] = i + 1;
      f8:	7ae7eef8 	.word	0x7ae7eef8
      fc:	edc0 7a00 	vstr	s15, [r0]


Vector<float> incremental_vector_fill(int target_length) {
	Vector<float> data(target_length);

	for (int i = 0; i < target_length; i++) {
     100:	4628d1f2 	.word	0x4628d1f2
		data[i] = i + 1;
	}

	return data;
}
     104:	bd70      	pop	{r4, r5, r6, pc}

	// Maybe different pin configs if half duplex
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
	if (!half_duplex_mode_)  {
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
     106:	bf00      	.short	0xbf00

00000108 <int assert_eq<float>(float*, float, String, int)>:

template <typename T> int assert_eq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     108:	2a00      	cmp	r2, #0
		return 1;
	}
	return 0;
}

template <typename T> int assert_eq(T* a, T b, String message, int n) {
     10a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     10e:	ed2d 8b04 	vpush	{d8-d9}
     112:	b08d      	sub	sp, #52	; 0x34
	int errors = 0;
	for (int i = 0; i < n; i++) {
     114:	dd4d      	ble.n	1b2 <int assert_eq<float>(float*, float, String, int)+0xaa>
     116:	2400      	movs	r4, #0
     118:	460f4690 	.word	0x460f4690
     11c:	eef0 8a40 	vmov.f32	s17, s0
     120:	4605      	mov	r5, r0
     122:	4626      	mov	r6, r4
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     124:	ed9f 9b26 	vldr	d9, [pc, #152]	; 1c0 <int assert_eq<float>(float*, float, String, int)+0xb8>
     128:	e00c      	b.n	144 <int assert_eq<float>(float*, float, String, int)+0x3c>
}

template <typename T> int assert_eq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
		errors += assert_eq(a[i], b, message + " [" + String(i) + "]");
     12a:	a808      	add	r0, sp, #32
     12c:	441e      	add	r6, r3
	return 0;
}

template <typename T> int assert_eq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     12e:	3401      	adds	r4, #1
		errors += assert_eq(a[i], b, message + " [" + String(i) + "]");
     130:	f002 fb00 	bl	2734 <String::~String()>
     134:	a804      	add	r0, sp, #16
     136:	f002 fafd 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     13a:	4668      	mov	r0, sp
     13c:	f002 fafa 	bl	2734 <String::~String()>
	return 0;
}

template <typename T> int assert_eq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     140:	45a0      	cmp	r8, r4
     142:	d037      	beq.n	1b4 <int assert_eq<float>(float*, float, String, int)+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     144:	4639      	mov	r1, r7
     146:	4668      	mov	r0, sp
		errors += assert_eq(a[i], b, message + " [" + String(i) + "]");
     148:	ecb5 8a01 	vldmia	r5!, {s16}
     14c:	f002 fb46 	bl	27dc <String::String(String const&)>
     150:	491d      	ldr	r1, [pc, #116]	; (1c8 <int assert_eq<float>(float*, float, String, int)+0xc0>)
     152:	4668      	mov	r0, sp
     154:	f002 fbb4 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     158:	220a4681 	.word	0x220a4681
     15c:	4621      	mov	r1, r4
     15e:	a804      	add	r0, sp, #16
     160:	f002 fb5a 	bl	2818 <String::String(int, unsigned char)>
     164:	a904      	add	r1, sp, #16
     166:	4648      	.short	0x4648
     168:	f002 fba2 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     16c:	4917      	ldr	r1, [pc, #92]	; (1cc <int assert_eq<float>(float*, float, String, int)+0xc4>)
     16e:	f002      	.short	0xf002
     170:	fba7 4601 	umull	r4, r6, r7, r1
     174:	f002a808 	.word	0xf002a808
     178:	fb31 ee78 			; <UNDEFINED> instruction: 0xfb31ee78
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     17c:	7a68      	ldrb	r0, [r5, #9]
		TEST_INFO(message, "!=", a, b);
		return 1;
	}
	return 0;
     17e:	2300      	.short	0x2300
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     184:	7a67eeb0 	.word	0x7a67eeb0
     188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     18c:	bfd8      	it	le
     18e:	eeb1      	.short	0xeeb1
     190:	7a67      	ldrb	r7, [r4, #9]
     192:	eeb7      	.short	0xeeb7
     194:	7ac7      	ldrb	r7, [r0, #11]
     196:	eeb4      	.short	0xeeb4
     198:	7bc9      	ldrb	r1, [r1, #15]
     19a:	eef1      	.short	0xeef1
     19c:	fa10 ddc4 			; <UNDEFINED> instruction: 0xfa10ddc4
     1a0:	0a48eeb0 	.word	0x0a48eeb0
     1a4:	a808      	add	r0, sp, #32
     1a6:	eef0      	.short	0xeef0
     1a8:	0a68      	lsrs	r0, r5, #9
     1aa:	f7ff      	.short	0xf7ff
     1ac:	ff67 4603 	vmax.u32	d20, d7, d3
     1b0:	2600e7bb 	.word	0x2600e7bb
	int errors = 0;
	for (int i = 0; i < n; i++) {
		errors += assert_eq(a[i], b, message + " [" + String(i) + "]");
	}
	return errors;
}
     1b4:	4630      	mov	r0, r6
     1b6:	b00d      	.short	0xb00d
     1b8:	ecbd 8b04 	vpop	{d8-d9}
     1bc:	83f0e8bd 	.word	0x83f0e8bd
     1c0:	4223      	tst	r3, r4
     1c2:	0c92      	.short	0x0c92
     1c4:	9ca1      	ldr	r4, [sp, #644]	; 0x284
     1c6:	3bc7      	.short	0x3bc7
     1c8:	0900      	lsrs	r0, r0, #4
     1ca:	2000      	.short	0x2000
     1cc:	0878      	lsrs	r0, r7, #1
     1ce:	2000      	.short	0x2000

000001d0 <index_operator_test(int)>:

int index_operator_test(int target_length) {
     1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1d4:	8b04ed2d 	.word	0x8b04ed2d
     1d8:	b08e      	sub	sp, #56	; 0x38
     1da:	4680      	.short	0x4680
	int errors = 0;

	Vector<float> data = incremental_vector_fill(target_length);
     1dc:	4601      	mov	r1, r0
     1de:	4668      	movle	r0, sp
     1e0:	ff7af7ff 	.word	0xff7af7ff

	for (int i = 0; i < target_length; i++) {
     1e4:	f1b8 0f00 	cmp.w	r8, #0
     1e8:	2400dd4d 	.word	0x2400dd4d
     1ec:	ae0a      	add	r6, sp, #40	; 0x28
     1ee:	4627      	mov	r7, r4
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     1f0:	9b35ed9f 	.word	0x9b35ed9f
     1f4:	e00c      	b.n	210 <index_operator_test(int)+0x40>
		errors += assert_eq<float>(data[i], float(i+1), "Vector operator test [" + String(i) + "]");
     1f6:	4630      	.short	0x4630
     1f8:	441f      	add	r7, r3
     1fa:	f002      	.short	0xf002
     1fc:	fa9b a802 			; <UNDEFINED> instruction: 0xfa9ba802
     200:	fa98f002 	.word	0xfa98f002
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     204:	a806      	add	r0, sp, #24
     206:	f002      	.short	0xf002
     208:	fa95 45a8 			; <UNDEFINED> instruction: 0xfa9545a8
int index_operator_test(int target_length) {
	int errors = 0;

	Vector<float> data = incremental_vector_fill(target_length);

	for (int i = 0; i < target_length; i++) {
     20c:	462c      	mov	r4, r5
     20e:	d03c      	.short	0xd03c
		errors += assert_eq<float>(data[i], float(i+1), "Vector operator test [" + String(i) + "]");
     210:	1c65      	adds	r5, r4, #1
     212:	4621      	.short	0x4621
     214:	4668      	mov	r0, sp
     216:	f000 fcdf 	bl	bd8 <Vector<float>::operator[](int)>
     21a:	ee07 5a90 	vmov	s15, r5
     21e:	ed90      	.short	0xed90
     220:	8a00      	ldrh	r0, [r0, #16]
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     222:	a806      	.short	0xa806
     224:	492a      	ldr	r1, [pc, #168]	; (2d0 <index_operator_test(int)+0x100>)
     226:	eef8      	.short	0xeef8
     228:	8ae7      	ldrh	r7, [r4, #22]
     22a:	f002      	.short	0xf002
     22c:	fac3 220a 			; <UNDEFINED> instruction: 0xfac3220a
     230:	a8024621 	.word	0xa8024621
     234:	f002 faf0 	bl	2818 <String::String(int, unsigned char)>
     238:	a806a902 	.word	0xa806a902
     23c:	f002 fb38 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     240:	4924      	ldr	r1, [pc, #144]	; (2d4 <index_operator_test(int)+0x104>)
     242:	f002      	.short	0xf002
     244:	fb3d 4601 	smlawb	r6, sp, r1, r4
     248:	4630      	mov	r0, r6
     24a:	f002      	.short	0xf002
     24c:	fac7 ee78 			; <UNDEFINED> instruction: 0xfac7ee78
     250:	23007a68 	.word	0x23007a68
     254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     258:	7a67eeb0 	.word	0x7a67eeb0
     25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     260:	bfd8      	it	le
     262:	eeb1 7a67 	vnegle.f32	s14, s15
     266:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     26a:	eeb4 7bc9 	vcmpe.f64	d7, d9
     26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     272:	ddc0      	ble.n	1f6 <index_operator_test(int)+0x26>
     274:	eef0 0a68 	vmov.f32	s1, s17
     278:	4630      	mov	r0, r6
     27a:	eeb0 0a48 	vmov.f32	s0, s16
     27e:	f7ff fefd 	bl	7c <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]>
     282:	4603      	mov	r3, r0
     284:	2700e7b7 	.word	0x2700e7b7

	return data;
}

int index_operator_test(int target_length) {
	int errors = 0;
     288:	ae0a      	add	r6, sp, #40	; 0x28

	for (int i = 0; i < target_length; i++) {
		errors += assert_eq<float>(data[i], float(i+1), "Vector operator test [" + String(i) + "]");
	}

	data.clear();
     28a:	4668      	.short	0x4668
     28c:	f000 fc24 	bl	ad8 <Vector<float>::clear()>
	errors += assert_eq<float>(data.as_array(), 0.0f, "Vector fill and Clear test", target_length);
     290:	f0004668 	.word	0xf0004668
     294:	fc5f 4604 	mrrc2	6, 0, r4, pc, cr4	; <UNPREDICTABLE>
     298:	4630490f 	.word	0x4630490f
     29c:	f002 fa8a 	bl	27b4 <String::String(char const*)>
     2a0:	46314642 	.word	0x46314642
     2a4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 2dc <index_operator_test(int)+0x10c>
     2a8:	f7ff4620 	.word	0xf7ff4620
     2ac:	ff2d 4407 	vshl.u32	d4, d7, d13
     2b0:	f0024630 	.word	0xf0024630
     2b4:	fa3f 4668 			; <UNDEFINED> instruction: 0xfa3f4668
}

int index_operator_test(int target_length) {
	int errors = 0;

	Vector<float> data = incremental_vector_fill(target_length);
     2b8:	fc06f000 	.word	0xfc06f000

	data.clear();
	errors += assert_eq<float>(data.as_array(), 0.0f, "Vector fill and Clear test", target_length);

	return errors;
}
     2bc:	4638      	mov	r0, r7
     2be:	b00e      	.short	0xb00e
     2c0:	ecbd 8b04 	vpop	{d8-d9}
     2c4:	81f0e8bd 	.word	0x81f0e8bd
     2c8:	0c924223 	.word	0x0c924223
     2cc:	3bc79ca1 	.word	0x3bc79ca1
     2d0:	2000087c 	.word	0x2000087c
     2d4:	20000878 	.word	0x20000878
     2d8:	20000894 	.word	0x20000894
     2dc:	00000000 	.word	0x00000000

000002e0 <reset_and_fill_test(int)>:
	errors += assert_neq<float>(v1.as_array(), 0.0f, "Vector Assign and No Clear test", v1.size());
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector Assign and Clear test", v2.size());
	return errors;
}

int reset_and_fill_test(int target_length) {
     2e0:	b530      	push	{r4, r5, lr}
     2e2:	b087      	sub	sp, #28
     2e4:	4604      	mov	r4, r0
	Vector<float> data = incremental_vector_fill(target_length);
     2e6:	4601      	mov	r1, r0
     2e8:	4668      	mov	r0, sp
     2ea:	f7ff fef5 	bl	d8 <incremental_vector_fill(int)>

	data.reset(target_length);
     2ee:	4621      	mov	r1, r4
     2f0:	4668      	mov	r0, sp
     2f2:	f000 fc09 	bl	b08 <Vector<float>::reset(int)>
	return assert_eq<float>(data.as_array(), 0.0f, "Vector Reset test", target_length);
     2f6:	4668      	mov	r0, sp
     2f8:	f000 fc2c 	bl	b54 <Vector<float>::as_array()>
     2fc:	4605      	mov	r5, r0
     2fe:	490a      	ldr	r1, [pc, #40]	; (328 <reset_and_fill_test(int)+0x48>)
     300:	a802      	add	r0, sp, #8
     302:	f002 fa57 	bl	27b4 <String::String(char const*)>
     306:	4622      	mov	r2, r4
     308:	a902      	add	r1, sp, #8
     30a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 32c <reset_and_fill_test(int)+0x4c>
     30e:	4628      	mov	r0, r5
     310:	f7ff fefa 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     314:	4604      	mov	r4, r0
     316:	a802      	add	r0, sp, #8
     318:	f002 fa0c 	bl	2734 <String::~String()>
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector Assign and Clear test", v2.size());
	return errors;
}

int reset_and_fill_test(int target_length) {
	Vector<float> data = incremental_vector_fill(target_length);
     31c:	4668      	mov	r0, sp
     31e:	f000 fbd3 	bl	ac8 <Vector<float>::~Vector()>

	data.reset(target_length);
	return assert_eq<float>(data.as_array(), 0.0f, "Vector Reset test", target_length);
}
     322:	4620      	mov	r0, r4
     324:	b007      	add	sp, #28
     326:	bd30      	pop	{r4, r5, pc}
     328:	200008b0 	.word	0x200008b0
     32c:	00000000 	.word	0x00000000

00000330 <recursive_test(Vector<float>*, int, int)>:
	}

	return errors;
}

int recursive_test(Vector<float>* v1, int size, int depth) {
     330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     334:	ed2d 8b02 	vpush	{d8}
     338:	b08e      	sub	sp, #56	; 0x38
     33a:	4680      	mov	r8, r0
     33c:	4617      	mov	r7, r2
     33e:	460d      	mov	r5, r1
	int errors = 0;

	Vector<float> v2(size);
     340:	4668      	mov	r0, sp
     342:	f000 fbcf 	bl	ae4 <Vector<float>::Vector(int)>
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector recursion init test [" + String(depth) + "]", size);
     346:	4668      	mov	r0, sp
     348:	f000 fc04 	bl	b54 <Vector<float>::as_array()>
     34c:	4939      	ldr	r1, [pc, #228]	; (434 <recursive_test(Vector<float>*, int, int)+0x104>)
     34e:	4604      	mov	r4, r0
     350:	a806      	add	r0, sp, #24
     352:	f002 fa2f 	bl	27b4 <String::String(char const*)>
     356:	220a      	movs	r2, #10
     358:	4639      	mov	r1, r7
     35a:	a802      	add	r0, sp, #8
     35c:	f002 fa5c 	bl	2818 <String::String(int, unsigned char)>
     360:	a902      	add	r1, sp, #8
     362:	a806      	add	r0, sp, #24
     364:	f002 faa4 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     368:	4933      	ldr	r1, [pc, #204]	; (438 <recursive_test(Vector<float>*, int, int)+0x108>)
     36a:	f002 faa9 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     36e:	4601      	mov	r1, r0
     370:	a80a      	add	r0, sp, #40	; 0x28
     372:	f002 fa33 	bl	27dc <String::String(String const&)>
     376:	462a      	mov	r2, r5
     378:	a90a      	add	r1, sp, #40	; 0x28
     37a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 43c <recursive_test(Vector<float>*, int, int)+0x10c>
     37e:	4620      	mov	r0, r4
     380:	f7ff fec2 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     384:	4606      	mov	r6, r0
     386:	a80a      	add	r0, sp, #40	; 0x28
     388:	f002 f9d4 	bl	2734 <String::~String()>
     38c:	a802      	add	r0, sp, #8
     38e:	f002 f9d1 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     392:	a806      	add	r0, sp, #24
     394:	f002 f9ce 	bl	2734 <String::~String()>
     398:	ee07 7a90 	vmov	s15, r7

	for (int i = 0; i < size; i++) {
     39c:	2d00      	cmp	r5, #0
     39e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
     3a2:	dd09      	ble.n	3b8 <recursive_test(Vector<float>*, int, int)+0x88>
     3a4:	2400      	movs	r4, #0
		v2[i] = float(depth);
     3a6:	4621      	mov	r1, r4
	int errors = 0;

	Vector<float> v2(size);
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector recursion init test [" + String(depth) + "]", size);

	for (int i = 0; i < size; i++) {
     3a8:	3401      	adds	r4, #1
		v2[i] = float(depth);
     3aa:	4668      	mov	r0, sp
     3ac:	f000 fc14 	bl	bd8 <Vector<float>::operator[](int)>
	int errors = 0;

	Vector<float> v2(size);
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector recursion init test [" + String(depth) + "]", size);

	for (int i = 0; i < size; i++) {
     3b0:	42a5      	cmp	r5, r4
		v2[i] = float(depth);
     3b2:	ed80 8a00 	vstr	s16, [r0]
	int errors = 0;

	Vector<float> v2(size);
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector recursion init test [" + String(depth) + "]", size);

	for (int i = 0; i < size; i++) {
     3b6:	d1f6      	bne.n	3a6 <recursive_test(Vector<float>*, int, int)+0x76>
		v2[i] = float(depth);
	}

	*v1 = v2;
     3b8:	4669      	mov	r1, sp
     3ba:	4640      	mov	r0, r8
     3bc:	f000 fc1a 	bl	bf4 <Vector<float>::operator=(Vector<float>&)>
	errors += assert_eq<float>(v1->as_array(), float(depth), "Vector recursion assign test [" + String(depth) + "]", size);
     3c0:	4640      	mov	r0, r8
     3c2:	f000 fbc7 	bl	b54 <Vector<float>::as_array()>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     3c6:	491e      	ldr	r1, [pc, #120]	; (440 <recursive_test(Vector<float>*, int, int)+0x110>)
     3c8:	4604      	mov	r4, r0
     3ca:	a806      	add	r0, sp, #24
     3cc:	f002 f9f2 	bl	27b4 <String::String(char const*)>
     3d0:	220a      	movs	r2, #10
     3d2:	4639      	mov	r1, r7
     3d4:	a802      	add	r0, sp, #8
     3d6:	f002 fa1f 	bl	2818 <String::String(int, unsigned char)>
     3da:	a902      	add	r1, sp, #8
     3dc:	a806      	add	r0, sp, #24
     3de:	f002 fa67 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     3e2:	4915      	ldr	r1, [pc, #84]	; (438 <recursive_test(Vector<float>*, int, int)+0x108>)
     3e4:	f002 fa6c 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     3e8:	4601      	mov	r1, r0
     3ea:	a80a      	add	r0, sp, #40	; 0x28
     3ec:	f002 f9f6 	bl	27dc <String::String(String const&)>
     3f0:	462a      	mov	r2, r5
     3f2:	a90a      	add	r1, sp, #40	; 0x28
     3f4:	eeb0 0a48 	vmov.f32	s0, s16
     3f8:	4620      	mov	r0, r4
     3fa:	f7ff fe85 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     3fe:	1834      	adds	r4, r6, r0
     400:	a80a      	add	r0, sp, #40	; 0x28
     402:	f002 f997 	bl	2734 <String::~String()>
     406:	a802      	add	r0, sp, #8
     408:	f002 f994 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     40c:	a806      	add	r0, sp, #24
     40e:	f002 f991 	bl	2734 <String::~String()>

	if (depth <= 0) {
     412:	2f00      	cmp	r7, #0
     414:	dd05      	ble.n	422 <recursive_test(Vector<float>*, int, int)+0xf2>
		return errors;
	}

	errors += recursive_test(v1, size, depth - 1);
     416:	1e7a      	subs	r2, r7, #1
     418:	4629      	mov	r1, r5
     41a:	4640      	mov	r0, r8
     41c:	f7ff ff88 	bl	330 <recursive_test(Vector<float>*, int, int)>
     420:	4404      	add	r4, r0
}

int recursive_test(Vector<float>* v1, int size, int depth) {
	int errors = 0;

	Vector<float> v2(size);
     422:	4668      	mov	r0, sp
     424:	f000 fb50 	bl	ac8 <Vector<float>::~Vector()>
	}

	errors += recursive_test(v1, size, depth - 1);

	return errors;
}
     428:	4620      	mov	r0, r4
     42a:	b00e      	add	sp, #56	; 0x38
     42c:	ecbd 8b02 	vpop	{d8}
     430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     434:	200008c4 	.word	0x200008c4
     438:	20000878 	.word	0x20000878
     43c:	00000000 	.word	0x00000000
     440:	200008e4 	.word	0x200008e4
     444:	00000000 	.word	0x00000000

00000448 <int assert_eq<float>(float*, float*, String, int)>:
	return errors;
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     448:	2b00      	cmp	r3, #0
		errors += assert_eq(a[i], b, message + " [" + String(i) + "]");
	}
	return errors;
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
     44a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     44e:	ed2d 8b04 	vpush	{d8-d9}
     452:	b08c      	sub	sp, #48	; 0x30
	int errors = 0;
	for (int i = 0; i < n; i++) {
     454:	dd4e      	ble.n	4f4 <int assert_eq<float>(float*, float*, String, int)+0xac>
     456:	2400      	movs	r4, #0
     458:	4698      	mov	r8, r3
     45a:	4617      	mov	r7, r2
     45c:	4606      	mov	r6, r0
     45e:	460d      	mov	r5, r1
     460:	46a1      	mov	r9, r4
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     462:	ed9f 9b29 	vldr	d9, [pc, #164]	; 508 <int assert_eq<float>(float*, float*, String, int)+0xc0>
     466:	e00c      	b.n	482 <int assert_eq<float>(float*, float*, String, int)+0x3a>
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
		errors += assert_eq(a[i], b[i], message + " [" + String(i) + "]");
     468:	a808      	add	r0, sp, #32
     46a:	4489      	add	r9, r1
	return errors;
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     46c:	3401      	adds	r4, #1
		errors += assert_eq(a[i], b[i], message + " [" + String(i) + "]");
     46e:	f002 f961 	bl	2734 <String::~String()>
     472:	a804      	add	r0, sp, #16
     474:	f002 f95e 	bl	2734 <String::~String()>
     478:	4668      	mov	r0, sp
     47a:	f002 f95b 	bl	2734 <String::~String()>
	return errors;
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     47e:	45a0      	cmp	r8, r4
     480:	d03a      	beq.n	4f8 <int assert_eq<float>(float*, float*, String, int)+0xb0>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     482:	4639      	mov	r1, r7
     484:	4668      	mov	r0, sp
		errors += assert_eq(a[i], b[i], message + " [" + String(i) + "]");
     486:	ecb6 8a01 	vldmia	r6!, {s16}
     48a:	ecf5 8a01 	vldmia	r5!, {s17}
     48e:	f002 f9a5 	bl	27dc <String::String(String const&)>
     492:	491f      	ldr	r1, [pc, #124]	; (510 <int assert_eq<float>(float*, float*, String, int)+0xc8>)
     494:	4668      	mov	r0, sp
     496:	f002 fa13 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     49a:	4682      	mov	sl, r0
     49c:	220a      	movs	r2, #10
     49e:	4621      	mov	r1, r4
     4a0:	a804      	add	r0, sp, #16
     4a2:	f002 f9b9 	bl	2818 <String::String(int, unsigned char)>
     4a6:	a904      	add	r1, sp, #16
     4a8:	4650      	mov	r0, sl
     4aa:	f002 fa01 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     4ae:	4919      	ldr	r1, [pc, #100]	; (514 <int assert_eq<float>(float*, float*, String, int)+0xcc>)
     4b0:	f002 fa06 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     4b4:	4601      	mov	r1, r0
     4b6:	a808      	add	r0, sp, #32
     4b8:	f002 f990 	bl	27dc <String::String(String const&)>
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     4bc:	ee78 7a68 	vsub.f32	s15, s16, s17
		TEST_INFO(message, "!=", a, b);
		return 1;
	}
	return 0;
     4c0:	2100      	movs	r1, #0
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     4c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     4c6:	eeb0 7a67 	vmov.f32	s14, s15
     4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4ce:	bfd8      	it	le
     4d0:	eeb1 7a67 	vnegle.f32	s14, s15
     4d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     4d8:	eeb4 7bc9 	vcmpe.f64	d7, d9
     4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4e0:	ddc2      	ble.n	468 <int assert_eq<float>(float*, float*, String, int)+0x20>
     4e2:	eef0 0a68 	vmov.f32	s1, s17
     4e6:	a808      	add	r0, sp, #32
     4e8:	eeb0 0a48 	vmov.f32	s0, s16
     4ec:	f7ff fdc6 	bl	7c <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]>
     4f0:	4601      	mov	r1, r0
     4f2:	e7b9      	b.n	468 <int assert_eq<float>(float*, float*, String, int)+0x20>
	}
	return errors;
}

template <typename T> int assert_eq(T* a, T* b, String message, int n) {
	int errors = 0;
     4f4:	f04f 0900 	mov.w	r9, #0
	for (int i = 0; i < n; i++) {
		errors += assert_eq(a[i], b[i], message + " [" + String(i) + "]");
	}
	return errors;
}
     4f8:	4648      	mov	r0, r9
     4fa:	b00c      	add	sp, #48	; 0x30
     4fc:	ecbd 8b04 	vpop	{d8-d9}
     500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     504:	f3af 8000 	nop.w
     508:	0c924223 	.word	0x0c924223
     50c:	3bc79ca1 	.word	0x3bc79ca1
     510:	20000900 	.word	0x20000900
     514:	20000878 	.word	0x20000878

00000518 <iterative_test(int, int)>:
	errors += assert_neq<float>(v2.as_array(), 0.0f, "Vector Append and No Clear test", v2.size());

	return errors;
}

int iterative_test(int size, int depth) {
     518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     51c:	4605      	mov	r5, r0
     51e:	b089      	sub	sp, #36	; 0x24
     520:	4689      	mov	r9, r1
	int errors = 0;

	Vector<float> v1(size);
     522:	4668      	mov	r0, sp
     524:	4629      	mov	r1, r5
     526:	f000 fadd 	bl	ae4 <Vector<float>::Vector(int)>
	for (int i = 0; i < depth; i++) {
     52a:	f1b9 0f00 	cmp.w	r9, #0
     52e:	dd2c      	ble.n	58a <iterative_test(int, int)+0x72>
     530:	2400      	movs	r4, #0
     532:	4626      	mov	r6, r4
		Vector<float> v2(size);
     534:	4629      	mov	r1, r5
     536:	a802      	add	r0, sp, #8
     538:	f000 fad4 	bl	ae4 <Vector<float>::Vector(int)>
		v1 = v2;
     53c:	a902      	add	r1, sp, #8
     53e:	4668      	mov	r0, sp

int iterative_test(int size, int depth) {
	int errors = 0;

	Vector<float> v1(size);
	for (int i = 0; i < depth; i++) {
     540:	3401      	adds	r4, #1
		Vector<float> v2(size);
		v1 = v2;
     542:	f000 fb57 	bl	bf4 <Vector<float>::operator=(Vector<float>&)>
		errors += assert_eq<float>(v1.as_array(), v2.as_array(), "Vector iterative assign test", size);
     546:	4668      	mov	r0, sp
     548:	f000 fb04 	bl	b54 <Vector<float>::as_array()>
     54c:	4607      	mov	r7, r0
     54e:	a802      	add	r0, sp, #8
     550:	f000 fb00 	bl	b54 <Vector<float>::as_array()>
     554:	4680      	mov	r8, r0
     556:	490e      	ldr	r1, [pc, #56]	; (590 <iterative_test(int, int)+0x78>)
     558:	a804      	add	r0, sp, #16
     55a:	f002 f92b 	bl	27b4 <String::String(char const*)>
     55e:	462b      	mov	r3, r5
     560:	aa04      	add	r2, sp, #16
     562:	4641      	mov	r1, r8
     564:	4638      	mov	r0, r7
     566:	f7ff ff6f 	bl	448 <int assert_eq<float>(float*, float*, String, int)>
     56a:	4406      	add	r6, r0
     56c:	a804      	add	r0, sp, #16
     56e:	f002 f8e1 	bl	2734 <String::~String()>
int iterative_test(int size, int depth) {
	int errors = 0;

	Vector<float> v1(size);
	for (int i = 0; i < depth; i++) {
		Vector<float> v2(size);
     572:	a802      	add	r0, sp, #8
     574:	f000 faa8 	bl	ac8 <Vector<float>::~Vector()>

int iterative_test(int size, int depth) {
	int errors = 0;

	Vector<float> v1(size);
	for (int i = 0; i < depth; i++) {
     578:	45a1      	cmp	r9, r4
     57a:	d1db      	bne.n	534 <iterative_test(int, int)+0x1c>
}

int iterative_test(int size, int depth) {
	int errors = 0;

	Vector<float> v1(size);
     57c:	4668      	mov	r0, sp
     57e:	f000 faa3 	bl	ac8 <Vector<float>::~Vector()>
		v1 = v2;
		errors += assert_eq<float>(v1.as_array(), v2.as_array(), "Vector iterative assign test", size);
	}

	return errors;
}
     582:	4630      	mov	r0, r6
     584:	b009      	add	sp, #36	; 0x24
     586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	return errors;
}

int iterative_test(int size, int depth) {
	int errors = 0;
     58a:	2600      	movs	r6, #0
     58c:	e7f6      	b.n	57c <iterative_test(int, int)+0x64>
     58e:	bf00      	nop
     590:	20000904 	.word	0x20000904

00000594 <int assert_neq<float>(float*, float, String, int)>:
	return 0;
}

template <typename T> int assert_neq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     594:	2a00      	cmp	r2, #0
		return 1;
	}
	return 0;
}

template <typename T> int assert_neq(T* a, T b, String message, int n) {
     596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     59a:	ed2d 8b02 	vpush	{d8}
     59e:	b091      	sub	sp, #68	; 0x44
	int errors = 0;
	for (int i = 0; i < n; i++) {
     5a0:	dd4d      	ble.n	63e <int assert_neq<float>(float*, float, String, int)+0xaa>
     5a2:	2400      	movs	r4, #0
     5a4:	4690      	mov	r8, r2
     5a6:	460f      	mov	r7, r1
     5a8:	eef0 8a40 	vmov.f32	s17, s0
     5ac:	4605      	mov	r5, r0
     5ae:	4626      	mov	r6, r4
     5b0:	e00c      	b.n	5cc <int assert_neq<float>(float*, float, String, int)+0x38>
		errors += assert_neq(a[i], b, message + " [" + String(i) + "]");
     5b2:	a80c      	add	r0, sp, #48	; 0x30
     5b4:	441e      	add	r6, r3
	return 0;
}

template <typename T> int assert_neq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     5b6:	3401      	adds	r4, #1
		errors += assert_neq(a[i], b, message + " [" + String(i) + "]");
     5b8:	f002 f8bc 	bl	2734 <String::~String()>
     5bc:	a808      	add	r0, sp, #32
     5be:	f002 f8b9 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     5c2:	a804      	add	r0, sp, #16
     5c4:	f002 f8b6 	bl	2734 <String::~String()>
	return 0;
}

template <typename T> int assert_neq(T* a, T b, String message, int n) {
	int errors = 0;
	for (int i = 0; i < n; i++) {
     5c8:	45a0      	cmp	r8, r4
     5ca:	d039      	beq.n	640 <int assert_neq<float>(float*, float, String, int)+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     5cc:	4639      	mov	r1, r7
     5ce:	a804      	add	r0, sp, #16
		errors += assert_neq(a[i], b, message + " [" + String(i) + "]");
     5d0:	ecb5 8a01 	vldmia	r5!, {s16}
     5d4:	f002 f902 	bl	27dc <String::String(String const&)>
     5d8:	491c      	ldr	r1, [pc, #112]	; (64c <int assert_neq<float>(float*, float, String, int)+0xb8>)
     5da:	a804      	add	r0, sp, #16
     5dc:	f002 f970 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     5e0:	4681      	mov	r9, r0
     5e2:	220a      	movs	r2, #10
     5e4:	4621      	mov	r1, r4
     5e6:	a808      	add	r0, sp, #32
     5e8:	f002 f916 	bl	2818 <String::String(int, unsigned char)>
     5ec:	a908      	add	r1, sp, #32
     5ee:	4648      	mov	r0, r9
     5f0:	f002 f95e 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     5f4:	4916      	ldr	r1, [pc, #88]	; (650 <int assert_neq<float>(float*, float, String, int)+0xbc>)
     5f6:	f002 f963 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     5fa:	4601      	mov	r1, r0
     5fc:	a80c      	add	r0, sp, #48	; 0x30
     5fe:	f002 f8ed 	bl	27dc <String::String(String const&)>
	}
	return errors;
}

template <typename T> int assert_neq(T a, T b, String message) {
	if (a == b) {
     602:	eeb4 8a68 	vcmp.f32	s16, s17
		TEST_INFO(message, "==", a, b);
		return 1;
	}
	return 0;
     606:	2300      	movs	r3, #0
	}
	return errors;
}

template <typename T> int assert_neq(T a, T b, String message) {
	if (a == b) {
     608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     60c:	d1d1      	bne.n	5b2 <int assert_neq<float>(float*, float, String, int)+0x1e>
     60e:	210c      	movs	r1, #12
     610:	4810      	ldr	r0, [pc, #64]	; (654 <int assert_neq<float>(float*, float, String, int)+0xc0>)
     612:	f001 ffa1 	bl	2558 <usb_seremu_write>
		TEST_INFO(message, "==", a, b);
     616:	a90c      	add	r1, sp, #48	; 0x30
     618:	480f      	ldr	r0, [pc, #60]	; (658 <int assert_neq<float>(float*, float, String, int)+0xc4>)
     61a:	f002 f82b 	bl	2674 <Print::print(String const&)>
     61e:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     622:	eeb7 6ac8 	vcvt.f64.f32	d6, s16
     626:	480d      	ldr	r0, [pc, #52]	; (65c <int assert_neq<float>(float*, float, String, int)+0xc8>)
     628:	490d      	ldr	r1, [pc, #52]	; (660 <int assert_neq<float>(float*, float, String, int)+0xcc>)
     62a:	9000      	str	r0, [sp, #0]
     62c:	480a      	ldr	r0, [pc, #40]	; (658 <int assert_neq<float>(float*, float, String, int)+0xc4>)
     62e:	ec53 2b16 	vmov	r2, r3, d6
     632:	ed8d 7b02 	vstr	d7, [sp, #8]
     636:	f002 f85b 	bl	26f0 <Print::printf(char const*, ...)>
     63a:	2301      	movs	r3, #1
     63c:	e7b9      	b.n	5b2 <int assert_neq<float>(float*, float, String, int)+0x1e>
	}
	return 0;
}

template <typename T> int assert_neq(T* a, T b, String message, int n) {
	int errors = 0;
     63e:	2600      	movs	r6, #0
	for (int i = 0; i < n; i++) {
		errors += assert_neq(a[i], b, message + " [" + String(i) + "]");
	}
	return errors;
}
     640:	4630      	mov	r0, r6
     642:	b011      	add	sp, #68	; 0x44
     644:	ecbd 8b02 	vpop	{d8}
     648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     64c:	20000900 	.word	0x20000900
     650:	20000878 	.word	0x20000878
     654:	2000082c 	.word	0x2000082c
     658:	20000fc4 	.word	0x20000fc4
     65c:	20000924 	.word	0x20000924
     660:	2000083c 	.word	0x2000083c

00000664 <assign_operator_test(Vector<float>, Vector<float>)>:
// 	Serial.print("Post-Fill    \t"); data.print();
// 	data.clear();
// 	Serial.print("Post-Clear\t"); data.print();
// }

int assign_operator_test(Vector<float> v1, Vector<float> v2) {
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	4606      	mov	r6, r0
     668:	460d      	mov	r5, r1
     66a:	ed2d 8b02 	vpush	{d8}
     66e:	b085      	sub	sp, #20

	v1 = v2;
	errors += assert_eq<float>(v1.as_array(), v2.as_array(), "Vector Assign test", v1.size());

	v2.reset(0);
	errors += assert_neq<float>(v1.as_array(), 0.0f, "Vector Assign and No Clear test", v1.size());
     670:	ed9f 8a28 	vldr	s16, [pc, #160]	; 714 <assign_operator_test(Vector<float>, Vector<float>)+0xb0>
// }

int assign_operator_test(Vector<float> v1, Vector<float> v2) {
	int errors = 0;

	v1 = v2;
     674:	f000 fabe 	bl	bf4 <Vector<float>::operator=(Vector<float>&)>
	errors += assert_eq<float>(v1.as_array(), v2.as_array(), "Vector Assign test", v1.size());
     678:	4630      	mov	r0, r6
     67a:	f000 fa6b 	bl	b54 <Vector<float>::as_array()>
     67e:	4604      	mov	r4, r0
     680:	4628      	mov	r0, r5
     682:	f000 fa67 	bl	b54 <Vector<float>::as_array()>
     686:	4924      	ldr	r1, [pc, #144]	; (718 <assign_operator_test(Vector<float>, Vector<float>)+0xb4>)
     688:	4607      	mov	r7, r0
     68a:	4668      	mov	r0, sp
     68c:	f002 f892 	bl	27b4 <String::String(char const*)>
     690:	4630      	mov	r0, r6
     692:	f000 fa5d 	bl	b50 <Vector<float>::size()>
     696:	466a      	mov	r2, sp
     698:	4603      	mov	r3, r0
     69a:	4639      	mov	r1, r7
     69c:	4620      	mov	r0, r4
     69e:	f7ff fed3 	bl	448 <int assert_eq<float>(float*, float*, String, int)>
     6a2:	4604      	mov	r4, r0
     6a4:	4668      	mov	r0, sp
     6a6:	f002 f845 	bl	2734 <String::~String()>

	v2.reset(0);
     6aa:	4628      	mov	r0, r5
     6ac:	2100      	movs	r1, #0
     6ae:	f000 fa2b 	bl	b08 <Vector<float>::reset(int)>
	errors += assert_neq<float>(v1.as_array(), 0.0f, "Vector Assign and No Clear test", v1.size());
     6b2:	4630      	mov	r0, r6
     6b4:	f000 fa4e 	bl	b54 <Vector<float>::as_array()>
     6b8:	4918      	ldr	r1, [pc, #96]	; (71c <assign_operator_test(Vector<float>, Vector<float>)+0xb8>)
     6ba:	4607      	mov	r7, r0
     6bc:	4668      	mov	r0, sp
     6be:	f002 f879 	bl	27b4 <String::String(char const*)>
     6c2:	4630      	mov	r0, r6
     6c4:	f000 fa44 	bl	b50 <Vector<float>::size()>
     6c8:	eeb0 0a48 	vmov.f32	s0, s16
     6cc:	4602      	mov	r2, r0
     6ce:	4669      	mov	r1, sp
     6d0:	4638      	mov	r0, r7
     6d2:	f7ff ff5f 	bl	594 <int assert_neq<float>(float*, float, String, int)>
     6d6:	4404      	add	r4, r0
     6d8:	4668      	mov	r0, sp
     6da:	f002 f82b 	bl	2734 <String::~String()>
	errors += assert_eq<float>(v2.as_array(), 0.0f, "Vector Assign and Clear test", v2.size());
     6de:	4628      	mov	r0, r5
     6e0:	f000 fa38 	bl	b54 <Vector<float>::as_array()>
     6e4:	490e      	ldr	r1, [pc, #56]	; (720 <assign_operator_test(Vector<float>, Vector<float>)+0xbc>)
     6e6:	4606      	mov	r6, r0
     6e8:	4668      	mov	r0, sp
     6ea:	f002 f863 	bl	27b4 <String::String(char const*)>
     6ee:	4628      	mov	r0, r5
     6f0:	f000 fa2e 	bl	b50 <Vector<float>::size()>
     6f4:	4669      	mov	r1, sp
     6f6:	4602      	mov	r2, r0
     6f8:	eeb0 0a48 	vmov.f32	s0, s16
     6fc:	4630      	mov	r0, r6
     6fe:	f7ff fd03 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     702:	4404      	add	r4, r0
     704:	4668      	mov	r0, sp
     706:	f002 f815 	bl	2734 <String::~String()>
	return errors;
}
     70a:	4620      	mov	r0, r4
     70c:	b005      	add	sp, #20
     70e:	ecbd 8b02 	vpop	{d8}
     712:	bdf0      	pop	{r4, r5, r6, r7, pc}
     714:	00000000 	.word	0x00000000
     718:	20000928 	.word	0x20000928
     71c:	2000093c 	.word	0x2000093c
     720:	2000095c 	.word	0x2000095c
     724:	00000000 	.word	0x00000000

00000728 <append_test(Vector<float>)>:

	data.reset(target_length);
	return assert_eq<float>(data.as_array(), 0.0f, "Vector Reset test", target_length);
}

int append_test(Vector<float> v1) {
     728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     72c:	ed2d 8b04 	vpush	{d8-d9}
     730:	b091      	sub	sp, #68	; 0x44
     732:	4681      	mov	r9, r0
     734:	af00      	add	r7, sp, #0
	int errors = 0;
	int og_length = v1.size();
     736:	f000 fa0b 	bl	b50 <Vector<float>::size()>
     73a:	4682      	mov	sl, r0
	float slice1[og_length];
	float slice2[og_length];

	Vector<float> v2 = incremental_vector_fill(v1.size());
     73c:	4648      	mov	r0, r9
}

int append_test(Vector<float> v1) {
	int errors = 0;
	int og_length = v1.size();
	float slice1[og_length];
     73e:	ea4f 038a 	mov.w	r3, sl, lsl #2
     742:	330a      	adds	r3, #10
     744:	f023 0307 	bic.w	r3, r3, #7
     748:	ebad 0d03 	sub.w	sp, sp, r3
     74c:	f8c7 d004 	str.w	sp, [r7, #4]
	float slice2[og_length];
     750:	ebad 0d03 	sub.w	sp, sp, r3

	Vector<float> v2 = incremental_vector_fill(v1.size());
     754:	f000 f9fc 	bl	b50 <Vector<float>::size()>
     758:	4601      	mov	r1, r0
     75a:	f107 0008 	add.w	r0, r7, #8

int append_test(Vector<float> v1) {
	int errors = 0;
	int og_length = v1.size();
	float slice1[og_length];
	float slice2[og_length];
     75e:	46eb      	mov	fp, sp

	Vector<float> v2 = incremental_vector_fill(v1.size());
     760:	f7ff fcba 	bl	d8 <incremental_vector_fill(int)>

	v1.append(&v2);
     764:	f107 0108 	add.w	r1, r7, #8
     768:	4648      	mov	r0, r9
     76a:	f000 f9f5 	bl	b58 <Vector<float>::append(Vector<float>*)>

	for (int i = 0; i < og_length; i++) {
     76e:	f1ba 0f00 	cmp.w	sl, #0
     772:	dd47      	ble.n	804 <append_test(Vector<float>)+0xdc>
     774:	2600      	movs	r6, #0
     776:	f107 0520 	add.w	r5, r7, #32
     77a:	f107 0410 	add.w	r4, r7, #16
     77e:	f107 0830 	add.w	r8, r7, #48	; 0x30
// int assert_not_nan(float*, String);

// void timer_print(uint32_t, String);

template <typename T> int assert_eq(T a, T b, String message) {
	if (abs(a - b) > 1E-20) {
     782:	ed9f 9b85 	vldr	d9, [pc, #532]	; 998 <append_test(Vector<float>)+0x270>
     786:	e00a      	b.n	79e <append_test(Vector<float>)+0x76>
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
     788:	4640      	mov	r0, r8
     78a:	f001 ffd3 	bl	2734 <String::~String()>
     78e:	4620      	mov	r0, r4
     790:	f001 ffd0 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     794:	4628      	mov	r0, r5
     796:	f001 ffcd 	bl	2734 <String::~String()>

	Vector<float> v2 = incremental_vector_fill(v1.size());

	v1.append(&v2);

	for (int i = 0; i < og_length; i++) {
     79a:	45b2      	cmp	sl, r6
     79c:	d034      	beq.n	808 <append_test(Vector<float>)+0xe0>
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
     79e:	4631      	mov	r1, r6
     7a0:	4648      	mov	r0, r9
     7a2:	f000 fa19 	bl	bd8 <Vector<float>::operator[](int)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     7a6:	497e      	ldr	r1, [pc, #504]	; (9a0 <append_test(Vector<float>)+0x278>)
     7a8:	ed90 8a00 	vldr	s16, [r0]
     7ac:	4628      	mov	r0, r5
     7ae:	f002 f801 	bl	27b4 <String::String(char const*)>
     7b2:	220a      	movs	r2, #10
     7b4:	4631      	mov	r1, r6
     7b6:	4620      	mov	r0, r4
     7b8:	f002 f82e 	bl	2818 <String::String(int, unsigned char)>
     7bc:	4621      	mov	r1, r4
     7be:	4628      	mov	r0, r5

	Vector<float> v2 = incremental_vector_fill(v1.size());

	v1.append(&v2);

	for (int i = 0; i < og_length; i++) {
     7c0:	3601      	adds	r6, #1
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
     7c2:	f002 f875 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     7c6:	4977      	ldr	r1, [pc, #476]	; (9a4 <append_test(Vector<float>)+0x27c>)
     7c8:	f002 f87a 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     7cc:	4601      	mov	r1, r0
     7ce:	4640      	mov	r0, r8
     7d0:	f002 f804 	bl	27dc <String::String(String const&)>
     7d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     7d8:	eeb0 7a48 	vmov.f32	s14, s16
     7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7e0:	bfd8      	it	le
     7e2:	eeb1 7a48 	vnegle.f32	s14, s16
     7e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     7ea:	eeb4 7bc9 	vcmpe.f64	d7, d9
     7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7f2:	ddc9      	ble.n	788 <append_test(Vector<float>)+0x60>
     7f4:	eeb0 0a48 	vmov.f32	s0, s16
     7f8:	4640      	mov	r0, r8
     7fa:	eddf 0a6b 	vldr	s1, [pc, #428]	; 9a8 <append_test(Vector<float>)+0x280>
     7fe:	f7ff fc3d 	bl	7c <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]>
     802:	e7c1      	b.n	788 <append_test(Vector<float>)+0x60>
     804:	f107 0830 	add.w	r8, r7, #48	; 0x30
     808:	2600      	movs	r6, #0
     80a:	ed9f 9b63 	vldr	d9, [pc, #396]	; 998 <append_test(Vector<float>)+0x270>
     80e:	e008      	b.n	822 <append_test(Vector<float>)+0xfa>
	}
	for (int i = 0; i < v2.size(); i++) {
		assert_eq<float>(v1[i+og_length], v2[i], "Vector append test [" + String(i) + "]");
     810:	4640      	mov	r0, r8
     812:	f001 ff8f 	bl	2734 <String::~String()>
     816:	4620      	mov	r0, r4
     818:	f001 ff8c 	bl	2734 <String::~String()>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     81c:	4628      	mov	r0, r5
     81e:	f001 ff89 	bl	2734 <String::~String()>
	v1.append(&v2);

	for (int i = 0; i < og_length; i++) {
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
	}
	for (int i = 0; i < v2.size(); i++) {
     822:	f107 0008 	add.w	r0, r7, #8
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     826:	f107 0520 	add.w	r5, r7, #32
     82a:	f000 f991 	bl	b50 <Vector<float>::size()>
     82e:	4286      	cmp	r6, r0
		assert_eq<float>(v1[i+og_length], v2[i], "Vector append test [" + String(i) + "]");
     830:	f107 0410 	add.w	r4, r7, #16
     834:	eb0a 0106 	add.w	r1, sl, r6
     838:	4648      	mov	r0, r9
	v1.append(&v2);

	for (int i = 0; i < og_length; i++) {
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
	}
	for (int i = 0; i < v2.size(); i++) {
     83a:	da39      	bge.n	8b0 <append_test(Vector<float>)+0x188>
		assert_eq<float>(v1[i+og_length], v2[i], "Vector append test [" + String(i) + "]");
     83c:	f000 f9cc 	bl	bd8 <Vector<float>::operator[](int)>
     840:	4631      	mov	r1, r6
     842:	ed90 8a00 	vldr	s16, [r0]
     846:	f107 0008 	add.w	r0, r7, #8
     84a:	f000 f9c5 	bl	bd8 <Vector<float>::operator[](int)>
     84e:	4954      	ldr	r1, [pc, #336]	; (9a0 <append_test(Vector<float>)+0x278>)
     850:	edd0 8a00 	vldr	s17, [r0]
     854:	4628      	mov	r0, r5
     856:	f001 ffad 	bl	27b4 <String::String(char const*)>
     85a:	220a      	movs	r2, #10
     85c:	4631      	mov	r1, r6
     85e:	4620      	mov	r0, r4
     860:	f001 ffda 	bl	2818 <String::String(int, unsigned char)>
     864:	4621      	mov	r1, r4
     866:	4628      	mov	r0, r5
	v1.append(&v2);

	for (int i = 0; i < og_length; i++) {
		assert_eq<float>(v1[i], 0.0f, "Vector append test [" + String(i) + "]");
	}
	for (int i = 0; i < v2.size(); i++) {
     868:	3601      	adds	r6, #1
		assert_eq<float>(v1[i+og_length], v2[i], "Vector append test [" + String(i) + "]");
     86a:	f002 f821 	bl	28b0 <operator+(StringSumHelper const&, String const&)>
     86e:	494d      	ldr	r1, [pc, #308]	; (9a4 <append_test(Vector<float>)+0x27c>)
     870:	f002 f826 	bl	28c0 <operator+(StringSumHelper const&, char const*)>
     874:	4601      	mov	r1, r0
     876:	4640      	mov	r0, r8
     878:	f001 ffb0 	bl	27dc <String::String(String const&)>
     87c:	ee78 7a68 	vsub.f32	s15, s16, s17
     880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     884:	eeb0 7a67 	vmov.f32	s14, s15
     888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     88c:	bfd8      	it	le
     88e:	eeb1 7a67 	vnegle.f32	s14, s15
     892:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     896:	eeb4 7bc9 	vcmpe.f64	d7, d9
     89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     89e:	ddb7      	ble.n	810 <append_test(Vector<float>)+0xe8>
     8a0:	eef0 0a68 	vmov.f32	s1, s17
     8a4:	4640      	mov	r0, r8
     8a6:	eeb0 0a48 	vmov.f32	s0, s16
     8aa:	f7ff fbe7 	bl	7c <int assert_eq<float>(float, float, String) [clone .part.1] [clone .constprop.4]>
     8ae:	e7af      	b.n	810 <append_test(Vector<float>)+0xe8>
	}

	v1.slice(slice1, 0, og_length);
     8b0:	687c      	ldr	r4, [r7, #4]
     8b2:	4653      	mov	r3, sl
     8b4:	2200      	movs	r2, #0
     8b6:	4648      	mov	r0, r9
     8b8:	4621      	mov	r1, r4
     8ba:	f000 f977 	bl	bac <Vector<float>::slice(float*, int, int)>
	v1.slice(slice2, og_length, v2.size());
     8be:	f107 0008 	add.w	r0, r7, #8
     8c2:	f000 f945 	bl	b50 <Vector<float>::size()>
     8c6:	4652      	mov	r2, sl
     8c8:	4603      	mov	r3, r0
     8ca:	4659      	mov	r1, fp
     8cc:	4648      	mov	r0, r9
     8ce:	f000 f96d 	bl	bac <Vector<float>::slice(float*, int, int)>
	errors += assert_eq<float>(slice1, 0.0f, "Vector append and slice1 test", og_length);
     8d2:	4936      	ldr	r1, [pc, #216]	; (9ac <append_test(Vector<float>)+0x284>)
     8d4:	4640      	mov	r0, r8
     8d6:	f001 ff6d 	bl	27b4 <String::String(char const*)>
     8da:	ed9f 0a33 	vldr	s0, [pc, #204]	; 9a8 <append_test(Vector<float>)+0x280>
     8de:	4652      	mov	r2, sl
     8e0:	4641      	mov	r1, r8
     8e2:	4620      	mov	r0, r4
     8e4:	f7ff fc10 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     8e8:	4604      	mov	r4, r0
     8ea:	4640      	mov	r0, r8
     8ec:	f001 ff22 	bl	2734 <String::~String()>
	errors += assert_eq<float>(v2.as_array(), slice2, "Vector append and slice2 test", v2.size());
     8f0:	f107 0008 	add.w	r0, r7, #8
     8f4:	f000 f92e 	bl	b54 <Vector<float>::as_array()>
     8f8:	492d      	ldr	r1, [pc, #180]	; (9b0 <append_test(Vector<float>)+0x288>)
     8fa:	4605      	mov	r5, r0
     8fc:	4640      	mov	r0, r8
     8fe:	f001 ff59 	bl	27b4 <String::String(char const*)>
     902:	f107 0008 	add.w	r0, r7, #8
     906:	f000 f923 	bl	b50 <Vector<float>::size()>
     90a:	4642      	mov	r2, r8
     90c:	4603      	mov	r3, r0
     90e:	4659      	mov	r1, fp
     910:	4628      	mov	r0, r5
     912:	f7ff fd99 	bl	448 <int assert_eq<float>(float*, float*, String, int)>
     916:	4404      	add	r4, r0
     918:	4640      	mov	r0, r8
     91a:	f001 ff0b 	bl	2734 <String::~String()>

	v1.clear();
     91e:	4648      	mov	r0, r9
     920:	f000 f8da 	bl	ad8 <Vector<float>::clear()>
	errors += assert_eq<float>(v1.as_array(), 0.0f, "Vector Clear test", v1.size());
     924:	4648      	mov	r0, r9
     926:	f000 f915 	bl	b54 <Vector<float>::as_array()>
     92a:	4922      	ldr	r1, [pc, #136]	; (9b4 <append_test(Vector<float>)+0x28c>)
     92c:	4605      	mov	r5, r0
     92e:	4640      	mov	r0, r8
     930:	f001 ff40 	bl	27b4 <String::String(char const*)>
     934:	4648      	mov	r0, r9
     936:	f000 f90b 	bl	b50 <Vector<float>::size()>
     93a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 9a8 <append_test(Vector<float>)+0x280>
     93e:	4602      	mov	r2, r0
     940:	4641      	mov	r1, r8
     942:	4628      	mov	r0, r5
     944:	f7ff fbe0 	bl	108 <int assert_eq<float>(float*, float, String, int)>
     948:	4404      	add	r4, r0
     94a:	4640      	mov	r0, r8
     94c:	f001 fef2 	bl	2734 <String::~String()>
	errors += assert_neq<float>(v2.as_array(), 0.0f, "Vector Append and No Clear test", v2.size());
     950:	f107 0008 	add.w	r0, r7, #8
     954:	f000 f8fe 	bl	b54 <Vector<float>::as_array()>
     958:	4917      	ldr	r1, [pc, #92]	; (9b8 <append_test(Vector<float>)+0x290>)
     95a:	4605      	mov	r5, r0
     95c:	4640      	mov	r0, r8
     95e:	f001 ff29 	bl	27b4 <String::String(char const*)>
     962:	f107 0008 	add.w	r0, r7, #8
     966:	f000 f8f3 	bl	b50 <Vector<float>::size()>
     96a:	4641      	mov	r1, r8
     96c:	4602      	mov	r2, r0
     96e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 9a8 <append_test(Vector<float>)+0x280>
     972:	4628      	mov	r0, r5
     974:	f7ff fe0e 	bl	594 <int assert_neq<float>(float*, float, String, int)>
     978:	4404      	add	r4, r0
     97a:	4640      	mov	r0, r8
     97c:	f001 feda 	bl	2734 <String::~String()>
	int errors = 0;
	int og_length = v1.size();
	float slice1[og_length];
	float slice2[og_length];

	Vector<float> v2 = incremental_vector_fill(v1.size());
     980:	f107 0008 	add.w	r0, r7, #8
     984:	f000 f8a0 	bl	ac8 <Vector<float>::~Vector()>
	v1.clear();
	errors += assert_eq<float>(v1.as_array(), 0.0f, "Vector Clear test", v1.size());
	errors += assert_neq<float>(v2.as_array(), 0.0f, "Vector Append and No Clear test", v2.size());

	return errors;
}
     988:	4620      	mov	r0, r4
     98a:	3744      	adds	r7, #68	; 0x44
     98c:	46bd      	mov	sp, r7
     98e:	ecbd 8b04 	vpop	{d8-d9}
     992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     996:	bf00      	nop
     998:	0c924223 	.word	0x0c924223
     99c:	3bc79ca1 	.word	0x3bc79ca1
     9a0:	2000097c 	.word	0x2000097c
     9a4:	20000878 	.word	0x20000878
     9a8:	00000000 	.word	0x00000000
     9ac:	20000994 	.word	0x20000994
     9b0:	200009b4 	.word	0x200009b4
     9b4:	200009d4 	.word	0x200009d4
     9b8:	200009e8 	.word	0x200009e8

000009bc <main>:
	Vector<float> v(9);
	v.from_array(tmp, 9);
	return v;
}

int main() {
     9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9be:	4c31      	ldr	r4, [pc, #196]	; (a84 <main+0xc8>)
     9c0:	b087      	sub	sp, #28
     9c2:	4d31      	ldr	r5, [pc, #196]	; (a88 <main+0xcc>)
	setup_blink();
     9c4:	f000 f868 	bl	a98 <setup_blink()>
        uint8_t stopbits(void) { return 1; }
        uint8_t paritytype(void) { return 0; }
        uint8_t numbits(void) { return 8; }
        uint8_t dtr(void) { return 1; }
        uint8_t rts(void) { return 1; }
        operator bool() { yield(); return usb_configuration && usb_seremu_online; }
     9c8:	f001 ffba 	bl	2940 <yield>
     9cc:	7823      	ldrb	r3, [r4, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d0fa      	beq.n	9c8 <main+0xc>
     9d2:	782b      	ldrb	r3, [r5, #0]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d0f7      	beq.n	9c8 <main+0xc>
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
     9d8:	211d      	movs	r1, #29
     9da:	482c      	ldr	r0, [pc, #176]	; (a8c <main+0xd0>)
     9dc:	f001 fdbc 	bl	2558 <usb_seremu_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     9e0:	482b      	ldr	r0, [pc, #172]	; (a90 <main+0xd4>)
	int n = 5;
	int total_errors = 0;
	total_errors += index_operator_test(n);

	Vector<float> v = incremental_vector_fill(n);
	total_errors += assign_operator_test(Vector<float>(n), v);
     9e2:	ae02      	add	r6, sp, #8
     9e4:	f001 fe6c 	bl	26c0 <Print::println()>

	Serial.println("=== Starting Vector tests ===");

	int n = 5;
	int total_errors = 0;
	total_errors += index_operator_test(n);
     9e8:	2005      	movs	r0, #5

	Vector<float> v = incremental_vector_fill(n);
	total_errors += assign_operator_test(Vector<float>(n), v);
     9ea:	ac04      	add	r4, sp, #16

	Serial.println("=== Starting Vector tests ===");

	int n = 5;
	int total_errors = 0;
	total_errors += index_operator_test(n);
     9ec:	f7ff fbf0 	bl	1d0 <index_operator_test(int)>

	Vector<float> v = incremental_vector_fill(n);
     9f0:	2105      	movs	r1, #5

	Serial.println("=== Starting Vector tests ===");

	int n = 5;
	int total_errors = 0;
	total_errors += index_operator_test(n);
     9f2:	4605      	mov	r5, r0

	Vector<float> v = incremental_vector_fill(n);
     9f4:	4668      	mov	r0, sp
     9f6:	f7ff fb6f 	bl	d8 <incremental_vector_fill(int)>
	total_errors += assign_operator_test(Vector<float>(n), v);
     9fa:	4630      	mov	r0, r6
     9fc:	2105      	movs	r1, #5
     9fe:	f000 f871 	bl	ae4 <Vector<float>::Vector(int)>
     a02:	e89d 0003 	ldmia.w	sp, {r0, r1}
     a06:	e884 0003 	stmia.w	r4, {r0, r1}
     a0a:	4621      	mov	r1, r4
     a0c:	4630      	mov	r0, r6
     a0e:	f7ff fe29 	bl	664 <assign_operator_test(Vector<float>, Vector<float>)>
     a12:	4405      	add	r5, r0
     a14:	4620      	mov	r0, r4
     a16:	f000 f857 	bl	ac8 <Vector<float>::~Vector()>
     a1a:	4630      	mov	r0, r6
     a1c:	f000 f854 	bl	ac8 <Vector<float>::~Vector()>

	total_errors += reset_and_fill_test(n);
     a20:	2005      	movs	r0, #5
     a22:	f7ff fc5d 	bl	2e0 <reset_and_fill_test(int)>

	Vector<float> v2(n);
     a26:	2105      	movs	r1, #5
	total_errors += index_operator_test(n);

	Vector<float> v = incremental_vector_fill(n);
	total_errors += assign_operator_test(Vector<float>(n), v);

	total_errors += reset_and_fill_test(n);
     a28:	4405      	add	r5, r0

	Vector<float> v2(n);
     a2a:	4630      	mov	r0, r6
     a2c:	f000 f85a 	bl	ae4 <Vector<float>::Vector(int)>
	total_errors += append_test(v2);
     a30:	e896 0003 	ldmia.w	r6, {r0, r1}
     a34:	e884 0003 	stmia.w	r4, {r0, r1}
     a38:	4620      	mov	r0, r4
     a3a:	f7ff fe75 	bl	728 <append_test(Vector<float>)>
     a3e:	4405      	add	r5, r0
     a40:	4620      	mov	r0, r4
     a42:	f000 f841 	bl	ac8 <Vector<float>::~Vector()>

	total_errors += iterative_test(100, 100);
     a46:	2164      	movs	r1, #100	; 0x64
     a48:	4608      	mov	r0, r1
     a4a:	f7ff fd65 	bl	518 <iterative_test(int, int)>

	Vector<float> data(0);
     a4e:	2100      	movs	r1, #0
	total_errors += reset_and_fill_test(n);

	Vector<float> v2(n);
	total_errors += append_test(v2);

	total_errors += iterative_test(100, 100);
     a50:	4405      	add	r5, r0

	Vector<float> data(0);
     a52:	4620      	mov	r0, r4
     a54:	f000 f846 	bl	ae4 <Vector<float>::Vector(int)>
	total_errors += recursive_test(&data, 10, 100);
     a58:	4620      	mov	r0, r4
     a5a:	2264      	movs	r2, #100	; 0x64
     a5c:	210a      	movs	r1, #10
     a5e:	f7ff fc67 	bl	330 <recursive_test(Vector<float>*, int, int)>

	Serial.printf("=== Finished Vector tests with %i errors ===\n", total_errors);
     a62:	490c      	ldr	r1, [pc, #48]	; (a94 <main+0xd8>)
     a64:	182a      	adds	r2, r5, r0
     a66:	480a      	ldr	r0, [pc, #40]	; (a90 <main+0xd4>)
     a68:	f001 fe42 	bl	26f0 <Print::printf(char const*, ...)>
	Vector<float> v2(n);
	total_errors += append_test(v2);

	total_errors += iterative_test(100, 100);

	Vector<float> data(0);
     a6c:	4620      	mov	r0, r4
     a6e:	f000 f82b 	bl	ac8 <Vector<float>::~Vector()>
	Vector<float> v = incremental_vector_fill(n);
	total_errors += assign_operator_test(Vector<float>(n), v);

	total_errors += reset_and_fill_test(n);

	Vector<float> v2(n);
     a72:	4630      	mov	r0, r6
     a74:	f000 f828 	bl	ac8 <Vector<float>::~Vector()>

	int n = 5;
	int total_errors = 0;
	total_errors += index_operator_test(n);

	Vector<float> v = incremental_vector_fill(n);
     a78:	4668      	mov	r0, sp
     a7a:	f000 f825 	bl	ac8 <Vector<float>::~Vector()>

	Vector<float> data(0);
	total_errors += recursive_test(&data, 10, 100);

	Serial.printf("=== Finished Vector tests with %i errors ===\n", total_errors);
     a7e:	2000      	movs	r0, #0
     a80:	b007      	add	sp, #28
     a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a84:	20001f61 	.word	0x20001f61
     a88:	20001f64 	.word	0x20001f64
     a8c:	20000a08 	.word	0x20000a08
     a90:	20000fc4 	.word	0x20000fc4
     a94:	20000a28 	.word	0x20000a28

00000a98 <setup_blink()>:
bool blinker_status;

/*
	Easy use blinker implementation
*/
void setup_blink() {
     a98:	b510      	push	{r4, lr}
	// Hardware setup
	blinker_status = false;
     a9a:	2200      	movs	r2, #0
     a9c:	4c07      	ldr	r4, [pc, #28]	; (abc <setup_blink()+0x24>)
	blinker_timer_mark = ARM_DWT_CYCCNT;
     a9e:	4b08      	ldr	r3, [pc, #32]	; (ac0 <setup_blink()+0x28>)

	pinMode(BLINK_PIN, OUTPUT);
     aa0:	2101      	movs	r1, #1
/*
	Easy use blinker implementation
*/
void setup_blink() {
	// Hardware setup
	blinker_status = false;
     aa2:	7022      	strb	r2, [r4, #0]
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
     aa4:	200d      	movs	r0, #13
	Easy use blinker implementation
*/
void setup_blink() {
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;
     aa6:	681a      	ldr	r2, [r3, #0]
     aa8:	4b06      	ldr	r3, [pc, #24]	; (ac4 <setup_blink()+0x2c>)
     aaa:	601a      	str	r2, [r3, #0]

	pinMode(BLINK_PIN, OUTPUT);
     aac:	f000 faa6 	bl	ffc <pinMode>
	digitalWrite(BLINK_PIN, blinker_status);
     ab0:	7821      	ldrb	r1, [r4, #0]
     ab2:	200d      	movs	r0, #13
}
     ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Hardware setup
	blinker_status = false;
	blinker_timer_mark = ARM_DWT_CYCCNT;

	pinMode(BLINK_PIN, OUTPUT);
	digitalWrite(BLINK_PIN, blinker_status);
     ab8:	f000 ba9a 	b.w	ff0 <digitalWrite>
     abc:	20001f55 	.word	0x20001f55
     ac0:	e0001004 	.word	0xe0001004
     ac4:	20001ee8 	.word	0x20001ee8

00000ac8 <Vector<float>::~Vector()>:
template <typename T> Vector<T>::Vector() {
	length = 0;
	buffer = NULL;
}

template <typename T> Vector<T>::~Vector() {
     ac8:	b510      	push	{r4, lr}
     aca:	4604      	mov	r4, r0
	delete buffer;
     acc:	2104      	movs	r1, #4
     ace:	6840      	ldr	r0, [r0, #4]
     ad0:	f001 ff20 	bl	2914 <operator delete(void*, unsigned int)>
}
     ad4:	4620      	mov	r0, r4
     ad6:	bd10      	pop	{r4, pc}

00000ad8 <Vector<float>::clear()>:

template <typename T> void Vector<T>::clear() {
	/*
		  Clear data in the buffer (set to 0).
	*/
	memset(buffer, 0, length * sizeof(T));
     ad8:	6802      	ldr	r2, [r0, #0]
     ada:	2100      	movs	r1, #0
     adc:	6840      	ldr	r0, [r0, #4]
     ade:	0092      	lsls	r2, r2, #2
     ae0:	f002 bd72 	b.w	35c8 <memset>

00000ae4 <Vector<float>::Vector(int)>:
		  Constructor for Vector with length = size.
		@param:
			size: (int) length of the buffer with type T
	*/
	length = size;
	buffer = new T[size];
     ae4:	f1b1 5ffe 	cmp.w	r1, #532676608	; 0x1fc00000

template <typename T> Vector<T>::~Vector() {
	delete buffer;
}

template <typename T> Vector<T>::Vector(int size) {
     ae8:	b510      	push	{r4, lr}
     aea:	4604      	mov	r4, r0
	/*
		  Constructor for Vector with length = size.
		@param:
			size: (int) length of the buffer with type T
	*/
	length = size;
     aec:	6001      	str	r1, [r0, #0]
	buffer = new T[size];
     aee:	bf94      	ite	ls
     af0:	0088      	lslls	r0, r1, #2
     af2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
     af6:	f001 ff0b 	bl	2910 <operator new[](unsigned int)>
     afa:	6060      	str	r0, [r4, #4]
	clear();
     afc:	4620      	mov	r0, r4
     afe:	f7ff ffeb 	bl	ad8 <Vector<float>::clear()>
}
     b02:	4620      	mov	r0, r4
     b04:	bd10      	pop	{r4, pc}
     b06:	bf00      	nop

00000b08 <Vector<float>::reset(int)>:
	memcpy(tmp, buffer, length * sizeof(T));
	tmp[length] = item;
	from_array(tmp, length+1);
}

template <typename T> void Vector<T>::reset(int size) {
     b08:	b538      	push	{r3, r4, r5, lr}
     b0a:	4605      	mov	r5, r0
		  Resize buffer and set data to zero.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
     b0c:	6840      	ldr	r0, [r0, #4]
	memcpy(tmp, buffer, length * sizeof(T));
	tmp[length] = item;
	from_array(tmp, length+1);
}

template <typename T> void Vector<T>::reset(int size) {
     b0e:	460c      	mov	r4, r1
		  Resize buffer and set data to zero.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
     b10:	b110      	cbz	r0, b18 <Vector<float>::reset(int)+0x10>
		delete buffer;
     b12:	2104      	movs	r1, #4
     b14:	f001 fefe 	bl	2914 <operator delete(void*, unsigned int)>
	}
	length = size;
	buffer = new T[size];
     b18:	f1b4 5ffe 	cmp.w	r4, #532676608	; 0x1fc00000
			size: (int) length of the buffer with type T
	*/
	if (buffer != NULL) {
		delete buffer;
	}
	length = size;
     b1c:	602c      	str	r4, [r5, #0]
	buffer = new T[size];
     b1e:	bf94      	ite	ls
     b20:	00a0      	lslls	r0, r4, #2
     b22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
     b26:	f001 fef3 	bl	2910 <operator new[](unsigned int)>
     b2a:	6068      	str	r0, [r5, #4]
	clear();
     b2c:	4628      	mov	r0, r5
     b2e:	f7ff ffd3 	bl	ad8 <Vector<float>::clear()>
     b32:	bd38      	pop	{r3, r4, r5, pc}

00000b34 <Vector<float>::from_array(float*, int)>:
}

template <typename T> void Vector<T>::from_array(T* data, int size) {
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	4614      	mov	r4, r2
     b38:	460e      	mov	r6, r1
     b3a:	4605      	mov	r5, r0
		  reset the buffer to size n with data T*.
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	reset(size);
     b3c:	4611      	mov	r1, r2
     b3e:	f7ff ffe3 	bl	b08 <Vector<float>::reset(int)>
	memcpy(buffer, data, size * sizeof(T));
     b42:	4631      	mov	r1, r6
     b44:	00a2      	lsls	r2, r4, #2
     b46:	6868      	ldr	r0, [r5, #4]
}
     b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		@param:
			data: (T*) data to fill buffer with
			size: (int) length of the buffer with type T
	*/
	reset(size);
	memcpy(buffer, data, size * sizeof(T));
     b4c:	f002 bc3e 	b.w	33cc <memcpy>

00000b50 <Vector<float>::size()>:
		  Get the size of buffer (not necessarily elements available)
		@return
			length: (int) size of buffer
	*/
	return length;
}
     b50:	6800      	ldr	r0, [r0, #0]
     b52:	4770      	bx	lr

00000b54 <Vector<float>::as_array()>:
	return -1;
}

template <typename T> T* Vector<T>::as_array() {
	return buffer;
}
     b54:	6840      	ldr	r0, [r0, #4]
     b56:	4770      	bx	lr

00000b58 <Vector<float>::append(Vector<float>*)>:
	}
	// memcpy(buffer, tmp1, n * sizeof(T));
	// memcpy(&buffer[n], tmp2, m * sizeof(T));
}

template <typename T> void Vector<T>::append(Vector<T>* data) {
     b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		  Add n values to the buffer. Stores the current buffer and
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = length;
     b5c:	f8d0 8000 	ldr.w	r8, [r0]
	}
	// memcpy(buffer, tmp1, n * sizeof(T));
	// memcpy(&buffer[n], tmp2, m * sizeof(T));
}

template <typename T> void Vector<T>::append(Vector<T>* data) {
     b60:	af00      	add	r7, sp, #0
     b62:	4604      	mov	r4, r0
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = length;
	int m = data->size();
     b64:	4608      	mov	r0, r1

	T tmp1[n];
     b66:	ea4f 0588 	mov.w	r5, r8, lsl #2
	}
	// memcpy(buffer, tmp1, n * sizeof(T));
	// memcpy(&buffer[n], tmp2, m * sizeof(T));
}

template <typename T> void Vector<T>::append(Vector<T>* data) {
     b6a:	4689      	mov	r9, r1
		data to add a temp. Calls reset and then copies buffer into resized buffer.
		@param:
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = length;
	int m = data->size();
     b6c:	f7ff fff0 	bl	b50 <Vector<float>::size()>
     b70:	4606      	mov	r6, r0

	T tmp1[n];
     b72:	f105 030a 	add.w	r3, r5, #10
	T* tmp2 = data->as_array();
     b76:	4648      	mov	r0, r9
			data: (Vector<T>*) data to fill buffer with
	*/
	int n = length;
	int m = data->size();

	T tmp1[n];
     b78:	f023 0307 	bic.w	r3, r3, #7
     b7c:	ebad 0d03 	sub.w	sp, sp, r3
	T* tmp2 = data->as_array();
     b80:	f7ff ffe8 	bl	b54 <Vector<float>::as_array()>

	reset(n + m);
     b84:	eb08 0106 	add.w	r1, r8, r6
	*/
	int n = length;
	int m = data->size();

	T tmp1[n];
	T* tmp2 = data->as_array();
     b88:	4681      	mov	r9, r0

	reset(n + m);
     b8a:	4620      	mov	r0, r4
     b8c:	f7ff ffbc 	bl	b08 <Vector<float>::reset(int)>
	memcpy(buffer, tmp1, n * sizeof(T));
     b90:	462a      	mov	r2, r5
     b92:	4669      	mov	r1, sp
     b94:	6860      	ldr	r0, [r4, #4]
     b96:	f002 fc19 	bl	33cc <memcpy>
	memcpy(&buffer[n], tmp2, m * sizeof(T));
     b9a:	6860      	ldr	r0, [r4, #4]
     b9c:	00b2      	lsls	r2, r6, #2
     b9e:	4649      	mov	r1, r9
     ba0:	4428      	add	r0, r5
     ba2:	f002 fc13 	bl	33cc <memcpy>
}
     ba6:	46bd      	mov	sp, r7
     ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000bac <Vector<float>::slice(float*, int, int)>:

template <typename T> T* Vector<T>::as_array() {
	return buffer;
}

template <typename T> void Vector<T>::slice(T* data, int start, int n) {
     bac:	b430      	push	{r4, r5}
		@return
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
     bae:	1e14      	subs	r4, r2, #0
     bb0:	db03      	blt.n	bba <Vector<float>::slice(float*, int, int)+0xe>
     bb2:	18e2      	adds	r2, r4, r3
     bb4:	6805      	ldr	r5, [r0, #0]
     bb6:	42aa      	cmp	r2, r5
     bb8:	dd05      	ble.n	bc6 <Vector<float>::slice(float*, int, int)+0x1a>
		memcpy(data, &buffer[start], n * sizeof(T));
	}
	else {
		memset(data, 0, n * sizeof(T));
     bba:	4608      	mov	r0, r1
     bbc:	009a      	lsls	r2, r3, #2
     bbe:	2100      	movs	r1, #0
	}
}
     bc0:	bc30      	pop	{r4, r5}
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
	}
	else {
		memset(data, 0, n * sizeof(T));
     bc2:	f002 bd01 	b.w	35c8 <memset>
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
     bc6:	6845      	ldr	r5, [r0, #4]
     bc8:	009a      	lsls	r2, r3, #2
     bca:	4608      	mov	r0, r1
     bcc:	eb05 0184 	add.w	r1, r5, r4, lsl #2
	}
	else {
		memset(data, 0, n * sizeof(T));
	}
}
     bd0:	bc30      	pop	{r4, r5}
			data: (T*) buffer to put slice
			start: (int) start index of buffer
			n: (int) number of items in slice
	*/
	if (start >= 0 && start + n <= length) {
		memcpy(data, &buffer[start], n * sizeof(T));
     bd2:	f002 bbfb 	b.w	33cc <memcpy>
     bd6:	bf00      	nop

00000bd8 <Vector<float>::operator[](int)>:
	}
}

///// operators /////

template <typename T> T& Vector<T>::operator[](int index) {
     bd8:	b508      	push	{r3, lr}
		@return
			item: (T&) item at index
		@exit
			when index is invalid 
	*/
	if (length > index && index >= 0) {
     bda:	6803      	ldr	r3, [r0, #0]
     bdc:	428b      	cmp	r3, r1
     bde:	dd05      	ble.n	bec <Vector<float>::operator[](int)+0x14>
     be0:	2900      	cmp	r1, #0
     be2:	db03      	blt.n	bec <Vector<float>::operator[](int)+0x14>
		return buffer[index];
     be4:	6840      	ldr	r0, [r0, #4]
     be6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	}
	exit(0);
}
     bea:	bd08      	pop	{r3, pc}
			when index is invalid 
	*/
	if (length > index && index >= 0) {
		return buffer[index];
	}
	exit(0);
     bec:	2000      	movs	r0, #0
     bee:	f002 f8bd 	bl	2d6c <exit>
     bf2:	bf00      	nop

00000bf4 <Vector<float>::operator=(Vector<float>&)>:
}

template <typename T> void Vector<T>::operator=(Vector<T>& data) {
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	460c      	mov	r4, r1
     bf8:	4605      	mov	r5, r0
		  = Operator overload. Will reset this vector to the
		same size as data.
		@param
			data: (Vector<T>&) data to copy
	*/
	from_array(data.as_array(), data.size());
     bfa:	4608      	mov	r0, r1
     bfc:	f7ff ffaa 	bl	b54 <Vector<float>::as_array()>
     c00:	4606      	mov	r6, r0
     c02:	4620      	mov	r0, r4
     c04:	f7ff ffa4 	bl	b50 <Vector<float>::size()>
     c08:	4631      	mov	r1, r6
     c0a:	4602      	mov	r2, r0
     c0c:	4628      	mov	r0, r5
     c0e:	f7ff ff91 	bl	b34 <Vector<float>::from_array(float*, int)>
     c12:	bd70      	pop	{r4, r5, r6, pc}

00000c14 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c14:	4a96      	ldr	r2, [pc, #600]	; (e70 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     c16:	4b97      	ldr	r3, [pc, #604]	; (e74 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c18:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
     c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
     c1e:	4c96      	ldr	r4, [pc, #600]	; (e78 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     c20:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     c24:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     c26:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     c28:	d91c      	bls.n	c64 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     c2a:	4b94      	ldr	r3, [pc, #592]	; (e7c <set_arm_clock+0x268>)
     c2c:	4298      	cmp	r0, r3
     c2e:	f240 8115 	bls.w	e5c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     c32:	4b93      	ldr	r3, [pc, #588]	; (e80 <set_arm_clock+0x26c>)
     c34:	f240 6527 	movw	r5, #1575	; 0x627
     c38:	4f92      	ldr	r7, [pc, #584]	; (e84 <set_arm_clock+0x270>)
     c3a:	4403      	add	r3, r0
     c3c:	4c92      	ldr	r4, [pc, #584]	; (e88 <set_arm_clock+0x274>)
     c3e:	0a1a      	lsrs	r2, r3, #8
     c40:	fba7 3202 	umull	r3, r2, r7, r2
     c44:	09d3      	lsrs	r3, r2, #7
     c46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     c4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     c4e:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
     c52:	42ab      	cmp	r3, r5
     c54:	bf28      	it	cs
     c56:	462b      	movcs	r3, r5
     c58:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
     c5c:	fba4 3503 	umull	r3, r5, r4, r3
     c60:	08ed      	lsrs	r5, r5, #3
     c62:	e004      	b.n	c6e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
     c64:	4d89      	ldr	r5, [pc, #548]	; (e8c <set_arm_clock+0x278>)
     c66:	42a8      	cmp	r0, r5
     c68:	bf94      	ite	ls
     c6a:	2506      	movls	r5, #6
     c6c:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     c6e:	4a81      	ldr	r2, [pc, #516]	; (e74 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     c70:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     c74:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     c78:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     c7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     c82:	d20a      	bcs.n	c9a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     c84:	4b7c      	ldr	r3, [pc, #496]	; (e78 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     c86:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     c8a:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     c8c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     c8e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     c90:	6813      	ldr	r3, [r2, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	dafc      	bge.n	c90 <set_arm_clock+0x7c>
     c96:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     c9a:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
     c9e:	d131      	bne.n	d04 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     ca0:	4c7b      	ldr	r4, [pc, #492]	; (e90 <set_arm_clock+0x27c>)
     ca2:	4a7c      	ldr	r2, [pc, #496]	; (e94 <set_arm_clock+0x280>)
     ca4:	f8d4 c010 	ldr.w	ip, [r4, #16]
     ca8:	4614      	mov	r4, r2
     caa:	ea0c 0202 	and.w	r2, ip, r2
     cae:	42a2      	cmp	r2, r4
     cb0:	bf0a      	itet	eq
     cb2:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
     cb6:	f44f 5280 	movne.w	r2, #4096	; 0x1000
     cba:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     cbc:	ea8e 0403 	eor.w	r4, lr, r3
     cc0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     cc4:	d008      	beq.n	cd8 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     cc6:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     cca:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
     cce:	4c69      	ldr	r4, [pc, #420]	; (e74 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     cd0:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
     cd4:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     cd8:	ea81 0302 	eor.w	r3, r1, r2
     cdc:	f413 5f40 	tst.w	r3, #12288	; 0x3000
     ce0:	d008      	beq.n	cf4 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     ce2:	4b64      	ldr	r3, [pc, #400]	; (e74 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     ce4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     ce8:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     cea:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
     cec:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     cee:	6c93      	ldr	r3, [r2, #72]	; 0x48
     cf0:	071c      	lsls	r4, r3, #28
     cf2:	d4fc      	bmi.n	cee <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     cf4:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     cf8:	4a5e      	ldr	r2, [pc, #376]	; (e74 <set_arm_clock+0x260>)
     cfa:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     cfe:	6c93      	ldr	r3, [r2, #72]	; 0x48
     d00:	0699      	lsls	r1, r3, #26
     d02:	d4fc      	bmi.n	cfe <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
     d04:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     d06:	4c64      	ldr	r4, [pc, #400]	; (e98 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
     d08:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     d0a:	fb01 f302 	mul.w	r3, r1, r2
     d0e:	fb00 f303 	mul.w	r3, r0, r3
     d12:	42a3      	cmp	r3, r4
     d14:	d809      	bhi.n	d2a <set_arm_clock+0x116>
		if (div_arm < 8) {
     d16:	2a07      	cmp	r2, #7
     d18:	f200 8095 	bhi.w	e46 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
     d1c:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
     d1e:	fb01 f302 	mul.w	r3, r1, r2
     d22:	fb00 f303 	mul.w	r3, r0, r3
     d26:	42a3      	cmp	r3, r4
     d28:	d9f5      	bls.n	d16 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d2a:	485c      	ldr	r0, [pc, #368]	; (e9c <set_arm_clock+0x288>)
     d2c:	4c5c      	ldr	r4, [pc, #368]	; (ea0 <set_arm_clock+0x28c>)
     d2e:	4418      	add	r0, r3
     d30:	fba4 0300 	umull	r0, r3, r4, r0
     d34:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
     d36:	2b6c      	cmp	r3, #108	; 0x6c
     d38:	f200 808b 	bhi.w	e52 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
     d3c:	2b35      	cmp	r3, #53	; 0x35
     d3e:	f200 808f 	bhi.w	e60 <set_arm_clock+0x24c>
     d42:	f8df 8188 	ldr.w	r8, [pc, #392]	; ecc <set_arm_clock+0x2b8>
     d46:	2336      	movs	r3, #54	; 0x36
     d48:	4856      	ldr	r0, [pc, #344]	; (ea4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     d4a:	f8df c144 	ldr.w	ip, [pc, #324]	; e90 <set_arm_clock+0x27c>
     d4e:	4c56      	ldr	r4, [pc, #344]	; (ea8 <set_arm_clock+0x294>)
     d50:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     d54:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     d58:	ea09 0404 	and.w	r4, r9, r4
     d5c:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
     d5e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     d62:	d00b      	beq.n	d7c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     d68:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     d6c:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     d6e:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     d72:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     d76:	6823      	ldr	r3, [r4, #0]
     d78:	2b00      	cmp	r3, #0
     d7a:	dafc      	bge.n	d76 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     d7c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; e74 <set_arm_clock+0x260>
     d80:	3a01      	subs	r2, #1
     d82:	f8dc 3010 	ldr.w	r3, [ip, #16]
     d86:	f003 0307 	and.w	r3, r3, #7
     d8a:	4293      	cmp	r3, r2
     d8c:	d007      	beq.n	d9e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     d8e:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     d92:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     d94:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     d98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     d9a:	03db      	lsls	r3, r3, #15
     d9c:	d4fc      	bmi.n	d98 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d9e:	3901      	subs	r1, #1
     da0:	0289      	lsls	r1, r1, #10
     da2:	ea8e 0301 	eor.w	r3, lr, r1
     da6:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
     daa:	d00c      	beq.n	dc6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
     dac:	4b31      	ldr	r3, [pc, #196]	; (e74 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     dae:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     db2:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     db6:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     db8:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
     dbc:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     dc0:	6c93      	ldr	r3, [r2, #72]	; 0x48
     dc2:	0799      	lsls	r1, r3, #30
     dc4:	d4fc      	bmi.n	dc0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     dc6:	4b39      	ldr	r3, [pc, #228]	; (eac <set_arm_clock+0x298>)
     dc8:	4939      	ldr	r1, [pc, #228]	; (eb0 <set_arm_clock+0x29c>)
     dca:	4403      	add	r3, r0
     dcc:	09db      	lsrs	r3, r3, #7
     dce:	fba1 3103 	umull	r3, r1, r1, r3
     dd2:	0b09      	lsrs	r1, r1, #12
     dd4:	2904      	cmp	r1, #4
     dd6:	bf28      	it	cs
     dd8:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     dda:	1e4b      	subs	r3, r1, #1
     ddc:	021b      	lsls	r3, r3, #8
     dde:	ea8e 0203 	eor.w	r2, lr, r3
     de2:	f412 7f40 	tst.w	r2, #768	; 0x300
     de6:	d007      	beq.n	df8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     de8:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     df0:	4a20      	ldr	r2, [pc, #128]	; (e74 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     df2:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
     df6:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     df8:	4b1e      	ldr	r3, [pc, #120]	; (e74 <set_arm_clock+0x260>)
     dfa:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     dfc:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     dfe:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
     e02:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     e04:	6c93      	ldr	r3, [r2, #72]	; 0x48
     e06:	069b      	lsls	r3, r3, #26
     e08:	d4fc      	bmi.n	e04 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e0a:	4b2a      	ldr	r3, [pc, #168]	; (eb4 <set_arm_clock+0x2a0>)
     e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     e10:	4c29      	ldr	r4, [pc, #164]	; (eb8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     e12:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e14:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
     e18:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e1a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e1e:	4c27      	ldr	r4, [pc, #156]	; (ebc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e20:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e24:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e28:	4a25      	ldr	r2, [pc, #148]	; (ec0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
     e2a:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     e2c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     e2e:	d208      	bcs.n	e42 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     e30:	4b11      	ldr	r3, [pc, #68]	; (e78 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     e32:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     e36:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     e38:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
     e3a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     e3c:	6813      	ldr	r3, [r2, #0]
     e3e:	2b00      	cmp	r3, #0
     e40:	dafc      	bge.n	e3c <set_arm_clock+0x228>
	}

	return frequency;
}
     e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
     e46:	2904      	cmp	r1, #4
     e48:	f63f af6f 	bhi.w	d2a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
     e4c:	3101      	adds	r1, #1
				div_arm = 1;
     e4e:	2201      	movs	r2, #1
     e50:	e75b      	b.n	d0a <set_arm_clock+0xf6>
     e52:	f8df 807c 	ldr.w	r8, [pc, #124]	; ed0 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
     e56:	236c      	movs	r3, #108	; 0x6c
     e58:	481a      	ldr	r0, [pc, #104]	; (ec4 <set_arm_clock+0x2b0>)
     e5a:	e776      	b.n	d4a <set_arm_clock+0x136>
     e5c:	2512      	movs	r5, #18
     e5e:	e706      	b.n	c6e <set_arm_clock+0x5a>
     e60:	4819      	ldr	r0, [pc, #100]	; (ec8 <set_arm_clock+0x2b4>)
     e62:	f8df 8070 	ldr.w	r8, [pc, #112]	; ed4 <set_arm_clock+0x2c0>
     e66:	fb00 f003 	mul.w	r0, r0, r3
     e6a:	ea43 0808 	orr.w	r8, r3, r8
     e6e:	e76c      	b.n	d4a <set_arm_clock+0x136>
     e70:	1f78a400 	.word	0x1f78a400
     e74:	400fc000 	.word	0x400fc000
     e78:	40080000 	.word	0x40080000
     e7c:	23c34600 	.word	0x23c34600
     e80:	dc3cba00 	.word	0xdc3cba00
     e84:	004cb223 	.word	0x004cb223
     e88:	51eb851f 	.word	0x51eb851f
     e8c:	016e3600 	.word	0x016e3600
     e90:	400d8000 	.word	0x400d8000
     e94:	80003040 	.word	0x80003040
     e98:	269fb1ff 	.word	0x269fb1ff
     e9c:	005b8d80 	.word	0x005b8d80
     ea0:	165e9f81 	.word	0x165e9f81
     ea4:	269fb200 	.word	0x269fb200
     ea8:	8001307f 	.word	0x8001307f
     eac:	08f0d17f 	.word	0x08f0d17f
     eb0:	00e5109f 	.word	0x00e5109f
     eb4:	431bde83 	.word	0x431bde83
     eb8:	20000fc0 	.word	0x20000fc0
     ebc:	20000fbc 	.word	0x20000fbc
     ec0:	20001f3c 	.word	0x20001f3c
     ec4:	4d3f6400 	.word	0x4d3f6400
     ec8:	00b71b00 	.word	0x00b71b00
     ecc:	80002036 	.word	0x80002036
     ed0:	8000206c 	.word	0x8000206c
     ed4:	80002000 	.word	0x80002000

00000ed8 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     ed8:	2800      	cmp	r0, #0
     eda:	d057      	beq.n	f8c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     edc:	2201      	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
     ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ee2:	b085      	sub	sp, #20
     ee4:	4683      	mov	fp, r0
     ee6:	4c2a      	ldr	r4, [pc, #168]	; (f90 <delay+0xb8>)
     ee8:	4d2a      	ldr	r5, [pc, #168]	; (f94 <delay+0xbc>)
     eea:	4e2b      	ldr	r6, [pc, #172]	; (f98 <delay+0xc0>)
     eec:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     ef0:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     ef4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     ef6:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     ef8:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     efc:	2900      	cmp	r1, #0
     efe:	d1f7      	bne.n	ef0 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f00:	4f26      	ldr	r7, [pc, #152]	; (f9c <delay+0xc4>)
     f02:	e9cd 8902 	strd	r8, r9, [sp, #8]
     f06:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     f08:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f0a:	4a25      	ldr	r2, [pc, #148]	; (fa0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     f0c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f10:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f12:	6812      	ldr	r2, [r2, #0]
     f14:	2701      	movs	r7, #1
     f16:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f1e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     f20:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f22:	428b      	cmp	r3, r1
     f24:	bf08      	it	eq
     f26:	4542      	cmpeq	r2, r8
     f28:	bf2c      	ite	cs
     f2a:	46c2      	movcs	sl, r8
     f2c:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     f2e:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     f32:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     f36:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     f38:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     f3a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     f3e:	2b00      	cmp	r3, #0
     f40:	d1f7      	bne.n	f32 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     f42:	9801      	ldr	r0, [sp, #4]
     f44:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     f46:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f48:	4815      	ldr	r0, [pc, #84]	; (fa0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     f4a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f4e:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     f50:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f54:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     f5c:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f60:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     f62:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     f64:	4299      	cmp	r1, r3
     f66:	bf08      	it	eq
     f68:	4540      	cmpeq	r0, r8
     f6a:	bf2c      	ite	cs
     f6c:	4643      	movcs	r3, r8
     f6e:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     f70:	441a      	add	r2, r3
     f72:	4572      	cmp	r2, lr
     f74:	d307      	bcc.n	f86 <delay+0xae>
			if (--msec == 0) return;
     f76:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     f7a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     f7e:	d1d8      	bne.n	f32 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     f80:	b005      	add	sp, #20
     f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     f86:	f001 fcdb 	bl	2940 <yield>
	}
     f8a:	e7d2      	b.n	f32 <delay+0x5a>
     f8c:	4770      	bx	lr
     f8e:	bf00      	nop
     f90:	20001fc0 	.word	0x20001fc0
     f94:	20001f44 	.word	0x20001f44
     f98:	20001f40 	.word	0x20001f40
     f9c:	e0001004 	.word	0xe0001004
     fa0:	20001f3c 	.word	0x20001f3c

00000fa4 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     fa4:	0100      	lsls	r0, r0, #4
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <digitalWrite.part.0+0x40>)
     fa8:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     faa:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
     fac:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     fae:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     fb0:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     fb2:	4204      	tst	r4, r0
     fb4:	d005      	beq.n	fc2 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
     fb6:	b159      	cbz	r1, fd0 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
     fb8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
     fc0:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     fc2:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     fc4:	b949      	cbnz	r1, fda <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     fc6:	4a08      	ldr	r2, [pc, #32]	; (fe8 <digitalWrite.part.0+0x44>)
		}
	}
}
     fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     fcc:	601a      	str	r2, [r3, #0]
		}
	}
}
     fce:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     fd0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
     fd8:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     fda:	4a04      	ldr	r2, [pc, #16]	; (fec <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     fe0:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     fe2:	4770      	bx	lr
     fe4:	200004b0 	.word	0x200004b0
     fe8:	00013038 	.word	0x00013038
     fec:	0001f038 	.word	0x0001f038

00000ff0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     ff0:	2836      	cmp	r0, #54	; 0x36
     ff2:	d801      	bhi.n	ff8 <digitalWrite+0x8>
     ff4:	f7ff bfd6 	b.w	fa4 <digitalWrite.part.0>
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     ffc:	2836      	cmp	r0, #54	; 0x36
     ffe:	d81c      	bhi.n	103a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    1000:	0100      	lsls	r0, r0, #4
    1002:	4a1a      	ldr	r2, [pc, #104]	; (106c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1004:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    1006:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    100a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    100c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    100e:	d015      	beq.n	103c <pinMode+0x40>
    1010:	2904      	cmp	r1, #4
    1012:	d013      	beq.n	103c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    1014:	68dc      	ldr	r4, [r3, #12]
    1016:	6842      	ldr	r2, [r0, #4]
    1018:	ea22 0204 	bic.w	r2, r2, r4
    101c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    101e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    1020:	b1e9      	cbz	r1, 105e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    1022:	2902      	cmp	r1, #2
    1024:	d01e      	beq.n	1064 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    1026:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1028:	685b      	ldr	r3, [r3, #4]
}
    102a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    102e:	bf0c      	ite	eq
    1030:	490f      	ldreq	r1, [pc, #60]	; (1070 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    1032:	4910      	ldrne	r1, [pc, #64]	; (1074 <pinMode+0x78>)
    1034:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    1036:	2215      	movs	r2, #21
    1038:	601a      	str	r2, [r3, #0]
}
    103a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    103c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    103e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    1040:	6844      	ldr	r4, [r0, #4]
    1042:	ea42 0204 	orr.w	r2, r2, r4
    1046:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    1048:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    104a:	d008      	beq.n	105e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    104c:	f640 0138 	movw	r1, #2104	; 0x838
    1050:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	2215      	movs	r2, #21
}
    1056:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    105a:	601a      	str	r2, [r3, #0]
}
    105c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    105e:	2138      	movs	r1, #56	; 0x38
    1060:	6011      	str	r1, [r2, #0]
    1062:	e7f6      	b.n	1052 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    1064:	4904      	ldr	r1, [pc, #16]	; (1078 <pinMode+0x7c>)
    1066:	6011      	str	r1, [r2, #0]
    1068:	e7f3      	b.n	1052 <pinMode+0x56>
    106a:	bf00      	nop
    106c:	200004b0 	.word	0x200004b0
    1070:	00013038 	.word	0x00013038
    1074:	00010038 	.word	0x00010038
    1078:	0001f038 	.word	0x0001f038

0000107c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    107c:	b4f0      	push	{r4, r5, r6, r7}
    107e:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    1080:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1082:	4637      	mov	r7, r6
    1084:	e000      	b.n	1088 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1086:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1088:	fbb0 f3f2 	udiv	r3, r0, r2
    108c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1090:	f100 0437 	add.w	r4, r0, #55	; 0x37
    1094:	2809      	cmp	r0, #9
    1096:	f100 0030 	add.w	r0, r0, #48	; 0x30
    109a:	b2e4      	uxtb	r4, r4
    109c:	bf98      	it	ls
    109e:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    10a0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    10a2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    10a6:	2b00      	cmp	r3, #0
    10a8:	d1ed      	bne.n	1086 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    10aa:	194a      	adds	r2, r1, r5
    10ac:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    10ae:	b14d      	cbz	r5, 10c4 <ultoa+0x48>
    10b0:	3301      	adds	r3, #1
		t = buf[j];
    10b2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    10b6:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    10b8:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    10ba:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    10bc:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    10be:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    10c2:	dbf5      	blt.n	10b0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    10c4:	4608      	mov	r0, r1
    10c6:	bcf0      	pop	{r4, r5, r6, r7}
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop

000010cc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    10cc:	48a4      	ldr	r0, [pc, #656]	; (1360 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    10ce:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    10d2:	4ba4      	ldr	r3, [pc, #656]	; (1364 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    10d4:	6f82      	ldr	r2, [r0, #120]	; 0x78
    10d6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    10da:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    10dc:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    10de:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    10e0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    10e4:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    10e8:	4c9f      	ldr	r4, [pc, #636]	; (1368 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    10ea:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    10ee:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    10f0:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    10f4:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    10f6:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    10f8:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    10fc:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1100:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1104:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1108:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    110c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    1110:	b280      	uxth	r0, r0
    1112:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    1116:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    111a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    111e:	4b91      	ldr	r3, [pc, #580]	; (1364 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    1120:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1122:	2500      	movs	r5, #0
    1124:	0140      	lsls	r0, r0, #5
    1126:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1128:	2904      	cmp	r1, #4
    112a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    112c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1130:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    1132:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1134:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    1136:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1138:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    113a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    113c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    113e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1140:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1142:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1144:	d1e9      	bne.n	111a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1146:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    114a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    114e:	4b87      	ldr	r3, [pc, #540]	; (136c <pwm_init+0x2a0>)
    1150:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1154:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1156:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1158:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    115c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    115e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1162:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1166:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    116a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    116e:	b280      	uxth	r0, r0
    1170:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    1174:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1178:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    117c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1180:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1184:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1188:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    118c:	b280      	uxth	r0, r0
    118e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    1192:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    1196:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    119a:	4b74      	ldr	r3, [pc, #464]	; (136c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    119c:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    119e:	2500      	movs	r5, #0
    11a0:	0140      	lsls	r0, r0, #5
    11a2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    11a4:	2904      	cmp	r1, #4
    11a6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    11a8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    11aa:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    11ae:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    11b0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    11b2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    11b4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    11b6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    11b8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    11ba:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    11bc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    11be:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    11c0:	d1e9      	bne.n	1196 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    11c2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    11c6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    11ca:	4b69      	ldr	r3, [pc, #420]	; (1370 <pwm_init+0x2a4>)
    11cc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    11d0:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    11d2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    11d4:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    11d8:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    11da:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    11de:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    11e2:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    11e6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    11ea:	b280      	uxth	r0, r0
    11ec:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    11f0:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    11f4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    11f8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    11fc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    1200:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1204:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    1208:	b280      	uxth	r0, r0
    120a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    120e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    1212:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    1216:	4b56      	ldr	r3, [pc, #344]	; (1370 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    1218:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    121a:	2500      	movs	r5, #0
    121c:	0140      	lsls	r0, r0, #5
    121e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    1220:	2904      	cmp	r1, #4
    1222:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1224:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1226:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    122a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    122c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    122e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1230:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1232:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    1234:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1236:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1238:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    123a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    123c:	d1e9      	bne.n	1212 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    123e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1242:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1246:	4b4b      	ldr	r3, [pc, #300]	; (1374 <pwm_init+0x2a8>)
    1248:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    124c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    124e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1250:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    1254:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1256:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    125a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    125e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    1262:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    1266:	b280      	uxth	r0, r0
    1268:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    126c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1270:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1274:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    1278:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    127c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1280:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    1284:	b280      	uxth	r0, r0
    1286:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    128a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    128e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    1292:	4b38      	ldr	r3, [pc, #224]	; (1374 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    1294:	3101      	adds	r1, #1
    1296:	0140      	lsls	r0, r0, #5
    1298:	461c      	mov	r4, r3
    129a:	2904      	cmp	r1, #4
    129c:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    129e:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    12a0:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    12a4:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    12a6:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    12a8:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    12aa:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    12ac:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    12ae:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    12b0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    12b2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    12b4:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    12b6:	d1ea      	bne.n	128e <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    12b8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    12bc:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    12be:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    12c0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    12c4:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    12c6:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    12ca:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    12cc:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    12d0:	433b      	orrs	r3, r7
    12d2:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    12d6:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    12da:	b29b      	uxth	r3, r3
    12dc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    12e0:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    12e4:	0150      	lsls	r0, r2, #5
    12e6:	4b24      	ldr	r3, [pc, #144]	; (1378 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    12e8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    12ea:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    12ec:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    12ee:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    12f0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    12f2:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    12f4:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    12f6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    12fa:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    12fc:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    12fe:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1300:	d1f0      	bne.n	12e4 <pwm_init+0x218>
    1302:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1304:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1306:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    130a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    130e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1310:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1314:	0150      	lsls	r0, r2, #5
    1316:	4b19      	ldr	r3, [pc, #100]	; (137c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1318:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    131a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    131c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    131e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    1320:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1322:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1324:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1326:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1328:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    132a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    132c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    132e:	d1f1      	bne.n	1314 <pwm_init+0x248>
    1330:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1332:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1334:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1338:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    133c:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    133e:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    1342:	0150      	lsls	r0, r2, #5
    1344:	4b0e      	ldr	r3, [pc, #56]	; (1380 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    1346:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1348:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    134a:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    134c:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    134e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1350:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1352:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1354:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1356:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    1358:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    135a:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    135c:	d1f1      	bne.n	1342 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1360:	400fc000 	.word	0x400fc000
    1364:	403dc000 	.word	0x403dc000
    1368:	fc030000 	.word	0xfc030000
    136c:	403e0000 	.word	0x403e0000
    1370:	403e4000 	.word	0x403e4000
    1374:	403e8000 	.word	0x403e8000
    1378:	401dc000 	.word	0x401dc000
    137c:	401e0000 	.word	0x401e0000
    1380:	401e4000 	.word	0x401e4000

00001384 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    1386:	b430      	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    1388:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    138a:	461c      	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    138c:	6a99      	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    138e:	6a62      	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    1390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    1392:	4299      	cmp	r1, r3
    1394:	bf08      	it	eq
    1396:	4290      	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    1398:	4610      	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    139a:	4619      	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    139c:	bf0c      	ite	eq
    139e:	2501      	moveq	r5, #1
    13a0:	2500      	movne	r5, #0
    13a2:	2d00      	cmp	r5, #0
    13a4:	d0f3      	beq.n	138e <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    13a6:	0bd9      	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    13a8:	bc30      	pop	{r4, r5}
    13aa:	ea41 4042 	orr.w	r0, r1, r2, lsl #17
    13ae:	4770      	bx	lr
    13b0:	400d4000 	.word	0x400d4000

000013b4 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    13b4:	b508      	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    13b6:	6803      	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    13b8:	6842      	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    13ba:	b1bb      	cbz	r3, 13ec <sm_align_pool+0x38>
    13bc:	b17a      	cbz	r2, 13de <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    13be:	4b10      	ldr	r3, [pc, #64]	; (1400 <sm_align_pool+0x4c>)
    13c0:	fba3 1302 	umull	r1, r3, r3, r2
    13c4:	08db      	lsrs	r3, r3, #3
    13c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    13ca:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    13ce:	d003      	beq.n	13d8 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    13d0:	1ad2      	subs	r2, r2, r3
    13d2:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    13d4:	2af0      	cmp	r2, #240	; 0xf0
    13d6:	d902      	bls.n	13de <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    13d8:	2301      	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    13da:	4618      	mov	r0, r3
    13dc:	bd08      	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    13de:	f001 fcbf 	bl	2d60 <__errno>
    13e2:	221c      	movs	r2, #28
    13e4:	2300      	movs	r3, #0
    13e6:	6002      	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    13e8:	4618      	mov	r0, r3
    13ea:	bd08      	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    13ec:	4b04      	ldr	r3, [pc, #16]	; (1400 <sm_align_pool+0x4c>)
    13ee:	fba3 1302 	umull	r1, r3, r3, r2
    13f2:	08db      	lsrs	r3, r3, #3
    13f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    13f8:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    13fc:	d1e8      	bne.n	13d0 <sm_align_pool+0x1c>
    13fe:	e7e9      	b.n	13d4 <sm_align_pool+0x20>
    1400:	aaaaaaab 	.word	0xaaaaaaab

00001404 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    1404:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    1406:	4604      	mov	r4, r0
    1408:	2800      	cmp	r0, #0
    140a:	d03a      	beq.n	1482 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    140c:	b119      	cbz	r1, 1416 <sm_set_pool+0x12>
    140e:	fab2 f582 	clz	r5, r2
    1412:	096d      	lsrs	r5, r5, #5
    1414:	b1fd      	cbz	r5, 1456 <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    1416:	6820      	ldr	r0, [r4, #0]
    1418:	b108      	cbz	r0, 141e <sm_set_pool+0x1a>
    141a:	6862      	ldr	r2, [r4, #4]
    141c:	b932      	cbnz	r2, 142c <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    141e:	f001 fc9f 	bl	2d60 <__errno>
    1422:	2316      	movs	r3, #22
		return 0;
    1424:	2200      	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    1426:	6003      	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    1428:	4610      	mov	r0, r2
    142a:	bd70      	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    142c:	4918      	ldr	r1, [pc, #96]	; (1490 <sm_set_pool+0x8c>)
    142e:	fba1 3102 	umull	r3, r1, r1, r2
    1432:	08c9      	lsrs	r1, r1, #3
    1434:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1438:	ebb2 0181 	subs.w	r1, r2, r1, lsl #2
    143c:	d1ef      	bne.n	141e <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    143e:	68a3      	ldr	r3, [r4, #8]
    1440:	b10b      	cbz	r3, 1446 <sm_set_pool+0x42>
    1442:	f002 f8c1 	bl	35c8 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    1446:	2300      	movs	r3, #0
			return 1;
    1448:	2201      	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    144a:	6023      	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    144c:	4610      	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    144e:	6063      	str	r3, [r4, #4]
    1450:	60a3      	str	r3, [r4, #8]
    1452:	60e3      	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    1454:	bd70      	pop	{r4, r5, r6, pc}
    1456:	461e      	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    1458:	9b04      	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    145a:	e880 0006 	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    145e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    1460:	f7ff ffa8 	bl	13b4 <sm_align_pool>
    1464:	4602      	mov	r2, r0
    1466:	2800      	cmp	r0, #0
    1468:	d0de      	beq.n	1428 <sm_set_pool+0x24>

	if (do_zero) {
    146a:	b916      	cbnz	r6, 1472 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    146c:	2201      	movs	r2, #1
}
    146e:	4610      	mov	r0, r2
    1470:	bd70      	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    1472:	e894 0005 	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    1476:	60a6      	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    1478:	4629      	mov	r1, r5
    147a:	f002 f8a5 	bl	35c8 <memset>
	}

	return 1;
    147e:	2201      	movs	r2, #1
    1480:	e7d2      	b.n	1428 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    1482:	f001 fc6d 	bl	2d60 <__errno>
    1486:	2316      	movs	r3, #22
		return 0;
    1488:	4622      	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    148a:	6003      	str	r3, [r0, #0]
		return 0;
    148c:	e7cc      	b.n	1428 <sm_set_pool+0x24>
    148e:	bf00      	nop
    1490:	aaaaaaab 	.word	0xaaaaaaab

00001494 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    1494:	b672      	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    1496:	f3ef 8305 	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    149a:	4d49      	ldr	r5, [pc, #292]	; (15c0 <unused_interrupt_vector+0x12c>)
    149c:	606b      	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    149e:	f3ef 8308 	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    14a2:	4c48      	ldr	r4, [pc, #288]	; (15c4 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    14a4:	462e      	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    14a6:	4848      	ldr	r0, [pc, #288]	; (15c8 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    14a8:	4948      	ldr	r1, [pc, #288]	; (15cc <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    14aa:	4a49      	ldr	r2, [pc, #292]	; (15d0 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    14ac:	6824      	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    14ae:	6800      	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    14b0:	6809      	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    14b2:	6812      	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    14b4:	6129      	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    14b6:	60ac      	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    14b8:	60e8      	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    14ba:	616a      	str	r2, [r5, #20]
	info->ret = stack[6];
    14bc:	699a      	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    14be:	4c45      	ldr	r4, [pc, #276]	; (15d4 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    14c0:	61aa      	str	r2, [r5, #24]
	info->xpsr = stack[7];
    14c2:	69db      	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    14c4:	4f44      	ldr	r7, [pc, #272]	; (15d8 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    14c6:	61eb      	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    14c8:	f000 f8c8 	bl	165c <tempmonGetTemp>
    14cc:	ed85 0a08 	vstr	s0, [r5, #32]
	info->time = rtc_get();
    14d0:	f7ff ff58 	bl	1384 <rtc_get>
	info->len = sizeof(*info) / 4;
    14d4:	230b      	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    14d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    14da:	6268      	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    14dc:	4619      	mov	r1, r3
    14de:	602b      	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    14e0:	404a      	eors	r2, r1
    14e2:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    14e4:	f002 0301 	and.w	r3, r2, #1
    14e8:	3901      	subs	r1, #1
    14ea:	fb04 f303 	mul.w	r3, r4, r3
    14ee:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    14f2:	d1f7      	bne.n	14e4 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    14f4:	42be      	cmp	r6, r7
    14f6:	d002      	beq.n	14fe <unused_interrupt_vector+0x6a>
    14f8:	f856 1f04 	ldr.w	r1, [r6, #4]!
    14fc:	e7f0      	b.n	14e0 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    14fe:	4930      	ldr	r1, [pc, #192]	; (15c0 <unused_interrupt_vector+0x12c>)
    1500:	628a      	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1502:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1506:	4b35      	ldr	r3, [pc, #212]	; (15dc <unused_interrupt_vector+0x148>)
    1508:	4a35      	ldr	r2, [pc, #212]	; (15e0 <unused_interrupt_vector+0x14c>)
    150a:	6019      	str	r1, [r3, #0]
    150c:	601a      	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    150e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1512:	f3bf 8f6f 	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1516:	4a33      	ldr	r2, [pc, #204]	; (15e4 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    1518:	2502      	movs	r5, #2
    151a:	4c33      	ldr	r4, [pc, #204]	; (15e8 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    151c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    151e:	4933      	ldr	r1, [pc, #204]	; (15ec <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1520:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1524:	4832      	ldr	r0, [pc, #200]	; (15f0 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1526:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    1528:	6025      	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    152a:	69d3      	ldr	r3, [r2, #28]
    152c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1534:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1536:	680b      	ldr	r3, [r1, #0]
    1538:	4283      	cmp	r3, r0
    153a:	d83e      	bhi.n	15ba <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    153c:	4a2a      	ldr	r2, [pc, #168]	; (15e8 <unused_interrupt_vector+0x154>)
    153e:	2100      	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1540:	2001      	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1542:	4e2c      	ldr	r6, [pc, #176]	; (15f4 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    1544:	6011      	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    1546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    154a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    154e:	460c      	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    1550:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    1554:	4615      	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1556:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    155a:	4607      	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    155c:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1620 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    1560:	4e25      	ldr	r6, [pc, #148]	; (15f8 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    1562:	4826      	ldr	r0, [pc, #152]	; (15fc <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    1564:	4926      	ldr	r1, [pc, #152]	; (1600 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    1566:	4a27      	ldr	r2, [pc, #156]	; (1604 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    1568:	f8ce 3000 	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    156c:	6033      	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    156e:	6003      	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    1570:	600b      	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    1572:	6013      	str	r3, [r2, #0]
    1574:	e001      	b.n	157a <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    1576:	f000 f955 	bl	1824 <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    157a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
    157e:	4b1a      	ldr	r3, [pc, #104]	; (15e8 <unused_interrupt_vector+0x154>)
    1580:	2a00      	cmp	r2, #0
    1582:	d0f8      	beq.n	1576 <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    1584:	3401      	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    1586:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    158a:	2c4f      	cmp	r4, #79	; 0x4f
    158c:	d9f3      	bls.n	1576 <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    158e:	4a1e      	ldr	r2, [pc, #120]	; (1608 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    1590:	2402      	movs	r4, #2
    1592:	481e      	ldr	r0, [pc, #120]	; (160c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    1594:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    1598:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    159c:	6351      	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    159e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    15a2:	b932      	cbnz	r2, 15b2 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    15a4:	491a      	ldr	r1, [pc, #104]	; (1610 <unused_interrupt_vector+0x17c>)
    15a6:	4a1b      	ldr	r2, [pc, #108]	; (1614 <unused_interrupt_vector+0x180>)
    15a8:	630a      	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    15aa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    15ae:	2800      	cmp	r0, #0
    15b0:	d0fa      	beq.n	15a8 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    15b2:	4b19      	ldr	r3, [pc, #100]	; (1618 <unused_interrupt_vector+0x184>)
    15b4:	4a19      	ldr	r2, [pc, #100]	; (161c <unused_interrupt_vector+0x188>)
    15b6:	601a      	str	r2, [r3, #0]
    15b8:	e7fe      	b.n	15b8 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    15ba:	f7ff fb2b 	bl	c14 <set_arm_clock>
    15be:	e7bd      	b.n	153c <unused_interrupt_vector+0xa8>
    15c0:	2027ff80 	.word	0x2027ff80
    15c4:	e000ed28 	.word	0xe000ed28
    15c8:	e000ed2c 	.word	0xe000ed2c
    15cc:	e000ed34 	.word	0xe000ed34
    15d0:	e000ed38 	.word	0xe000ed38
    15d4:	edb88320 	.word	0xedb88320
    15d8:	2027ffa4 	.word	0x2027ffa4
    15dc:	e000ef70 	.word	0xe000ef70
    15e0:	2027ffa0 	.word	0x2027ffa0
    15e4:	400fc000 	.word	0x400fc000
    15e8:	40084000 	.word	0x40084000
    15ec:	20000fc0 	.word	0x20000fc0
    15f0:	0bcd3d80 	.word	0x0bcd3d80
    15f4:	00249f00 	.word	0x00249f00
    15f8:	e000e184 	.word	0xe000e184
    15fc:	e000e188 	.word	0xe000e188
    1600:	e000e18c 	.word	0xe000e18c
    1604:	e000e190 	.word	0xe000e190
    1608:	400d9000 	.word	0x400d9000
    160c:	402e0000 	.word	0x402e0000
    1610:	400f8000 	.word	0x400f8000
    1614:	0bad00f1 	.word	0x0bad00f1
    1618:	e000ed0c 	.word	0xe000ed0c
    161c:	05fa0004 	.word	0x05fa0004
    1620:	e000e180 	.word	0xe000e180

00001624 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    1624:	4a09      	ldr	r2, [pc, #36]	; (164c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    1626:	b508      	push	{r3, lr}
        char *prev = __brkval;
    1628:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    162a:	b120      	cbz	r0, 1636 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    162c:	4418      	add	r0, r3
    162e:	4908      	ldr	r1, [pc, #32]	; (1650 <_sbrk+0x2c>)
    1630:	4288      	cmp	r0, r1
    1632:	d802      	bhi.n	163a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    1634:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    1636:	4618      	mov	r0, r3
    1638:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    163a:	f001 fb91 	bl	2d60 <__errno>
    163e:	220c      	movs	r2, #12
                        return (void *)-1;
    1640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    1644:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1646:	4618      	mov	r0, r3
    1648:	bd08      	pop	{r3, pc}
    164a:	bf00      	nop
    164c:	20000fe0 	.word	0x20000fe0
    1650:	20280000 	.word	0x20280000

00001654 <_exit>:
}

__attribute__((weak))
void _exit(int status)
{
	while (1) asm ("WFI");
    1654:	bf30      	wfi
    1656:	e7fd      	b.n	1654 <_exit>

00001658 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    1658:	f7ff bf1c 	b.w	1494 <unused_interrupt_vector>

0000165c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    165c:	4912      	ldr	r1, [pc, #72]	; (16a8 <tempmonGetTemp+0x4c>)
    165e:	680b      	ldr	r3, [r1, #0]
    1660:	4a11      	ldr	r2, [pc, #68]	; (16a8 <tempmonGetTemp+0x4c>)
    1662:	075b      	lsls	r3, r3, #29
    1664:	d5fb      	bpl.n	165e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1666:	6813      	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1668:	4910      	ldr	r1, [pc, #64]	; (16ac <tempmonGetTemp+0x50>)

    return tmeas;
    166a:	f3c3 230b 	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    166e:	4a10      	ldr	r2, [pc, #64]	; (16b0 <tempmonGetTemp+0x54>)

    return tmeas;
    1670:	ee07 3a90 	vmov	s15, r3
    1674:	680b      	ldr	r3, [r1, #0]
    1676:	ed92 6a00 	vldr	s12, [r2]
    167a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    167e:	ee07 3a90 	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1682:	4a0c      	ldr	r2, [pc, #48]	; (16b4 <tempmonGetTemp+0x58>)

    return tmeas;
    1684:	eef8 7a67 	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1688:	4b0b      	ldr	r3, [pc, #44]	; (16b8 <tempmonGetTemp+0x5c>)

    return tmeas;
    168a:	edd2 6a00 	vldr	s13, [r2]
    168e:	ee77 7a67 	vsub.f32	s15, s14, s15
    1692:	ed93 7a00 	vldr	s14, [r3]
    1696:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    169a:	ee67 7a86 	vmul.f32	s15, s15, s12
    169e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
}
    16a2:	ee37 0a40 	vsub.f32	s0, s14, s0
    16a6:	4770      	bx	lr
    16a8:	400d8180 	.word	0x400d8180
    16ac:	20001f2c 	.word	0x20001f2c
    16b0:	20001f34 	.word	0x20001f34
    16b4:	20001f38 	.word	0x20001f38
    16b8:	20001f30 	.word	0x20001f30

000016bc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    16bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    16be:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    16c0:	b11b      	cbz	r3, 16ca <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    16c2:	6853      	ldr	r3, [r2, #4]
    16c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    16c8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    16ca:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    16cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    16ce:	b35c      	cbz	r4, 1728 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    16d0:	4b1c      	ldr	r3, [pc, #112]	; (1744 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    16d2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    16d4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    16d8:	420c      	tst	r4, r1
    16da:	d115      	bne.n	1708 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    16dc:	4e1a      	ldr	r6, [pc, #104]	; (1748 <schedule_transfer+0x8c>)
    16de:	6837      	ldr	r7, [r6, #0]
    16e0:	e004      	b.n	16ec <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    16e2:	6834      	ldr	r4, [r6, #0]
    16e4:	1be4      	subs	r4, r4, r7
    16e6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    16ea:	d20b      	bcs.n	1704 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    16ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    16f0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    16f4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    16f8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    16fc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1700:	0464      	lsls	r4, r4, #17
    1702:	d5ee      	bpl.n	16e2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1704:	400d      	ands	r5, r1
    1706:	d003      	beq.n	1710 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1708:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    170a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    170c:	bcf0      	pop	{r4, r5, r6, r7}
    170e:	4770      	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    1710:	4c0c      	ldr	r4, [pc, #48]	; (1744 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    1712:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    1714:	60c5      	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    1716:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    171a:	4319      	orrs	r1, r3
    171c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    1720:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1722:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1724:	bcf0      	pop	{r4, r5, r6, r7}
    1726:	4770      	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    1728:	4d06      	ldr	r5, [pc, #24]	; (1744 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    172a:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    172c:	60c4      	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    172e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1732:	4319      	orrs	r1, r3
    1734:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1738:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    173a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    173c:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    173e:	bcf0      	pop	{r4, r5, r6, r7}
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	402e0000 	.word	0x402e0000
    1748:	e0001004 	.word	0xe0001004

0000174c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    174c:	b570      	push	{r4, r5, r6, lr}
    174e:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1750:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1752:	b190      	cbz	r0, 177a <run_callbacks+0x2e>
    1754:	4602      	mov	r2, r0
    1756:	2400      	movs	r4, #0
    1758:	e003      	b.n	1762 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    175a:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    175c:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    175e:	2a01      	cmp	r2, #1
    1760:	d00c      	beq.n	177c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1762:	6853      	ldr	r3, [r2, #4]
    1764:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1768:	d0f7      	beq.n	175a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    176a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    176c:	b12c      	cbz	r4, 177a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    176e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1770:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1772:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1774:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    1776:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1778:	d1f9      	bne.n	176e <run_callbacks+0x22>
    177a:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    177c:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    177e:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    1780:	e7f4      	b.n	176c <run_callbacks+0x20>
    1782:	bf00      	nop

00001784 <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1784:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    1786:	b9e1      	cbnz	r1, 17c2 <endpoint0_transmit.constprop.1+0x3e>
    1788:	4c21      	ldr	r4, [pc, #132]	; (1810 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    178a:	4922      	ldr	r1, [pc, #136]	; (1814 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    178c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    178e:	4b22      	ldr	r3, [pc, #136]	; (1818 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1790:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1792:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1796:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1798:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    179a:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    179c:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    179e:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    17a0:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17a2:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    17a6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    17aa:	4d1c      	ldr	r5, [pc, #112]	; (181c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    17ac:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    17b0:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    17b2:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    17b6:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    17b8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    17bc:	2b00      	cmp	r3, #0
    17be:	d1fb      	bne.n	17b8 <endpoint0_transmit.constprop.1+0x34>
}
    17c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17c2:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    17c4:	4b16      	ldr	r3, [pc, #88]	; (1820 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    17c6:	4d14      	ldr	r5, [pc, #80]	; (1818 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    17c8:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    17ca:	4c11      	ldr	r4, [pc, #68]	; (1810 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    17d0:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    17d2:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    17d4:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17d6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    17da:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17dc:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    17e0:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17e2:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    17e6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    17ea:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    17ee:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    17f0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    17f2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17f6:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17fa:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17fe:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1800:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    1802:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1806:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    180a:	2b00      	cmp	r3, #0
    180c:	d1fb      	bne.n	1806 <endpoint0_transmit.constprop.1+0x82>
    180e:	e7bc      	b.n	178a <endpoint0_transmit.constprop.1+0x6>
    1810:	20000000 	.word	0x20000000
    1814:	20001fa0 	.word	0x20001fa0
    1818:	402e0000 	.word	0x402e0000
    181c:	20001ef4 	.word	0x20001ef4
    1820:	20001f80 	.word	0x20001f80

00001824 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    1824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    1828:	4cb0      	ldr	r4, [pc, #704]	; (1aec <usb_isr+0x2c8>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    182a:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    182c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1830:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    1834:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    1838:	d06f      	beq.n	191a <usb_isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    183a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    183e:	2b00      	cmp	r3, #0
    1840:	d066      	beq.n	1910 <usb_isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1842:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    1846:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1b10 <usb_isr+0x2ec>
    184a:	4fa9      	ldr	r7, [pc, #676]	; (1af0 <usb_isr+0x2cc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    184c:	4626      	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    184e:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1850:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    1854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1858:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    185c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1860:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1864:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    1868:	049d      	lsls	r5, r3, #18
    186a:	d5f5      	bpl.n	1858 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    186c:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
    1870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1874:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1878:	f8c6 a1b4 	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    187c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1880:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    1884:	d1fa      	bne.n	187c <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1886:	b281      	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1888:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    188c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    1890:	f000 8148 	beq.w	1b24 <usb_isr+0x300>
    1894:	f200 80bb 	bhi.w	1a0e <usb_isr+0x1ea>
    1898:	2982      	cmp	r1, #130	; 0x82
    189a:	f000 8193 	beq.w	1bc4 <usb_isr+0x3a0>
    189e:	f240 80cf 	bls.w	1a40 <usb_isr+0x21c>
    18a2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    18a6:	f000 815d 	beq.w	1b64 <usb_isr+0x340>
    18aa:	f240 3302 	movw	r3, #770	; 0x302
    18ae:	4299      	cmp	r1, r3
    18b0:	f040 80be 	bne.w	1a30 <usb_isr+0x20c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    18b4:	b292      	uxth	r2, r2
    18b6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    18ba:	2b07      	cmp	r3, #7
    18bc:	f200 80b8 	bhi.w	1a30 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    18c0:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    18c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    18c8:	4a8a      	ldr	r2, [pc, #552]	; (1af4 <usb_isr+0x2d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    18ca:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18ce:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    18d2:	441a      	add	r2, r3
    18d4:	6813      	ldr	r3, [r2, #0]
    18d6:	bf14      	ite	ne
    18d8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    18dc:	f043 0301 	orreq.w	r3, r3, #1
    18e0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18e2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18e4:	4b84      	ldr	r3, [pc, #528]	; (1af8 <usb_isr+0x2d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    18e6:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    18e8:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    18ea:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    18ec:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    18ee:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    18f2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    18f6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    18f8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    18fc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1900:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1904:	2b00      	cmp	r3, #0
    1906:	d1fb      	bne.n	1900 <usb_isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1908:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    190c:	2b00      	cmp	r3, #0
    190e:	d19f      	bne.n	1850 <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1910:	4a76      	ldr	r2, [pc, #472]	; (1aec <usb_isr+0x2c8>)
    1912:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1916:	2b00      	cmp	r3, #0
    1918:	d147      	bne.n	19aa <usb_isr+0x186>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    191a:	f018 0f40 	tst.w	r8, #64	; 0x40
    191e:	d016      	beq.n	194e <usb_isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1920:	4b72      	ldr	r3, [pc, #456]	; (1aec <usb_isr+0x2c8>)
    1922:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1926:	4619      	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1928:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    192c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1930:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1934:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    1938:	4a6c      	ldr	r2, [pc, #432]	; (1aec <usb_isr+0x2c8>)
    193a:	2b00      	cmp	r3, #0
    193c:	d1fa      	bne.n	1934 <usb_isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    193e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    1942:	496e      	ldr	r1, [pc, #440]	; (1afc <usb_isr+0x2d8>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1944:	f8c2 01b4 	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1948:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
    194c:	600b      	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    194e:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1952:	d003      	beq.n	195c <usb_isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1954:	4b6a      	ldr	r3, [pc, #424]	; (1b00 <usb_isr+0x2dc>)
    1956:	681b      	ldr	r3, [r3, #0]
    1958:	b103      	cbz	r3, 195c <usb_isr+0x138>
    195a:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    195c:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    1960:	d003      	beq.n	196a <usb_isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1962:	4b68      	ldr	r3, [pc, #416]	; (1b04 <usb_isr+0x2e0>)
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	b103      	cbz	r3, 196a <usb_isr+0x146>
    1968:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    196a:	f018 0f04 	tst.w	r8, #4
    196e:	d008      	beq.n	1982 <usb_isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1970:	4b5e      	ldr	r3, [pc, #376]	; (1aec <usb_isr+0x2c8>)
    1972:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1976:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    197a:	d045      	beq.n	1a08 <usb_isr+0x1e4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    197c:	4b62      	ldr	r3, [pc, #392]	; (1b08 <usb_isr+0x2e4>)
    197e:	2201      	movs	r2, #1
    1980:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1982:	4b5a      	ldr	r3, [pc, #360]	; (1aec <usb_isr+0x2c8>)
    1984:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1988:	0612      	lsls	r2, r2, #24
    198a:	d50b      	bpl.n	19a4 <usb_isr+0x180>
    198c:	f018 0f80 	tst.w	r8, #128	; 0x80
    1990:	d008      	beq.n	19a4 <usb_isr+0x180>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1992:	495e      	ldr	r1, [pc, #376]	; (1b0c <usb_isr+0x2e8>)
    1994:	780a      	ldrb	r2, [r1, #0]
    1996:	b12a      	cbz	r2, 19a4 <usb_isr+0x180>
			if (--usb_reboot_timer == 0) {
    1998:	3a01      	subs	r2, #1
    199a:	b2d2      	uxtb	r2, r2
    199c:	700a      	strb	r2, [r1, #0]
    199e:	2a00      	cmp	r2, #0
    19a0:	f000 8217 	beq.w	1dd2 <usb_isr+0x5ae>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    19a4:	b003      	add	sp, #12
    19a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    19aa:	4959      	ldr	r1, [pc, #356]	; (1b10 <usb_isr+0x2ec>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    19ac:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    19b0:	6808      	ldr	r0, [r1, #0]
    19b2:	4203      	tst	r3, r0
    19b4:	f040 81b1 	bne.w	1d1a <usb_isr+0x4f6>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    19b8:	4a50      	ldr	r2, [pc, #320]	; (1afc <usb_isr+0x2d8>)
    19ba:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    19bc:	401d      	ands	r5, r3
    19be:	d0ac      	beq.n	191a <usb_isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    19c0:	0c2e      	lsrs	r6, r5, #16
    19c2:	d00f      	beq.n	19e4 <usb_isr+0x1c0>
    19c4:	4f4a      	ldr	r7, [pc, #296]	; (1af0 <usb_isr+0x2cc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    19c6:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    19ca:	fa96 f4a6 	rbit	r4, r6
    19ce:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    19d2:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    19d6:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    19da:	3040      	adds	r0, #64	; 0x40
    19dc:	f7ff feb6 	bl	174c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    19e0:	43a6      	bics	r6, r4
    19e2:	d1f2      	bne.n	19ca <usb_isr+0x1a6>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    19e4:	b2ad      	uxth	r5, r5
				while(rx) {
    19e6:	2d00      	cmp	r5, #0
    19e8:	d097      	beq.n	191a <usb_isr+0xf6>
    19ea:	4f41      	ldr	r7, [pc, #260]	; (1af0 <usb_isr+0x2cc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    19ec:	2601      	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    19ee:	fa95 f4a5 	rbit	r4, r5
    19f2:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    19f6:	eb07 10c4 	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    19fa:	fa06 f404 	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    19fe:	f7ff fea5 	bl	174c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    1a02:	43a5      	bics	r5, r4
    1a04:	d1f3      	bne.n	19ee <usb_isr+0x1ca>
    1a06:	e788      	b.n	191a <usb_isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    1a08:	4a3f      	ldr	r2, [pc, #252]	; (1b08 <usb_isr+0x2e4>)
    1a0a:	7013      	strb	r3, [r2, #0]
    1a0c:	e7b9      	b.n	1982 <usb_isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a0e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    1a12:	f000 80f5 	beq.w	1c00 <usb_isr+0x3dc>
    1a16:	d922      	bls.n	1a5e <usb_isr+0x23a>
    1a18:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1a1c:	f000 80fe 	beq.w	1c1c <usb_isr+0x3f8>
    1a20:	f640 1521 	movw	r5, #2337	; 0x921
    1a24:	42a9      	cmp	r1, r5
    1a26:	d103      	bne.n	1a30 <usb_isr+0x20c>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    1a28:	0c11      	lsrs	r1, r2, #16
    1a2a:	2908      	cmp	r1, #8
    1a2c:	f240 8126 	bls.w	1c7c <usb_isr+0x458>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1a30:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a34:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a38:	2b00      	cmp	r3, #0
    1a3a:	f47f af09 	bne.w	1850 <usb_isr+0x2c>
    1a3e:	e767      	b.n	1910 <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a40:	2980      	cmp	r1, #128	; 0x80
    1a42:	d1f5      	bne.n	1a30 <usb_isr+0x20c>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1a44:	4a33      	ldr	r2, [pc, #204]	; (1b14 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1a46:	2102      	movs	r1, #2
    1a48:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1a4a:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1a4c:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1a4e:	f7ff fe99 	bl	1784 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a52:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a56:	2b00      	cmp	r3, #0
    1a58:	f47f aefa 	bne.w	1850 <usb_isr+0x2c>
    1a5c:	e758      	b.n	1910 <usb_isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a5e:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    1a62:	2901      	cmp	r1, #1
    1a64:	d8e4      	bhi.n	1a30 <usb_isr+0x20c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a66:	4b2c      	ldr	r3, [pc, #176]	; (1b18 <usb_isr+0x2f4>)
    1a68:	6859      	ldr	r1, [r3, #4]
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d0e0      	beq.n	1a30 <usb_isr+0x20c>
    1a6e:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1a70:	fa1f fe82 	uxth.w	lr, r2
    1a74:	e003      	b.n	1a7e <usb_isr+0x25a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1a76:	330c      	adds	r3, #12
    1a78:	6859      	ldr	r1, [r3, #4]
    1a7a:	2900      	cmp	r1, #0
    1a7c:	d0d8      	beq.n	1a30 <usb_isr+0x20c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1a7e:	881d      	ldrh	r5, [r3, #0]
    1a80:	4285      	cmp	r5, r0
    1a82:	d1f8      	bne.n	1a76 <usb_isr+0x252>
    1a84:	885d      	ldrh	r5, [r3, #2]
    1a86:	4575      	cmp	r5, lr
    1a88:	d1f5      	bne.n	1a76 <usb_isr+0x252>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1a8a:	0a05      	lsrs	r5, r0, #8
    1a8c:	2d03      	cmp	r5, #3
    1a8e:	f000 817b 	beq.w	1d88 <usb_isr+0x564>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1a92:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1a94:	0c12      	lsrs	r2, r2, #16
    1a96:	4293      	cmp	r3, r2
    1a98:	bf28      	it	cs
    1a9a:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1a9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1aa0:	f000 8163 	beq.w	1d6a <usb_isr+0x546>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1aa4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    1aa8:	f000 814c 	beq.w	1d44 <usb_isr+0x520>
    1aac:	4d1b      	ldr	r5, [pc, #108]	; (1b1c <usb_isr+0x2f8>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1aae:	461a      	mov	r2, r3
    1ab0:	9301      	str	r3, [sp, #4]
    1ab2:	4628      	mov	r0, r5
    1ab4:	f001 fc8a 	bl	33cc <memcpy>
    1ab8:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1aba:	f025 021f 	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1abe:	441d      	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
    1ac0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1ac4:	4916      	ldr	r1, [pc, #88]	; (1b20 <usb_isr+0x2fc>)
    1ac6:	600a      	str	r2, [r1, #0]
		location += 32;
    1ac8:	3220      	adds	r2, #32
	} while (location < end_addr);
    1aca:	4295      	cmp	r5, r2
    1acc:	d8fa      	bhi.n	1ac4 <usb_isr+0x2a0>
	asm("dsb");
    1ace:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1ad2:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1ad6:	4811      	ldr	r0, [pc, #68]	; (1b1c <usb_isr+0x2f8>)
    1ad8:	4619      	mov	r1, r3
    1ada:	f7ff fe53 	bl	1784 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1ade:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	f47f aeb4 	bne.w	1850 <usb_isr+0x2c>
    1ae8:	e712      	b.n	1910 <usb_isr+0xec>
    1aea:	bf00      	nop
    1aec:	402e0000 	.word	0x402e0000
    1af0:	20000000 	.word	0x20000000
    1af4:	402e01c0 	.word	0x402e01c0
    1af8:	20001fa0 	.word	0x20001fa0
    1afc:	20001ef8 	.word	0x20001ef8
    1b00:	20001f48 	.word	0x20001f48
    1b04:	20001f4c 	.word	0x20001f4c
    1b08:	20001f62 	.word	0x20001f62
    1b0c:	20001f63 	.word	0x20001f63
    1b10:	20001ef4 	.word	0x20001ef4
    1b14:	20001efc 	.word	0x20001efc
    1b18:	20000ae4 	.word	0x20000ae4
    1b1c:	20200000 	.word	0x20200000
    1b20:	e000ef70 	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b24:	4ab2      	ldr	r2, [pc, #712]	; (1df0 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b26:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b28:	2501      	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b2c:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b2e:	6015      	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b30:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b32:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1b36:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b3a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1b3c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    1b40:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1b44:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d1fb      	bne.n	1b44 <usb_isr+0x320>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1b4c:	0c03      	lsrs	r3, r0, #16
    1b4e:	065b      	lsls	r3, r3, #25
    1b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1b54:	f8c6 3154 	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b58:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	f47f ae77 	bne.w	1850 <usb_isr+0x2c>
    1b62:	e6d5      	b.n	1910 <usb_isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1b64:	b292      	uxth	r2, r2
    1b66:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1b6a:	2b07      	cmp	r3, #7
    1b6c:	f63f af60 	bhi.w	1a30 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1b70:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1b74:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b78:	4a9e      	ldr	r2, [pc, #632]	; (1df4 <usb_isr+0x5d0>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b7a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b7e:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1b82:	441a      	add	r2, r3
    1b84:	6813      	ldr	r3, [r2, #0]
    1b86:	bf14      	ite	ne
    1b88:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1b8c:	f023 0301 	biceq.w	r3, r3, #1
    1b90:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b92:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b94:	4b96      	ldr	r3, [pc, #600]	; (1df0 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1b96:	64f9      	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b98:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b9a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b9c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b9e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1ba2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1ba6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1ba8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1bac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1bb0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d1fb      	bne.n	1bb0 <usb_isr+0x38c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1bb8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	f47f ae47 	bne.w	1850 <usb_isr+0x2c>
    1bc2:	e6a5      	b.n	1910 <usb_isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1bc4:	b292      	uxth	r2, r2
    1bc6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1bca:	2907      	cmp	r1, #7
    1bcc:	f63f af30 	bhi.w	1a30 <usb_isr+0x20c>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1bd0:	0089      	lsls	r1, r1, #2
    1bd2:	4888      	ldr	r0, [pc, #544]	; (1df4 <usb_isr+0x5d0>)
		reply_buffer[0] = 0;
    1bd4:	4d88      	ldr	r5, [pc, #544]	; (1df8 <usb_isr+0x5d4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1bd6:	4408      	add	r0, r1
    1bd8:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1bda:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1bdc:	702b      	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    1bde:	706b      	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1be0:	f140 8097 	bpl.w	1d12 <usb_isr+0x4ee>
    1be4:	03ca      	lsls	r2, r1, #15
    1be6:	d501      	bpl.n	1bec <usb_isr+0x3c8>
			reply_buffer[0] = 1;
    1be8:	2301      	movs	r3, #1
    1bea:	702b      	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1bec:	2102      	movs	r1, #2
    1bee:	4882      	ldr	r0, [pc, #520]	; (1df8 <usb_isr+0x5d4>)
    1bf0:	f7ff fdc8 	bl	1784 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1bf4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	f47f ae29 	bne.w	1850 <usb_isr+0x2c>
    1bfe:	e687      	b.n	1910 <usb_isr+0xec>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c00:	4a7e      	ldr	r2, [pc, #504]	; (1dfc <usb_isr+0x5d8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1c02:	2101      	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c04:	4b7c      	ldr	r3, [pc, #496]	; (1df8 <usb_isr+0x5d4>)
    1c06:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1c08:	4618      	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c0a:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1c0c:	f7ff fdba 	bl	1784 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1c10:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c14:	2b00      	cmp	r3, #0
    1c16:	f47f ae1b 	bne.w	1850 <usb_isr+0x2c>
    1c1a:	e679      	b.n	1910 <usb_isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1c1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
    1c20:	4a76      	ldr	r2, [pc, #472]	; (1dfc <usb_isr+0x5d8>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1c22:	4977      	ldr	r1, [pc, #476]	; (1e00 <usb_isr+0x5dc>)
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1c24:	f04f 15cc 	mov.w	r5, #13369548	; 0xcc00cc
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1c28:	7010      	strb	r0, [r2, #0]
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1c2a:	4a76      	ldr	r2, [pc, #472]	; (1e04 <usb_isr+0x5e0>)
    1c2c:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1c2e:	f8c6 51c8 	str.w	r5, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1c32:	f8c6 11cc 	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1c36:	f8c6 21d0 	str.w	r2, [r6, #464]	; 0x1d0
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
    1c3a:	f000 fab3 	bl	21a4 <usb_seremu_configure>
		#endif
		#if defined(CDC3_STATUS_INTERFACE) && defined(CDC3_DATA_INTERFACE)
		usb_serial3_configure();
		#endif
		#if defined(RAWHID_INTERFACE)
		usb_rawhid_configure();
    1c3e:	f000 fa19 	bl	2074 <usb_rawhid_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c42:	4a6b      	ldr	r2, [pc, #428]	; (1df0 <usb_isr+0x5cc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1c44:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c46:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c48:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1c4a:	64ba      	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1c4c:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1c4e:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1c50:	64fb      	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1c52:	f8c6 b1bc 	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1c56:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1c5a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1c5c:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    1c60:	f8c6 21b0 	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1c64:	4a68      	ldr	r2, [pc, #416]	; (1e08 <usb_isr+0x5e4>)
    1c66:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1c68:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d1fb      	bne.n	1c68 <usb_isr+0x444>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1c70:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c74:	2b00      	cmp	r3, #0
    1c76:	f47f adeb 	bne.w	1850 <usb_isr+0x2c>
    1c7a:	e649      	b.n	1910 <usb_isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    1c7c:	f8df e194 	ldr.w	lr, [pc, #404]	; 1e14 <usb_isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
    1c80:	f04f 0ce9 	mov.w	ip, #233	; 0xe9
    1c84:	4d61      	ldr	r5, [pc, #388]	; (1e0c <usb_isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
    1c86:	e88e 0005 	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
    1c8a:	f885 c000 	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
    1c8e:	b301      	cbz	r1, 1cd2 <usb_isr+0x4ae>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1c90:	0409      	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1c92:	4a5f      	ldr	r2, [pc, #380]	; (1e10 <usb_isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1c94:	60fb      	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1c96:	2001      	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1c98:	f041 0380 	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1c9c:	60ba      	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1c9e:	6010      	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1ca0:	f505 5e00 	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1ca4:	6053      	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1ca6:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1caa:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1cae:	f505 5140 	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1cb2:	6095      	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cb4:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1cb8:	f043 0301 	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1cbc:	60d0      	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1cbe:	f8c2 e010 	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1cc2:	6151      	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cc4:	6195      	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1cc6:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    1cca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d1fb      	bne.n	1cca <usb_isr+0x4a6>
	}
	endpoint0_transfer_ack.next = 1;
    1cd2:	4b47      	ldr	r3, [pc, #284]	; (1df0 <usb_isr+0x5cc>)
    1cd4:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1cd6:	f248 0280 	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
    1cda:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1cdc:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1cde:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1ce2:	64bb      	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ce4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1ce6:	64f9      	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1ce8:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1cec:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1cf0:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1cf2:	ea42 0300 	orr.w	r3, r2, r0
    1cf6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1cfa:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1cfe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1d02:	2b00      	cmp	r3, #0
    1d04:	d1fb      	bne.n	1cfe <usb_isr+0x4da>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1d06:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	f47f ada0 	bne.w	1850 <usb_isr+0x2c>
    1d10:	e5fe      	b.n	1910 <usb_isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1d12:	07cb      	lsls	r3, r1, #31
    1d14:	f57f af6a 	bpl.w	1bec <usb_isr+0x3c8>
    1d18:	e766      	b.n	1be8 <usb_isr+0x3c4>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1d1a:	483e      	ldr	r0, [pc, #248]	; (1e14 <usb_isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1d1c:	2600      	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1d1e:	4c3e      	ldr	r4, [pc, #248]	; (1e18 <usb_isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1d20:	6805      	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1d22:	600e      	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1d24:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1d26:	6840      	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
    1d28:	f47f ae46 	bne.w	19b8 <usb_isr+0x194>
    1d2c:	493b      	ldr	r1, [pc, #236]	; (1e1c <usb_isr+0x5f8>)
    1d2e:	4288      	cmp	r0, r1
    1d30:	f47f ae42 	bne.w	19b8 <usb_isr+0x194>
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    1d34:	4935      	ldr	r1, [pc, #212]	; (1e0c <usb_isr+0x5e8>)
    1d36:	7808      	ldrb	r0, [r1, #0]
    1d38:	28a9      	cmp	r0, #169	; 0xa9
    1d3a:	d02b      	beq.n	1d94 <usb_isr+0x570>
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
		} else {
			// any other feature report means Arduino Serial Monitor is open
			usb_seremu_online = 1;
    1d3c:	4a38      	ldr	r2, [pc, #224]	; (1e20 <usb_isr+0x5fc>)
    1d3e:	2101      	movs	r1, #1
    1d40:	7011      	strb	r1, [r2, #0]
    1d42:	e639      	b.n	19b8 <usb_isr+0x194>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1d44:	4837      	ldr	r0, [pc, #220]	; (1e24 <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1d46:	461a      	mov	r2, r3
    1d48:	4d37      	ldr	r5, [pc, #220]	; (1e28 <usb_isr+0x604>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1d4a:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1d4e:	4937      	ldr	r1, [pc, #220]	; (1e2c <usb_isr+0x608>)
    1d50:	4837      	ldr	r0, [pc, #220]	; (1e30 <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1d52:	9301      	str	r3, [sp, #4]
    1d54:	f1be 0f00 	cmp.w	lr, #0
    1d58:	bf08      	it	eq
    1d5a:	4601      	moveq	r1, r0
    1d5c:	4628      	mov	r0, r5
    1d5e:	f001 fb35 	bl	33cc <memcpy>
					usb_descriptor_buffer[1] = 7;
    1d62:	2207      	movs	r2, #7
    1d64:	9b01      	ldr	r3, [sp, #4]
    1d66:	706a      	strb	r2, [r5, #1]
    1d68:	e6a7      	b.n	1aba <usb_isr+0x296>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1d6a:	482e      	ldr	r0, [pc, #184]	; (1e24 <usb_isr+0x600>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1d6c:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1d6e:	4930      	ldr	r1, [pc, #192]	; (1e30 <usb_isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1d70:	7805      	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1d72:	482e      	ldr	r0, [pc, #184]	; (1e2c <usb_isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1d74:	9301      	str	r3, [sp, #4]
    1d76:	2d00      	cmp	r5, #0
    1d78:	bf08      	it	eq
    1d7a:	4601      	moveq	r1, r0
    1d7c:	482a      	ldr	r0, [pc, #168]	; (1e28 <usb_isr+0x604>)
    1d7e:	f001 fb25 	bl	33cc <memcpy>
    1d82:	4d29      	ldr	r5, [pc, #164]	; (1e28 <usb_isr+0x604>)
    1d84:	9b01      	ldr	r3, [sp, #4]
    1d86:	e698      	b.n	1aba <usb_isr+0x296>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1d88:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1d8a:	780b      	ldrb	r3, [r1, #0]
    1d8c:	4293      	cmp	r3, r2
    1d8e:	bf28      	it	cs
    1d90:	4613      	movcs	r3, r2
    1d92:	e687      	b.n	1aa4 <usb_isr+0x280>
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
    1d94:	7848      	ldrb	r0, [r1, #1]
    1d96:	2845      	cmp	r0, #69	; 0x45
    1d98:	d1d0      	bne.n	1d3c <usb_isr+0x518>
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
    1d9a:	7888      	ldrb	r0, [r1, #2]
    1d9c:	28c2      	cmp	r0, #194	; 0xc2
    1d9e:	d1cd      	bne.n	1d3c <usb_isr+0x518>
    1da0:	78c9      	ldrb	r1, [r1, #3]
    1da2:	296b      	cmp	r1, #107	; 0x6b
    1da4:	d1ca      	bne.n	1d3c <usb_isr+0x518>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1da6:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1da8:	4822      	ldr	r0, [pc, #136]	; (1e34 <usb_isr+0x610>)
    1daa:	7801      	ldrb	r1, [r0, #0]
    1dac:	f041 0104 	orr.w	r1, r1, #4
    1db0:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1db2:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1db6:	0608      	lsls	r0, r1, #24
    1db8:	d406      	bmi.n	1dc8 <usb_isr+0x5a4>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1dba:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1dbe:	2080      	movs	r0, #128	; 0x80
    1dc0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1dc4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1dc8:	b662      	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)) {
		if (endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
		  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
			printf("seremu reboot request\n");
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1dca:	4a1b      	ldr	r2, [pc, #108]	; (1e38 <usb_isr+0x614>)
    1dcc:	2150      	movs	r1, #80	; 0x50
    1dce:	7011      	strb	r1, [r2, #0]
    1dd0:	e5f2      	b.n	19b8 <usb_isr+0x194>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1dd2:	4918      	ldr	r1, [pc, #96]	; (1e34 <usb_isr+0x610>)
    1dd4:	780a      	ldrb	r2, [r1, #0]
    1dd6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1dda:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1ddc:	b92a      	cbnz	r2, 1dea <usb_isr+0x5c6>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1dde:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1de6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    1dea:	f004 ffbd 	bl	6d68 <___reboot_Teensyduino__veneer>
    1dee:	bf00      	nop
    1df0:	20001fa0 	.word	0x20001fa0
    1df4:	402e01c0 	.word	0x402e01c0
    1df8:	20001efc 	.word	0x20001efc
    1dfc:	20001f61 	.word	0x20001f61
    1e00:	00cc0002 	.word	0x00cc0002
    1e04:	000200cc 	.word	0x000200cc
    1e08:	20001ef4 	.word	0x20001ef4
    1e0c:	20001eec 	.word	0x20001eec
    1e10:	20001f80 	.word	0x20001f80
    1e14:	20001e60 	.word	0x20001e60
    1e18:	03000921 	.word	0x03000921
    1e1c:	00040001 	.word	0x00040001
    1e20:	20001f64 	.word	0x20001f64
    1e24:	20001f62 	.word	0x20001f62
    1e28:	20200000 	.word	0x20200000
    1e2c:	60001eb4 	.word	0x60001eb4
    1e30:	60001f00 	.word	0x60001f00
    1e34:	20001f5c 	.word	0x20001f5c
    1e38:	20001f63 	.word	0x20001f63

00001e3c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1e3c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e3e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1e46:	bf14      	ite	ne
    1e48:	2700      	movne	r7, #0
    1e4a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e4e:	2a02      	cmp	r2, #2
    1e50:	d901      	bls.n	1e56 <usb_config_rx+0x1a>
    1e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1e56:	ea4f 19c0 	mov.w	r9, r0, lsl #7
    1e5a:	f8df a040 	ldr.w	sl, [pc, #64]	; 1e9c <usb_config_rx+0x60>
    1e5e:	460d      	mov	r5, r1
    1e60:	4604      	mov	r4, r0
    1e62:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1e66:	2100      	movs	r1, #0
    1e68:	2240      	movs	r2, #64	; 0x40
    1e6a:	4698      	mov	r8, r3
    1e6c:	4630      	mov	r0, r6
    1e6e:	f001 fbab 	bl	35c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e72:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1e74:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    1e78:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1e7c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e80:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1e82:	f1b8 0f00 	cmp.w	r8, #0
    1e86:	d0e4      	beq.n	1e52 <usb_config_rx+0x16>
    1e88:	4b03      	ldr	r3, [pc, #12]	; (1e98 <usb_config_rx+0x5c>)
    1e8a:	40a0      	lsls	r0, r4
    1e8c:	681c      	ldr	r4, [r3, #0]
    1e8e:	4320      	orrs	r0, r4
    1e90:	6018      	str	r0, [r3, #0]
    1e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e96:	bf00      	nop
    1e98:	20001ef8 	.word	0x20001ef8
    1e9c:	20000000 	.word	0x20000000

00001ea0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ea0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1ea2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1eaa:	bf14      	ite	ne
    1eac:	2700      	movne	r7, #0
    1eae:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1eb2:	2a02      	cmp	r2, #2
    1eb4:	d901      	bls.n	1eba <usb_config_tx+0x1a>
    1eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1eba:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ebc:	01c5      	lsls	r5, r0, #7
    1ebe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1f04 <usb_config_tx+0x64>
    1ec2:	4688      	mov	r8, r1
    1ec4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ec6:	2100      	movs	r1, #0
    1ec8:	4604      	mov	r4, r0
    1eca:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ecc:	eb09 0a05 	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ed0:	4650      	mov	r0, sl
    1ed2:	f001 fb79 	bl	35c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ed6:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1ed8:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    1edc:	f849 1005 	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1ee0:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ee4:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1ee8:	2e00      	cmp	r6, #0
    1eea:	d0e4      	beq.n	1eb6 <usb_config_tx+0x16>
    1eec:	f104 0010 	add.w	r0, r4, #16
    1ef0:	4b03      	ldr	r3, [pc, #12]	; (1f00 <usb_config_tx+0x60>)
    1ef2:	4082      	lsls	r2, r0
    1ef4:	6818      	ldr	r0, [r3, #0]
    1ef6:	4302      	orrs	r2, r0
    1ef8:	601a      	str	r2, [r3, #0]
    1efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1efe:	bf00      	nop
    1f00:	20001ef8 	.word	0x20001ef8
    1f04:	20000000 	.word	0x20000000

00001f08 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f08:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1f0a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1f0c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1f12:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f14:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1f16:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1f18:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1f1c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1f20:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1f24:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1f28:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1f2a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1f2c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1f2e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1f30:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1f32:	bcf0      	pop	{r4, r5, r6, r7}
    1f34:	4770      	bx	lr
    1f36:	bf00      	nop

00001f38 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f38:	1e83      	subs	r3, r0, #2
    1f3a:	2b02      	cmp	r3, #2
    1f3c:	d900      	bls.n	1f40 <usb_transmit+0x8>
    1f3e:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1f40:	4b06      	ldr	r3, [pc, #24]	; (1f5c <usb_transmit+0x24>)
    1f42:	460a      	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1f44:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1f46:	f100 0410 	add.w	r4, r0, #16
    1f4a:	2501      	movs	r5, #1
    1f4c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1f50:	fa05 f104 	lsl.w	r1, r5, r4
    1f54:	3040      	adds	r0, #64	; 0x40
}
    1f56:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1f58:	f7ff bbb0 	b.w	16bc <schedule_transfer>
    1f5c:	20000000 	.word	0x20000000

00001f60 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f60:	1e83      	subs	r3, r0, #2
    1f62:	2b02      	cmp	r3, #2
    1f64:	d900      	bls.n	1f68 <usb_receive+0x8>
    1f66:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1f68:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1f6a:	4b05      	ldr	r3, [pc, #20]	; (1f80 <usb_receive+0x20>)
    1f6c:	2401      	movs	r4, #1
    1f6e:	460a      	mov	r2, r1
    1f70:	fa04 f100 	lsl.w	r1, r4, r0
    1f74:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    1f78:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1f7c:	f7ff bb9e 	b.w	16bc <schedule_transfer>
    1f80:	20000000 	.word	0x20000000

00001f84 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1f84:	6840      	ldr	r0, [r0, #4]
#endif
}
    1f86:	4770      	bx	lr

00001f88 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1f88:	4a12      	ldr	r2, [pc, #72]	; (1fd4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f8a:	4b13      	ldr	r3, [pc, #76]	; (1fd8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1f8c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f94:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1f96:	b510      	push	{r4, lr}
    1f98:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1f9a:	d802      	bhi.n	1fa2 <usb_init_serialnumber+0x1a>
    1f9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1fa0:	0040      	lsls	r0, r0, #1
    1fa2:	4c0e      	ldr	r4, [pc, #56]	; (1fdc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1fa4:	a901      	add	r1, sp, #4
    1fa6:	220a      	movs	r2, #10
    1fa8:	f7ff f868 	bl	107c <ultoa>
    1fac:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    1fae:	2300      	movs	r3, #0
    1fb0:	4620      	mov	r0, r4
		char c = buf[i];
    1fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
    1fb6:	3301      	adds	r3, #1
		if (!c) break;
    1fb8:	b13a      	cbz	r2, 1fca <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1fba:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1fbc:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1fc0:	d1f7      	bne.n	1fb2 <usb_init_serialnumber+0x2a>
    1fc2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1fc4:	7023      	strb	r3, [r4, #0]
}
    1fc6:	b004      	add	sp, #16
    1fc8:	bd10      	pop	{r4, pc}
    1fca:	005b      	lsls	r3, r3, #1
    1fcc:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1fce:	7023      	strb	r3, [r4, #0]
}
    1fd0:	b004      	add	sp, #16
    1fd2:	bd10      	pop	{r4, pc}
    1fd4:	401f4400 	.word	0x401f4400
    1fd8:	0098967f 	.word	0x0098967f
    1fdc:	200015b8 	.word	0x200015b8

00001fe0 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    1fe0:	4a0a      	ldr	r2, [pc, #40]	; (200c <rx_event+0x2c>)
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    1fe2:	b410      	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    1fe4:	7813      	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    1fe6:	69c4      	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    1fe8:	3301      	adds	r3, #1
    1fea:	2b04      	cmp	r3, #4
    1fec:	d907      	bls.n	1ffe <rx_event+0x1e>
    1fee:	2100      	movs	r1, #0
	rx_list[head] = i;
    1ff0:	4807      	ldr	r0, [pc, #28]	; (2010 <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    1ff2:	460b      	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    1ff4:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    1ff6:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    1ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ffc:	4770      	bx	lr
    1ffe:	b2d9      	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    2000:	4803      	ldr	r0, [pc, #12]	; (2010 <rx_event+0x30>)
	rx_head = head;
    2002:	7011      	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    2004:	54c4      	strb	r4, [r0, r3]
	rx_head = head;
}
    2006:	f85d 4b04 	ldr.w	r4, [sp], #4
    200a:	4770      	bx	lr
    200c:	20001f58 	.word	0x20001f58
    2010:	20001f18 	.word	0x20001f18

00002014 <rx_queue_transfer>:
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
    2014:	4912      	ldr	r1, [pc, #72]	; (2060 <rx_queue_transfer+0x4c>)
    2016:	eb01 1180 	add.w	r1, r1, r0, lsl #6
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    201a:	b538      	push	{r3, r4, r5, lr}
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    201c:	f021 021f 	bic.w	r2, r1, #31
    2020:	4603      	mov	r3, r0
	uint32_t end_addr = (uint32_t)addr + size;
    2022:	f101 0540 	add.w	r5, r1, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    2026:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    202a:	4c0e      	ldr	r4, [pc, #56]	; (2064 <rx_queue_transfer+0x50>)
    202c:	6022      	str	r2, [r4, #0]
		location += 32;
    202e:	3220      	adds	r2, #32
	} while (location < end_addr);
    2030:	4295      	cmp	r5, r2
    2032:	d8fb      	bhi.n	202c <rx_queue_transfer+0x18>
	asm("dsb");
    2034:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2038:	f3bf 8f6f 	isb	sy
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    203c:	4c0a      	ldr	r4, [pc, #40]	; (2068 <rx_queue_transfer+0x54>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    203e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    2042:	4a0a      	ldr	r2, [pc, #40]	; (206c <rx_queue_transfer+0x58>)
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    2044:	eb04 1443 	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * RAWHID_RX_SIZE;
	arm_dcache_delete(buffer, RAWHID_RX_SIZE);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2048:	6015      	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, RAWHID_RX_SIZE, i);
    204a:	2240      	movs	r2, #64	; 0x40
    204c:	4620      	mov	r0, r4
    204e:	f7ff ff5b 	bl	1f08 <usb_prepare_transfer>
	usb_receive(RAWHID_RX_ENDPOINT, rx_transfer + i);
    2052:	4621      	mov	r1, r4
    2054:	2004      	movs	r0, #4
    2056:	f7ff ff83 	bl	1f60 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    205a:	4b05      	ldr	r3, [pc, #20]	; (2070 <rx_queue_transfer+0x5c>)
    205c:	601d      	str	r5, [r3, #0]
    205e:	bd38      	pop	{r3, r4, r5, pc}
    2060:	20200060 	.word	0x20200060
    2064:	e000ef5c 	.word	0xe000ef5c
    2068:	20001ae0 	.word	0x20001ae0
    206c:	e000e18c 	.word	0xe000e18c
    2070:	e000e10c 	.word	0xe000e10c

00002074 <usb_rawhid_configure>:


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2074:	2100      	movs	r1, #0
    2076:	4816      	ldr	r0, [pc, #88]	; (20d0 <usb_rawhid_configure+0x5c>)
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_rawhid_configure(void)
{
    2078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    207a:	2580      	movs	r5, #128	; 0x80
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    207c:	460c      	mov	r4, r1
	rx_head = 0;
    207e:	4f15      	ldr	r7, [pc, #84]	; (20d4 <usb_rawhid_configure+0x60>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2080:	462a      	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    2082:	4e15      	ldr	r6, [pc, #84]	; (20d8 <usb_rawhid_configure+0x64>)


void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2084:	f001 faa0 	bl	35c8 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2088:	462a      	mov	r2, r5
    208a:	4621      	mov	r1, r4
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    208c:	4d13      	ldr	r5, [pc, #76]	; (20dc <usb_rawhid_configure+0x68>)

void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    208e:	4814      	ldr	r0, [pc, #80]	; (20e0 <usb_rawhid_configure+0x6c>)
    2090:	f001 fa9a 	bl	35c8 <memset>
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    2094:	4623      	mov	r3, r4
    2096:	4622      	mov	r2, r4
    2098:	2140      	movs	r1, #64	; 0x40
    209a:	2003      	movs	r0, #3
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    209c:	703c      	strb	r4, [r7, #0]
void usb_rawhid_configure(void)
{
	printf("usb_rawhid_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    209e:	7034      	strb	r4, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
    20a0:	702c      	strb	r4, [r5, #0]
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
    20a2:	f7ff fefd 	bl	1ea0 <usb_config_tx>
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
    20a6:	4622      	mov	r2, r4
    20a8:	4b0e      	ldr	r3, [pc, #56]	; (20e4 <usb_rawhid_configure+0x70>)
    20aa:	2140      	movs	r1, #64	; 0x40
    20ac:	2004      	movs	r0, #4
    20ae:	f7ff fec5 	bl	1e3c <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    20b2:	4620      	mov	r0, r4
    20b4:	f7ff ffae 	bl	2014 <rx_queue_transfer>
    20b8:	2001      	movs	r0, #1
    20ba:	f7ff ffab 	bl	2014 <rx_queue_transfer>
    20be:	2002      	movs	r0, #2
    20c0:	f7ff ffa8 	bl	2014 <rx_queue_transfer>
    20c4:	2003      	movs	r0, #3
}
    20c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(RAWHID_TX_ENDPOINT, RAWHID_TX_SIZE, 0, NULL);
	usb_config_rx(RAWHID_RX_ENDPOINT, RAWHID_RX_SIZE, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    20ca:	f7ff bfa3 	b.w	2014 <rx_queue_transfer>
    20ce:	bf00      	nop
    20d0:	20001c60 	.word	0x20001c60
    20d4:	20001f58 	.word	0x20001f58
    20d8:	20001f5e 	.word	0x20001f5e
    20dc:	20001f5a 	.word	0x20001f5a
    20e0:	20001ae0 	.word	0x20001ae0
    20e4:	00001fe1 	.word	0x00001fe1

000020e8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    20e8:	b570      	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    20ea:	0141      	lsls	r1, r0, #5
    20ec:	4c12      	ldr	r4, [pc, #72]	; (2138 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    20ee:	4d13      	ldr	r5, [pc, #76]	; (213c <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    20f0:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
    20f2:	440c      	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    20f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    20f8:	440d      	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    20fa:	4811      	ldr	r0, [pc, #68]	; (2140 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    20fc:	4621      	mov	r1, r4
    20fe:	2220      	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2100:	6006      	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
    2102:	4628      	mov	r0, r5
    2104:	f7ff ff00 	bl	1f08 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2108:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    210c:	f104 0120 	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
    2110:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2114:	4a0b      	ldr	r2, [pc, #44]	; (2144 <rx_queue_transfer+0x5c>)
    2116:	6013      	str	r3, [r2, #0]
		location += 32;
    2118:	3320      	adds	r3, #32
	} while (location < end_addr);
    211a:	4299      	cmp	r1, r3
    211c:	d8fb      	bhi.n	2116 <rx_queue_transfer+0x2e>
	asm("dsb");
    211e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2122:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
    2126:	2002      	movs	r0, #2
    2128:	4629      	mov	r1, r5
    212a:	f7ff ff19 	bl	1f60 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    212e:	4b06      	ldr	r3, [pc, #24]	; (2148 <rx_queue_transfer+0x60>)
    2130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2134:	601a      	str	r2, [r3, #0]
    2136:	bd70      	pop	{r4, r5, r6, pc}
    2138:	20200260 	.word	0x20200260
    213c:	20001b60 	.word	0x20001b60
    2140:	e000e18c 	.word	0xe000e18c
    2144:	e000ef5c 	.word	0xe000ef5c
    2148:	e000e10c 	.word	0xe000e10c

0000214c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    214c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    214e:	69c0      	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    2150:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2154:	b10b      	cbz	r3, 215a <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
    2156:	f7ff bfc7 	b.w	20e8 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
    215a:	490d      	ldr	r1, [pc, #52]	; (2190 <rx_event+0x44>)
    215c:	0142      	lsls	r2, r0, #5
    215e:	5c8a      	ldrb	r2, [r1, r2]
    2160:	2a00      	cmp	r2, #0
    2162:	d0f8      	beq.n	2156 <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
    2164:	490b      	ldr	r1, [pc, #44]	; (2194 <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2166:	b410      	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2168:	4c0b      	ldr	r4, [pc, #44]	; (2198 <rx_event+0x4c>)
		rx_index[i] = 0;
    216a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
    216e:	7822      	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    2170:	490a      	ldr	r1, [pc, #40]	; (219c <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2172:	3201      	adds	r2, #1
    2174:	2a08      	cmp	r2, #8
    2176:	bf94      	ite	ls
    2178:	b2d3      	uxtbls	r3, r2
    217a:	461a      	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
    217c:	7023      	strb	r3, [r4, #0]
		rx_available += len;
    217e:	680b      	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2180:	4c07      	ldr	r4, [pc, #28]	; (21a0 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
    2182:	3320      	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2184:	54a0      	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
    2186:	600b      	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
    2188:	f85d 4b04 	ldr.w	r4, [sp], #4
    218c:	4770      	bx	lr
    218e:	bf00      	nop
    2190:	20200260 	.word	0x20200260
    2194:	20001f08 	.word	0x20001f08
    2198:	20001f59 	.word	0x20001f59
    219c:	20001f04 	.word	0x20001f04
    21a0:	20001f20 	.word	0x20001f20

000021a4 <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    21a4:	2100      	movs	r1, #0
    21a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
    21aa:	481f      	ldr	r0, [pc, #124]	; (2228 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
    21ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    21ae:	460d      	mov	r5, r1
    21b0:	4c1e      	ldr	r4, [pc, #120]	; (222c <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    21b2:	f001 fa09 	bl	35c8 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    21b6:	4e1e      	ldr	r6, [pc, #120]	; (2230 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    21b8:	4b1e      	ldr	r3, [pc, #120]	; (2234 <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    21ba:	4629      	mov	r1, r5
    21bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    21c0:	481d      	ldr	r0, [pc, #116]	; (2238 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    21c2:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    21c4:	462c      	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    21c6:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    21c8:	f001 f9fe 	bl	35c8 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    21cc:	7035      	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    21ce:	462a      	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    21d0:	4e1a      	ldr	r6, [pc, #104]	; (223c <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    21d2:	2120      	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    21d4:	4b1a      	ldr	r3, [pc, #104]	; (2240 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    21d6:	2002      	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    21d8:	4f1a      	ldr	r7, [pc, #104]	; (2244 <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    21da:	701d      	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    21dc:	6035      	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    21de:	4b1a      	ldr	r3, [pc, #104]	; (2248 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
    21e0:	6075      	str	r5, [r6, #4]
    21e2:	60b5      	str	r5, [r6, #8]
    21e4:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    21e6:	603d      	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
    21e8:	f7ff fe28 	bl	1e3c <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
    21ec:	462b      	mov	r3, r5
    21ee:	462a      	mov	r2, r5
    21f0:	2140      	movs	r1, #64	; 0x40
    21f2:	2002      	movs	r0, #2
    21f4:	f7ff fe54 	bl	1ea0 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    21f8:	4620      	mov	r0, r4
    21fa:	3401      	adds	r4, #1
    21fc:	f7ff ff74 	bl	20e8 <rx_queue_transfer>
    2200:	2c08      	cmp	r4, #8
    2202:	d1f9      	bne.n	21f8 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    2204:	4b11      	ldr	r3, [pc, #68]	; (224c <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    2206:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2208:	4811      	ldr	r0, [pc, #68]	; (2250 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
    220a:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    220c:	4c11      	ldr	r4, [pc, #68]	; (2254 <usb_seremu_configure+0xb0>)
    220e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2210:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    2218:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    221c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2220:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2226:	bf00      	nop
    2228:	20001ce0 	.word	0x20001ce0
    222c:	20001f5f 	.word	0x20001f5f
    2230:	20001f59 	.word	0x20001f59
    2234:	20001f50 	.word	0x20001f50
    2238:	20001b60 	.word	0x20001b60
    223c:	20001f08 	.word	0x20001f08
    2240:	20001f5b 	.word	0x20001f5b
    2244:	20001f04 	.word	0x20001f04
    2248:	0000214d 	.word	0x0000214d
    224c:	402e0000 	.word	0x402e0000
    2250:	20001f48 	.word	0x20001f48
    2254:	000023c1 	.word	0x000023c1

00002258 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
    2258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    225a:	4d14      	ldr	r5, [pc, #80]	; (22ac <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
    225c:	4a14      	ldr	r2, [pc, #80]	; (22b0 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    225e:	782b      	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
    2260:	7812      	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
    2262:	b2db      	uxtb	r3, r3

	if (tail == rx_head) return -1;
    2264:	4293      	cmp	r3, r2
    2266:	d01d      	beq.n	22a4 <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
    2268:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    226a:	4a12      	ldr	r2, [pc, #72]	; (22b4 <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
    226c:	4e12      	ldr	r6, [pc, #72]	; (22b8 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    226e:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    2270:	4c12      	ldr	r4, [pc, #72]	; (22bc <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2272:	bf28      	it	cs
    2274:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2276:	5cd0      	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
    2278:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    227c:	eb02 1140 	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    2280:	3201      	adds	r2, #1
    2282:	2a1f      	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
    2284:	eb04 0701 	add.w	r7, r4, r1
	int c = *p;
    2288:	5c64      	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
    228a:	d805      	bhi.n	2298 <usb_seremu_getchar+0x40>
    228c:	7879      	ldrb	r1, [r7, #1]
    228e:	b119      	cbz	r1, 2298 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
    2290:	f826 2010 	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
    2294:	4620      	mov	r0, r4
    2296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
    2298:	b2db      	uxtb	r3, r3
    229a:	702b      	strb	r3, [r5, #0]
		rx_queue_transfer(i);
    229c:	f7ff ff24 	bl	20e8 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
    22a0:	4620      	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
    22a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
    22a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
    22a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22aa:	bf00      	nop
    22ac:	20001f5b 	.word	0x20001f5b
    22b0:	20001f59 	.word	0x20001f59
    22b4:	20001f20 	.word	0x20001f20
    22b8:	20001f08 	.word	0x20001f08
    22bc:	20200260 	.word	0x20200260

000022c0 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    22c0:	4b0b      	ldr	r3, [pc, #44]	; (22f0 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
    22c2:	4a0c      	ldr	r2, [pc, #48]	; (22f4 <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    22c4:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    22c6:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
    22c8:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    22ca:	4293      	cmp	r3, r2
    22cc:	d00d      	beq.n	22ea <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    22ce:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    22d0:	4a09      	ldr	r2, [pc, #36]	; (22f8 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    22d2:	480a      	ldr	r0, [pc, #40]	; (22fc <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    22d4:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    22d6:	490a      	ldr	r1, [pc, #40]	; (2300 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    22d8:	bf28      	it	cs
    22da:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    22dc:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
    22de:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    22e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    22e6:	5cc8      	ldrb	r0, [r1, r3]
    22e8:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    22ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
    22ee:	4770      	bx	lr
    22f0:	20001f5b 	.word	0x20001f5b
    22f4:	20001f59 	.word	0x20001f59
    22f8:	20001f20 	.word	0x20001f20
    22fc:	20001f08 	.word	0x20001f08
    2300:	20200260 	.word	0x20200260

00002304 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
    2304:	b508      	push	{r3, lr}
	uint32_t tail = rx_tail;
    2306:	4a06      	ldr	r2, [pc, #24]	; (2320 <usb_seremu_available+0x1c>)
	if (tail == rx_head) {
    2308:	4b06      	ldr	r3, [pc, #24]	; (2324 <usb_seremu_available+0x20>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
    230a:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) {
    230c:	781b      	ldrb	r3, [r3, #0]
    230e:	429a      	cmp	r2, r3
    2310:	d001      	beq.n	2316 <usb_seremu_available+0x12>
		yield();
		return 0;
	}
	// TODO: how much is actually available?
	return 1;
    2312:	2001      	movs	r0, #1
}
    2314:	bd08      	pop	{r3, pc}
// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) {
		yield();
    2316:	f000 fb13 	bl	2940 <yield>
		return 0;
    231a:	2000      	movs	r0, #0
    231c:	bd08      	pop	{r3, pc}
    231e:	bf00      	nop
    2320:	20001f5b 	.word	0x20001f5b
    2324:	20001f59 	.word	0x20001f59

00002328 <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
    2328:	b538      	push	{r3, r4, r5, lr}
	if (!tx_available) return;
    232a:	4c08      	ldr	r4, [pc, #32]	; (234c <tx_zero_pad+0x24>)
    232c:	8822      	ldrh	r2, [r4, #0]
    232e:	b162      	cbz	r2, 234a <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    2330:	4907      	ldr	r1, [pc, #28]	; (2350 <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
    2332:	f1c2 0340 	rsb	r3, r2, #64	; 0x40
    2336:	4807      	ldr	r0, [pc, #28]	; (2354 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    2338:	780d      	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
    233a:	2100      	movs	r1, #0
    233c:	eb03 1385 	add.w	r3, r3, r5, lsl #6
    2340:	4418      	add	r0, r3
    2342:	f001 f941 	bl	35c8 <memset>
	tx_available = 0;
    2346:	2300      	movs	r3, #0
    2348:	8023      	strh	r3, [r4, #0]
    234a:	bd38      	pop	{r3, r4, r5, pc}
    234c:	20001f50 	.word	0x20001f50
    2350:	20001f5f 	.word	0x20001f5f
    2354:	20200360 	.word	0x20200360

00002358 <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
    2358:	b570      	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    235a:	4e15      	ldr	r6, [pc, #84]	; (23b0 <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    235c:	2300      	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    235e:	4d15      	ldr	r5, [pc, #84]	; (23b4 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    2360:	2240      	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    2362:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    2364:	4c14      	ldr	r4, [pc, #80]	; (23b8 <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
    2366:	eb05 1541 	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
    236a:	eb04 1481 	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
    236e:	4628      	mov	r0, r5
    2370:	4621      	mov	r1, r4
    2372:	f7ff fdc9 	bl	1f08 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2376:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    237a:	f104 0140 	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
    237e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2382:	4a0e      	ldr	r2, [pc, #56]	; (23bc <tx_queue_transfer+0x64>)
    2384:	6013      	str	r3, [r2, #0]
		location += 32;
    2386:	3320      	adds	r3, #32
	} while (location < end_addr);
    2388:	4299      	cmp	r1, r3
    238a:	d8fb      	bhi.n	2384 <tx_queue_transfer+0x2c>
	asm("dsb");
    238c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2390:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
    2394:	2002      	movs	r0, #2
    2396:	4629      	mov	r1, r5
    2398:	f7ff fdce 	bl	1f38 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    239c:	7833      	ldrb	r3, [r6, #0]
    239e:	4a04      	ldr	r2, [pc, #16]	; (23b0 <tx_queue_transfer+0x58>)
    23a0:	3301      	adds	r3, #1
    23a2:	b2db      	uxtb	r3, r3
    23a4:	2b0b      	cmp	r3, #11
    23a6:	bf88      	it	hi
    23a8:	2300      	movhi	r3, #0
    23aa:	7013      	strb	r3, [r2, #0]
    23ac:	bd70      	pop	{r4, r5, r6, pc}
    23ae:	bf00      	nop
    23b0:	20001f5f 	.word	0x20001f5f
    23b4:	20001ce0 	.word	0x20001ce0
    23b8:	20200360 	.word	0x20200360
    23bc:	e000ef70 	.word	0xe000ef70

000023c0 <usb_seremu_flush_callback>:
	timer_stop();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
    23c0:	b508      	push	{r3, lr}
	if (tx_noautoflush) return;
    23c2:	4b08      	ldr	r3, [pc, #32]	; (23e4 <usb_seremu_flush_callback+0x24>)
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	b92b      	cbnz	r3, 23d4 <usb_seremu_flush_callback+0x14>
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
    23c8:	4b07      	ldr	r3, [pc, #28]	; (23e8 <usb_seremu_flush_callback+0x28>)
    23ca:	881b      	ldrh	r3, [r3, #0]
    23cc:	3b01      	subs	r3, #1
    23ce:	b29b      	uxth	r3, r3
    23d0:	2b3e      	cmp	r3, #62	; 0x3e
    23d2:	d900      	bls.n	23d6 <usb_seremu_flush_callback+0x16>
    23d4:	bd08      	pop	{r3, pc}
	tx_zero_pad();
    23d6:	f7ff ffa7 	bl	2328 <tx_zero_pad>
	tx_queue_transfer();
}
    23da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	if (tx_available == 0 || tx_available >= SEREMU_TX_SIZE) return;
	tx_zero_pad();
	tx_queue_transfer();
    23de:	f7ff bfbb 	b.w	2358 <tx_queue_transfer>
    23e2:	bf00      	nop
    23e4:	20001f60 	.word	0x20001f60
    23e8:	20001f50 	.word	0x20001f50

000023ec <usb_seremu_write.part.1>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
    23ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f0:	b085      	sub	sp, #20
    23f2:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    23f4:	9100      	str	r1, [sp, #0]
    23f6:	2900      	cmp	r1, #0
    23f8:	f000 8084 	beq.w	2504 <usb_seremu_write.part.1+0x118>
    23fc:	2300      	movs	r3, #0
    23fe:	4f42      	ldr	r7, [pc, #264]	; (2508 <usb_seremu_write.part.1+0x11c>)
    2400:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2524 <usb_seremu_write.part.1+0x138>
    2404:	f8df a110 	ldr.w	sl, [pc, #272]	; 2518 <usb_seremu_write.part.1+0x12c>
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    2408:	4e40      	ldr	r6, [pc, #256]	; (250c <usb_seremu_write.part.1+0x120>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    240a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 2528 <usb_seremu_write.part.1+0x13c>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    240e:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    2410:	2101      	movs	r1, #1
		transfer_t *xfer = tx_transfer + tx_head;
    2412:	4b3f      	ldr	r3, [pc, #252]	; (2510 <usb_seremu_write.part.1+0x124>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    2414:	7039      	strb	r1, [r7, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    2416:	781a      	ldrb	r2, [r3, #0]
    2418:	493e      	ldr	r1, [pc, #248]	; (2514 <usb_seremu_write.part.1+0x128>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    241a:	f8b8 3000 	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    241e:	eb01 1942 	add.w	r9, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2422:	bb0b      	cbnz	r3, 2468 <usb_seremu_write.part.1+0x7c>
    2424:	461d      	mov	r5, r3
    2426:	461c      	mov	r4, r3
			uint32_t status = usb_transfer_status(xfer);
    2428:	4648      	mov	r0, r9
    242a:	f7ff fdab 	bl	1f84 <usb_transfer_status>
			if (!(status & 0x80)) {
    242e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    2432:	f04f 0300 	mov.w	r3, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2436:	4938      	ldr	r1, [pc, #224]	; (2518 <usb_seremu_write.part.1+0x12c>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2438:	d056      	beq.n	24e8 <usb_seremu_write.part.1+0xfc>
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    243a:	f89a 2000 	ldrb.w	r2, [sl]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			tx_noautoflush = 0;
    243e:	703b      	strb	r3, [r7, #0]
			if (!waiting) {
    2440:	b904      	cbnz	r4, 2444 <usb_seremu_write.part.1+0x58>
				wait_begin_at = systick_millis_count;
    2442:	6835      	ldr	r5, [r6, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2444:	2a00      	cmp	r2, #0
    2446:	d134      	bne.n	24b2 <usb_seremu_write.part.1+0xc6>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2448:	6833      	ldr	r3, [r6, #0]
    244a:	2401      	movs	r4, #1
    244c:	1b5b      	subs	r3, r3, r5
    244e:	2b32      	cmp	r3, #50	; 0x32
    2450:	d853      	bhi.n	24fa <usb_seremu_write.part.1+0x10e>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
    2452:	f89b 3000 	ldrb.w	r3, [fp]
    2456:	b363      	cbz	r3, 24b2 <usb_seremu_write.part.1+0xc6>
			yield();
    2458:	f000 fa72 	bl	2940 <yield>
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    245c:	f8b8 3000 	ldrh.w	r3, [r8]
    2460:	2b00      	cmp	r3, #0
    2462:	d0e1      	beq.n	2428 <usb_seremu_write.part.1+0x3c>
    2464:	4a2a      	ldr	r2, [pc, #168]	; (2510 <usb_seremu_write.part.1+0x124>)
    2466:	7812      	ldrb	r2, [r2, #0]
    2468:	461c      	mov	r4, r3
    246a:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
    246e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2472:	4a2a      	ldr	r2, [pc, #168]	; (251c <usb_seremu_write.part.1+0x130>)
    2474:	4410      	add	r0, r2
		if (size >= tx_available) {
    2476:	9a00      	ldr	r2, [sp, #0]
    2478:	42a2      	cmp	r2, r4
    247a:	d31e      	bcc.n	24ba <usb_seremu_write.part.1+0xce>
			memcpy(txdata, data, tx_available);
			size -= tx_available;
    247c:	9b00      	ldr	r3, [sp, #0]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    247e:	2500      	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2480:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2484:	4622      	mov	r2, r4
			size -= tx_available;
    2486:	1b1b      	subs	r3, r3, r4
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2488:	4649      	mov	r1, r9
			size -= tx_available;
    248a:	9300      	str	r3, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    248c:	f000 ff9e 	bl	33cc <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    2490:	f8a8 5000 	strh.w	r5, [r8]
			tx_queue_transfer();
    2494:	f7ff ff60 	bl	2358 <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    2498:	9a01      	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    249a:	4b21      	ldr	r3, [pc, #132]	; (2520 <usb_seremu_write.part.1+0x134>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
    249c:	4422      	add	r2, r4
    249e:	9201      	str	r2, [sp, #4]
			data += tx_available;
    24a0:	464a      	mov	r2, r9
    24a2:	4422      	add	r2, r4
    24a4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    24a6:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    24aa:	9b00      	ldr	r3, [sp, #0]
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    24ac:	703d      	strb	r5, [r7, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    24ae:	2b00      	cmp	r3, #0
    24b0:	d1ae      	bne.n	2410 <usb_seremu_write.part.1+0x24>
    24b2:	9801      	ldr	r0, [sp, #4]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    24b4:	b005      	add	sp, #20
    24b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    24ba:	9d00      	ldr	r5, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    24bc:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    24c0:	9902      	ldr	r1, [sp, #8]
    24c2:	462a      	mov	r2, r5
    24c4:	9303      	str	r3, [sp, #12]
    24c6:	f000 ff81 	bl	33cc <memcpy>
			tx_available -= size;
    24ca:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    24cc:	4914      	ldr	r1, [pc, #80]	; (2520 <usb_seremu_write.part.1+0x134>)
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    24ce:	2200      	movs	r2, #0
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    24d0:	1b5b      	subs	r3, r3, r5
    24d2:	f8a8 3000 	strh.w	r3, [r8]
    24d6:	9b01      	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    24d8:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    24dc:	4618      	mov	r0, r3
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
    24de:	703a      	strb	r2, [r7, #0]
    24e0:	4428      	add	r0, r5
	}
	return sent;
}
    24e2:	b005      	add	sp, #20
    24e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    24e8:	2340      	movs	r3, #64	; 0x40
    24ea:	4a09      	ldr	r2, [pc, #36]	; (2510 <usb_seremu_write.part.1+0x124>)
				transmit_previous_timeout = 0;
    24ec:	f88a 0000 	strb.w	r0, [sl]
    24f0:	7812      	ldrb	r2, [r2, #0]
    24f2:	461c      	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
    24f4:	f8a8 3000 	strh.w	r3, [r8]
    24f8:	e7b9      	b.n	246e <usb_seremu_write.part.1+0x82>
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
    24fa:	9801      	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    24fc:	700c      	strb	r4, [r1, #0]
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    24fe:	b005      	add	sp, #20
    2500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2504:	9800      	ldr	r0, [sp, #0]
    2506:	e7d5      	b.n	24b4 <usb_seremu_write.part.1+0xc8>
    2508:	20001f60 	.word	0x20001f60
    250c:	20001f44 	.word	0x20001f44
    2510:	20001f5f 	.word	0x20001f5f
    2514:	20001ce0 	.word	0x20001ce0
    2518:	20001f5d 	.word	0x20001f5d
    251c:	20200360 	.word	0x20200360
    2520:	402e0000 	.word	0x402e0000
    2524:	20001f50 	.word	0x20001f50
    2528:	20001f61 	.word	0x20001f61

0000252c <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    252c:	4b09      	ldr	r3, [pc, #36]	; (2554 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    252e:	b500      	push	{lr}
    2530:	b083      	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2532:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
    2534:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2538:	b923      	cbnz	r3, 2544 <usb_seremu_putchar+0x18>
    253a:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
    253e:	b003      	add	sp, #12
    2540:	f85d fb04 	ldr.w	pc, [sp], #4
    2544:	2101      	movs	r1, #1
    2546:	f10d 0007 	add.w	r0, sp, #7
    254a:	f7ff ff4f 	bl	23ec <usb_seremu_write.part.1>
    254e:	b003      	add	sp, #12
    2550:	f85d fb04 	ldr.w	pc, [sp], #4
    2554:	20001f61 	.word	0x20001f61

00002558 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2558:	4b04      	ldr	r3, [pc, #16]	; (256c <usb_seremu_write+0x14>)
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2560:	b10b      	cbz	r3, 2566 <usb_seremu_write+0xe>
    2562:	f7ff bf43 	b.w	23ec <usb_seremu_write.part.1>
			timer_start_oneshot();
		}
		tx_noautoflush = 0;
	}
	return sent;
}
    2566:	4610      	mov	r0, r2
    2568:	4770      	bx	lr
    256a:	bf00      	nop
    256c:	20001f61 	.word	0x20001f61

00002570 <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
    2570:	2001      	movs	r0, #1
    2572:	4770      	bx	lr

00002574 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
    2574:	4b0a      	ldr	r3, [pc, #40]	; (25a0 <usb_seremu_flush_output+0x2c>)
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	b113      	cbz	r3, 2580 <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
    257a:	4b0a      	ldr	r3, [pc, #40]	; (25a4 <usb_seremu_flush_output+0x30>)
    257c:	881b      	ldrh	r3, [r3, #0]
    257e:	b903      	cbnz	r3, 2582 <usb_seremu_flush_output+0xe>
    2580:	4770      	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
    2582:	b510      	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2584:	2301      	movs	r3, #1
    2586:	4c08      	ldr	r4, [pc, #32]	; (25a8 <usb_seremu_flush_output+0x34>)
    2588:	7023      	strb	r3, [r4, #0]
	tx_zero_pad();
    258a:	f7ff fecd 	bl	2328 <tx_zero_pad>
	tx_queue_transfer();
    258e:	f7ff fee3 	bl	2358 <tx_queue_transfer>
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2592:	2300      	movs	r3, #0
    2594:	4a05      	ldr	r2, [pc, #20]	; (25ac <usb_seremu_flush_output+0x38>)
    2596:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	tx_zero_pad();
	tx_queue_transfer();
	timer_stop();
	tx_noautoflush = 0;
    259a:	7023      	strb	r3, [r4, #0]
    259c:	bd10      	pop	{r4, pc}
    259e:	bf00      	nop
    25a0:	20001f61 	.word	0x20001f61
    25a4:	20001f50 	.word	0x20001f50
    25a8:	20001f60 	.word	0x20001f60
    25ac:	402e0000 	.word	0x402e0000

000025b0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    25b0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    25b2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    25b6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    25b8:	4c0c      	ldr	r4, [pc, #48]	; (25ec <EventResponder::runFromInterrupt()+0x3c>)
    25ba:	6823      	ldr	r3, [r4, #0]
		if (first) {
    25bc:	b18b      	cbz	r3, 25e2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    25be:	4e0c      	ldr	r6, [pc, #48]	; (25f0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    25c0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    25c2:	695a      	ldr	r2, [r3, #20]
    25c4:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    25c6:	b17a      	cbz	r2, 25e8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    25c8:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    25ca:	b901      	cbnz	r1, 25ce <EventResponder::runFromInterrupt()+0x1e>
    25cc:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    25ce:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    25d0:	4618      	mov	r0, r3
    25d2:	689b      	ldr	r3, [r3, #8]
    25d4:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    25d6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    25da:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    25dc:	6823      	ldr	r3, [r4, #0]
		if (first) {
    25de:	2b00      	cmp	r3, #0
    25e0:	d1ef      	bne.n	25c2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    25e2:	b901      	cbnz	r1, 25e6 <EventResponder::runFromInterrupt()+0x36>
    25e4:	b662      	cpsie	i
    25e6:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    25e8:	6032      	str	r2, [r6, #0]
    25ea:	e7ee      	b.n	25ca <EventResponder::runFromInterrupt()+0x1a>
    25ec:	20001e8c 	.word	0x20001e8c
    25f0:	20001e88 	.word	0x20001e88

000025f4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    25f4:	f7ff bfdc 	b.w	25b0 <EventResponder::runFromInterrupt()>

000025f8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    25f8:	4a04      	ldr	r2, [pc, #16]	; (260c <systick_isr+0x14>)
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <systick_isr+0x18>)
    25fc:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    25fe:	4a05      	ldr	r2, [pc, #20]	; (2614 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2600:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2602:	6813      	ldr	r3, [r2, #0]
    2604:	3301      	adds	r3, #1
    2606:	6013      	str	r3, [r2, #0]
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	e0001004 	.word	0xe0001004
    2610:	20001f40 	.word	0x20001f40
    2614:	20001f44 	.word	0x20001f44

00002618 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    2618:	6802      	ldr	r2, [r0, #0]
    261a:	b30a      	cbz	r2, 2660 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    261c:	4b11      	ldr	r3, [pc, #68]	; (2664 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    261e:	4912      	ldr	r1, [pc, #72]	; (2668 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2620:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    2622:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2624:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2626:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2628:	2400      	movs	r4, #0
    262a:	f8df e044 	ldr.w	lr, [pc, #68]	; 2670 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    262e:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2630:	780e      	ldrb	r6, [r1, #0]
    2632:	784d      	ldrb	r5, [r1, #1]
    2634:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    2636:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2638:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    263c:	bf28      	it	cs
    263e:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2640:	788a      	ldrb	r2, [r1, #2]
    2642:	78c9      	ldrb	r1, [r1, #3]
    2644:	42ae      	cmp	r6, r5
    2646:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    2648:	4f08      	ldr	r7, [pc, #32]	; (266c <IntervalTimer::end()+0x54>)
    264a:	bf28      	it	cs
    264c:	462b      	movcs	r3, r5
    264e:	4293      	cmp	r3, r2
    2650:	bf28      	it	cs
    2652:	4613      	movcs	r3, r2
    2654:	428b      	cmp	r3, r1
    2656:	bf28      	it	cs
    2658:	460b      	movcs	r3, r1
    265a:	703b      	strb	r3, [r7, #0]
		channel = 0;
    265c:	6004      	str	r4, [r0, #0]
    265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2660:	4770      	bx	lr
    2662:	bf00      	nop
    2664:	bff7bf00 	.word	0xbff7bf00
    2668:	20000fdc 	.word	0x20000fdc
    266c:	e000e47a 	.word	0xe000e47a
    2670:	20001ac0 	.word	0x20001ac0

00002674 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    2674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2678:	688c      	ldr	r4, [r1, #8]
    267a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    267c:	b1ec      	cbz	r4, 26ba <Print::print(String const&)+0x46>
    267e:	2500      	movs	r5, #0
    2680:	4606      	mov	r6, r0
    2682:	4689      	mov	r9, r1
    2684:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    2686:	462b      	mov	r3, r5
    2688:	2221      	movs	r2, #33	; 0x21
    268a:	a901      	add	r1, sp, #4
    268c:	4648      	mov	r0, r9
    268e:	f000 f925 	bl	28dc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    2692:	2c20      	cmp	r4, #32
    2694:	4623      	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    2696:	6830      	ldr	r0, [r6, #0]
    2698:	bf28      	it	cs
    269a:	2320      	movcs	r3, #32
    269c:	a901      	add	r1, sp, #4
    269e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    26a2:	4630      	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    26a4:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    26a6:	461a      	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    26a8:	441d      	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    26aa:	47c0      	blx	r8
    26ac:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    26ae:	2c00      	cmp	r4, #0
    26b0:	d1e9      	bne.n	2686 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    26b2:	4638      	mov	r0, r7
    26b4:	b00b      	add	sp, #44	; 0x2c
    26b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    26ba:	4627      	mov	r7, r4
    26bc:	e7f9      	b.n	26b2 <Print::print(String const&)+0x3e>
    26be:	bf00      	nop

000026c0 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    26c0:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    26c2:	4c06      	ldr	r4, [pc, #24]	; (26dc <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    26c4:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    26c6:	6803      	ldr	r3, [r0, #0]
    26c8:	2202      	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    26ca:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    26cc:	a901      	add	r1, sp, #4
    26ce:	685b      	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    26d0:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    26d4:	4798      	blx	r3
}
    26d6:	b002      	add	sp, #8
    26d8:	bd10      	pop	{r4, pc}
    26da:	bf00      	nop
    26dc:	20000370 	.word	0x20000370

000026e0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    26e0:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    26e2:	b510      	push	{r4, lr}
    26e4:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    26e6:	685b      	ldr	r3, [r3, #4]
    26e8:	4798      	blx	r3
	return len;
}
    26ea:	4620      	mov	r0, r4
    26ec:	bd10      	pop	{r4, pc}
    26ee:	bf00      	nop

000026f0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    26f0:	b40e      	push	{r1, r2, r3}
    26f2:	b500      	push	{lr}
    26f4:	b082      	sub	sp, #8
    26f6:	ab03      	add	r3, sp, #12
    26f8:	f853 1b04 	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    26fc:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    26fe:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    2700:	f001 fb26 	bl	3d50 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    2704:	b002      	add	sp, #8
    2706:	f85d eb04 	ldr.w	lr, [sp], #4
    270a:	b003      	add	sp, #12
    270c:	4770      	bx	lr
    270e:	bf00      	nop

00002710 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    2710:	b510      	push	{r4, lr}
    2712:	4604      	mov	r4, r0
		end();
    2714:	f7ff ff80 	bl	2618 <IntervalTimer::end()>
	}
    2718:	4620      	mov	r0, r4
    271a:	bd10      	pop	{r4, pc}

0000271c <_GLOBAL__sub_I__Z4tonehtm>:
static uint32_t tone_toggle_count;
static volatile uint32_t *tone_reg;
static uint32_t tone_mask;
static float tone_usec=0.0;
static uint32_t tone_new_count=0;
static IntervalTimer tone_timer;
    271c:	4a02      	ldr	r2, [pc, #8]	; (2728 <_GLOBAL__sub_I__Z4tonehtm+0xc>)
    271e:	4903      	ldr	r1, [pc, #12]	; (272c <_GLOBAL__sub_I__Z4tonehtm+0x10>)
    2720:	4803      	ldr	r0, [pc, #12]	; (2730 <_GLOBAL__sub_I__Z4tonehtm+0x14>)
    2722:	f000 b985 	b.w	2a30 <__aeabi_atexit>
    2726:	bf00      	nop
    2728:	20000fb8 	.word	0x20000fb8
    272c:	00002711 	.word	0x00002711
    2730:	20000fd4 	.word	0x20000fd4

00002734 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    2734:	b510      	push	{r4, lr}
    2736:	4604      	mov	r4, r0
{
	free(buffer);
    2738:	6800      	ldr	r0, [r0, #0]
    273a:	f000 fb71 	bl	2e20 <free>
}
    273e:	4620      	mov	r0, r4
    2740:	bd10      	pop	{r4, pc}
    2742:	bf00      	nop

00002744 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2744:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    2746:	6843      	ldr	r3, [r0, #4]
    2748:	428b      	cmp	r3, r1
    274a:	d301      	bcc.n	2750 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    274c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    274e:	bd38      	pop	{r3, r4, r5, pc}
    2750:	460d      	mov	r5, r1
    2752:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2754:	3101      	adds	r1, #1
    2756:	6800      	ldr	r0, [r0, #0]
    2758:	f000 ff88 	bl	366c <realloc>
	if (newbuffer) {
    275c:	2800      	cmp	r0, #0
    275e:	d0f6      	beq.n	274e <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    2760:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    2762:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    2766:	2b00      	cmp	r3, #0
    2768:	d1f0      	bne.n	274c <String::reserve(unsigned int)+0x8>
    276a:	7003      	strb	r3, [r0, #0]
    276c:	e7ee      	b.n	274c <String::reserve(unsigned int)+0x8>
    276e:	bf00      	nop

00002770 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2772:	4604      	mov	r4, r0
	if (length == 0) {
    2774:	4615      	mov	r5, r2
    2776:	b932      	cbnz	r2, 2786 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2778:	6803      	ldr	r3, [r0, #0]
    277a:	b103      	cbz	r3, 277e <String::copy(char const*, unsigned int)+0xe>
    277c:	701a      	strb	r2, [r3, #0]
		len = 0;
    277e:	2300      	movs	r3, #0
    2780:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    2782:	4620      	mov	r0, r4
    2784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2786:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    2788:	4611      	mov	r1, r2
    278a:	f7ff ffdb 	bl	2744 <String::reserve(unsigned int)>
    278e:	4607      	mov	r7, r0
    2790:	b948      	cbnz	r0, 27a6 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    2792:	6820      	ldr	r0, [r4, #0]
    2794:	b110      	cbz	r0, 279c <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    2796:	f000 fb43 	bl	2e20 <free>
			buffer = NULL;
    279a:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    279c:	2300      	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    279e:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    27a0:	6063      	str	r3, [r4, #4]
    27a2:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    27a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    27a6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    27a8:	4631      	mov	r1, r6
    27aa:	6820      	ldr	r0, [r4, #0]
    27ac:	f001 f968 	bl	3a80 <strcpy>
	return *this;
    27b0:	e7e7      	b.n	2782 <String::copy(char const*, unsigned int)+0x12>
    27b2:	bf00      	nop

000027b4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    27b4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    27b6:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    27b8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    27ba:	6003      	str	r3, [r0, #0]
	capacity = 0;
    27bc:	6043      	str	r3, [r0, #4]
	len = 0;
    27be:	6083      	str	r3, [r0, #8]
	flags = 0;
    27c0:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    27c2:	b141      	cbz	r1, 27d6 <String::String(char const*)+0x22>
    27c4:	460d      	mov	r5, r1
    27c6:	4608      	mov	r0, r1
    27c8:	f001 f9ba 	bl	3b40 <strlen>
    27cc:	4602      	mov	r2, r0
    27ce:	4629      	mov	r1, r5
    27d0:	4620      	mov	r0, r4
    27d2:	f7ff ffcd 	bl	2770 <String::copy(char const*, unsigned int)>
}
    27d6:	4620      	mov	r0, r4
    27d8:	bd38      	pop	{r3, r4, r5, pc}
    27da:	bf00      	nop

000027dc <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    27dc:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    27de:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    27e0:	b510      	push	{r4, lr}
    27e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    27e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
    27e6:	6043      	str	r3, [r0, #4]
	len = 0;
    27e8:	6083      	str	r3, [r0, #8]
	flags = 0;
    27ea:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    27ec:	d003      	beq.n	27f6 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    27ee:	688a      	ldr	r2, [r1, #8]
    27f0:	6809      	ldr	r1, [r1, #0]
    27f2:	f7ff ffbd 	bl	2770 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    27f6:	4620      	mov	r0, r4
    27f8:	bd10      	pop	{r4, pc}
    27fa:	bf00      	nop

000027fc <String::operator=(char const*) [clone .part.2]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    27fc:	b538      	push	{r3, r4, r5, lr}
    27fe:	460c      	mov	r4, r1
    2800:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    2802:	4608      	mov	r0, r1
    2804:	f001 f99c 	bl	3b40 <strlen>
    2808:	4621      	mov	r1, r4
    280a:	4602      	mov	r2, r0
    280c:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    280e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    2812:	f7ff bfad 	b.w	2770 <String::copy(char const*, unsigned int)>
    2816:	bf00      	nop

00002818 <String::String(int, unsigned char)>:
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    2818:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    281a:	2300      	movs	r3, #0
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    281c:	4604      	mov	r4, r0
    281e:	b086      	sub	sp, #24
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2820:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2822:	6023      	str	r3, [r4, #0]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2824:	a901      	add	r1, sp, #4
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    2826:	6063      	str	r3, [r4, #4]
	len = 0;
    2828:	60a3      	str	r3, [r4, #8]
	flags = 0;
    282a:	7323      	strb	r3, [r4, #12]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    282c:	f000 faee 	bl	2e0c <itoa>
    2830:	a901      	add	r1, sp, #4
    2832:	4620      	mov	r0, r4
    2834:	f7ff ffe2 	bl	27fc <String::operator=(char const*) [clone .part.2]>
	*this = buf;
}
    2838:	4620      	mov	r0, r4
    283a:	b006      	add	sp, #24
    283c:	bd10      	pop	{r4, pc}
    283e:	bf00      	nop

00002840 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2844:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2846:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2848:	4604      	mov	r4, r0
    284a:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    284c:	42bb      	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    284e:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2850:	d80a      	bhi.n	2868 <String::append(char const*, unsigned int)+0x28>
    2852:	185a      	adds	r2, r3, r1
    2854:	4297      	cmp	r7, r2
    2856:	d207      	bcs.n	2868 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    2858:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    285c:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    2860:	b935      	cbnz	r5, 2870 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    2862:	4620      	mov	r0, r4
    2864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    2868:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    286c:	2d00      	cmp	r5, #0
    286e:	d0f8      	beq.n	2862 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    2870:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    2872:	4620      	mov	r0, r4
    2874:	4631      	mov	r1, r6
    2876:	f7ff ff65 	bl	2744 <String::reserve(unsigned int)>
    287a:	2800      	cmp	r0, #0
    287c:	d0f1      	beq.n	2862 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    287e:	f1b8 0f00 	cmp.w	r8, #0
    2882:	d00e      	beq.n	28a2 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    2884:	6823      	ldr	r3, [r4, #0]
    2886:	462a      	mov	r2, r5
    2888:	68a0      	ldr	r0, [r4, #8]
    288a:	eb03 0109 	add.w	r1, r3, r9
    288e:	4418      	add	r0, r3
    2890:	f000 fd9c 	bl	33cc <memcpy>
		buffer[newlen] = 0;
    2894:	6823      	ldr	r3, [r4, #0]
    2896:	2200      	movs	r2, #0
    2898:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    289a:	60a6      	str	r6, [r4, #8]
	return *this;
}
    289c:	4620      	mov	r0, r4
    289e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    28a2:	6820      	ldr	r0, [r4, #0]
    28a4:	4639      	mov	r1, r7
    28a6:	68a3      	ldr	r3, [r4, #8]
    28a8:	4418      	add	r0, r3
    28aa:	f001 f8e9 	bl	3a80 <strcpy>
    28ae:	e7f4      	b.n	289a <String::append(char const*, unsigned int)+0x5a>

000028b0 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    28b0:	b510      	push	{r4, lr}
    28b2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    28b4:	688a      	ldr	r2, [r1, #8]
    28b6:	6809      	ldr	r1, [r1, #0]
    28b8:	f7ff ffc2 	bl	2840 <String::append(char const*, unsigned int)>
	return a;
}
    28bc:	4620      	mov	r0, r4
    28be:	bd10      	pop	{r4, pc}

000028c0 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    28c0:	b538      	push	{r3, r4, r5, lr}
    28c2:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    28c4:	b141      	cbz	r1, 28d8 <operator+(StringSumHelper const&, char const*)+0x18>
    28c6:	460c      	mov	r4, r1
    28c8:	4608      	mov	r0, r1
    28ca:	f001 f939 	bl	3b40 <strlen>
    28ce:	4602      	mov	r2, r0
    28d0:	4621      	mov	r1, r4
    28d2:	4628      	mov	r0, r5
    28d4:	f7ff ffb4 	bl	2840 <String::append(char const*, unsigned int)>
	return a;
}
    28d8:	4628      	mov	r0, r5
    28da:	bd38      	pop	{r3, r4, r5, pc}

000028dc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    28dc:	b1ba      	cbz	r2, 290e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    28de:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    28e0:	fab1 f481 	clz	r4, r1
    28e4:	0964      	lsrs	r4, r4, #5
    28e6:	b97c      	cbnz	r4, 2908 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    28e8:	6886      	ldr	r6, [r0, #8]
    28ea:	429e      	cmp	r6, r3
    28ec:	d90d      	bls.n	290a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    28ee:	1af6      	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    28f0:	3a01      	subs	r2, #1
    28f2:	460d      	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    28f4:	6801      	ldr	r1, [r0, #0]
    28f6:	4296      	cmp	r6, r2
    28f8:	4628      	mov	r0, r5
    28fa:	4419      	add	r1, r3
    28fc:	bf28      	it	cs
    28fe:	4616      	movcs	r6, r2
    2900:	4632      	mov	r2, r6
    2902:	f001 f98b 	bl	3c1c <strncpy>
	buf[n] = 0;
    2906:	55ac      	strb	r4, [r5, r6]
    2908:	bd70      	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    290a:	700c      	strb	r4, [r1, #0]
		return;
    290c:	bd70      	pop	{r4, r5, r6, pc}
    290e:	4770      	bx	lr

00002910 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    2910:	f000 ba7e 	b.w	2e10 <malloc>

00002914 <operator delete(void*, unsigned int)>:
    2914:	f000 ba84 	b.w	2e20 <free>

00002918 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    2918:	4770      	bx	lr
    291a:	bf00      	nop

0000291c <usb_seremu_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
    291c:	f7ff bcd0 	b.w	22c0 <usb_seremu_peekchar>

00002920 <usb_seremu_class::read()>:
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
    2920:	f7ff bc9a 	b.w	2258 <usb_seremu_getchar>

00002924 <usb_seremu_class::available()>:
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    2924:	f7ff bcee 	b.w	2304 <usb_seremu_available>

00002928 <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
    2928:	f7ff be24 	b.w	2574 <usb_seremu_flush_output>

0000292c <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
    292c:	f7ff be20 	b.w	2570 <usb_seremu_write_buffer_free>

00002930 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    2930:	4608      	mov	r0, r1
    2932:	4611      	mov	r1, r2
    2934:	f7ff be10 	b.w	2558 <usb_seremu_write>

00002938 <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
    2938:	4608      	mov	r0, r1
    293a:	f7ff bdf7 	b.w	252c <usb_seremu_putchar>
    293e:	bf00      	nop

00002940 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    2944:	4e32      	ldr	r6, [pc, #200]	; (2a10 <yield+0xd0>)
    2946:	7833      	ldrb	r3, [r6, #0]
    2948:	b193      	cbz	r3, 2970 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    294a:	4f32      	ldr	r7, [pc, #200]	; (2a14 <yield+0xd4>)
    294c:	783a      	ldrb	r2, [r7, #0]
    294e:	b97a      	cbnz	r2, 2970 <yield+0x30>
	running = 1;
    2950:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2952:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2954:	703a      	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    2956:	d437      	bmi.n	29c8 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    2958:	079a      	lsls	r2, r3, #30
    295a:	d419      	bmi.n	2990 <yield+0x50>

	running = 0;
    295c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    295e:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    2960:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    2962:	d505      	bpl.n	2970 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    2964:	4b2c      	ldr	r3, [pc, #176]	; (2a18 <yield+0xd8>)
    2966:	681a      	ldr	r2, [r3, #0]
    2968:	b112      	cbz	r2, 2970 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    296a:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    296e:	b10a      	cbz	r2, 2974 <yield+0x34>
    2970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2974:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2978:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    297a:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    297c:	b11a      	cbz	r2, 2986 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    297e:	4c27      	ldr	r4, [pc, #156]	; (2a1c <yield+0xdc>)
    2980:	7821      	ldrb	r1, [r4, #0]
    2982:	2900      	cmp	r1, #0
    2984:	d02f      	beq.n	29e6 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2986:	2800      	cmp	r0, #0
    2988:	d1f2      	bne.n	2970 <yield+0x30>
    298a:	b662      	cpsie	i
    298c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2990:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2a28 <yield+0xe8>
    2994:	f898 2000 	ldrb.w	r2, [r8]
    2998:	2a00      	cmp	r2, #0
    299a:	d0df      	beq.n	295c <yield+0x1c>
    299c:	2400      	movs	r4, #0
    299e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2a2c <yield+0xec>
    29a2:	e005      	b.n	29b0 <yield+0x70>
    29a4:	3401      	adds	r4, #1
    29a6:	f898 3000 	ldrb.w	r3, [r8]
    29aa:	b2e4      	uxtb	r4, r4
    29ac:	42a3      	cmp	r3, r4
    29ae:	d913      	bls.n	29d8 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    29b0:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    29b4:	682b      	ldr	r3, [r5, #0]
    29b6:	4628      	mov	r0, r5
    29b8:	691b      	ldr	r3, [r3, #16]
    29ba:	4798      	blx	r3
    29bc:	2800      	cmp	r0, #0
    29be:	d0f1      	beq.n	29a4 <yield+0x64>
    29c0:	696b      	ldr	r3, [r5, #20]
    29c2:	689b      	ldr	r3, [r3, #8]
    29c4:	4798      	blx	r3
    29c6:	e7ed      	b.n	29a4 <yield+0x64>
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    29c8:	f7ff fc9c 	bl	2304 <usb_seremu_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    29cc:	b9d0      	cbnz	r0, 2a04 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    29ce:	4b14      	ldr	r3, [pc, #80]	; (2a20 <yield+0xe0>)
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	b91b      	cbnz	r3, 29dc <yield+0x9c>
    29d4:	7833      	ldrb	r3, [r6, #0]
    29d6:	e7bf      	b.n	2958 <yield+0x18>
    29d8:	7833      	ldrb	r3, [r6, #0]
    29da:	e7bf      	b.n	295c <yield+0x1c>
    29dc:	7833      	ldrb	r3, [r6, #0]
    29de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    29e2:	7033      	strb	r3, [r6, #0]
    29e4:	e7b8      	b.n	2958 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    29e6:	2601      	movs	r6, #1
		firstYield = first->_next;
    29e8:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    29ea:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    29ec:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    29ee:	b165      	cbz	r5, 2a0a <yield+0xca>
			firstYield->_prev = nullptr;
    29f0:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    29f2:	b900      	cbnz	r0, 29f6 <yield+0xb6>
    29f4:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    29f6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    29f8:	6893      	ldr	r3, [r2, #8]
    29fa:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    29fc:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    29fe:	4798      	blx	r3
		runningFromYield = false;
    2a00:	7025      	strb	r5, [r4, #0]
    2a02:	e7b5      	b.n	2970 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2a04:	f7ff ff88 	bl	2918 <serialEvent()>
    2a08:	e7e1      	b.n	29ce <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2a0a:	4b06      	ldr	r3, [pc, #24]	; (2a24 <yield+0xe4>)
    2a0c:	601d      	str	r5, [r3, #0]
    2a0e:	e7f0      	b.n	29f2 <yield+0xb2>
    2a10:	200015ce 	.word	0x200015ce
    2a14:	20001f54 	.word	0x20001f54
    2a18:	20001e84 	.word	0x20001e84
    2a1c:	20001f52 	.word	0x20001f52
    2a20:	60001f56 	.word	0x60001f56
    2a24:	20001e90 	.word	0x20001e90
    2a28:	20001f53 	.word	0x20001f53
    2a2c:	20001e94 	.word	0x20001e94

00002a30 <__aeabi_atexit>:
    2a30:	460b      	mov	r3, r1
    2a32:	4601      	mov	r1, r0
    2a34:	4618      	mov	r0, r3
    2a36:	f000 b98d 	b.w	2d54 <__cxa_atexit>
    2a3a:	bf00      	nop

00002a3c <__aeabi_uldivmod>:
    2a3c:	b953      	cbnz	r3, 2a54 <__aeabi_uldivmod+0x18>
    2a3e:	b94a      	cbnz	r2, 2a54 <__aeabi_uldivmod+0x18>
    2a40:	2900      	cmp	r1, #0
    2a42:	bf08      	it	eq
    2a44:	2800      	cmpeq	r0, #0
    2a46:	bf1c      	itt	ne
    2a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    2a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2a50:	f000 b97e 	b.w	2d50 <__aeabi_idiv0>
    2a54:	f1ad 0c08 	sub.w	ip, sp, #8
    2a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    2a5c:	f000 f806 	bl	2a6c <__udivmoddi4>
    2a60:	f8dd e004 	ldr.w	lr, [sp, #4]
    2a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2a68:	b004      	add	sp, #16
    2a6a:	4770      	bx	lr

00002a6c <__udivmoddi4>:
    2a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a70:	468c      	mov	ip, r1
    2a72:	460e      	mov	r6, r1
    2a74:	4604      	mov	r4, r0
    2a76:	9d08      	ldr	r5, [sp, #32]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d150      	bne.n	2b1e <__udivmoddi4+0xb2>
    2a7c:	428a      	cmp	r2, r1
    2a7e:	4617      	mov	r7, r2
    2a80:	d96c      	bls.n	2b5c <__udivmoddi4+0xf0>
    2a82:	fab2 fe82 	clz	lr, r2
    2a86:	f1be 0f00 	cmp.w	lr, #0
    2a8a:	d00b      	beq.n	2aa4 <__udivmoddi4+0x38>
    2a8c:	f1ce 0420 	rsb	r4, lr, #32
    2a90:	fa20 f404 	lsr.w	r4, r0, r4
    2a94:	fa01 f60e 	lsl.w	r6, r1, lr
    2a98:	ea44 0c06 	orr.w	ip, r4, r6
    2a9c:	fa02 f70e 	lsl.w	r7, r2, lr
    2aa0:	fa00 f40e 	lsl.w	r4, r0, lr
    2aa4:	ea4f 4917 	mov.w	r9, r7, lsr #16
    2aa8:	0c22      	lsrs	r2, r4, #16
    2aaa:	fbbc f0f9 	udiv	r0, ip, r9
    2aae:	fa1f f887 	uxth.w	r8, r7
    2ab2:	fb09 c610 	mls	r6, r9, r0, ip
    2ab6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    2aba:	fb00 f308 	mul.w	r3, r0, r8
    2abe:	42b3      	cmp	r3, r6
    2ac0:	d909      	bls.n	2ad6 <__udivmoddi4+0x6a>
    2ac2:	19f6      	adds	r6, r6, r7
    2ac4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    2ac8:	f080 8122 	bcs.w	2d10 <__udivmoddi4+0x2a4>
    2acc:	42b3      	cmp	r3, r6
    2ace:	f240 811f 	bls.w	2d10 <__udivmoddi4+0x2a4>
    2ad2:	3802      	subs	r0, #2
    2ad4:	443e      	add	r6, r7
    2ad6:	1af6      	subs	r6, r6, r3
    2ad8:	b2a2      	uxth	r2, r4
    2ada:	fbb6 f3f9 	udiv	r3, r6, r9
    2ade:	fb09 6613 	mls	r6, r9, r3, r6
    2ae2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    2ae6:	fb03 f808 	mul.w	r8, r3, r8
    2aea:	45a0      	cmp	r8, r4
    2aec:	d909      	bls.n	2b02 <__udivmoddi4+0x96>
    2aee:	19e4      	adds	r4, r4, r7
    2af0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2af4:	f080 810a 	bcs.w	2d0c <__udivmoddi4+0x2a0>
    2af8:	45a0      	cmp	r8, r4
    2afa:	f240 8107 	bls.w	2d0c <__udivmoddi4+0x2a0>
    2afe:	3b02      	subs	r3, #2
    2b00:	443c      	add	r4, r7
    2b02:	ebc8 0404 	rsb	r4, r8, r4
    2b06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2b0a:	2100      	movs	r1, #0
    2b0c:	2d00      	cmp	r5, #0
    2b0e:	d062      	beq.n	2bd6 <__udivmoddi4+0x16a>
    2b10:	fa24 f40e 	lsr.w	r4, r4, lr
    2b14:	2300      	movs	r3, #0
    2b16:	602c      	str	r4, [r5, #0]
    2b18:	606b      	str	r3, [r5, #4]
    2b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b1e:	428b      	cmp	r3, r1
    2b20:	d907      	bls.n	2b32 <__udivmoddi4+0xc6>
    2b22:	2d00      	cmp	r5, #0
    2b24:	d055      	beq.n	2bd2 <__udivmoddi4+0x166>
    2b26:	2100      	movs	r1, #0
    2b28:	e885 0041 	stmia.w	r5, {r0, r6}
    2b2c:	4608      	mov	r0, r1
    2b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b32:	fab3 f183 	clz	r1, r3
    2b36:	2900      	cmp	r1, #0
    2b38:	f040 8090 	bne.w	2c5c <__udivmoddi4+0x1f0>
    2b3c:	42b3      	cmp	r3, r6
    2b3e:	d302      	bcc.n	2b46 <__udivmoddi4+0xda>
    2b40:	4282      	cmp	r2, r0
    2b42:	f200 80f8 	bhi.w	2d36 <__udivmoddi4+0x2ca>
    2b46:	1a84      	subs	r4, r0, r2
    2b48:	eb66 0603 	sbc.w	r6, r6, r3
    2b4c:	2001      	movs	r0, #1
    2b4e:	46b4      	mov	ip, r6
    2b50:	2d00      	cmp	r5, #0
    2b52:	d040      	beq.n	2bd6 <__udivmoddi4+0x16a>
    2b54:	e885 1010 	stmia.w	r5, {r4, ip}
    2b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b5c:	b912      	cbnz	r2, 2b64 <__udivmoddi4+0xf8>
    2b5e:	2701      	movs	r7, #1
    2b60:	fbb7 f7f2 	udiv	r7, r7, r2
    2b64:	fab7 fe87 	clz	lr, r7
    2b68:	f1be 0f00 	cmp.w	lr, #0
    2b6c:	d135      	bne.n	2bda <__udivmoddi4+0x16e>
    2b6e:	1bf3      	subs	r3, r6, r7
    2b70:	ea4f 4817 	mov.w	r8, r7, lsr #16
    2b74:	fa1f fc87 	uxth.w	ip, r7
    2b78:	2101      	movs	r1, #1
    2b7a:	fbb3 f0f8 	udiv	r0, r3, r8
    2b7e:	0c22      	lsrs	r2, r4, #16
    2b80:	fb08 3610 	mls	r6, r8, r0, r3
    2b84:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    2b88:	fb0c f300 	mul.w	r3, ip, r0
    2b8c:	42b3      	cmp	r3, r6
    2b8e:	d907      	bls.n	2ba0 <__udivmoddi4+0x134>
    2b90:	19f6      	adds	r6, r6, r7
    2b92:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    2b96:	d202      	bcs.n	2b9e <__udivmoddi4+0x132>
    2b98:	42b3      	cmp	r3, r6
    2b9a:	f200 80ce 	bhi.w	2d3a <__udivmoddi4+0x2ce>
    2b9e:	4610      	mov	r0, r2
    2ba0:	1af6      	subs	r6, r6, r3
    2ba2:	b2a2      	uxth	r2, r4
    2ba4:	fbb6 f3f8 	udiv	r3, r6, r8
    2ba8:	fb08 6613 	mls	r6, r8, r3, r6
    2bac:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    2bb0:	fb0c fc03 	mul.w	ip, ip, r3
    2bb4:	45a4      	cmp	ip, r4
    2bb6:	d907      	bls.n	2bc8 <__udivmoddi4+0x15c>
    2bb8:	19e4      	adds	r4, r4, r7
    2bba:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2bbe:	d202      	bcs.n	2bc6 <__udivmoddi4+0x15a>
    2bc0:	45a4      	cmp	ip, r4
    2bc2:	f200 80b5 	bhi.w	2d30 <__udivmoddi4+0x2c4>
    2bc6:	4613      	mov	r3, r2
    2bc8:	ebcc 0404 	rsb	r4, ip, r4
    2bcc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2bd0:	e79c      	b.n	2b0c <__udivmoddi4+0xa0>
    2bd2:	4629      	mov	r1, r5
    2bd4:	4628      	mov	r0, r5
    2bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bda:	f1ce 0120 	rsb	r1, lr, #32
    2bde:	fa06 f30e 	lsl.w	r3, r6, lr
    2be2:	fa07 f70e 	lsl.w	r7, r7, lr
    2be6:	fa20 f901 	lsr.w	r9, r0, r1
    2bea:	ea4f 4817 	mov.w	r8, r7, lsr #16
    2bee:	40ce      	lsrs	r6, r1
    2bf0:	ea49 0903 	orr.w	r9, r9, r3
    2bf4:	fbb6 faf8 	udiv	sl, r6, r8
    2bf8:	ea4f 4419 	mov.w	r4, r9, lsr #16
    2bfc:	fb08 661a 	mls	r6, r8, sl, r6
    2c00:	fa1f fc87 	uxth.w	ip, r7
    2c04:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    2c08:	fb0a f20c 	mul.w	r2, sl, ip
    2c0c:	429a      	cmp	r2, r3
    2c0e:	fa00 f40e 	lsl.w	r4, r0, lr
    2c12:	d90a      	bls.n	2c2a <__udivmoddi4+0x1be>
    2c14:	19db      	adds	r3, r3, r7
    2c16:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    2c1a:	f080 8087 	bcs.w	2d2c <__udivmoddi4+0x2c0>
    2c1e:	429a      	cmp	r2, r3
    2c20:	f240 8084 	bls.w	2d2c <__udivmoddi4+0x2c0>
    2c24:	f1aa 0a02 	sub.w	sl, sl, #2
    2c28:	443b      	add	r3, r7
    2c2a:	1a9b      	subs	r3, r3, r2
    2c2c:	fa1f f989 	uxth.w	r9, r9
    2c30:	fbb3 f1f8 	udiv	r1, r3, r8
    2c34:	fb08 3311 	mls	r3, r8, r1, r3
    2c38:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    2c3c:	fb01 f60c 	mul.w	r6, r1, ip
    2c40:	429e      	cmp	r6, r3
    2c42:	d907      	bls.n	2c54 <__udivmoddi4+0x1e8>
    2c44:	19db      	adds	r3, r3, r7
    2c46:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    2c4a:	d26b      	bcs.n	2d24 <__udivmoddi4+0x2b8>
    2c4c:	429e      	cmp	r6, r3
    2c4e:	d969      	bls.n	2d24 <__udivmoddi4+0x2b8>
    2c50:	3902      	subs	r1, #2
    2c52:	443b      	add	r3, r7
    2c54:	1b9b      	subs	r3, r3, r6
    2c56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    2c5a:	e78e      	b.n	2b7a <__udivmoddi4+0x10e>
    2c5c:	f1c1 0e20 	rsb	lr, r1, #32
    2c60:	fa22 f40e 	lsr.w	r4, r2, lr
    2c64:	408b      	lsls	r3, r1
    2c66:	4323      	orrs	r3, r4
    2c68:	fa20 f70e 	lsr.w	r7, r0, lr
    2c6c:	fa06 f401 	lsl.w	r4, r6, r1
    2c70:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    2c74:	fa26 f60e 	lsr.w	r6, r6, lr
    2c78:	433c      	orrs	r4, r7
    2c7a:	fbb6 f9fc 	udiv	r9, r6, ip
    2c7e:	0c27      	lsrs	r7, r4, #16
    2c80:	fb0c 6619 	mls	r6, ip, r9, r6
    2c84:	fa1f f883 	uxth.w	r8, r3
    2c88:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    2c8c:	fb09 f708 	mul.w	r7, r9, r8
    2c90:	42b7      	cmp	r7, r6
    2c92:	fa02 f201 	lsl.w	r2, r2, r1
    2c96:	fa00 fa01 	lsl.w	sl, r0, r1
    2c9a:	d908      	bls.n	2cae <__udivmoddi4+0x242>
    2c9c:	18f6      	adds	r6, r6, r3
    2c9e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    2ca2:	d241      	bcs.n	2d28 <__udivmoddi4+0x2bc>
    2ca4:	42b7      	cmp	r7, r6
    2ca6:	d93f      	bls.n	2d28 <__udivmoddi4+0x2bc>
    2ca8:	f1a9 0902 	sub.w	r9, r9, #2
    2cac:	441e      	add	r6, r3
    2cae:	1bf6      	subs	r6, r6, r7
    2cb0:	b2a0      	uxth	r0, r4
    2cb2:	fbb6 f4fc 	udiv	r4, r6, ip
    2cb6:	fb0c 6614 	mls	r6, ip, r4, r6
    2cba:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    2cbe:	fb04 f808 	mul.w	r8, r4, r8
    2cc2:	45b8      	cmp	r8, r7
    2cc4:	d907      	bls.n	2cd6 <__udivmoddi4+0x26a>
    2cc6:	18ff      	adds	r7, r7, r3
    2cc8:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    2ccc:	d228      	bcs.n	2d20 <__udivmoddi4+0x2b4>
    2cce:	45b8      	cmp	r8, r7
    2cd0:	d926      	bls.n	2d20 <__udivmoddi4+0x2b4>
    2cd2:	3c02      	subs	r4, #2
    2cd4:	441f      	add	r7, r3
    2cd6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    2cda:	ebc8 0707 	rsb	r7, r8, r7
    2cde:	fba0 8902 	umull	r8, r9, r0, r2
    2ce2:	454f      	cmp	r7, r9
    2ce4:	4644      	mov	r4, r8
    2ce6:	464e      	mov	r6, r9
    2ce8:	d314      	bcc.n	2d14 <__udivmoddi4+0x2a8>
    2cea:	d029      	beq.n	2d40 <__udivmoddi4+0x2d4>
    2cec:	b365      	cbz	r5, 2d48 <__udivmoddi4+0x2dc>
    2cee:	ebba 0304 	subs.w	r3, sl, r4
    2cf2:	eb67 0706 	sbc.w	r7, r7, r6
    2cf6:	fa07 fe0e 	lsl.w	lr, r7, lr
    2cfa:	40cb      	lsrs	r3, r1
    2cfc:	40cf      	lsrs	r7, r1
    2cfe:	ea4e 0303 	orr.w	r3, lr, r3
    2d02:	e885 0088 	stmia.w	r5, {r3, r7}
    2d06:	2100      	movs	r1, #0
    2d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d0c:	4613      	mov	r3, r2
    2d0e:	e6f8      	b.n	2b02 <__udivmoddi4+0x96>
    2d10:	4610      	mov	r0, r2
    2d12:	e6e0      	b.n	2ad6 <__udivmoddi4+0x6a>
    2d14:	ebb8 0402 	subs.w	r4, r8, r2
    2d18:	eb69 0603 	sbc.w	r6, r9, r3
    2d1c:	3801      	subs	r0, #1
    2d1e:	e7e5      	b.n	2cec <__udivmoddi4+0x280>
    2d20:	4604      	mov	r4, r0
    2d22:	e7d8      	b.n	2cd6 <__udivmoddi4+0x26a>
    2d24:	4611      	mov	r1, r2
    2d26:	e795      	b.n	2c54 <__udivmoddi4+0x1e8>
    2d28:	4681      	mov	r9, r0
    2d2a:	e7c0      	b.n	2cae <__udivmoddi4+0x242>
    2d2c:	468a      	mov	sl, r1
    2d2e:	e77c      	b.n	2c2a <__udivmoddi4+0x1be>
    2d30:	3b02      	subs	r3, #2
    2d32:	443c      	add	r4, r7
    2d34:	e748      	b.n	2bc8 <__udivmoddi4+0x15c>
    2d36:	4608      	mov	r0, r1
    2d38:	e70a      	b.n	2b50 <__udivmoddi4+0xe4>
    2d3a:	3802      	subs	r0, #2
    2d3c:	443e      	add	r6, r7
    2d3e:	e72f      	b.n	2ba0 <__udivmoddi4+0x134>
    2d40:	45c2      	cmp	sl, r8
    2d42:	d3e7      	bcc.n	2d14 <__udivmoddi4+0x2a8>
    2d44:	463e      	mov	r6, r7
    2d46:	e7d1      	b.n	2cec <__udivmoddi4+0x280>
    2d48:	4629      	mov	r1, r5
    2d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d4e:	bf00      	nop

00002d50 <__aeabi_idiv0>:
    2d50:	4770      	bx	lr
    2d52:	bf00      	nop

00002d54 <__cxa_atexit>:
    2d54:	4613      	mov	r3, r2
    2d56:	460a      	mov	r2, r1
    2d58:	4601      	mov	r1, r0
    2d5a:	2002      	movs	r0, #2
    2d5c:	f001 b828 	b.w	3db0 <__register_exitproc>

00002d60 <__errno>:
    2d60:	4b01      	ldr	r3, [pc, #4]	; (2d68 <__errno+0x8>)
    2d62:	6818      	ldr	r0, [r3, #0]
    2d64:	4770      	bx	lr
    2d66:	bf00      	nop
    2d68:	20001560 	.word	0x20001560

00002d6c <exit>:
    2d6c:	b508      	push	{r3, lr}
    2d6e:	2100      	movs	r1, #0
    2d70:	4604      	mov	r4, r0
    2d72:	f001 f86f 	bl	3e54 <__call_exitprocs>
    2d76:	4b04      	ldr	r3, [pc, #16]	; (2d88 <exit+0x1c>)
    2d78:	6818      	ldr	r0, [r3, #0]
    2d7a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    2d7c:	b103      	cbz	r3, 2d80 <exit+0x14>
    2d7e:	4798      	blx	r3
    2d80:	4620      	mov	r0, r4
    2d82:	f7fe fc67 	bl	1654 <_exit>
    2d86:	bf00      	nop
    2d88:	2000049c 	.word	0x2000049c

00002d8c <__libc_init_array>:
    2d8c:	b570      	push	{r4, r5, r6, lr}
    2d8e:	4e0f      	ldr	r6, [pc, #60]	; (2dcc <__libc_init_array+0x40>)
    2d90:	4d0f      	ldr	r5, [pc, #60]	; (2dd0 <__libc_init_array+0x44>)
    2d92:	1b76      	subs	r6, r6, r5
    2d94:	10b6      	asrs	r6, r6, #2
    2d96:	bf18      	it	ne
    2d98:	2400      	movne	r4, #0
    2d9a:	d005      	beq.n	2da8 <__libc_init_array+0x1c>
    2d9c:	3401      	adds	r4, #1
    2d9e:	f855 3b04 	ldr.w	r3, [r5], #4
    2da2:	4798      	blx	r3
    2da4:	42a6      	cmp	r6, r4
    2da6:	d1f9      	bne.n	2d9c <__libc_init_array+0x10>
    2da8:	4e0a      	ldr	r6, [pc, #40]	; (2dd4 <__libc_init_array+0x48>)
    2daa:	4d0b      	ldr	r5, [pc, #44]	; (2dd8 <__libc_init_array+0x4c>)
    2dac:	1b76      	subs	r6, r6, r5
    2dae:	f003 ffdf 	bl	6d70 <___init_veneer>
    2db2:	10b6      	asrs	r6, r6, #2
    2db4:	bf18      	it	ne
    2db6:	2400      	movne	r4, #0
    2db8:	d006      	beq.n	2dc8 <__libc_init_array+0x3c>
    2dba:	3401      	adds	r4, #1
    2dbc:	f855 3b04 	ldr.w	r3, [r5], #4
    2dc0:	4798      	blx	r3
    2dc2:	42a6      	cmp	r6, r4
    2dc4:	d1f9      	bne.n	2dba <__libc_init_array+0x2e>
    2dc6:	bd70      	pop	{r4, r5, r6, pc}
    2dc8:	bd70      	pop	{r4, r5, r6, pc}
    2dca:	bf00      	nop
    2dcc:	60001e68 	.word	0x60001e68
    2dd0:	60001e68 	.word	0x60001e68
    2dd4:	60001e70 	.word	0x60001e70
    2dd8:	60001e68 	.word	0x60001e68

00002ddc <__itoa>:
    2ddc:	1e93      	subs	r3, r2, #2
    2dde:	2b22      	cmp	r3, #34	; 0x22
    2de0:	d810      	bhi.n	2e04 <__itoa+0x28>
    2de2:	2a0a      	cmp	r2, #10
    2de4:	b510      	push	{r4, lr}
    2de6:	d006      	beq.n	2df6 <__itoa+0x1a>
    2de8:	2300      	movs	r3, #0
    2dea:	460c      	mov	r4, r1
    2dec:	4419      	add	r1, r3
    2dee:	f000 ff49 	bl	3c84 <__utoa>
    2df2:	4620      	mov	r0, r4
    2df4:	bd10      	pop	{r4, pc}
    2df6:	2800      	cmp	r0, #0
    2df8:	daf6      	bge.n	2de8 <__itoa+0xc>
    2dfa:	232d      	movs	r3, #45	; 0x2d
    2dfc:	700b      	strb	r3, [r1, #0]
    2dfe:	4240      	negs	r0, r0
    2e00:	2301      	movs	r3, #1
    2e02:	e7f2      	b.n	2dea <__itoa+0xe>
    2e04:	2000      	movs	r0, #0
    2e06:	7008      	strb	r0, [r1, #0]
    2e08:	4770      	bx	lr
    2e0a:	bf00      	nop

00002e0c <itoa>:
    2e0c:	f7ff bfe6 	b.w	2ddc <__itoa>

00002e10 <malloc>:
    2e10:	4b02      	ldr	r3, [pc, #8]	; (2e1c <malloc+0xc>)
    2e12:	4601      	mov	r1, r0
    2e14:	6818      	ldr	r0, [r3, #0]
    2e16:	f000 b80b 	b.w	2e30 <_malloc_r>
    2e1a:	bf00      	nop
    2e1c:	20001560 	.word	0x20001560

00002e20 <free>:
    2e20:	4b02      	ldr	r3, [pc, #8]	; (2e2c <free+0xc>)
    2e22:	4601      	mov	r1, r0
    2e24:	6818      	ldr	r0, [r3, #0]
    2e26:	f001 b8cf 	b.w	3fc8 <_free_r>
    2e2a:	bf00      	nop
    2e2c:	20001560 	.word	0x20001560

00002e30 <_malloc_r>:
    2e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e34:	f101 050b 	add.w	r5, r1, #11
    2e38:	2d16      	cmp	r5, #22
    2e3a:	b083      	sub	sp, #12
    2e3c:	4606      	mov	r6, r0
    2e3e:	f240 809f 	bls.w	2f80 <_malloc_r+0x150>
    2e42:	f035 0507 	bics.w	r5, r5, #7
    2e46:	f100 80bf 	bmi.w	2fc8 <_malloc_r+0x198>
    2e4a:	42a9      	cmp	r1, r5
    2e4c:	f200 80bc 	bhi.w	2fc8 <_malloc_r+0x198>
    2e50:	f000 fc08 	bl	3664 <__malloc_lock>
    2e54:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    2e58:	f0c0 829c 	bcc.w	3394 <_malloc_r+0x564>
    2e5c:	0a6b      	lsrs	r3, r5, #9
    2e5e:	f000 80ba 	beq.w	2fd6 <_malloc_r+0x1a6>
    2e62:	2b04      	cmp	r3, #4
    2e64:	f200 8183 	bhi.w	316e <_malloc_r+0x33e>
    2e68:	09a8      	lsrs	r0, r5, #6
    2e6a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    2e6e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2e72:	3038      	adds	r0, #56	; 0x38
    2e74:	4fc4      	ldr	r7, [pc, #784]	; (3188 <_malloc_r+0x358>)
    2e76:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2e7a:	f1a3 0108 	sub.w	r1, r3, #8
    2e7e:	685c      	ldr	r4, [r3, #4]
    2e80:	42a1      	cmp	r1, r4
    2e82:	d107      	bne.n	2e94 <_malloc_r+0x64>
    2e84:	e0ac      	b.n	2fe0 <_malloc_r+0x1b0>
    2e86:	2a00      	cmp	r2, #0
    2e88:	f280 80ac 	bge.w	2fe4 <_malloc_r+0x1b4>
    2e8c:	68e4      	ldr	r4, [r4, #12]
    2e8e:	42a1      	cmp	r1, r4
    2e90:	f000 80a6 	beq.w	2fe0 <_malloc_r+0x1b0>
    2e94:	6863      	ldr	r3, [r4, #4]
    2e96:	f023 0303 	bic.w	r3, r3, #3
    2e9a:	1b5a      	subs	r2, r3, r5
    2e9c:	2a0f      	cmp	r2, #15
    2e9e:	ddf2      	ble.n	2e86 <_malloc_r+0x56>
    2ea0:	49b9      	ldr	r1, [pc, #740]	; (3188 <_malloc_r+0x358>)
    2ea2:	693c      	ldr	r4, [r7, #16]
    2ea4:	f101 0e08 	add.w	lr, r1, #8
    2ea8:	4574      	cmp	r4, lr
    2eaa:	f000 81b3 	beq.w	3214 <_malloc_r+0x3e4>
    2eae:	6863      	ldr	r3, [r4, #4]
    2eb0:	f023 0303 	bic.w	r3, r3, #3
    2eb4:	1b5a      	subs	r2, r3, r5
    2eb6:	2a0f      	cmp	r2, #15
    2eb8:	f300 8199 	bgt.w	31ee <_malloc_r+0x3be>
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	f8c1 e014 	str.w	lr, [r1, #20]
    2ec2:	f8c1 e010 	str.w	lr, [r1, #16]
    2ec6:	f280 809e 	bge.w	3006 <_malloc_r+0x1d6>
    2eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2ece:	f080 8167 	bcs.w	31a0 <_malloc_r+0x370>
    2ed2:	08db      	lsrs	r3, r3, #3
    2ed4:	f103 0c01 	add.w	ip, r3, #1
    2ed8:	2201      	movs	r2, #1
    2eda:	109b      	asrs	r3, r3, #2
    2edc:	fa02 f303 	lsl.w	r3, r2, r3
    2ee0:	684a      	ldr	r2, [r1, #4]
    2ee2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    2ee6:	f8c4 8008 	str.w	r8, [r4, #8]
    2eea:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    2eee:	431a      	orrs	r2, r3
    2ef0:	f1a9 0308 	sub.w	r3, r9, #8
    2ef4:	60e3      	str	r3, [r4, #12]
    2ef6:	604a      	str	r2, [r1, #4]
    2ef8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2efc:	f8c8 400c 	str.w	r4, [r8, #12]
    2f00:	1083      	asrs	r3, r0, #2
    2f02:	2401      	movs	r4, #1
    2f04:	409c      	lsls	r4, r3
    2f06:	4294      	cmp	r4, r2
    2f08:	f200 808a 	bhi.w	3020 <_malloc_r+0x1f0>
    2f0c:	4214      	tst	r4, r2
    2f0e:	d106      	bne.n	2f1e <_malloc_r+0xee>
    2f10:	f020 0003 	bic.w	r0, r0, #3
    2f14:	0064      	lsls	r4, r4, #1
    2f16:	4214      	tst	r4, r2
    2f18:	f100 0004 	add.w	r0, r0, #4
    2f1c:	d0fa      	beq.n	2f14 <_malloc_r+0xe4>
    2f1e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2f22:	46cc      	mov	ip, r9
    2f24:	4680      	mov	r8, r0
    2f26:	f8dc 100c 	ldr.w	r1, [ip, #12]
    2f2a:	458c      	cmp	ip, r1
    2f2c:	d107      	bne.n	2f3e <_malloc_r+0x10e>
    2f2e:	e173      	b.n	3218 <_malloc_r+0x3e8>
    2f30:	2a00      	cmp	r2, #0
    2f32:	f280 8181 	bge.w	3238 <_malloc_r+0x408>
    2f36:	68c9      	ldr	r1, [r1, #12]
    2f38:	458c      	cmp	ip, r1
    2f3a:	f000 816d 	beq.w	3218 <_malloc_r+0x3e8>
    2f3e:	684b      	ldr	r3, [r1, #4]
    2f40:	f023 0303 	bic.w	r3, r3, #3
    2f44:	1b5a      	subs	r2, r3, r5
    2f46:	2a0f      	cmp	r2, #15
    2f48:	ddf2      	ble.n	2f30 <_malloc_r+0x100>
    2f4a:	460c      	mov	r4, r1
    2f4c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2f50:	f854 8f08 	ldr.w	r8, [r4, #8]!
    2f54:	194b      	adds	r3, r1, r5
    2f56:	f045 0501 	orr.w	r5, r5, #1
    2f5a:	604d      	str	r5, [r1, #4]
    2f5c:	f042 0101 	orr.w	r1, r2, #1
    2f60:	f8c8 c00c 	str.w	ip, [r8, #12]
    2f64:	4630      	mov	r0, r6
    2f66:	f8cc 8008 	str.w	r8, [ip, #8]
    2f6a:	617b      	str	r3, [r7, #20]
    2f6c:	613b      	str	r3, [r7, #16]
    2f6e:	f8c3 e00c 	str.w	lr, [r3, #12]
    2f72:	f8c3 e008 	str.w	lr, [r3, #8]
    2f76:	6059      	str	r1, [r3, #4]
    2f78:	509a      	str	r2, [r3, r2]
    2f7a:	f000 fb75 	bl	3668 <__malloc_unlock>
    2f7e:	e01f      	b.n	2fc0 <_malloc_r+0x190>
    2f80:	2910      	cmp	r1, #16
    2f82:	d821      	bhi.n	2fc8 <_malloc_r+0x198>
    2f84:	f000 fb6e 	bl	3664 <__malloc_lock>
    2f88:	2510      	movs	r5, #16
    2f8a:	2306      	movs	r3, #6
    2f8c:	2002      	movs	r0, #2
    2f8e:	4f7e      	ldr	r7, [pc, #504]	; (3188 <_malloc_r+0x358>)
    2f90:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2f94:	f1a3 0208 	sub.w	r2, r3, #8
    2f98:	685c      	ldr	r4, [r3, #4]
    2f9a:	4294      	cmp	r4, r2
    2f9c:	f000 8145 	beq.w	322a <_malloc_r+0x3fa>
    2fa0:	6863      	ldr	r3, [r4, #4]
    2fa2:	68e1      	ldr	r1, [r4, #12]
    2fa4:	68a5      	ldr	r5, [r4, #8]
    2fa6:	f023 0303 	bic.w	r3, r3, #3
    2faa:	4423      	add	r3, r4
    2fac:	4630      	mov	r0, r6
    2fae:	685a      	ldr	r2, [r3, #4]
    2fb0:	60e9      	str	r1, [r5, #12]
    2fb2:	f042 0201 	orr.w	r2, r2, #1
    2fb6:	608d      	str	r5, [r1, #8]
    2fb8:	605a      	str	r2, [r3, #4]
    2fba:	f000 fb55 	bl	3668 <__malloc_unlock>
    2fbe:	3408      	adds	r4, #8
    2fc0:	4620      	mov	r0, r4
    2fc2:	b003      	add	sp, #12
    2fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fc8:	2400      	movs	r4, #0
    2fca:	230c      	movs	r3, #12
    2fcc:	4620      	mov	r0, r4
    2fce:	6033      	str	r3, [r6, #0]
    2fd0:	b003      	add	sp, #12
    2fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fd6:	2380      	movs	r3, #128	; 0x80
    2fd8:	f04f 0e40 	mov.w	lr, #64	; 0x40
    2fdc:	203f      	movs	r0, #63	; 0x3f
    2fde:	e749      	b.n	2e74 <_malloc_r+0x44>
    2fe0:	4670      	mov	r0, lr
    2fe2:	e75d      	b.n	2ea0 <_malloc_r+0x70>
    2fe4:	4423      	add	r3, r4
    2fe6:	68e1      	ldr	r1, [r4, #12]
    2fe8:	685a      	ldr	r2, [r3, #4]
    2fea:	68a5      	ldr	r5, [r4, #8]
    2fec:	f042 0201 	orr.w	r2, r2, #1
    2ff0:	60e9      	str	r1, [r5, #12]
    2ff2:	4630      	mov	r0, r6
    2ff4:	608d      	str	r5, [r1, #8]
    2ff6:	605a      	str	r2, [r3, #4]
    2ff8:	f000 fb36 	bl	3668 <__malloc_unlock>
    2ffc:	3408      	adds	r4, #8
    2ffe:	4620      	mov	r0, r4
    3000:	b003      	add	sp, #12
    3002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3006:	4423      	add	r3, r4
    3008:	4630      	mov	r0, r6
    300a:	685a      	ldr	r2, [r3, #4]
    300c:	f042 0201 	orr.w	r2, r2, #1
    3010:	605a      	str	r2, [r3, #4]
    3012:	f000 fb29 	bl	3668 <__malloc_unlock>
    3016:	3408      	adds	r4, #8
    3018:	4620      	mov	r0, r4
    301a:	b003      	add	sp, #12
    301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3020:	68bc      	ldr	r4, [r7, #8]
    3022:	6863      	ldr	r3, [r4, #4]
    3024:	f023 0803 	bic.w	r8, r3, #3
    3028:	45a8      	cmp	r8, r5
    302a:	d304      	bcc.n	3036 <_malloc_r+0x206>
    302c:	ebc5 0308 	rsb	r3, r5, r8
    3030:	2b0f      	cmp	r3, #15
    3032:	f300 808c 	bgt.w	314e <_malloc_r+0x31e>
    3036:	4b55      	ldr	r3, [pc, #340]	; (318c <_malloc_r+0x35c>)
    3038:	f8df 9160 	ldr.w	r9, [pc, #352]	; 319c <_malloc_r+0x36c>
    303c:	681a      	ldr	r2, [r3, #0]
    303e:	f8d9 3000 	ldr.w	r3, [r9]
    3042:	3301      	adds	r3, #1
    3044:	442a      	add	r2, r5
    3046:	eb04 0a08 	add.w	sl, r4, r8
    304a:	f000 8160 	beq.w	330e <_malloc_r+0x4de>
    304e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3052:	320f      	adds	r2, #15
    3054:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    3058:	f022 020f 	bic.w	r2, r2, #15
    305c:	4611      	mov	r1, r2
    305e:	4630      	mov	r0, r6
    3060:	9201      	str	r2, [sp, #4]
    3062:	f000 fcfb 	bl	3a5c <_sbrk_r>
    3066:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    306a:	4683      	mov	fp, r0
    306c:	9a01      	ldr	r2, [sp, #4]
    306e:	f000 8158 	beq.w	3322 <_malloc_r+0x4f2>
    3072:	4582      	cmp	sl, r0
    3074:	f200 80fc 	bhi.w	3270 <_malloc_r+0x440>
    3078:	4b45      	ldr	r3, [pc, #276]	; (3190 <_malloc_r+0x360>)
    307a:	6819      	ldr	r1, [r3, #0]
    307c:	45da      	cmp	sl, fp
    307e:	4411      	add	r1, r2
    3080:	6019      	str	r1, [r3, #0]
    3082:	f000 8153 	beq.w	332c <_malloc_r+0x4fc>
    3086:	f8d9 0000 	ldr.w	r0, [r9]
    308a:	f8df e110 	ldr.w	lr, [pc, #272]	; 319c <_malloc_r+0x36c>
    308e:	3001      	adds	r0, #1
    3090:	bf1b      	ittet	ne
    3092:	ebca 0a0b 	rsbne	sl, sl, fp
    3096:	4451      	addne	r1, sl
    3098:	f8ce b000 	streq.w	fp, [lr]
    309c:	6019      	strne	r1, [r3, #0]
    309e:	f01b 0107 	ands.w	r1, fp, #7
    30a2:	f000 8117 	beq.w	32d4 <_malloc_r+0x4a4>
    30a6:	f1c1 0008 	rsb	r0, r1, #8
    30aa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    30ae:	4483      	add	fp, r0
    30b0:	3108      	adds	r1, #8
    30b2:	445a      	add	r2, fp
    30b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    30b8:	ebc2 0901 	rsb	r9, r2, r1
    30bc:	4649      	mov	r1, r9
    30be:	4630      	mov	r0, r6
    30c0:	9301      	str	r3, [sp, #4]
    30c2:	f000 fccb 	bl	3a5c <_sbrk_r>
    30c6:	1c43      	adds	r3, r0, #1
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	f000 813f 	beq.w	334c <_malloc_r+0x51c>
    30ce:	ebcb 0200 	rsb	r2, fp, r0
    30d2:	444a      	add	r2, r9
    30d4:	f042 0201 	orr.w	r2, r2, #1
    30d8:	6819      	ldr	r1, [r3, #0]
    30da:	f8c7 b008 	str.w	fp, [r7, #8]
    30de:	4449      	add	r1, r9
    30e0:	42bc      	cmp	r4, r7
    30e2:	f8cb 2004 	str.w	r2, [fp, #4]
    30e6:	6019      	str	r1, [r3, #0]
    30e8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3190 <_malloc_r+0x360>
    30ec:	d016      	beq.n	311c <_malloc_r+0x2ec>
    30ee:	f1b8 0f0f 	cmp.w	r8, #15
    30f2:	f240 80fd 	bls.w	32f0 <_malloc_r+0x4c0>
    30f6:	6862      	ldr	r2, [r4, #4]
    30f8:	f1a8 030c 	sub.w	r3, r8, #12
    30fc:	f023 0307 	bic.w	r3, r3, #7
    3100:	18e0      	adds	r0, r4, r3
    3102:	f002 0201 	and.w	r2, r2, #1
    3106:	f04f 0e05 	mov.w	lr, #5
    310a:	431a      	orrs	r2, r3
    310c:	2b0f      	cmp	r3, #15
    310e:	6062      	str	r2, [r4, #4]
    3110:	f8c0 e004 	str.w	lr, [r0, #4]
    3114:	f8c0 e008 	str.w	lr, [r0, #8]
    3118:	f200 811c 	bhi.w	3354 <_malloc_r+0x524>
    311c:	4b1d      	ldr	r3, [pc, #116]	; (3194 <_malloc_r+0x364>)
    311e:	68bc      	ldr	r4, [r7, #8]
    3120:	681a      	ldr	r2, [r3, #0]
    3122:	4291      	cmp	r1, r2
    3124:	bf88      	it	hi
    3126:	6019      	strhi	r1, [r3, #0]
    3128:	4b1b      	ldr	r3, [pc, #108]	; (3198 <_malloc_r+0x368>)
    312a:	681a      	ldr	r2, [r3, #0]
    312c:	4291      	cmp	r1, r2
    312e:	6862      	ldr	r2, [r4, #4]
    3130:	bf88      	it	hi
    3132:	6019      	strhi	r1, [r3, #0]
    3134:	f022 0203 	bic.w	r2, r2, #3
    3138:	4295      	cmp	r5, r2
    313a:	eba2 0305 	sub.w	r3, r2, r5
    313e:	d801      	bhi.n	3144 <_malloc_r+0x314>
    3140:	2b0f      	cmp	r3, #15
    3142:	dc04      	bgt.n	314e <_malloc_r+0x31e>
    3144:	4630      	mov	r0, r6
    3146:	f000 fa8f 	bl	3668 <__malloc_unlock>
    314a:	2400      	movs	r4, #0
    314c:	e738      	b.n	2fc0 <_malloc_r+0x190>
    314e:	1962      	adds	r2, r4, r5
    3150:	f043 0301 	orr.w	r3, r3, #1
    3154:	f045 0501 	orr.w	r5, r5, #1
    3158:	6065      	str	r5, [r4, #4]
    315a:	4630      	mov	r0, r6
    315c:	60ba      	str	r2, [r7, #8]
    315e:	6053      	str	r3, [r2, #4]
    3160:	f000 fa82 	bl	3668 <__malloc_unlock>
    3164:	3408      	adds	r4, #8
    3166:	4620      	mov	r0, r4
    3168:	b003      	add	sp, #12
    316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    316e:	2b14      	cmp	r3, #20
    3170:	d971      	bls.n	3256 <_malloc_r+0x426>
    3172:	2b54      	cmp	r3, #84	; 0x54
    3174:	f200 80a4 	bhi.w	32c0 <_malloc_r+0x490>
    3178:	0b28      	lsrs	r0, r5, #12
    317a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    317e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3182:	306e      	adds	r0, #110	; 0x6e
    3184:	e676      	b.n	2e74 <_malloc_r+0x44>
    3186:	bf00      	nop
    3188:	20001150 	.word	0x20001150
    318c:	20001ee4 	.word	0x20001ee4
    3190:	20001eb4 	.word	0x20001eb4
    3194:	20001edc 	.word	0x20001edc
    3198:	20001ee0 	.word	0x20001ee0
    319c:	20001558 	.word	0x20001558
    31a0:	0a5a      	lsrs	r2, r3, #9
    31a2:	2a04      	cmp	r2, #4
    31a4:	d95e      	bls.n	3264 <_malloc_r+0x434>
    31a6:	2a14      	cmp	r2, #20
    31a8:	f200 80b3 	bhi.w	3312 <_malloc_r+0x4e2>
    31ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    31b0:	0049      	lsls	r1, r1, #1
    31b2:	325b      	adds	r2, #91	; 0x5b
    31b4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    31b8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    31bc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 339c <_malloc_r+0x56c>
    31c0:	f1ac 0c08 	sub.w	ip, ip, #8
    31c4:	458c      	cmp	ip, r1
    31c6:	f000 8088 	beq.w	32da <_malloc_r+0x4aa>
    31ca:	684a      	ldr	r2, [r1, #4]
    31cc:	f022 0203 	bic.w	r2, r2, #3
    31d0:	4293      	cmp	r3, r2
    31d2:	d202      	bcs.n	31da <_malloc_r+0x3aa>
    31d4:	6889      	ldr	r1, [r1, #8]
    31d6:	458c      	cmp	ip, r1
    31d8:	d1f7      	bne.n	31ca <_malloc_r+0x39a>
    31da:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    31de:	687a      	ldr	r2, [r7, #4]
    31e0:	f8c4 c00c 	str.w	ip, [r4, #12]
    31e4:	60a1      	str	r1, [r4, #8]
    31e6:	f8cc 4008 	str.w	r4, [ip, #8]
    31ea:	60cc      	str	r4, [r1, #12]
    31ec:	e688      	b.n	2f00 <_malloc_r+0xd0>
    31ee:	1963      	adds	r3, r4, r5
    31f0:	f042 0701 	orr.w	r7, r2, #1
    31f4:	f045 0501 	orr.w	r5, r5, #1
    31f8:	6065      	str	r5, [r4, #4]
    31fa:	4630      	mov	r0, r6
    31fc:	614b      	str	r3, [r1, #20]
    31fe:	610b      	str	r3, [r1, #16]
    3200:	f8c3 e00c 	str.w	lr, [r3, #12]
    3204:	f8c3 e008 	str.w	lr, [r3, #8]
    3208:	605f      	str	r7, [r3, #4]
    320a:	509a      	str	r2, [r3, r2]
    320c:	3408      	adds	r4, #8
    320e:	f000 fa2b 	bl	3668 <__malloc_unlock>
    3212:	e6d5      	b.n	2fc0 <_malloc_r+0x190>
    3214:	684a      	ldr	r2, [r1, #4]
    3216:	e673      	b.n	2f00 <_malloc_r+0xd0>
    3218:	f108 0801 	add.w	r8, r8, #1
    321c:	f018 0f03 	tst.w	r8, #3
    3220:	f10c 0c08 	add.w	ip, ip, #8
    3224:	f47f ae7f 	bne.w	2f26 <_malloc_r+0xf6>
    3228:	e030      	b.n	328c <_malloc_r+0x45c>
    322a:	68dc      	ldr	r4, [r3, #12]
    322c:	42a3      	cmp	r3, r4
    322e:	bf08      	it	eq
    3230:	3002      	addeq	r0, #2
    3232:	f43f ae35 	beq.w	2ea0 <_malloc_r+0x70>
    3236:	e6b3      	b.n	2fa0 <_malloc_r+0x170>
    3238:	440b      	add	r3, r1
    323a:	460c      	mov	r4, r1
    323c:	685a      	ldr	r2, [r3, #4]
    323e:	68c9      	ldr	r1, [r1, #12]
    3240:	f854 5f08 	ldr.w	r5, [r4, #8]!
    3244:	f042 0201 	orr.w	r2, r2, #1
    3248:	605a      	str	r2, [r3, #4]
    324a:	4630      	mov	r0, r6
    324c:	60e9      	str	r1, [r5, #12]
    324e:	608d      	str	r5, [r1, #8]
    3250:	f000 fa0a 	bl	3668 <__malloc_unlock>
    3254:	e6b4      	b.n	2fc0 <_malloc_r+0x190>
    3256:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    325a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    325e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3262:	e607      	b.n	2e74 <_malloc_r+0x44>
    3264:	099a      	lsrs	r2, r3, #6
    3266:	f102 0139 	add.w	r1, r2, #57	; 0x39
    326a:	0049      	lsls	r1, r1, #1
    326c:	3238      	adds	r2, #56	; 0x38
    326e:	e7a1      	b.n	31b4 <_malloc_r+0x384>
    3270:	42bc      	cmp	r4, r7
    3272:	4b4a      	ldr	r3, [pc, #296]	; (339c <_malloc_r+0x56c>)
    3274:	f43f af00 	beq.w	3078 <_malloc_r+0x248>
    3278:	689c      	ldr	r4, [r3, #8]
    327a:	6862      	ldr	r2, [r4, #4]
    327c:	f022 0203 	bic.w	r2, r2, #3
    3280:	e75a      	b.n	3138 <_malloc_r+0x308>
    3282:	f859 3908 	ldr.w	r3, [r9], #-8
    3286:	4599      	cmp	r9, r3
    3288:	f040 8082 	bne.w	3390 <_malloc_r+0x560>
    328c:	f010 0f03 	tst.w	r0, #3
    3290:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    3294:	d1f5      	bne.n	3282 <_malloc_r+0x452>
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	ea23 0304 	bic.w	r3, r3, r4
    329c:	607b      	str	r3, [r7, #4]
    329e:	0064      	lsls	r4, r4, #1
    32a0:	429c      	cmp	r4, r3
    32a2:	f63f aebd 	bhi.w	3020 <_malloc_r+0x1f0>
    32a6:	2c00      	cmp	r4, #0
    32a8:	f43f aeba 	beq.w	3020 <_malloc_r+0x1f0>
    32ac:	421c      	tst	r4, r3
    32ae:	4640      	mov	r0, r8
    32b0:	f47f ae35 	bne.w	2f1e <_malloc_r+0xee>
    32b4:	0064      	lsls	r4, r4, #1
    32b6:	421c      	tst	r4, r3
    32b8:	f100 0004 	add.w	r0, r0, #4
    32bc:	d0fa      	beq.n	32b4 <_malloc_r+0x484>
    32be:	e62e      	b.n	2f1e <_malloc_r+0xee>
    32c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    32c4:	d818      	bhi.n	32f8 <_malloc_r+0x4c8>
    32c6:	0be8      	lsrs	r0, r5, #15
    32c8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    32cc:	ea4f 034e 	mov.w	r3, lr, lsl #1
    32d0:	3077      	adds	r0, #119	; 0x77
    32d2:	e5cf      	b.n	2e74 <_malloc_r+0x44>
    32d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    32d8:	e6eb      	b.n	30b2 <_malloc_r+0x282>
    32da:	2101      	movs	r1, #1
    32dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    32e0:	1092      	asrs	r2, r2, #2
    32e2:	fa01 f202 	lsl.w	r2, r1, r2
    32e6:	431a      	orrs	r2, r3
    32e8:	f8c8 2004 	str.w	r2, [r8, #4]
    32ec:	4661      	mov	r1, ip
    32ee:	e777      	b.n	31e0 <_malloc_r+0x3b0>
    32f0:	2301      	movs	r3, #1
    32f2:	f8cb 3004 	str.w	r3, [fp, #4]
    32f6:	e725      	b.n	3144 <_malloc_r+0x314>
    32f8:	f240 5254 	movw	r2, #1364	; 0x554
    32fc:	4293      	cmp	r3, r2
    32fe:	d820      	bhi.n	3342 <_malloc_r+0x512>
    3300:	0ca8      	lsrs	r0, r5, #18
    3302:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    3306:	ea4f 034e 	mov.w	r3, lr, lsl #1
    330a:	307c      	adds	r0, #124	; 0x7c
    330c:	e5b2      	b.n	2e74 <_malloc_r+0x44>
    330e:	3210      	adds	r2, #16
    3310:	e6a4      	b.n	305c <_malloc_r+0x22c>
    3312:	2a54      	cmp	r2, #84	; 0x54
    3314:	d826      	bhi.n	3364 <_malloc_r+0x534>
    3316:	0b1a      	lsrs	r2, r3, #12
    3318:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    331c:	0049      	lsls	r1, r1, #1
    331e:	326e      	adds	r2, #110	; 0x6e
    3320:	e748      	b.n	31b4 <_malloc_r+0x384>
    3322:	68bc      	ldr	r4, [r7, #8]
    3324:	6862      	ldr	r2, [r4, #4]
    3326:	f022 0203 	bic.w	r2, r2, #3
    332a:	e705      	b.n	3138 <_malloc_r+0x308>
    332c:	f3ca 000b 	ubfx	r0, sl, #0, #12
    3330:	2800      	cmp	r0, #0
    3332:	f47f aea8 	bne.w	3086 <_malloc_r+0x256>
    3336:	4442      	add	r2, r8
    3338:	68bb      	ldr	r3, [r7, #8]
    333a:	f042 0201 	orr.w	r2, r2, #1
    333e:	605a      	str	r2, [r3, #4]
    3340:	e6ec      	b.n	311c <_malloc_r+0x2ec>
    3342:	23fe      	movs	r3, #254	; 0xfe
    3344:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    3348:	207e      	movs	r0, #126	; 0x7e
    334a:	e593      	b.n	2e74 <_malloc_r+0x44>
    334c:	2201      	movs	r2, #1
    334e:	f04f 0900 	mov.w	r9, #0
    3352:	e6c1      	b.n	30d8 <_malloc_r+0x2a8>
    3354:	f104 0108 	add.w	r1, r4, #8
    3358:	4630      	mov	r0, r6
    335a:	f000 fe35 	bl	3fc8 <_free_r>
    335e:	f8d9 1000 	ldr.w	r1, [r9]
    3362:	e6db      	b.n	311c <_malloc_r+0x2ec>
    3364:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3368:	d805      	bhi.n	3376 <_malloc_r+0x546>
    336a:	0bda      	lsrs	r2, r3, #15
    336c:	f102 0178 	add.w	r1, r2, #120	; 0x78
    3370:	0049      	lsls	r1, r1, #1
    3372:	3277      	adds	r2, #119	; 0x77
    3374:	e71e      	b.n	31b4 <_malloc_r+0x384>
    3376:	f240 5154 	movw	r1, #1364	; 0x554
    337a:	428a      	cmp	r2, r1
    337c:	d805      	bhi.n	338a <_malloc_r+0x55a>
    337e:	0c9a      	lsrs	r2, r3, #18
    3380:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    3384:	0049      	lsls	r1, r1, #1
    3386:	327c      	adds	r2, #124	; 0x7c
    3388:	e714      	b.n	31b4 <_malloc_r+0x384>
    338a:	21fe      	movs	r1, #254	; 0xfe
    338c:	227e      	movs	r2, #126	; 0x7e
    338e:	e711      	b.n	31b4 <_malloc_r+0x384>
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	e784      	b.n	329e <_malloc_r+0x46e>
    3394:	08e8      	lsrs	r0, r5, #3
    3396:	1c43      	adds	r3, r0, #1
    3398:	005b      	lsls	r3, r3, #1
    339a:	e5f8      	b.n	2f8e <_malloc_r+0x15e>
    339c:	20001150 	.word	0x20001150

000033a0 <__ascii_mbtowc>:
    33a0:	b082      	sub	sp, #8
    33a2:	b149      	cbz	r1, 33b8 <__ascii_mbtowc+0x18>
    33a4:	b15a      	cbz	r2, 33be <__ascii_mbtowc+0x1e>
    33a6:	b16b      	cbz	r3, 33c4 <__ascii_mbtowc+0x24>
    33a8:	7813      	ldrb	r3, [r2, #0]
    33aa:	600b      	str	r3, [r1, #0]
    33ac:	7812      	ldrb	r2, [r2, #0]
    33ae:	1c10      	adds	r0, r2, #0
    33b0:	bf18      	it	ne
    33b2:	2001      	movne	r0, #1
    33b4:	b002      	add	sp, #8
    33b6:	4770      	bx	lr
    33b8:	a901      	add	r1, sp, #4
    33ba:	2a00      	cmp	r2, #0
    33bc:	d1f3      	bne.n	33a6 <__ascii_mbtowc+0x6>
    33be:	4610      	mov	r0, r2
    33c0:	b002      	add	sp, #8
    33c2:	4770      	bx	lr
    33c4:	f06f 0001 	mvn.w	r0, #1
    33c8:	e7f4      	b.n	33b4 <__ascii_mbtowc+0x14>
    33ca:	bf00      	nop

000033cc <memcpy>:
    33cc:	4684      	mov	ip, r0
    33ce:	ea41 0300 	orr.w	r3, r1, r0
    33d2:	f013 0303 	ands.w	r3, r3, #3
    33d6:	d16d      	bne.n	34b4 <memcpy+0xe8>
    33d8:	3a40      	subs	r2, #64	; 0x40
    33da:	d341      	bcc.n	3460 <memcpy+0x94>
    33dc:	f851 3b04 	ldr.w	r3, [r1], #4
    33e0:	f840 3b04 	str.w	r3, [r0], #4
    33e4:	f851 3b04 	ldr.w	r3, [r1], #4
    33e8:	f840 3b04 	str.w	r3, [r0], #4
    33ec:	f851 3b04 	ldr.w	r3, [r1], #4
    33f0:	f840 3b04 	str.w	r3, [r0], #4
    33f4:	f851 3b04 	ldr.w	r3, [r1], #4
    33f8:	f840 3b04 	str.w	r3, [r0], #4
    33fc:	f851 3b04 	ldr.w	r3, [r1], #4
    3400:	f840 3b04 	str.w	r3, [r0], #4
    3404:	f851 3b04 	ldr.w	r3, [r1], #4
    3408:	f840 3b04 	str.w	r3, [r0], #4
    340c:	f851 3b04 	ldr.w	r3, [r1], #4
    3410:	f840 3b04 	str.w	r3, [r0], #4
    3414:	f851 3b04 	ldr.w	r3, [r1], #4
    3418:	f840 3b04 	str.w	r3, [r0], #4
    341c:	f851 3b04 	ldr.w	r3, [r1], #4
    3420:	f840 3b04 	str.w	r3, [r0], #4
    3424:	f851 3b04 	ldr.w	r3, [r1], #4
    3428:	f840 3b04 	str.w	r3, [r0], #4
    342c:	f851 3b04 	ldr.w	r3, [r1], #4
    3430:	f840 3b04 	str.w	r3, [r0], #4
    3434:	f851 3b04 	ldr.w	r3, [r1], #4
    3438:	f840 3b04 	str.w	r3, [r0], #4
    343c:	f851 3b04 	ldr.w	r3, [r1], #4
    3440:	f840 3b04 	str.w	r3, [r0], #4
    3444:	f851 3b04 	ldr.w	r3, [r1], #4
    3448:	f840 3b04 	str.w	r3, [r0], #4
    344c:	f851 3b04 	ldr.w	r3, [r1], #4
    3450:	f840 3b04 	str.w	r3, [r0], #4
    3454:	f851 3b04 	ldr.w	r3, [r1], #4
    3458:	f840 3b04 	str.w	r3, [r0], #4
    345c:	3a40      	subs	r2, #64	; 0x40
    345e:	d2bd      	bcs.n	33dc <memcpy+0x10>
    3460:	3230      	adds	r2, #48	; 0x30
    3462:	d311      	bcc.n	3488 <memcpy+0xbc>
    3464:	f851 3b04 	ldr.w	r3, [r1], #4
    3468:	f840 3b04 	str.w	r3, [r0], #4
    346c:	f851 3b04 	ldr.w	r3, [r1], #4
    3470:	f840 3b04 	str.w	r3, [r0], #4
    3474:	f851 3b04 	ldr.w	r3, [r1], #4
    3478:	f840 3b04 	str.w	r3, [r0], #4
    347c:	f851 3b04 	ldr.w	r3, [r1], #4
    3480:	f840 3b04 	str.w	r3, [r0], #4
    3484:	3a10      	subs	r2, #16
    3486:	d2ed      	bcs.n	3464 <memcpy+0x98>
    3488:	320c      	adds	r2, #12
    348a:	d305      	bcc.n	3498 <memcpy+0xcc>
    348c:	f851 3b04 	ldr.w	r3, [r1], #4
    3490:	f840 3b04 	str.w	r3, [r0], #4
    3494:	3a04      	subs	r2, #4
    3496:	d2f9      	bcs.n	348c <memcpy+0xc0>
    3498:	3204      	adds	r2, #4
    349a:	d008      	beq.n	34ae <memcpy+0xe2>
    349c:	07d2      	lsls	r2, r2, #31
    349e:	bf1c      	itt	ne
    34a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    34a4:	f800 3b01 	strbne.w	r3, [r0], #1
    34a8:	d301      	bcc.n	34ae <memcpy+0xe2>
    34aa:	880b      	ldrh	r3, [r1, #0]
    34ac:	8003      	strh	r3, [r0, #0]
    34ae:	4660      	mov	r0, ip
    34b0:	4770      	bx	lr
    34b2:	bf00      	nop
    34b4:	2a08      	cmp	r2, #8
    34b6:	d313      	bcc.n	34e0 <memcpy+0x114>
    34b8:	078b      	lsls	r3, r1, #30
    34ba:	d08d      	beq.n	33d8 <memcpy+0xc>
    34bc:	f010 0303 	ands.w	r3, r0, #3
    34c0:	d08a      	beq.n	33d8 <memcpy+0xc>
    34c2:	f1c3 0304 	rsb	r3, r3, #4
    34c6:	1ad2      	subs	r2, r2, r3
    34c8:	07db      	lsls	r3, r3, #31
    34ca:	bf1c      	itt	ne
    34cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    34d0:	f800 3b01 	strbne.w	r3, [r0], #1
    34d4:	d380      	bcc.n	33d8 <memcpy+0xc>
    34d6:	f831 3b02 	ldrh.w	r3, [r1], #2
    34da:	f820 3b02 	strh.w	r3, [r0], #2
    34de:	e77b      	b.n	33d8 <memcpy+0xc>
    34e0:	3a04      	subs	r2, #4
    34e2:	d3d9      	bcc.n	3498 <memcpy+0xcc>
    34e4:	3a01      	subs	r2, #1
    34e6:	f811 3b01 	ldrb.w	r3, [r1], #1
    34ea:	f800 3b01 	strb.w	r3, [r0], #1
    34ee:	d2f9      	bcs.n	34e4 <memcpy+0x118>
    34f0:	780b      	ldrb	r3, [r1, #0]
    34f2:	7003      	strb	r3, [r0, #0]
    34f4:	784b      	ldrb	r3, [r1, #1]
    34f6:	7043      	strb	r3, [r0, #1]
    34f8:	788b      	ldrb	r3, [r1, #2]
    34fa:	7083      	strb	r3, [r0, #2]
    34fc:	4660      	mov	r0, ip
    34fe:	4770      	bx	lr

00003500 <memmove>:
    3500:	4288      	cmp	r0, r1
    3502:	b5f0      	push	{r4, r5, r6, r7, lr}
    3504:	d90d      	bls.n	3522 <memmove+0x22>
    3506:	188b      	adds	r3, r1, r2
    3508:	4298      	cmp	r0, r3
    350a:	d20a      	bcs.n	3522 <memmove+0x22>
    350c:	1881      	adds	r1, r0, r2
    350e:	2a00      	cmp	r2, #0
    3510:	d051      	beq.n	35b6 <memmove+0xb6>
    3512:	1a9a      	subs	r2, r3, r2
    3514:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3518:	f801 4d01 	strb.w	r4, [r1, #-1]!
    351c:	4293      	cmp	r3, r2
    351e:	d1f9      	bne.n	3514 <memmove+0x14>
    3520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3522:	2a0f      	cmp	r2, #15
    3524:	d948      	bls.n	35b8 <memmove+0xb8>
    3526:	ea41 0300 	orr.w	r3, r1, r0
    352a:	079b      	lsls	r3, r3, #30
    352c:	d146      	bne.n	35bc <memmove+0xbc>
    352e:	f100 0410 	add.w	r4, r0, #16
    3532:	f101 0310 	add.w	r3, r1, #16
    3536:	4615      	mov	r5, r2
    3538:	f853 6c10 	ldr.w	r6, [r3, #-16]
    353c:	f844 6c10 	str.w	r6, [r4, #-16]
    3540:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    3544:	f844 6c0c 	str.w	r6, [r4, #-12]
    3548:	f853 6c08 	ldr.w	r6, [r3, #-8]
    354c:	f844 6c08 	str.w	r6, [r4, #-8]
    3550:	3d10      	subs	r5, #16
    3552:	f853 6c04 	ldr.w	r6, [r3, #-4]
    3556:	f844 6c04 	str.w	r6, [r4, #-4]
    355a:	2d0f      	cmp	r5, #15
    355c:	f103 0310 	add.w	r3, r3, #16
    3560:	f104 0410 	add.w	r4, r4, #16
    3564:	d8e8      	bhi.n	3538 <memmove+0x38>
    3566:	f1a2 0310 	sub.w	r3, r2, #16
    356a:	f023 030f 	bic.w	r3, r3, #15
    356e:	f002 0e0f 	and.w	lr, r2, #15
    3572:	3310      	adds	r3, #16
    3574:	f1be 0f03 	cmp.w	lr, #3
    3578:	4419      	add	r1, r3
    357a:	4403      	add	r3, r0
    357c:	d921      	bls.n	35c2 <memmove+0xc2>
    357e:	1f1e      	subs	r6, r3, #4
    3580:	460d      	mov	r5, r1
    3582:	4674      	mov	r4, lr
    3584:	3c04      	subs	r4, #4
    3586:	f855 7b04 	ldr.w	r7, [r5], #4
    358a:	f846 7f04 	str.w	r7, [r6, #4]!
    358e:	2c03      	cmp	r4, #3
    3590:	d8f8      	bhi.n	3584 <memmove+0x84>
    3592:	f1ae 0404 	sub.w	r4, lr, #4
    3596:	f024 0403 	bic.w	r4, r4, #3
    359a:	3404      	adds	r4, #4
    359c:	4423      	add	r3, r4
    359e:	4421      	add	r1, r4
    35a0:	f002 0203 	and.w	r2, r2, #3
    35a4:	b162      	cbz	r2, 35c0 <memmove+0xc0>
    35a6:	3b01      	subs	r3, #1
    35a8:	440a      	add	r2, r1
    35aa:	f811 4b01 	ldrb.w	r4, [r1], #1
    35ae:	f803 4f01 	strb.w	r4, [r3, #1]!
    35b2:	428a      	cmp	r2, r1
    35b4:	d1f9      	bne.n	35aa <memmove+0xaa>
    35b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b8:	4603      	mov	r3, r0
    35ba:	e7f3      	b.n	35a4 <memmove+0xa4>
    35bc:	4603      	mov	r3, r0
    35be:	e7f2      	b.n	35a6 <memmove+0xa6>
    35c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35c2:	4672      	mov	r2, lr
    35c4:	e7ee      	b.n	35a4 <memmove+0xa4>
    35c6:	bf00      	nop

000035c8 <memset>:
    35c8:	b470      	push	{r4, r5, r6}
    35ca:	0784      	lsls	r4, r0, #30
    35cc:	d046      	beq.n	365c <memset+0x94>
    35ce:	1e54      	subs	r4, r2, #1
    35d0:	2a00      	cmp	r2, #0
    35d2:	d041      	beq.n	3658 <memset+0x90>
    35d4:	b2cd      	uxtb	r5, r1
    35d6:	4603      	mov	r3, r0
    35d8:	e002      	b.n	35e0 <memset+0x18>
    35da:	1e62      	subs	r2, r4, #1
    35dc:	b3e4      	cbz	r4, 3658 <memset+0x90>
    35de:	4614      	mov	r4, r2
    35e0:	f803 5b01 	strb.w	r5, [r3], #1
    35e4:	079a      	lsls	r2, r3, #30
    35e6:	d1f8      	bne.n	35da <memset+0x12>
    35e8:	2c03      	cmp	r4, #3
    35ea:	d92e      	bls.n	364a <memset+0x82>
    35ec:	b2cd      	uxtb	r5, r1
    35ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    35f2:	2c0f      	cmp	r4, #15
    35f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    35f8:	d919      	bls.n	362e <memset+0x66>
    35fa:	f103 0210 	add.w	r2, r3, #16
    35fe:	4626      	mov	r6, r4
    3600:	3e10      	subs	r6, #16
    3602:	2e0f      	cmp	r6, #15
    3604:	f842 5c10 	str.w	r5, [r2, #-16]
    3608:	f842 5c0c 	str.w	r5, [r2, #-12]
    360c:	f842 5c08 	str.w	r5, [r2, #-8]
    3610:	f842 5c04 	str.w	r5, [r2, #-4]
    3614:	f102 0210 	add.w	r2, r2, #16
    3618:	d8f2      	bhi.n	3600 <memset+0x38>
    361a:	f1a4 0210 	sub.w	r2, r4, #16
    361e:	f022 020f 	bic.w	r2, r2, #15
    3622:	f004 040f 	and.w	r4, r4, #15
    3626:	3210      	adds	r2, #16
    3628:	2c03      	cmp	r4, #3
    362a:	4413      	add	r3, r2
    362c:	d90d      	bls.n	364a <memset+0x82>
    362e:	461e      	mov	r6, r3
    3630:	4622      	mov	r2, r4
    3632:	3a04      	subs	r2, #4
    3634:	2a03      	cmp	r2, #3
    3636:	f846 5b04 	str.w	r5, [r6], #4
    363a:	d8fa      	bhi.n	3632 <memset+0x6a>
    363c:	1f22      	subs	r2, r4, #4
    363e:	f022 0203 	bic.w	r2, r2, #3
    3642:	3204      	adds	r2, #4
    3644:	4413      	add	r3, r2
    3646:	f004 0403 	and.w	r4, r4, #3
    364a:	b12c      	cbz	r4, 3658 <memset+0x90>
    364c:	b2c9      	uxtb	r1, r1
    364e:	441c      	add	r4, r3
    3650:	f803 1b01 	strb.w	r1, [r3], #1
    3654:	42a3      	cmp	r3, r4
    3656:	d1fb      	bne.n	3650 <memset+0x88>
    3658:	bc70      	pop	{r4, r5, r6}
    365a:	4770      	bx	lr
    365c:	4614      	mov	r4, r2
    365e:	4603      	mov	r3, r0
    3660:	e7c2      	b.n	35e8 <memset+0x20>
    3662:	bf00      	nop

00003664 <__malloc_lock>:
    3664:	4770      	bx	lr
    3666:	bf00      	nop

00003668 <__malloc_unlock>:
    3668:	4770      	bx	lr
    366a:	bf00      	nop

0000366c <realloc>:
    366c:	4b02      	ldr	r3, [pc, #8]	; (3678 <realloc+0xc>)
    366e:	460a      	mov	r2, r1
    3670:	4601      	mov	r1, r0
    3672:	6818      	ldr	r0, [r3, #0]
    3674:	f000 b802 	b.w	367c <_realloc_r>
    3678:	20001560 	.word	0x20001560

0000367c <_realloc_r>:
    367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3680:	4617      	mov	r7, r2
    3682:	b083      	sub	sp, #12
    3684:	2900      	cmp	r1, #0
    3686:	f000 80c1 	beq.w	380c <_realloc_r+0x190>
    368a:	460e      	mov	r6, r1
    368c:	4681      	mov	r9, r0
    368e:	f107 050b 	add.w	r5, r7, #11
    3692:	f7ff ffe7 	bl	3664 <__malloc_lock>
    3696:	f856 ec04 	ldr.w	lr, [r6, #-4]
    369a:	2d16      	cmp	r5, #22
    369c:	f02e 0403 	bic.w	r4, lr, #3
    36a0:	f1a6 0808 	sub.w	r8, r6, #8
    36a4:	d840      	bhi.n	3728 <_realloc_r+0xac>
    36a6:	2210      	movs	r2, #16
    36a8:	4615      	mov	r5, r2
    36aa:	42af      	cmp	r7, r5
    36ac:	d841      	bhi.n	3732 <_realloc_r+0xb6>
    36ae:	4294      	cmp	r4, r2
    36b0:	da75      	bge.n	379e <_realloc_r+0x122>
    36b2:	4bc9      	ldr	r3, [pc, #804]	; (39d8 <_realloc_r+0x35c>)
    36b4:	6899      	ldr	r1, [r3, #8]
    36b6:	eb08 0004 	add.w	r0, r8, r4
    36ba:	4288      	cmp	r0, r1
    36bc:	6841      	ldr	r1, [r0, #4]
    36be:	f000 80d9 	beq.w	3874 <_realloc_r+0x1f8>
    36c2:	f021 0301 	bic.w	r3, r1, #1
    36c6:	4403      	add	r3, r0
    36c8:	685b      	ldr	r3, [r3, #4]
    36ca:	07db      	lsls	r3, r3, #31
    36cc:	d57d      	bpl.n	37ca <_realloc_r+0x14e>
    36ce:	f01e 0f01 	tst.w	lr, #1
    36d2:	d035      	beq.n	3740 <_realloc_r+0xc4>
    36d4:	4639      	mov	r1, r7
    36d6:	4648      	mov	r0, r9
    36d8:	f7ff fbaa 	bl	2e30 <_malloc_r>
    36dc:	4607      	mov	r7, r0
    36de:	b1e0      	cbz	r0, 371a <_realloc_r+0x9e>
    36e0:	f856 3c04 	ldr.w	r3, [r6, #-4]
    36e4:	f023 0301 	bic.w	r3, r3, #1
    36e8:	4443      	add	r3, r8
    36ea:	f1a0 0208 	sub.w	r2, r0, #8
    36ee:	429a      	cmp	r2, r3
    36f0:	f000 8144 	beq.w	397c <_realloc_r+0x300>
    36f4:	1f22      	subs	r2, r4, #4
    36f6:	2a24      	cmp	r2, #36	; 0x24
    36f8:	f200 8131 	bhi.w	395e <_realloc_r+0x2e2>
    36fc:	2a13      	cmp	r2, #19
    36fe:	f200 8104 	bhi.w	390a <_realloc_r+0x28e>
    3702:	4603      	mov	r3, r0
    3704:	4632      	mov	r2, r6
    3706:	6811      	ldr	r1, [r2, #0]
    3708:	6019      	str	r1, [r3, #0]
    370a:	6851      	ldr	r1, [r2, #4]
    370c:	6059      	str	r1, [r3, #4]
    370e:	6892      	ldr	r2, [r2, #8]
    3710:	609a      	str	r2, [r3, #8]
    3712:	4631      	mov	r1, r6
    3714:	4648      	mov	r0, r9
    3716:	f000 fc57 	bl	3fc8 <_free_r>
    371a:	4648      	mov	r0, r9
    371c:	f7ff ffa4 	bl	3668 <__malloc_unlock>
    3720:	4638      	mov	r0, r7
    3722:	b003      	add	sp, #12
    3724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3728:	f025 0507 	bic.w	r5, r5, #7
    372c:	2d00      	cmp	r5, #0
    372e:	462a      	mov	r2, r5
    3730:	dabb      	bge.n	36aa <_realloc_r+0x2e>
    3732:	230c      	movs	r3, #12
    3734:	2000      	movs	r0, #0
    3736:	f8c9 3000 	str.w	r3, [r9]
    373a:	b003      	add	sp, #12
    373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3740:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3744:	ebc3 0a08 	rsb	sl, r3, r8
    3748:	f8da 3004 	ldr.w	r3, [sl, #4]
    374c:	f023 0c03 	bic.w	ip, r3, #3
    3750:	eb04 030c 	add.w	r3, r4, ip
    3754:	4293      	cmp	r3, r2
    3756:	dbbd      	blt.n	36d4 <_realloc_r+0x58>
    3758:	4657      	mov	r7, sl
    375a:	f8da 100c 	ldr.w	r1, [sl, #12]
    375e:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3762:	1f22      	subs	r2, r4, #4
    3764:	2a24      	cmp	r2, #36	; 0x24
    3766:	60c1      	str	r1, [r0, #12]
    3768:	6088      	str	r0, [r1, #8]
    376a:	f200 8117 	bhi.w	399c <_realloc_r+0x320>
    376e:	2a13      	cmp	r2, #19
    3770:	f240 8112 	bls.w	3998 <_realloc_r+0x31c>
    3774:	6831      	ldr	r1, [r6, #0]
    3776:	f8ca 1008 	str.w	r1, [sl, #8]
    377a:	6871      	ldr	r1, [r6, #4]
    377c:	f8ca 100c 	str.w	r1, [sl, #12]
    3780:	2a1b      	cmp	r2, #27
    3782:	f200 812b 	bhi.w	39dc <_realloc_r+0x360>
    3786:	3608      	adds	r6, #8
    3788:	f10a 0210 	add.w	r2, sl, #16
    378c:	6831      	ldr	r1, [r6, #0]
    378e:	6011      	str	r1, [r2, #0]
    3790:	6871      	ldr	r1, [r6, #4]
    3792:	6051      	str	r1, [r2, #4]
    3794:	68b1      	ldr	r1, [r6, #8]
    3796:	6091      	str	r1, [r2, #8]
    3798:	463e      	mov	r6, r7
    379a:	461c      	mov	r4, r3
    379c:	46d0      	mov	r8, sl
    379e:	1b63      	subs	r3, r4, r5
    37a0:	2b0f      	cmp	r3, #15
    37a2:	d81d      	bhi.n	37e0 <_realloc_r+0x164>
    37a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    37a8:	f003 0301 	and.w	r3, r3, #1
    37ac:	4323      	orrs	r3, r4
    37ae:	4444      	add	r4, r8
    37b0:	f8c8 3004 	str.w	r3, [r8, #4]
    37b4:	6863      	ldr	r3, [r4, #4]
    37b6:	f043 0301 	orr.w	r3, r3, #1
    37ba:	6063      	str	r3, [r4, #4]
    37bc:	4648      	mov	r0, r9
    37be:	f7ff ff53 	bl	3668 <__malloc_unlock>
    37c2:	4630      	mov	r0, r6
    37c4:	b003      	add	sp, #12
    37c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37ca:	f021 0103 	bic.w	r1, r1, #3
    37ce:	4421      	add	r1, r4
    37d0:	4291      	cmp	r1, r2
    37d2:	db21      	blt.n	3818 <_realloc_r+0x19c>
    37d4:	68c3      	ldr	r3, [r0, #12]
    37d6:	6882      	ldr	r2, [r0, #8]
    37d8:	460c      	mov	r4, r1
    37da:	60d3      	str	r3, [r2, #12]
    37dc:	609a      	str	r2, [r3, #8]
    37de:	e7de      	b.n	379e <_realloc_r+0x122>
    37e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    37e4:	eb08 0105 	add.w	r1, r8, r5
    37e8:	f002 0201 	and.w	r2, r2, #1
    37ec:	4315      	orrs	r5, r2
    37ee:	f043 0201 	orr.w	r2, r3, #1
    37f2:	440b      	add	r3, r1
    37f4:	f8c8 5004 	str.w	r5, [r8, #4]
    37f8:	604a      	str	r2, [r1, #4]
    37fa:	685a      	ldr	r2, [r3, #4]
    37fc:	f042 0201 	orr.w	r2, r2, #1
    3800:	3108      	adds	r1, #8
    3802:	605a      	str	r2, [r3, #4]
    3804:	4648      	mov	r0, r9
    3806:	f000 fbdf 	bl	3fc8 <_free_r>
    380a:	e7d7      	b.n	37bc <_realloc_r+0x140>
    380c:	4611      	mov	r1, r2
    380e:	b003      	add	sp, #12
    3810:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3814:	f7ff bb0c 	b.w	2e30 <_malloc_r>
    3818:	f01e 0f01 	tst.w	lr, #1
    381c:	f47f af5a 	bne.w	36d4 <_realloc_r+0x58>
    3820:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3824:	ebc3 0a08 	rsb	sl, r3, r8
    3828:	f8da 3004 	ldr.w	r3, [sl, #4]
    382c:	f023 0c03 	bic.w	ip, r3, #3
    3830:	eb01 0e0c 	add.w	lr, r1, ip
    3834:	4596      	cmp	lr, r2
    3836:	db8b      	blt.n	3750 <_realloc_r+0xd4>
    3838:	68c3      	ldr	r3, [r0, #12]
    383a:	6882      	ldr	r2, [r0, #8]
    383c:	4657      	mov	r7, sl
    383e:	60d3      	str	r3, [r2, #12]
    3840:	609a      	str	r2, [r3, #8]
    3842:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3846:	f8da 300c 	ldr.w	r3, [sl, #12]
    384a:	60cb      	str	r3, [r1, #12]
    384c:	1f22      	subs	r2, r4, #4
    384e:	2a24      	cmp	r2, #36	; 0x24
    3850:	6099      	str	r1, [r3, #8]
    3852:	f200 8099 	bhi.w	3988 <_realloc_r+0x30c>
    3856:	2a13      	cmp	r2, #19
    3858:	d962      	bls.n	3920 <_realloc_r+0x2a4>
    385a:	6833      	ldr	r3, [r6, #0]
    385c:	f8ca 3008 	str.w	r3, [sl, #8]
    3860:	6873      	ldr	r3, [r6, #4]
    3862:	f8ca 300c 	str.w	r3, [sl, #12]
    3866:	2a1b      	cmp	r2, #27
    3868:	f200 80a0 	bhi.w	39ac <_realloc_r+0x330>
    386c:	3608      	adds	r6, #8
    386e:	f10a 0310 	add.w	r3, sl, #16
    3872:	e056      	b.n	3922 <_realloc_r+0x2a6>
    3874:	f021 0b03 	bic.w	fp, r1, #3
    3878:	44a3      	add	fp, r4
    387a:	f105 0010 	add.w	r0, r5, #16
    387e:	4583      	cmp	fp, r0
    3880:	da59      	bge.n	3936 <_realloc_r+0x2ba>
    3882:	f01e 0f01 	tst.w	lr, #1
    3886:	f47f af25 	bne.w	36d4 <_realloc_r+0x58>
    388a:	f856 1c08 	ldr.w	r1, [r6, #-8]
    388e:	ebc1 0a08 	rsb	sl, r1, r8
    3892:	f8da 1004 	ldr.w	r1, [sl, #4]
    3896:	f021 0c03 	bic.w	ip, r1, #3
    389a:	44e3      	add	fp, ip
    389c:	4558      	cmp	r0, fp
    389e:	f73f af57 	bgt.w	3750 <_realloc_r+0xd4>
    38a2:	4657      	mov	r7, sl
    38a4:	f8da 100c 	ldr.w	r1, [sl, #12]
    38a8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    38ac:	1f22      	subs	r2, r4, #4
    38ae:	2a24      	cmp	r2, #36	; 0x24
    38b0:	60c1      	str	r1, [r0, #12]
    38b2:	6088      	str	r0, [r1, #8]
    38b4:	f200 80b4 	bhi.w	3a20 <_realloc_r+0x3a4>
    38b8:	2a13      	cmp	r2, #19
    38ba:	f240 80a5 	bls.w	3a08 <_realloc_r+0x38c>
    38be:	6831      	ldr	r1, [r6, #0]
    38c0:	f8ca 1008 	str.w	r1, [sl, #8]
    38c4:	6871      	ldr	r1, [r6, #4]
    38c6:	f8ca 100c 	str.w	r1, [sl, #12]
    38ca:	2a1b      	cmp	r2, #27
    38cc:	f200 80af 	bhi.w	3a2e <_realloc_r+0x3b2>
    38d0:	3608      	adds	r6, #8
    38d2:	f10a 0210 	add.w	r2, sl, #16
    38d6:	6831      	ldr	r1, [r6, #0]
    38d8:	6011      	str	r1, [r2, #0]
    38da:	6871      	ldr	r1, [r6, #4]
    38dc:	6051      	str	r1, [r2, #4]
    38de:	68b1      	ldr	r1, [r6, #8]
    38e0:	6091      	str	r1, [r2, #8]
    38e2:	eb0a 0105 	add.w	r1, sl, r5
    38e6:	ebc5 020b 	rsb	r2, r5, fp
    38ea:	f042 0201 	orr.w	r2, r2, #1
    38ee:	6099      	str	r1, [r3, #8]
    38f0:	604a      	str	r2, [r1, #4]
    38f2:	f8da 3004 	ldr.w	r3, [sl, #4]
    38f6:	f003 0301 	and.w	r3, r3, #1
    38fa:	431d      	orrs	r5, r3
    38fc:	4648      	mov	r0, r9
    38fe:	f8ca 5004 	str.w	r5, [sl, #4]
    3902:	f7ff feb1 	bl	3668 <__malloc_unlock>
    3906:	4638      	mov	r0, r7
    3908:	e75c      	b.n	37c4 <_realloc_r+0x148>
    390a:	6833      	ldr	r3, [r6, #0]
    390c:	6003      	str	r3, [r0, #0]
    390e:	6873      	ldr	r3, [r6, #4]
    3910:	6043      	str	r3, [r0, #4]
    3912:	2a1b      	cmp	r2, #27
    3914:	d827      	bhi.n	3966 <_realloc_r+0x2ea>
    3916:	f100 0308 	add.w	r3, r0, #8
    391a:	f106 0208 	add.w	r2, r6, #8
    391e:	e6f2      	b.n	3706 <_realloc_r+0x8a>
    3920:	463b      	mov	r3, r7
    3922:	6832      	ldr	r2, [r6, #0]
    3924:	601a      	str	r2, [r3, #0]
    3926:	6872      	ldr	r2, [r6, #4]
    3928:	605a      	str	r2, [r3, #4]
    392a:	68b2      	ldr	r2, [r6, #8]
    392c:	609a      	str	r2, [r3, #8]
    392e:	463e      	mov	r6, r7
    3930:	4674      	mov	r4, lr
    3932:	46d0      	mov	r8, sl
    3934:	e733      	b.n	379e <_realloc_r+0x122>
    3936:	eb08 0105 	add.w	r1, r8, r5
    393a:	ebc5 0b0b 	rsb	fp, r5, fp
    393e:	f04b 0201 	orr.w	r2, fp, #1
    3942:	6099      	str	r1, [r3, #8]
    3944:	604a      	str	r2, [r1, #4]
    3946:	f856 3c04 	ldr.w	r3, [r6, #-4]
    394a:	f003 0301 	and.w	r3, r3, #1
    394e:	431d      	orrs	r5, r3
    3950:	4648      	mov	r0, r9
    3952:	f846 5c04 	str.w	r5, [r6, #-4]
    3956:	f7ff fe87 	bl	3668 <__malloc_unlock>
    395a:	4630      	mov	r0, r6
    395c:	e732      	b.n	37c4 <_realloc_r+0x148>
    395e:	4631      	mov	r1, r6
    3960:	f7ff fdce 	bl	3500 <memmove>
    3964:	e6d5      	b.n	3712 <_realloc_r+0x96>
    3966:	68b3      	ldr	r3, [r6, #8]
    3968:	6083      	str	r3, [r0, #8]
    396a:	68f3      	ldr	r3, [r6, #12]
    396c:	60c3      	str	r3, [r0, #12]
    396e:	2a24      	cmp	r2, #36	; 0x24
    3970:	d028      	beq.n	39c4 <_realloc_r+0x348>
    3972:	f100 0310 	add.w	r3, r0, #16
    3976:	f106 0210 	add.w	r2, r6, #16
    397a:	e6c4      	b.n	3706 <_realloc_r+0x8a>
    397c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3980:	f023 0303 	bic.w	r3, r3, #3
    3984:	441c      	add	r4, r3
    3986:	e70a      	b.n	379e <_realloc_r+0x122>
    3988:	4631      	mov	r1, r6
    398a:	4638      	mov	r0, r7
    398c:	4674      	mov	r4, lr
    398e:	46d0      	mov	r8, sl
    3990:	f7ff fdb6 	bl	3500 <memmove>
    3994:	463e      	mov	r6, r7
    3996:	e702      	b.n	379e <_realloc_r+0x122>
    3998:	463a      	mov	r2, r7
    399a:	e6f7      	b.n	378c <_realloc_r+0x110>
    399c:	4631      	mov	r1, r6
    399e:	4638      	mov	r0, r7
    39a0:	461c      	mov	r4, r3
    39a2:	46d0      	mov	r8, sl
    39a4:	f7ff fdac 	bl	3500 <memmove>
    39a8:	463e      	mov	r6, r7
    39aa:	e6f8      	b.n	379e <_realloc_r+0x122>
    39ac:	68b3      	ldr	r3, [r6, #8]
    39ae:	f8ca 3010 	str.w	r3, [sl, #16]
    39b2:	68f3      	ldr	r3, [r6, #12]
    39b4:	f8ca 3014 	str.w	r3, [sl, #20]
    39b8:	2a24      	cmp	r2, #36	; 0x24
    39ba:	d01b      	beq.n	39f4 <_realloc_r+0x378>
    39bc:	3610      	adds	r6, #16
    39be:	f10a 0318 	add.w	r3, sl, #24
    39c2:	e7ae      	b.n	3922 <_realloc_r+0x2a6>
    39c4:	6933      	ldr	r3, [r6, #16]
    39c6:	6103      	str	r3, [r0, #16]
    39c8:	6973      	ldr	r3, [r6, #20]
    39ca:	6143      	str	r3, [r0, #20]
    39cc:	f106 0218 	add.w	r2, r6, #24
    39d0:	f100 0318 	add.w	r3, r0, #24
    39d4:	e697      	b.n	3706 <_realloc_r+0x8a>
    39d6:	bf00      	nop
    39d8:	20001150 	.word	0x20001150
    39dc:	68b1      	ldr	r1, [r6, #8]
    39de:	f8ca 1010 	str.w	r1, [sl, #16]
    39e2:	68f1      	ldr	r1, [r6, #12]
    39e4:	f8ca 1014 	str.w	r1, [sl, #20]
    39e8:	2a24      	cmp	r2, #36	; 0x24
    39ea:	d00f      	beq.n	3a0c <_realloc_r+0x390>
    39ec:	3610      	adds	r6, #16
    39ee:	f10a 0218 	add.w	r2, sl, #24
    39f2:	e6cb      	b.n	378c <_realloc_r+0x110>
    39f4:	6933      	ldr	r3, [r6, #16]
    39f6:	f8ca 3018 	str.w	r3, [sl, #24]
    39fa:	6973      	ldr	r3, [r6, #20]
    39fc:	f8ca 301c 	str.w	r3, [sl, #28]
    3a00:	3618      	adds	r6, #24
    3a02:	f10a 0320 	add.w	r3, sl, #32
    3a06:	e78c      	b.n	3922 <_realloc_r+0x2a6>
    3a08:	463a      	mov	r2, r7
    3a0a:	e764      	b.n	38d6 <_realloc_r+0x25a>
    3a0c:	6932      	ldr	r2, [r6, #16]
    3a0e:	f8ca 2018 	str.w	r2, [sl, #24]
    3a12:	6972      	ldr	r2, [r6, #20]
    3a14:	f8ca 201c 	str.w	r2, [sl, #28]
    3a18:	3618      	adds	r6, #24
    3a1a:	f10a 0220 	add.w	r2, sl, #32
    3a1e:	e6b5      	b.n	378c <_realloc_r+0x110>
    3a20:	4631      	mov	r1, r6
    3a22:	4638      	mov	r0, r7
    3a24:	9301      	str	r3, [sp, #4]
    3a26:	f7ff fd6b 	bl	3500 <memmove>
    3a2a:	9b01      	ldr	r3, [sp, #4]
    3a2c:	e759      	b.n	38e2 <_realloc_r+0x266>
    3a2e:	68b1      	ldr	r1, [r6, #8]
    3a30:	f8ca 1010 	str.w	r1, [sl, #16]
    3a34:	68f1      	ldr	r1, [r6, #12]
    3a36:	f8ca 1014 	str.w	r1, [sl, #20]
    3a3a:	2a24      	cmp	r2, #36	; 0x24
    3a3c:	d003      	beq.n	3a46 <_realloc_r+0x3ca>
    3a3e:	3610      	adds	r6, #16
    3a40:	f10a 0218 	add.w	r2, sl, #24
    3a44:	e747      	b.n	38d6 <_realloc_r+0x25a>
    3a46:	6932      	ldr	r2, [r6, #16]
    3a48:	f8ca 2018 	str.w	r2, [sl, #24]
    3a4c:	6972      	ldr	r2, [r6, #20]
    3a4e:	f8ca 201c 	str.w	r2, [sl, #28]
    3a52:	3618      	adds	r6, #24
    3a54:	f10a 0220 	add.w	r2, sl, #32
    3a58:	e73d      	b.n	38d6 <_realloc_r+0x25a>
    3a5a:	bf00      	nop

00003a5c <_sbrk_r>:
    3a5c:	b538      	push	{r3, r4, r5, lr}
    3a5e:	4c07      	ldr	r4, [pc, #28]	; (3a7c <_sbrk_r+0x20>)
    3a60:	2300      	movs	r3, #0
    3a62:	4605      	mov	r5, r0
    3a64:	4608      	mov	r0, r1
    3a66:	6023      	str	r3, [r4, #0]
    3a68:	f7fd fddc 	bl	1624 <_sbrk>
    3a6c:	1c43      	adds	r3, r0, #1
    3a6e:	d000      	beq.n	3a72 <_sbrk_r+0x16>
    3a70:	bd38      	pop	{r3, r4, r5, pc}
    3a72:	6823      	ldr	r3, [r4, #0]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d0fb      	beq.n	3a70 <_sbrk_r+0x14>
    3a78:	602b      	str	r3, [r5, #0]
    3a7a:	bd38      	pop	{r3, r4, r5, pc}
    3a7c:	20001fd4 	.word	0x20001fd4

00003a80 <strcpy>:
    3a80:	ea80 0201 	eor.w	r2, r0, r1
    3a84:	4684      	mov	ip, r0
    3a86:	f012 0f03 	tst.w	r2, #3
    3a8a:	d14f      	bne.n	3b2c <strcpy+0xac>
    3a8c:	f011 0f03 	tst.w	r1, #3
    3a90:	d132      	bne.n	3af8 <strcpy+0x78>
    3a92:	f84d 4d04 	str.w	r4, [sp, #-4]!
    3a96:	f011 0f04 	tst.w	r1, #4
    3a9a:	f851 3b04 	ldr.w	r3, [r1], #4
    3a9e:	d00b      	beq.n	3ab8 <strcpy+0x38>
    3aa0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    3aa4:	439a      	bics	r2, r3
    3aa6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3aaa:	bf04      	itt	eq
    3aac:	f84c 3b04 	streq.w	r3, [ip], #4
    3ab0:	f851 3b04 	ldreq.w	r3, [r1], #4
    3ab4:	d116      	bne.n	3ae4 <strcpy+0x64>
    3ab6:	bf00      	nop
    3ab8:	f851 4b04 	ldr.w	r4, [r1], #4
    3abc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    3ac0:	439a      	bics	r2, r3
    3ac2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3ac6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    3aca:	d10b      	bne.n	3ae4 <strcpy+0x64>
    3acc:	f84c 3b04 	str.w	r3, [ip], #4
    3ad0:	43a2      	bics	r2, r4
    3ad2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3ad6:	bf04      	itt	eq
    3ad8:	f851 3b04 	ldreq.w	r3, [r1], #4
    3adc:	f84c 4b04 	streq.w	r4, [ip], #4
    3ae0:	d0ea      	beq.n	3ab8 <strcpy+0x38>
    3ae2:	4623      	mov	r3, r4
    3ae4:	f80c 3b01 	strb.w	r3, [ip], #1
    3ae8:	f013 0fff 	tst.w	r3, #255	; 0xff
    3aec:	ea4f 2333 	mov.w	r3, r3, ror #8
    3af0:	d1f8      	bne.n	3ae4 <strcpy+0x64>
    3af2:	f85d 4b04 	ldr.w	r4, [sp], #4
    3af6:	4770      	bx	lr
    3af8:	f011 0f01 	tst.w	r1, #1
    3afc:	d006      	beq.n	3b0c <strcpy+0x8c>
    3afe:	f811 2b01 	ldrb.w	r2, [r1], #1
    3b02:	f80c 2b01 	strb.w	r2, [ip], #1
    3b06:	2a00      	cmp	r2, #0
    3b08:	bf08      	it	eq
    3b0a:	4770      	bxeq	lr
    3b0c:	f011 0f02 	tst.w	r1, #2
    3b10:	d0bf      	beq.n	3a92 <strcpy+0x12>
    3b12:	f831 2b02 	ldrh.w	r2, [r1], #2
    3b16:	f012 0fff 	tst.w	r2, #255	; 0xff
    3b1a:	bf16      	itet	ne
    3b1c:	f82c 2b02 	strhne.w	r2, [ip], #2
    3b20:	f88c 2000 	strbeq.w	r2, [ip]
    3b24:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    3b28:	d1b3      	bne.n	3a92 <strcpy+0x12>
    3b2a:	4770      	bx	lr
    3b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
    3b30:	f80c 2b01 	strb.w	r2, [ip], #1
    3b34:	2a00      	cmp	r2, #0
    3b36:	d1f9      	bne.n	3b2c <strcpy+0xac>
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	0000      	movs	r0, r0
	...

00003b40 <strlen>:
    3b40:	f890 f000 	pld	[r0]
    3b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3b48:	f020 0107 	bic.w	r1, r0, #7
    3b4c:	f06f 0c00 	mvn.w	ip, #0
    3b50:	f010 0407 	ands.w	r4, r0, #7
    3b54:	f891 f020 	pld	[r1, #32]
    3b58:	f040 8049 	bne.w	3bee <strlen+0xae>
    3b5c:	f04f 0400 	mov.w	r4, #0
    3b60:	f06f 0007 	mvn.w	r0, #7
    3b64:	e9d1 2300 	ldrd	r2, r3, [r1]
    3b68:	f891 f040 	pld	[r1, #64]	; 0x40
    3b6c:	f100 0008 	add.w	r0, r0, #8
    3b70:	fa82 f24c 	uadd8	r2, r2, ip
    3b74:	faa4 f28c 	sel	r2, r4, ip
    3b78:	fa83 f34c 	uadd8	r3, r3, ip
    3b7c:	faa2 f38c 	sel	r3, r2, ip
    3b80:	bb4b      	cbnz	r3, 3bd6 <strlen+0x96>
    3b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    3b86:	fa82 f24c 	uadd8	r2, r2, ip
    3b8a:	f100 0008 	add.w	r0, r0, #8
    3b8e:	faa4 f28c 	sel	r2, r4, ip
    3b92:	fa83 f34c 	uadd8	r3, r3, ip
    3b96:	faa2 f38c 	sel	r3, r2, ip
    3b9a:	b9e3      	cbnz	r3, 3bd6 <strlen+0x96>
    3b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    3ba0:	fa82 f24c 	uadd8	r2, r2, ip
    3ba4:	f100 0008 	add.w	r0, r0, #8
    3ba8:	faa4 f28c 	sel	r2, r4, ip
    3bac:	fa83 f34c 	uadd8	r3, r3, ip
    3bb0:	faa2 f38c 	sel	r3, r2, ip
    3bb4:	b97b      	cbnz	r3, 3bd6 <strlen+0x96>
    3bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    3bba:	f101 0120 	add.w	r1, r1, #32
    3bbe:	fa82 f24c 	uadd8	r2, r2, ip
    3bc2:	f100 0008 	add.w	r0, r0, #8
    3bc6:	faa4 f28c 	sel	r2, r4, ip
    3bca:	fa83 f34c 	uadd8	r3, r3, ip
    3bce:	faa2 f38c 	sel	r3, r2, ip
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d0c6      	beq.n	3b64 <strlen+0x24>
    3bd6:	2a00      	cmp	r2, #0
    3bd8:	bf04      	itt	eq
    3bda:	3004      	addeq	r0, #4
    3bdc:	461a      	moveq	r2, r3
    3bde:	ba12      	rev	r2, r2
    3be0:	fab2 f282 	clz	r2, r2
    3be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    3bec:	4770      	bx	lr
    3bee:	e9d1 2300 	ldrd	r2, r3, [r1]
    3bf2:	f004 0503 	and.w	r5, r4, #3
    3bf6:	f1c4 0000 	rsb	r0, r4, #0
    3bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3bfe:	f014 0f04 	tst.w	r4, #4
    3c02:	f891 f040 	pld	[r1, #64]	; 0x40
    3c06:	fa0c f505 	lsl.w	r5, ip, r5
    3c0a:	ea62 0205 	orn	r2, r2, r5
    3c0e:	bf1c      	itt	ne
    3c10:	ea63 0305 	ornne	r3, r3, r5
    3c14:	4662      	movne	r2, ip
    3c16:	f04f 0400 	mov.w	r4, #0
    3c1a:	e7a9      	b.n	3b70 <strlen+0x30>

00003c1c <strncpy>:
    3c1c:	ea40 0301 	orr.w	r3, r0, r1
    3c20:	079b      	lsls	r3, r3, #30
    3c22:	b470      	push	{r4, r5, r6}
    3c24:	d12b      	bne.n	3c7e <strncpy+0x62>
    3c26:	2a03      	cmp	r2, #3
    3c28:	d929      	bls.n	3c7e <strncpy+0x62>
    3c2a:	460c      	mov	r4, r1
    3c2c:	4603      	mov	r3, r0
    3c2e:	4621      	mov	r1, r4
    3c30:	f854 6b04 	ldr.w	r6, [r4], #4
    3c34:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    3c38:	ea25 0506 	bic.w	r5, r5, r6
    3c3c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    3c40:	d106      	bne.n	3c50 <strncpy+0x34>
    3c42:	3a04      	subs	r2, #4
    3c44:	2a03      	cmp	r2, #3
    3c46:	f843 6b04 	str.w	r6, [r3], #4
    3c4a:	4621      	mov	r1, r4
    3c4c:	d8ef      	bhi.n	3c2e <strncpy+0x12>
    3c4e:	b1a2      	cbz	r2, 3c7a <strncpy+0x5e>
    3c50:	780c      	ldrb	r4, [r1, #0]
    3c52:	701c      	strb	r4, [r3, #0]
    3c54:	3a01      	subs	r2, #1
    3c56:	3301      	adds	r3, #1
    3c58:	3101      	adds	r1, #1
    3c5a:	b13c      	cbz	r4, 3c6c <strncpy+0x50>
    3c5c:	b16a      	cbz	r2, 3c7a <strncpy+0x5e>
    3c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c62:	f803 4b01 	strb.w	r4, [r3], #1
    3c66:	3a01      	subs	r2, #1
    3c68:	2c00      	cmp	r4, #0
    3c6a:	d1f7      	bne.n	3c5c <strncpy+0x40>
    3c6c:	b12a      	cbz	r2, 3c7a <strncpy+0x5e>
    3c6e:	441a      	add	r2, r3
    3c70:	2100      	movs	r1, #0
    3c72:	f803 1b01 	strb.w	r1, [r3], #1
    3c76:	429a      	cmp	r2, r3
    3c78:	d1fb      	bne.n	3c72 <strncpy+0x56>
    3c7a:	bc70      	pop	{r4, r5, r6}
    3c7c:	4770      	bx	lr
    3c7e:	4603      	mov	r3, r0
    3c80:	e7e5      	b.n	3c4e <strncpy+0x32>
    3c82:	bf00      	nop

00003c84 <__utoa>:
    3c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c86:	f8df e078 	ldr.w	lr, [pc, #120]	; 3d00 <__utoa+0x7c>
    3c8a:	4616      	mov	r6, r2
    3c8c:	4604      	mov	r4, r0
    3c8e:	460f      	mov	r7, r1
    3c90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3c94:	b08b      	sub	sp, #44	; 0x2c
    3c96:	466d      	mov	r5, sp
    3c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3ca0:	e89e 0003 	ldmia.w	lr, {r0, r1}
    3ca4:	1eb3      	subs	r3, r6, #2
    3ca6:	f845 0b04 	str.w	r0, [r5], #4
    3caa:	2b22      	cmp	r3, #34	; 0x22
    3cac:	7029      	strb	r1, [r5, #0]
    3cae:	d822      	bhi.n	3cf6 <__utoa+0x72>
    3cb0:	1e7d      	subs	r5, r7, #1
    3cb2:	4628      	mov	r0, r5
    3cb4:	2200      	movs	r2, #0
    3cb6:	e000      	b.n	3cba <__utoa+0x36>
    3cb8:	461a      	mov	r2, r3
    3cba:	fbb4 f1f6 	udiv	r1, r4, r6
    3cbe:	ab0a      	add	r3, sp, #40	; 0x28
    3cc0:	fb06 4411 	mls	r4, r6, r1, r4
    3cc4:	4423      	add	r3, r4
    3cc6:	460c      	mov	r4, r1
    3cc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    3ccc:	f800 3f01 	strb.w	r3, [r0, #1]!
    3cd0:	1c53      	adds	r3, r2, #1
    3cd2:	2900      	cmp	r1, #0
    3cd4:	d1f0      	bne.n	3cb8 <__utoa+0x34>
    3cd6:	54f9      	strb	r1, [r7, r3]
    3cd8:	18bb      	adds	r3, r7, r2
    3cda:	b14a      	cbz	r2, 3cf0 <__utoa+0x6c>
    3cdc:	7819      	ldrb	r1, [r3, #0]
    3cde:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    3ce2:	7029      	strb	r1, [r5, #0]
    3ce4:	3401      	adds	r4, #1
    3ce6:	1b11      	subs	r1, r2, r4
    3ce8:	428c      	cmp	r4, r1
    3cea:	f803 0901 	strb.w	r0, [r3], #-1
    3cee:	dbf5      	blt.n	3cdc <__utoa+0x58>
    3cf0:	4638      	mov	r0, r7
    3cf2:	b00b      	add	sp, #44	; 0x2c
    3cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cf6:	2000      	movs	r0, #0
    3cf8:	7038      	strb	r0, [r7, #0]
    3cfa:	b00b      	add	sp, #44	; 0x2c
    3cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfe:	bf00      	nop
    3d00:	20000a68 	.word	0x20000a68

00003d04 <_vdprintf_r>:
    3d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d06:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    3d0a:	ad04      	add	r5, sp, #16
    3d0c:	9300      	str	r3, [sp, #0]
    3d0e:	460f      	mov	r7, r1
    3d10:	4613      	mov	r3, r2
    3d12:	f44f 7400 	mov.w	r4, #512	; 0x200
    3d16:	aa03      	add	r2, sp, #12
    3d18:	4629      	mov	r1, r5
    3d1a:	9403      	str	r4, [sp, #12]
    3d1c:	4606      	mov	r6, r0
    3d1e:	f000 fdb1 	bl	4884 <_vasnprintf_r>
    3d22:	b188      	cbz	r0, 3d48 <_vdprintf_r+0x44>
    3d24:	4604      	mov	r4, r0
    3d26:	4602      	mov	r2, r0
    3d28:	4639      	mov	r1, r7
    3d2a:	9b03      	ldr	r3, [sp, #12]
    3d2c:	4630      	mov	r0, r6
    3d2e:	f000 f829 	bl	3d84 <_write_r>
    3d32:	42ac      	cmp	r4, r5
    3d34:	9003      	str	r0, [sp, #12]
    3d36:	d004      	beq.n	3d42 <_vdprintf_r+0x3e>
    3d38:	4630      	mov	r0, r6
    3d3a:	4621      	mov	r1, r4
    3d3c:	f000 f944 	bl	3fc8 <_free_r>
    3d40:	9803      	ldr	r0, [sp, #12]
    3d42:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    3d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d4c:	e7f9      	b.n	3d42 <_vdprintf_r+0x3e>
    3d4e:	bf00      	nop

00003d50 <vdprintf>:
    3d50:	b410      	push	{r4}
    3d52:	4c04      	ldr	r4, [pc, #16]	; (3d64 <vdprintf+0x14>)
    3d54:	4613      	mov	r3, r2
    3d56:	460a      	mov	r2, r1
    3d58:	4601      	mov	r1, r0
    3d5a:	6820      	ldr	r0, [r4, #0]
    3d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d60:	f7ff bfd0 	b.w	3d04 <_vdprintf_r>
    3d64:	20001560 	.word	0x20001560

00003d68 <__ascii_wctomb>:
    3d68:	b121      	cbz	r1, 3d74 <__ascii_wctomb+0xc>
    3d6a:	2aff      	cmp	r2, #255	; 0xff
    3d6c:	d804      	bhi.n	3d78 <__ascii_wctomb+0x10>
    3d6e:	700a      	strb	r2, [r1, #0]
    3d70:	2001      	movs	r0, #1
    3d72:	4770      	bx	lr
    3d74:	4608      	mov	r0, r1
    3d76:	4770      	bx	lr
    3d78:	238a      	movs	r3, #138	; 0x8a
    3d7a:	6003      	str	r3, [r0, #0]
    3d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d80:	4770      	bx	lr
    3d82:	bf00      	nop

00003d84 <_write_r>:
    3d84:	b570      	push	{r4, r5, r6, lr}
    3d86:	460d      	mov	r5, r1
    3d88:	4c08      	ldr	r4, [pc, #32]	; (3dac <_write_r+0x28>)
    3d8a:	4611      	mov	r1, r2
    3d8c:	4606      	mov	r6, r0
    3d8e:	461a      	mov	r2, r3
    3d90:	4628      	mov	r0, r5
    3d92:	2300      	movs	r3, #0
    3d94:	6023      	str	r3, [r4, #0]
    3d96:	f7fe fca3 	bl	26e0 <_write>
    3d9a:	1c43      	adds	r3, r0, #1
    3d9c:	d000      	beq.n	3da0 <_write_r+0x1c>
    3d9e:	bd70      	pop	{r4, r5, r6, pc}
    3da0:	6823      	ldr	r3, [r4, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d0fb      	beq.n	3d9e <_write_r+0x1a>
    3da6:	6033      	str	r3, [r6, #0]
    3da8:	bd70      	pop	{r4, r5, r6, pc}
    3daa:	bf00      	nop
    3dac:	20001fd4 	.word	0x20001fd4

00003db0 <__register_exitproc>:
    3db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3db4:	4c25      	ldr	r4, [pc, #148]	; (3e4c <__register_exitproc+0x9c>)
    3db6:	6825      	ldr	r5, [r4, #0]
    3db8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    3dbc:	4606      	mov	r6, r0
    3dbe:	4688      	mov	r8, r1
    3dc0:	4692      	mov	sl, r2
    3dc2:	4699      	mov	r9, r3
    3dc4:	b3c4      	cbz	r4, 3e38 <__register_exitproc+0x88>
    3dc6:	6860      	ldr	r0, [r4, #4]
    3dc8:	281f      	cmp	r0, #31
    3dca:	dc17      	bgt.n	3dfc <__register_exitproc+0x4c>
    3dcc:	1c43      	adds	r3, r0, #1
    3dce:	b176      	cbz	r6, 3dee <__register_exitproc+0x3e>
    3dd0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3dd4:	2201      	movs	r2, #1
    3dd6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    3dda:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    3dde:	4082      	lsls	r2, r0
    3de0:	4311      	orrs	r1, r2
    3de2:	2e02      	cmp	r6, #2
    3de4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    3de8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    3dec:	d01e      	beq.n	3e2c <__register_exitproc+0x7c>
    3dee:	3002      	adds	r0, #2
    3df0:	6063      	str	r3, [r4, #4]
    3df2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    3df6:	2000      	movs	r0, #0
    3df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dfc:	4b14      	ldr	r3, [pc, #80]	; (3e50 <__register_exitproc+0xa0>)
    3dfe:	b303      	cbz	r3, 3e42 <__register_exitproc+0x92>
    3e00:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3e04:	f7ff f804 	bl	2e10 <malloc>
    3e08:	4604      	mov	r4, r0
    3e0a:	b1d0      	cbz	r0, 3e42 <__register_exitproc+0x92>
    3e0c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    3e10:	2700      	movs	r7, #0
    3e12:	e880 0088 	stmia.w	r0, {r3, r7}
    3e16:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3e1a:	4638      	mov	r0, r7
    3e1c:	2301      	movs	r3, #1
    3e1e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    3e22:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    3e26:	2e00      	cmp	r6, #0
    3e28:	d0e1      	beq.n	3dee <__register_exitproc+0x3e>
    3e2a:	e7d1      	b.n	3dd0 <__register_exitproc+0x20>
    3e2c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    3e30:	430a      	orrs	r2, r1
    3e32:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    3e36:	e7da      	b.n	3dee <__register_exitproc+0x3e>
    3e38:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    3e3c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3e40:	e7c1      	b.n	3dc6 <__register_exitproc+0x16>
    3e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e4a:	bf00      	nop
    3e4c:	2000049c 	.word	0x2000049c
    3e50:	00002e11 	.word	0x00002e11

00003e54 <__call_exitprocs>:
    3e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e58:	4b32      	ldr	r3, [pc, #200]	; (3f24 <__call_exitprocs+0xd0>)
    3e5a:	b085      	sub	sp, #20
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	9302      	str	r3, [sp, #8]
    3e60:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e64:	9001      	str	r0, [sp, #4]
    3e66:	460e      	mov	r6, r1
    3e68:	9303      	str	r3, [sp, #12]
    3e6a:	9b02      	ldr	r3, [sp, #8]
    3e6c:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
    3e70:	b33f      	cbz	r7, 3ec2 <__call_exitprocs+0x6e>
    3e72:	f8dd a00c 	ldr.w	sl, [sp, #12]
    3e76:	f04f 0901 	mov.w	r9, #1
    3e7a:	46d3      	mov	fp, sl
    3e7c:	687c      	ldr	r4, [r7, #4]
    3e7e:	1e65      	subs	r5, r4, #1
    3e80:	d40e      	bmi.n	3ea0 <__call_exitprocs+0x4c>
    3e82:	3401      	adds	r4, #1
    3e84:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    3e88:	f04f 0800 	mov.w	r8, #0
    3e8c:	b1e6      	cbz	r6, 3ec8 <__call_exitprocs+0x74>
    3e8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    3e92:	429e      	cmp	r6, r3
    3e94:	d018      	beq.n	3ec8 <__call_exitprocs+0x74>
    3e96:	3d01      	subs	r5, #1
    3e98:	1c6b      	adds	r3, r5, #1
    3e9a:	f1a4 0404 	sub.w	r4, r4, #4
    3e9e:	d1f5      	bne.n	3e8c <__call_exitprocs+0x38>
    3ea0:	4b21      	ldr	r3, [pc, #132]	; (3f28 <__call_exitprocs+0xd4>)
    3ea2:	b173      	cbz	r3, 3ec2 <__call_exitprocs+0x6e>
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d136      	bne.n	3f18 <__call_exitprocs+0xc4>
    3eaa:	683b      	ldr	r3, [r7, #0]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d034      	beq.n	3f1a <__call_exitprocs+0xc6>
    3eb0:	4638      	mov	r0, r7
    3eb2:	f8cb 3000 	str.w	r3, [fp]
    3eb6:	f7fe ffb3 	bl	2e20 <free>
    3eba:	f8db 7000 	ldr.w	r7, [fp]
    3ebe:	2f00      	cmp	r7, #0
    3ec0:	d1dc      	bne.n	3e7c <__call_exitprocs+0x28>
    3ec2:	b005      	add	sp, #20
    3ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	6822      	ldr	r2, [r4, #0]
    3ecc:	3b01      	subs	r3, #1
    3ece:	42ab      	cmp	r3, r5
    3ed0:	bf0c      	ite	eq
    3ed2:	607d      	streq	r5, [r7, #4]
    3ed4:	f8c4 8000 	strne.w	r8, [r4]
    3ed8:	2a00      	cmp	r2, #0
    3eda:	d0dc      	beq.n	3e96 <__call_exitprocs+0x42>
    3edc:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
    3ee0:	f8d7 a004 	ldr.w	sl, [r7, #4]
    3ee4:	fa09 f305 	lsl.w	r3, r9, r5
    3ee8:	420b      	tst	r3, r1
    3eea:	d00f      	beq.n	3f0c <__call_exitprocs+0xb8>
    3eec:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
    3ef0:	420b      	tst	r3, r1
    3ef2:	d10d      	bne.n	3f10 <__call_exitprocs+0xbc>
    3ef4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    3ef8:	9801      	ldr	r0, [sp, #4]
    3efa:	4790      	blx	r2
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	4553      	cmp	r3, sl
    3f00:	d1b3      	bne.n	3e6a <__call_exitprocs+0x16>
    3f02:	f8db 3000 	ldr.w	r3, [fp]
    3f06:	42bb      	cmp	r3, r7
    3f08:	d0c5      	beq.n	3e96 <__call_exitprocs+0x42>
    3f0a:	e7ae      	b.n	3e6a <__call_exitprocs+0x16>
    3f0c:	4790      	blx	r2
    3f0e:	e7f5      	b.n	3efc <__call_exitprocs+0xa8>
    3f10:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    3f14:	4790      	blx	r2
    3f16:	e7f1      	b.n	3efc <__call_exitprocs+0xa8>
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	46bb      	mov	fp, r7
    3f1c:	461f      	mov	r7, r3
    3f1e:	2f00      	cmp	r7, #0
    3f20:	d1ac      	bne.n	3e7c <__call_exitprocs+0x28>
    3f22:	e7ce      	b.n	3ec2 <__call_exitprocs+0x6e>
    3f24:	2000049c 	.word	0x2000049c
    3f28:	00002e21 	.word	0x00002e21

00003f2c <_malloc_trim_r>:
    3f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f2e:	4f23      	ldr	r7, [pc, #140]	; (3fbc <_malloc_trim_r+0x90>)
    3f30:	460c      	mov	r4, r1
    3f32:	4606      	mov	r6, r0
    3f34:	f7ff fb96 	bl	3664 <__malloc_lock>
    3f38:	68bb      	ldr	r3, [r7, #8]
    3f3a:	685d      	ldr	r5, [r3, #4]
    3f3c:	f025 0503 	bic.w	r5, r5, #3
    3f40:	1b29      	subs	r1, r5, r4
    3f42:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3f46:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    3f4a:	f021 010f 	bic.w	r1, r1, #15
    3f4e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3f52:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3f56:	db07      	blt.n	3f68 <_malloc_trim_r+0x3c>
    3f58:	2100      	movs	r1, #0
    3f5a:	4630      	mov	r0, r6
    3f5c:	f7ff fd7e 	bl	3a5c <_sbrk_r>
    3f60:	68bb      	ldr	r3, [r7, #8]
    3f62:	442b      	add	r3, r5
    3f64:	4298      	cmp	r0, r3
    3f66:	d004      	beq.n	3f72 <_malloc_trim_r+0x46>
    3f68:	4630      	mov	r0, r6
    3f6a:	f7ff fb7d 	bl	3668 <__malloc_unlock>
    3f6e:	2000      	movs	r0, #0
    3f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f72:	4261      	negs	r1, r4
    3f74:	4630      	mov	r0, r6
    3f76:	f7ff fd71 	bl	3a5c <_sbrk_r>
    3f7a:	3001      	adds	r0, #1
    3f7c:	d00d      	beq.n	3f9a <_malloc_trim_r+0x6e>
    3f7e:	4b10      	ldr	r3, [pc, #64]	; (3fc0 <_malloc_trim_r+0x94>)
    3f80:	68ba      	ldr	r2, [r7, #8]
    3f82:	6819      	ldr	r1, [r3, #0]
    3f84:	1b2d      	subs	r5, r5, r4
    3f86:	f045 0501 	orr.w	r5, r5, #1
    3f8a:	4630      	mov	r0, r6
    3f8c:	1b09      	subs	r1, r1, r4
    3f8e:	6055      	str	r5, [r2, #4]
    3f90:	6019      	str	r1, [r3, #0]
    3f92:	f7ff fb69 	bl	3668 <__malloc_unlock>
    3f96:	2001      	movs	r0, #1
    3f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f9a:	2100      	movs	r1, #0
    3f9c:	4630      	mov	r0, r6
    3f9e:	f7ff fd5d 	bl	3a5c <_sbrk_r>
    3fa2:	68ba      	ldr	r2, [r7, #8]
    3fa4:	1a83      	subs	r3, r0, r2
    3fa6:	2b0f      	cmp	r3, #15
    3fa8:	ddde      	ble.n	3f68 <_malloc_trim_r+0x3c>
    3faa:	4c06      	ldr	r4, [pc, #24]	; (3fc4 <_malloc_trim_r+0x98>)
    3fac:	4904      	ldr	r1, [pc, #16]	; (3fc0 <_malloc_trim_r+0x94>)
    3fae:	6824      	ldr	r4, [r4, #0]
    3fb0:	f043 0301 	orr.w	r3, r3, #1
    3fb4:	1b00      	subs	r0, r0, r4
    3fb6:	6053      	str	r3, [r2, #4]
    3fb8:	6008      	str	r0, [r1, #0]
    3fba:	e7d5      	b.n	3f68 <_malloc_trim_r+0x3c>
    3fbc:	20001150 	.word	0x20001150
    3fc0:	20001eb4 	.word	0x20001eb4
    3fc4:	20001558 	.word	0x20001558

00003fc8 <_free_r>:
    3fc8:	2900      	cmp	r1, #0
    3fca:	d045      	beq.n	4058 <_free_r+0x90>
    3fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fd0:	460d      	mov	r5, r1
    3fd2:	4680      	mov	r8, r0
    3fd4:	f7ff fb46 	bl	3664 <__malloc_lock>
    3fd8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    3fdc:	496a      	ldr	r1, [pc, #424]	; (4188 <_free_r+0x1c0>)
    3fde:	f027 0301 	bic.w	r3, r7, #1
    3fe2:	f1a5 0408 	sub.w	r4, r5, #8
    3fe6:	18e2      	adds	r2, r4, r3
    3fe8:	688e      	ldr	r6, [r1, #8]
    3fea:	6850      	ldr	r0, [r2, #4]
    3fec:	42b2      	cmp	r2, r6
    3fee:	f020 0003 	bic.w	r0, r0, #3
    3ff2:	d062      	beq.n	40ba <_free_r+0xf2>
    3ff4:	07fe      	lsls	r6, r7, #31
    3ff6:	6050      	str	r0, [r2, #4]
    3ff8:	d40b      	bmi.n	4012 <_free_r+0x4a>
    3ffa:	f855 7c08 	ldr.w	r7, [r5, #-8]
    3ffe:	1be4      	subs	r4, r4, r7
    4000:	f101 0e08 	add.w	lr, r1, #8
    4004:	68a5      	ldr	r5, [r4, #8]
    4006:	4575      	cmp	r5, lr
    4008:	443b      	add	r3, r7
    400a:	d06f      	beq.n	40ec <_free_r+0x124>
    400c:	68e7      	ldr	r7, [r4, #12]
    400e:	60ef      	str	r7, [r5, #12]
    4010:	60bd      	str	r5, [r7, #8]
    4012:	1815      	adds	r5, r2, r0
    4014:	686d      	ldr	r5, [r5, #4]
    4016:	07ed      	lsls	r5, r5, #31
    4018:	d542      	bpl.n	40a0 <_free_r+0xd8>
    401a:	f043 0201 	orr.w	r2, r3, #1
    401e:	6062      	str	r2, [r4, #4]
    4020:	50e3      	str	r3, [r4, r3]
    4022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4026:	d218      	bcs.n	405a <_free_r+0x92>
    4028:	08db      	lsrs	r3, r3, #3
    402a:	1c5a      	adds	r2, r3, #1
    402c:	684d      	ldr	r5, [r1, #4]
    402e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    4032:	60a7      	str	r7, [r4, #8]
    4034:	2001      	movs	r0, #1
    4036:	109b      	asrs	r3, r3, #2
    4038:	fa00 f303 	lsl.w	r3, r0, r3
    403c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    4040:	431d      	orrs	r5, r3
    4042:	3808      	subs	r0, #8
    4044:	60e0      	str	r0, [r4, #12]
    4046:	604d      	str	r5, [r1, #4]
    4048:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    404c:	60fc      	str	r4, [r7, #12]
    404e:	4640      	mov	r0, r8
    4050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	f7ff bb08 	b.w	3668 <__malloc_unlock>
    4058:	4770      	bx	lr
    405a:	0a5a      	lsrs	r2, r3, #9
    405c:	2a04      	cmp	r2, #4
    405e:	d853      	bhi.n	4108 <_free_r+0x140>
    4060:	099a      	lsrs	r2, r3, #6
    4062:	f102 0739 	add.w	r7, r2, #57	; 0x39
    4066:	007f      	lsls	r7, r7, #1
    4068:	f102 0538 	add.w	r5, r2, #56	; 0x38
    406c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    4070:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    4074:	4944      	ldr	r1, [pc, #272]	; (4188 <_free_r+0x1c0>)
    4076:	3808      	subs	r0, #8
    4078:	4290      	cmp	r0, r2
    407a:	d04d      	beq.n	4118 <_free_r+0x150>
    407c:	6851      	ldr	r1, [r2, #4]
    407e:	f021 0103 	bic.w	r1, r1, #3
    4082:	428b      	cmp	r3, r1
    4084:	d202      	bcs.n	408c <_free_r+0xc4>
    4086:	6892      	ldr	r2, [r2, #8]
    4088:	4290      	cmp	r0, r2
    408a:	d1f7      	bne.n	407c <_free_r+0xb4>
    408c:	68d0      	ldr	r0, [r2, #12]
    408e:	60e0      	str	r0, [r4, #12]
    4090:	60a2      	str	r2, [r4, #8]
    4092:	6084      	str	r4, [r0, #8]
    4094:	60d4      	str	r4, [r2, #12]
    4096:	4640      	mov	r0, r8
    4098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    409c:	f7ff bae4 	b.w	3668 <__malloc_unlock>
    40a0:	6895      	ldr	r5, [r2, #8]
    40a2:	4f3a      	ldr	r7, [pc, #232]	; (418c <_free_r+0x1c4>)
    40a4:	42bd      	cmp	r5, r7
    40a6:	4403      	add	r3, r0
    40a8:	d03f      	beq.n	412a <_free_r+0x162>
    40aa:	68d0      	ldr	r0, [r2, #12]
    40ac:	60e8      	str	r0, [r5, #12]
    40ae:	f043 0201 	orr.w	r2, r3, #1
    40b2:	6085      	str	r5, [r0, #8]
    40b4:	6062      	str	r2, [r4, #4]
    40b6:	50e3      	str	r3, [r4, r3]
    40b8:	e7b3      	b.n	4022 <_free_r+0x5a>
    40ba:	07ff      	lsls	r7, r7, #31
    40bc:	4403      	add	r3, r0
    40be:	d407      	bmi.n	40d0 <_free_r+0x108>
    40c0:	f855 2c08 	ldr.w	r2, [r5, #-8]
    40c4:	1aa4      	subs	r4, r4, r2
    40c6:	4413      	add	r3, r2
    40c8:	68a0      	ldr	r0, [r4, #8]
    40ca:	68e2      	ldr	r2, [r4, #12]
    40cc:	60c2      	str	r2, [r0, #12]
    40ce:	6090      	str	r0, [r2, #8]
    40d0:	4a2f      	ldr	r2, [pc, #188]	; (4190 <_free_r+0x1c8>)
    40d2:	6812      	ldr	r2, [r2, #0]
    40d4:	f043 0001 	orr.w	r0, r3, #1
    40d8:	4293      	cmp	r3, r2
    40da:	6060      	str	r0, [r4, #4]
    40dc:	608c      	str	r4, [r1, #8]
    40de:	d3b6      	bcc.n	404e <_free_r+0x86>
    40e0:	4b2c      	ldr	r3, [pc, #176]	; (4194 <_free_r+0x1cc>)
    40e2:	4640      	mov	r0, r8
    40e4:	6819      	ldr	r1, [r3, #0]
    40e6:	f7ff ff21 	bl	3f2c <_malloc_trim_r>
    40ea:	e7b0      	b.n	404e <_free_r+0x86>
    40ec:	1811      	adds	r1, r2, r0
    40ee:	6849      	ldr	r1, [r1, #4]
    40f0:	07c9      	lsls	r1, r1, #31
    40f2:	d444      	bmi.n	417e <_free_r+0x1b6>
    40f4:	6891      	ldr	r1, [r2, #8]
    40f6:	68d2      	ldr	r2, [r2, #12]
    40f8:	60ca      	str	r2, [r1, #12]
    40fa:	4403      	add	r3, r0
    40fc:	f043 0001 	orr.w	r0, r3, #1
    4100:	6091      	str	r1, [r2, #8]
    4102:	6060      	str	r0, [r4, #4]
    4104:	50e3      	str	r3, [r4, r3]
    4106:	e7a2      	b.n	404e <_free_r+0x86>
    4108:	2a14      	cmp	r2, #20
    410a:	d817      	bhi.n	413c <_free_r+0x174>
    410c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    4110:	007f      	lsls	r7, r7, #1
    4112:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    4116:	e7a9      	b.n	406c <_free_r+0xa4>
    4118:	10aa      	asrs	r2, r5, #2
    411a:	684b      	ldr	r3, [r1, #4]
    411c:	2501      	movs	r5, #1
    411e:	fa05 f202 	lsl.w	r2, r5, r2
    4122:	4313      	orrs	r3, r2
    4124:	604b      	str	r3, [r1, #4]
    4126:	4602      	mov	r2, r0
    4128:	e7b1      	b.n	408e <_free_r+0xc6>
    412a:	f043 0201 	orr.w	r2, r3, #1
    412e:	614c      	str	r4, [r1, #20]
    4130:	610c      	str	r4, [r1, #16]
    4132:	60e5      	str	r5, [r4, #12]
    4134:	60a5      	str	r5, [r4, #8]
    4136:	6062      	str	r2, [r4, #4]
    4138:	50e3      	str	r3, [r4, r3]
    413a:	e788      	b.n	404e <_free_r+0x86>
    413c:	2a54      	cmp	r2, #84	; 0x54
    413e:	d806      	bhi.n	414e <_free_r+0x186>
    4140:	0b1a      	lsrs	r2, r3, #12
    4142:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    4146:	007f      	lsls	r7, r7, #1
    4148:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    414c:	e78e      	b.n	406c <_free_r+0xa4>
    414e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4152:	d806      	bhi.n	4162 <_free_r+0x19a>
    4154:	0bda      	lsrs	r2, r3, #15
    4156:	f102 0778 	add.w	r7, r2, #120	; 0x78
    415a:	007f      	lsls	r7, r7, #1
    415c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    4160:	e784      	b.n	406c <_free_r+0xa4>
    4162:	f240 5054 	movw	r0, #1364	; 0x554
    4166:	4282      	cmp	r2, r0
    4168:	d806      	bhi.n	4178 <_free_r+0x1b0>
    416a:	0c9a      	lsrs	r2, r3, #18
    416c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    4170:	007f      	lsls	r7, r7, #1
    4172:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    4176:	e779      	b.n	406c <_free_r+0xa4>
    4178:	27fe      	movs	r7, #254	; 0xfe
    417a:	257e      	movs	r5, #126	; 0x7e
    417c:	e776      	b.n	406c <_free_r+0xa4>
    417e:	f043 0201 	orr.w	r2, r3, #1
    4182:	6062      	str	r2, [r4, #4]
    4184:	50e3      	str	r3, [r4, r3]
    4186:	e762      	b.n	404e <_free_r+0x86>
    4188:	20001150 	.word	0x20001150
    418c:	20001158 	.word	0x20001158
    4190:	2000155c 	.word	0x2000155c
    4194:	20001ee4 	.word	0x20001ee4

00004198 <_localeconv_r>:
    4198:	4a04      	ldr	r2, [pc, #16]	; (41ac <_localeconv_r+0x14>)
    419a:	4b05      	ldr	r3, [pc, #20]	; (41b0 <_localeconv_r+0x18>)
    419c:	6812      	ldr	r2, [r2, #0]
    419e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    41a0:	2800      	cmp	r0, #0
    41a2:	bf08      	it	eq
    41a4:	4618      	moveq	r0, r3
    41a6:	30f0      	adds	r0, #240	; 0xf0
    41a8:	4770      	bx	lr
    41aa:	bf00      	nop
    41ac:	20001560 	.word	0x20001560
    41b0:	20000fe4 	.word	0x20000fe4
	...

000041c0 <memchr>:
    41c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    41c4:	2a10      	cmp	r2, #16
    41c6:	db2b      	blt.n	4220 <memchr+0x60>
    41c8:	f010 0f07 	tst.w	r0, #7
    41cc:	d008      	beq.n	41e0 <memchr+0x20>
    41ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    41d2:	3a01      	subs	r2, #1
    41d4:	428b      	cmp	r3, r1
    41d6:	d02d      	beq.n	4234 <memchr+0x74>
    41d8:	f010 0f07 	tst.w	r0, #7
    41dc:	b342      	cbz	r2, 4230 <memchr+0x70>
    41de:	d1f6      	bne.n	41ce <memchr+0xe>
    41e0:	b4f0      	push	{r4, r5, r6, r7}
    41e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    41e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    41ea:	f022 0407 	bic.w	r4, r2, #7
    41ee:	f07f 0700 	mvns.w	r7, #0
    41f2:	2300      	movs	r3, #0
    41f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    41f8:	3c08      	subs	r4, #8
    41fa:	ea85 0501 	eor.w	r5, r5, r1
    41fe:	ea86 0601 	eor.w	r6, r6, r1
    4202:	fa85 f547 	uadd8	r5, r5, r7
    4206:	faa3 f587 	sel	r5, r3, r7
    420a:	fa86 f647 	uadd8	r6, r6, r7
    420e:	faa5 f687 	sel	r6, r5, r7
    4212:	b98e      	cbnz	r6, 4238 <memchr+0x78>
    4214:	d1ee      	bne.n	41f4 <memchr+0x34>
    4216:	bcf0      	pop	{r4, r5, r6, r7}
    4218:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    421c:	f002 0207 	and.w	r2, r2, #7
    4220:	b132      	cbz	r2, 4230 <memchr+0x70>
    4222:	f810 3b01 	ldrb.w	r3, [r0], #1
    4226:	3a01      	subs	r2, #1
    4228:	ea83 0301 	eor.w	r3, r3, r1
    422c:	b113      	cbz	r3, 4234 <memchr+0x74>
    422e:	d1f8      	bne.n	4222 <memchr+0x62>
    4230:	2000      	movs	r0, #0
    4232:	4770      	bx	lr
    4234:	3801      	subs	r0, #1
    4236:	4770      	bx	lr
    4238:	2d00      	cmp	r5, #0
    423a:	bf06      	itte	eq
    423c:	4635      	moveq	r5, r6
    423e:	3803      	subeq	r0, #3
    4240:	3807      	subne	r0, #7
    4242:	f015 0f01 	tst.w	r5, #1
    4246:	d107      	bne.n	4258 <memchr+0x98>
    4248:	3001      	adds	r0, #1
    424a:	f415 7f80 	tst.w	r5, #256	; 0x100
    424e:	bf02      	ittt	eq
    4250:	3001      	addeq	r0, #1
    4252:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    4256:	3001      	addeq	r0, #1
    4258:	bcf0      	pop	{r4, r5, r6, r7}
    425a:	3801      	subs	r0, #1
    425c:	4770      	bx	lr
    425e:	bf00      	nop

00004260 <_Balloc>:
    4260:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    4262:	b570      	push	{r4, r5, r6, lr}
    4264:	4605      	mov	r5, r0
    4266:	460c      	mov	r4, r1
    4268:	b14b      	cbz	r3, 427e <_Balloc+0x1e>
    426a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    426e:	b180      	cbz	r0, 4292 <_Balloc+0x32>
    4270:	6802      	ldr	r2, [r0, #0]
    4272:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4276:	2300      	movs	r3, #0
    4278:	6103      	str	r3, [r0, #16]
    427a:	60c3      	str	r3, [r0, #12]
    427c:	bd70      	pop	{r4, r5, r6, pc}
    427e:	2221      	movs	r2, #33	; 0x21
    4280:	2104      	movs	r1, #4
    4282:	f000 fb2f 	bl	48e4 <_calloc_r>
    4286:	64e8      	str	r0, [r5, #76]	; 0x4c
    4288:	4603      	mov	r3, r0
    428a:	2800      	cmp	r0, #0
    428c:	d1ed      	bne.n	426a <_Balloc+0xa>
    428e:	2000      	movs	r0, #0
    4290:	bd70      	pop	{r4, r5, r6, pc}
    4292:	2101      	movs	r1, #1
    4294:	fa01 f604 	lsl.w	r6, r1, r4
    4298:	1d72      	adds	r2, r6, #5
    429a:	4628      	mov	r0, r5
    429c:	0092      	lsls	r2, r2, #2
    429e:	f000 fb21 	bl	48e4 <_calloc_r>
    42a2:	2800      	cmp	r0, #0
    42a4:	d0f3      	beq.n	428e <_Balloc+0x2e>
    42a6:	6044      	str	r4, [r0, #4]
    42a8:	6086      	str	r6, [r0, #8]
    42aa:	e7e4      	b.n	4276 <_Balloc+0x16>

000042ac <_Bfree>:
    42ac:	b131      	cbz	r1, 42bc <_Bfree+0x10>
    42ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    42b0:	684a      	ldr	r2, [r1, #4]
    42b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    42b6:	6008      	str	r0, [r1, #0]
    42b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    42bc:	4770      	bx	lr
    42be:	bf00      	nop

000042c0 <__multadd>:
    42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c2:	690c      	ldr	r4, [r1, #16]
    42c4:	b083      	sub	sp, #12
    42c6:	460d      	mov	r5, r1
    42c8:	4606      	mov	r6, r0
    42ca:	f101 0e14 	add.w	lr, r1, #20
    42ce:	2700      	movs	r7, #0
    42d0:	f8de 0000 	ldr.w	r0, [lr]
    42d4:	b281      	uxth	r1, r0
    42d6:	fb02 3101 	mla	r1, r2, r1, r3
    42da:	0c0b      	lsrs	r3, r1, #16
    42dc:	0c00      	lsrs	r0, r0, #16
    42de:	fb02 3300 	mla	r3, r2, r0, r3
    42e2:	b289      	uxth	r1, r1
    42e4:	3701      	adds	r7, #1
    42e6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    42ea:	42bc      	cmp	r4, r7
    42ec:	f84e 1b04 	str.w	r1, [lr], #4
    42f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    42f4:	dcec      	bgt.n	42d0 <__multadd+0x10>
    42f6:	b13b      	cbz	r3, 4308 <__multadd+0x48>
    42f8:	68aa      	ldr	r2, [r5, #8]
    42fa:	4294      	cmp	r4, r2
    42fc:	da07      	bge.n	430e <__multadd+0x4e>
    42fe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4302:	3401      	adds	r4, #1
    4304:	6153      	str	r3, [r2, #20]
    4306:	612c      	str	r4, [r5, #16]
    4308:	4628      	mov	r0, r5
    430a:	b003      	add	sp, #12
    430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    430e:	6869      	ldr	r1, [r5, #4]
    4310:	9301      	str	r3, [sp, #4]
    4312:	3101      	adds	r1, #1
    4314:	4630      	mov	r0, r6
    4316:	f7ff ffa3 	bl	4260 <_Balloc>
    431a:	692a      	ldr	r2, [r5, #16]
    431c:	3202      	adds	r2, #2
    431e:	f105 010c 	add.w	r1, r5, #12
    4322:	4607      	mov	r7, r0
    4324:	0092      	lsls	r2, r2, #2
    4326:	300c      	adds	r0, #12
    4328:	f7ff f850 	bl	33cc <memcpy>
    432c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    432e:	6869      	ldr	r1, [r5, #4]
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    4336:	6028      	str	r0, [r5, #0]
    4338:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    433c:	463d      	mov	r5, r7
    433e:	e7de      	b.n	42fe <__multadd+0x3e>

00004340 <__hi0bits>:
    4340:	0c03      	lsrs	r3, r0, #16
    4342:	041b      	lsls	r3, r3, #16
    4344:	b9b3      	cbnz	r3, 4374 <__hi0bits+0x34>
    4346:	0400      	lsls	r0, r0, #16
    4348:	2310      	movs	r3, #16
    434a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    434e:	bf04      	itt	eq
    4350:	0200      	lsleq	r0, r0, #8
    4352:	3308      	addeq	r3, #8
    4354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    4358:	bf04      	itt	eq
    435a:	0100      	lsleq	r0, r0, #4
    435c:	3304      	addeq	r3, #4
    435e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    4362:	bf04      	itt	eq
    4364:	0080      	lsleq	r0, r0, #2
    4366:	3302      	addeq	r3, #2
    4368:	2800      	cmp	r0, #0
    436a:	db07      	blt.n	437c <__hi0bits+0x3c>
    436c:	0042      	lsls	r2, r0, #1
    436e:	d403      	bmi.n	4378 <__hi0bits+0x38>
    4370:	2020      	movs	r0, #32
    4372:	4770      	bx	lr
    4374:	2300      	movs	r3, #0
    4376:	e7e8      	b.n	434a <__hi0bits+0xa>
    4378:	1c58      	adds	r0, r3, #1
    437a:	4770      	bx	lr
    437c:	4618      	mov	r0, r3
    437e:	4770      	bx	lr

00004380 <__lo0bits>:
    4380:	6803      	ldr	r3, [r0, #0]
    4382:	f013 0207 	ands.w	r2, r3, #7
    4386:	d007      	beq.n	4398 <__lo0bits+0x18>
    4388:	07d9      	lsls	r1, r3, #31
    438a:	d420      	bmi.n	43ce <__lo0bits+0x4e>
    438c:	079a      	lsls	r2, r3, #30
    438e:	d420      	bmi.n	43d2 <__lo0bits+0x52>
    4390:	089b      	lsrs	r3, r3, #2
    4392:	6003      	str	r3, [r0, #0]
    4394:	2002      	movs	r0, #2
    4396:	4770      	bx	lr
    4398:	b299      	uxth	r1, r3
    439a:	b909      	cbnz	r1, 43a0 <__lo0bits+0x20>
    439c:	0c1b      	lsrs	r3, r3, #16
    439e:	2210      	movs	r2, #16
    43a0:	f013 0fff 	tst.w	r3, #255	; 0xff
    43a4:	bf04      	itt	eq
    43a6:	0a1b      	lsreq	r3, r3, #8
    43a8:	3208      	addeq	r2, #8
    43aa:	0719      	lsls	r1, r3, #28
    43ac:	bf04      	itt	eq
    43ae:	091b      	lsreq	r3, r3, #4
    43b0:	3204      	addeq	r2, #4
    43b2:	0799      	lsls	r1, r3, #30
    43b4:	bf04      	itt	eq
    43b6:	089b      	lsreq	r3, r3, #2
    43b8:	3202      	addeq	r2, #2
    43ba:	07d9      	lsls	r1, r3, #31
    43bc:	d404      	bmi.n	43c8 <__lo0bits+0x48>
    43be:	085b      	lsrs	r3, r3, #1
    43c0:	d101      	bne.n	43c6 <__lo0bits+0x46>
    43c2:	2020      	movs	r0, #32
    43c4:	4770      	bx	lr
    43c6:	3201      	adds	r2, #1
    43c8:	6003      	str	r3, [r0, #0]
    43ca:	4610      	mov	r0, r2
    43cc:	4770      	bx	lr
    43ce:	2000      	movs	r0, #0
    43d0:	4770      	bx	lr
    43d2:	085b      	lsrs	r3, r3, #1
    43d4:	6003      	str	r3, [r0, #0]
    43d6:	2001      	movs	r0, #1
    43d8:	4770      	bx	lr
    43da:	bf00      	nop

000043dc <__i2b>:
    43dc:	b510      	push	{r4, lr}
    43de:	460c      	mov	r4, r1
    43e0:	2101      	movs	r1, #1
    43e2:	f7ff ff3d 	bl	4260 <_Balloc>
    43e6:	2201      	movs	r2, #1
    43e8:	6144      	str	r4, [r0, #20]
    43ea:	6102      	str	r2, [r0, #16]
    43ec:	bd10      	pop	{r4, pc}
    43ee:	bf00      	nop

000043f0 <__multiply>:
    43f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f4:	690d      	ldr	r5, [r1, #16]
    43f6:	6917      	ldr	r7, [r2, #16]
    43f8:	42bd      	cmp	r5, r7
    43fa:	b083      	sub	sp, #12
    43fc:	460c      	mov	r4, r1
    43fe:	4616      	mov	r6, r2
    4400:	da04      	bge.n	440c <__multiply+0x1c>
    4402:	462a      	mov	r2, r5
    4404:	4634      	mov	r4, r6
    4406:	463d      	mov	r5, r7
    4408:	460e      	mov	r6, r1
    440a:	4617      	mov	r7, r2
    440c:	68a3      	ldr	r3, [r4, #8]
    440e:	6861      	ldr	r1, [r4, #4]
    4410:	eb05 0807 	add.w	r8, r5, r7
    4414:	4598      	cmp	r8, r3
    4416:	bfc8      	it	gt
    4418:	3101      	addgt	r1, #1
    441a:	f7ff ff21 	bl	4260 <_Balloc>
    441e:	f100 0c14 	add.w	ip, r0, #20
    4422:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    4426:	45cc      	cmp	ip, r9
    4428:	9000      	str	r0, [sp, #0]
    442a:	d205      	bcs.n	4438 <__multiply+0x48>
    442c:	4663      	mov	r3, ip
    442e:	2100      	movs	r1, #0
    4430:	f843 1b04 	str.w	r1, [r3], #4
    4434:	4599      	cmp	r9, r3
    4436:	d8fb      	bhi.n	4430 <__multiply+0x40>
    4438:	f106 0214 	add.w	r2, r6, #20
    443c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    4440:	f104 0314 	add.w	r3, r4, #20
    4444:	4552      	cmp	r2, sl
    4446:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    444a:	d254      	bcs.n	44f6 <__multiply+0x106>
    444c:	f8cd 9004 	str.w	r9, [sp, #4]
    4450:	4699      	mov	r9, r3
    4452:	f852 3b04 	ldr.w	r3, [r2], #4
    4456:	fa1f fb83 	uxth.w	fp, r3
    445a:	f1bb 0f00 	cmp.w	fp, #0
    445e:	d020      	beq.n	44a2 <__multiply+0xb2>
    4460:	2000      	movs	r0, #0
    4462:	464f      	mov	r7, r9
    4464:	4666      	mov	r6, ip
    4466:	4605      	mov	r5, r0
    4468:	e000      	b.n	446c <__multiply+0x7c>
    446a:	461e      	mov	r6, r3
    446c:	f857 4b04 	ldr.w	r4, [r7], #4
    4470:	6830      	ldr	r0, [r6, #0]
    4472:	b2a1      	uxth	r1, r4
    4474:	b283      	uxth	r3, r0
    4476:	fb0b 3101 	mla	r1, fp, r1, r3
    447a:	0c24      	lsrs	r4, r4, #16
    447c:	0c00      	lsrs	r0, r0, #16
    447e:	194b      	adds	r3, r1, r5
    4480:	fb0b 0004 	mla	r0, fp, r4, r0
    4484:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    4488:	b299      	uxth	r1, r3
    448a:	4633      	mov	r3, r6
    448c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    4490:	45be      	cmp	lr, r7
    4492:	ea4f 4510 	mov.w	r5, r0, lsr #16
    4496:	f843 1b04 	str.w	r1, [r3], #4
    449a:	d8e6      	bhi.n	446a <__multiply+0x7a>
    449c:	6075      	str	r5, [r6, #4]
    449e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    44a2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    44a6:	d020      	beq.n	44ea <__multiply+0xfa>
    44a8:	f8dc 3000 	ldr.w	r3, [ip]
    44ac:	4667      	mov	r7, ip
    44ae:	4618      	mov	r0, r3
    44b0:	464d      	mov	r5, r9
    44b2:	2100      	movs	r1, #0
    44b4:	e000      	b.n	44b8 <__multiply+0xc8>
    44b6:	4637      	mov	r7, r6
    44b8:	882c      	ldrh	r4, [r5, #0]
    44ba:	0c00      	lsrs	r0, r0, #16
    44bc:	fb0b 0004 	mla	r0, fp, r4, r0
    44c0:	4401      	add	r1, r0
    44c2:	b29c      	uxth	r4, r3
    44c4:	463e      	mov	r6, r7
    44c6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    44ca:	f846 3b04 	str.w	r3, [r6], #4
    44ce:	6878      	ldr	r0, [r7, #4]
    44d0:	f855 4b04 	ldr.w	r4, [r5], #4
    44d4:	b283      	uxth	r3, r0
    44d6:	0c24      	lsrs	r4, r4, #16
    44d8:	fb0b 3404 	mla	r4, fp, r4, r3
    44dc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    44e0:	45ae      	cmp	lr, r5
    44e2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    44e6:	d8e6      	bhi.n	44b6 <__multiply+0xc6>
    44e8:	607b      	str	r3, [r7, #4]
    44ea:	4592      	cmp	sl, r2
    44ec:	f10c 0c04 	add.w	ip, ip, #4
    44f0:	d8af      	bhi.n	4452 <__multiply+0x62>
    44f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    44f6:	f1b8 0f00 	cmp.w	r8, #0
    44fa:	dd0b      	ble.n	4514 <__multiply+0x124>
    44fc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    4500:	f1a9 0904 	sub.w	r9, r9, #4
    4504:	b11b      	cbz	r3, 450e <__multiply+0x11e>
    4506:	e005      	b.n	4514 <__multiply+0x124>
    4508:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    450c:	b913      	cbnz	r3, 4514 <__multiply+0x124>
    450e:	f1b8 0801 	subs.w	r8, r8, #1
    4512:	d1f9      	bne.n	4508 <__multiply+0x118>
    4514:	9800      	ldr	r0, [sp, #0]
    4516:	f8c0 8010 	str.w	r8, [r0, #16]
    451a:	b003      	add	sp, #12
    451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004520 <__pow5mult>:
    4520:	f012 0303 	ands.w	r3, r2, #3
    4524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4528:	4614      	mov	r4, r2
    452a:	4607      	mov	r7, r0
    452c:	d12e      	bne.n	458c <__pow5mult+0x6c>
    452e:	460e      	mov	r6, r1
    4530:	10a4      	asrs	r4, r4, #2
    4532:	d01c      	beq.n	456e <__pow5mult+0x4e>
    4534:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    4536:	b395      	cbz	r5, 459e <__pow5mult+0x7e>
    4538:	07e3      	lsls	r3, r4, #31
    453a:	f04f 0800 	mov.w	r8, #0
    453e:	d406      	bmi.n	454e <__pow5mult+0x2e>
    4540:	1064      	asrs	r4, r4, #1
    4542:	d014      	beq.n	456e <__pow5mult+0x4e>
    4544:	6828      	ldr	r0, [r5, #0]
    4546:	b1a8      	cbz	r0, 4574 <__pow5mult+0x54>
    4548:	4605      	mov	r5, r0
    454a:	07e3      	lsls	r3, r4, #31
    454c:	d5f8      	bpl.n	4540 <__pow5mult+0x20>
    454e:	462a      	mov	r2, r5
    4550:	4631      	mov	r1, r6
    4552:	4638      	mov	r0, r7
    4554:	f7ff ff4c 	bl	43f0 <__multiply>
    4558:	b1b6      	cbz	r6, 4588 <__pow5mult+0x68>
    455a:	6872      	ldr	r2, [r6, #4]
    455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    455e:	1064      	asrs	r4, r4, #1
    4560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4564:	6031      	str	r1, [r6, #0]
    4566:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    456a:	4606      	mov	r6, r0
    456c:	d1ea      	bne.n	4544 <__pow5mult+0x24>
    456e:	4630      	mov	r0, r6
    4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4574:	462a      	mov	r2, r5
    4576:	4629      	mov	r1, r5
    4578:	4638      	mov	r0, r7
    457a:	f7ff ff39 	bl	43f0 <__multiply>
    457e:	6028      	str	r0, [r5, #0]
    4580:	f8c0 8000 	str.w	r8, [r0]
    4584:	4605      	mov	r5, r0
    4586:	e7e0      	b.n	454a <__pow5mult+0x2a>
    4588:	4606      	mov	r6, r0
    458a:	e7d9      	b.n	4540 <__pow5mult+0x20>
    458c:	1e5a      	subs	r2, r3, #1
    458e:	4d0b      	ldr	r5, [pc, #44]	; (45bc <__pow5mult+0x9c>)
    4590:	2300      	movs	r3, #0
    4592:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4596:	f7ff fe93 	bl	42c0 <__multadd>
    459a:	4606      	mov	r6, r0
    459c:	e7c8      	b.n	4530 <__pow5mult+0x10>
    459e:	2101      	movs	r1, #1
    45a0:	4638      	mov	r0, r7
    45a2:	f7ff fe5d 	bl	4260 <_Balloc>
    45a6:	f240 2171 	movw	r1, #625	; 0x271
    45aa:	2201      	movs	r2, #1
    45ac:	2300      	movs	r3, #0
    45ae:	6141      	str	r1, [r0, #20]
    45b0:	6102      	str	r2, [r0, #16]
    45b2:	4605      	mov	r5, r0
    45b4:	64b8      	str	r0, [r7, #72]	; 0x48
    45b6:	6003      	str	r3, [r0, #0]
    45b8:	e7be      	b.n	4538 <__pow5mult+0x18>
    45ba:	bf00      	nop
    45bc:	20000820 	.word	0x20000820

000045c0 <__lshift>:
    45c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45c4:	4691      	mov	r9, r2
    45c6:	690a      	ldr	r2, [r1, #16]
    45c8:	688b      	ldr	r3, [r1, #8]
    45ca:	ea4f 1469 	mov.w	r4, r9, asr #5
    45ce:	eb04 0802 	add.w	r8, r4, r2
    45d2:	f108 0501 	add.w	r5, r8, #1
    45d6:	429d      	cmp	r5, r3
    45d8:	460e      	mov	r6, r1
    45da:	4682      	mov	sl, r0
    45dc:	6849      	ldr	r1, [r1, #4]
    45de:	dd04      	ble.n	45ea <__lshift+0x2a>
    45e0:	005b      	lsls	r3, r3, #1
    45e2:	429d      	cmp	r5, r3
    45e4:	f101 0101 	add.w	r1, r1, #1
    45e8:	dcfa      	bgt.n	45e0 <__lshift+0x20>
    45ea:	4650      	mov	r0, sl
    45ec:	f7ff fe38 	bl	4260 <_Balloc>
    45f0:	2c00      	cmp	r4, #0
    45f2:	f100 0214 	add.w	r2, r0, #20
    45f6:	dd38      	ble.n	466a <__lshift+0xaa>
    45f8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    45fc:	2100      	movs	r1, #0
    45fe:	f842 1b04 	str.w	r1, [r2], #4
    4602:	4293      	cmp	r3, r2
    4604:	d1fb      	bne.n	45fe <__lshift+0x3e>
    4606:	6934      	ldr	r4, [r6, #16]
    4608:	f106 0114 	add.w	r1, r6, #20
    460c:	f019 091f 	ands.w	r9, r9, #31
    4610:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    4614:	d021      	beq.n	465a <__lshift+0x9a>
    4616:	f1c9 0220 	rsb	r2, r9, #32
    461a:	2400      	movs	r4, #0
    461c:	680f      	ldr	r7, [r1, #0]
    461e:	fa07 fc09 	lsl.w	ip, r7, r9
    4622:	ea4c 0404 	orr.w	r4, ip, r4
    4626:	469c      	mov	ip, r3
    4628:	f843 4b04 	str.w	r4, [r3], #4
    462c:	f851 4b04 	ldr.w	r4, [r1], #4
    4630:	458e      	cmp	lr, r1
    4632:	fa24 f402 	lsr.w	r4, r4, r2
    4636:	d8f1      	bhi.n	461c <__lshift+0x5c>
    4638:	f8cc 4004 	str.w	r4, [ip, #4]
    463c:	b10c      	cbz	r4, 4642 <__lshift+0x82>
    463e:	f108 0502 	add.w	r5, r8, #2
    4642:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    4646:	6872      	ldr	r2, [r6, #4]
    4648:	3d01      	subs	r5, #1
    464a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    464e:	6105      	str	r5, [r0, #16]
    4650:	6031      	str	r1, [r6, #0]
    4652:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    4656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    465a:	3b04      	subs	r3, #4
    465c:	f851 2b04 	ldr.w	r2, [r1], #4
    4660:	f843 2f04 	str.w	r2, [r3, #4]!
    4664:	458e      	cmp	lr, r1
    4666:	d8f9      	bhi.n	465c <__lshift+0x9c>
    4668:	e7eb      	b.n	4642 <__lshift+0x82>
    466a:	4613      	mov	r3, r2
    466c:	e7cb      	b.n	4606 <__lshift+0x46>
    466e:	bf00      	nop

00004670 <__mcmp>:
    4670:	6902      	ldr	r2, [r0, #16]
    4672:	690b      	ldr	r3, [r1, #16]
    4674:	1ad2      	subs	r2, r2, r3
    4676:	d113      	bne.n	46a0 <__mcmp+0x30>
    4678:	009b      	lsls	r3, r3, #2
    467a:	3014      	adds	r0, #20
    467c:	3114      	adds	r1, #20
    467e:	4419      	add	r1, r3
    4680:	b410      	push	{r4}
    4682:	4403      	add	r3, r0
    4684:	e001      	b.n	468a <__mcmp+0x1a>
    4686:	4298      	cmp	r0, r3
    4688:	d20c      	bcs.n	46a4 <__mcmp+0x34>
    468a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    468e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    4692:	4294      	cmp	r4, r2
    4694:	d0f7      	beq.n	4686 <__mcmp+0x16>
    4696:	d309      	bcc.n	46ac <__mcmp+0x3c>
    4698:	2001      	movs	r0, #1
    469a:	f85d 4b04 	ldr.w	r4, [sp], #4
    469e:	4770      	bx	lr
    46a0:	4610      	mov	r0, r2
    46a2:	4770      	bx	lr
    46a4:	2000      	movs	r0, #0
    46a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    46aa:	4770      	bx	lr
    46ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46b0:	e7f3      	b.n	469a <__mcmp+0x2a>
    46b2:	bf00      	nop

000046b4 <__mdiff>:
    46b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46b8:	690b      	ldr	r3, [r1, #16]
    46ba:	460f      	mov	r7, r1
    46bc:	6911      	ldr	r1, [r2, #16]
    46be:	1a5b      	subs	r3, r3, r1
    46c0:	2b00      	cmp	r3, #0
    46c2:	4690      	mov	r8, r2
    46c4:	d117      	bne.n	46f6 <__mdiff+0x42>
    46c6:	0089      	lsls	r1, r1, #2
    46c8:	f107 0214 	add.w	r2, r7, #20
    46cc:	f108 0514 	add.w	r5, r8, #20
    46d0:	1853      	adds	r3, r2, r1
    46d2:	4429      	add	r1, r5
    46d4:	e001      	b.n	46da <__mdiff+0x26>
    46d6:	429a      	cmp	r2, r3
    46d8:	d25e      	bcs.n	4798 <__mdiff+0xe4>
    46da:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    46de:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    46e2:	42a6      	cmp	r6, r4
    46e4:	d0f7      	beq.n	46d6 <__mdiff+0x22>
    46e6:	d260      	bcs.n	47aa <__mdiff+0xf6>
    46e8:	463b      	mov	r3, r7
    46ea:	4614      	mov	r4, r2
    46ec:	4647      	mov	r7, r8
    46ee:	f04f 0901 	mov.w	r9, #1
    46f2:	4698      	mov	r8, r3
    46f4:	e006      	b.n	4704 <__mdiff+0x50>
    46f6:	db5d      	blt.n	47b4 <__mdiff+0x100>
    46f8:	f107 0514 	add.w	r5, r7, #20
    46fc:	f102 0414 	add.w	r4, r2, #20
    4700:	f04f 0900 	mov.w	r9, #0
    4704:	6879      	ldr	r1, [r7, #4]
    4706:	f7ff fdab 	bl	4260 <_Balloc>
    470a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    470e:	693e      	ldr	r6, [r7, #16]
    4710:	f8c0 900c 	str.w	r9, [r0, #12]
    4714:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    4718:	46a6      	mov	lr, r4
    471a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    471e:	f100 0414 	add.w	r4, r0, #20
    4722:	2300      	movs	r3, #0
    4724:	f85e 1b04 	ldr.w	r1, [lr], #4
    4728:	f855 8b04 	ldr.w	r8, [r5], #4
    472c:	b28a      	uxth	r2, r1
    472e:	fa13 f388 	uxtah	r3, r3, r8
    4732:	0c09      	lsrs	r1, r1, #16
    4734:	1a9a      	subs	r2, r3, r2
    4736:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    473a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    473e:	b292      	uxth	r2, r2
    4740:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    4744:	45f4      	cmp	ip, lr
    4746:	f844 2b04 	str.w	r2, [r4], #4
    474a:	ea4f 4323 	mov.w	r3, r3, asr #16
    474e:	d8e9      	bhi.n	4724 <__mdiff+0x70>
    4750:	42af      	cmp	r7, r5
    4752:	d917      	bls.n	4784 <__mdiff+0xd0>
    4754:	46a4      	mov	ip, r4
    4756:	4629      	mov	r1, r5
    4758:	f851 eb04 	ldr.w	lr, [r1], #4
    475c:	fa13 f28e 	uxtah	r2, r3, lr
    4760:	1413      	asrs	r3, r2, #16
    4762:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    4766:	b292      	uxth	r2, r2
    4768:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    476c:	428f      	cmp	r7, r1
    476e:	f84c 2b04 	str.w	r2, [ip], #4
    4772:	ea4f 4323 	mov.w	r3, r3, asr #16
    4776:	d8ef      	bhi.n	4758 <__mdiff+0xa4>
    4778:	43ed      	mvns	r5, r5
    477a:	443d      	add	r5, r7
    477c:	f025 0503 	bic.w	r5, r5, #3
    4780:	3504      	adds	r5, #4
    4782:	442c      	add	r4, r5
    4784:	3c04      	subs	r4, #4
    4786:	b922      	cbnz	r2, 4792 <__mdiff+0xde>
    4788:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    478c:	3e01      	subs	r6, #1
    478e:	2b00      	cmp	r3, #0
    4790:	d0fa      	beq.n	4788 <__mdiff+0xd4>
    4792:	6106      	str	r6, [r0, #16]
    4794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4798:	2100      	movs	r1, #0
    479a:	f7ff fd61 	bl	4260 <_Balloc>
    479e:	2201      	movs	r2, #1
    47a0:	2300      	movs	r3, #0
    47a2:	6102      	str	r2, [r0, #16]
    47a4:	6143      	str	r3, [r0, #20]
    47a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    47aa:	462c      	mov	r4, r5
    47ac:	f04f 0900 	mov.w	r9, #0
    47b0:	4615      	mov	r5, r2
    47b2:	e7a7      	b.n	4704 <__mdiff+0x50>
    47b4:	463b      	mov	r3, r7
    47b6:	f107 0414 	add.w	r4, r7, #20
    47ba:	f108 0514 	add.w	r5, r8, #20
    47be:	4647      	mov	r7, r8
    47c0:	f04f 0901 	mov.w	r9, #1
    47c4:	4698      	mov	r8, r3
    47c6:	e79d      	b.n	4704 <__mdiff+0x50>

000047c8 <__d2b>:
    47c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47cc:	ec57 6b10 	vmov	r6, r7, d0
    47d0:	b083      	sub	sp, #12
    47d2:	4688      	mov	r8, r1
    47d4:	2101      	movs	r1, #1
    47d6:	463c      	mov	r4, r7
    47d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
    47dc:	4617      	mov	r7, r2
    47de:	f7ff fd3f 	bl	4260 <_Balloc>
    47e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    47e6:	4681      	mov	r9, r0
    47e8:	b10d      	cbz	r5, 47ee <__d2b+0x26>
    47ea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    47ee:	9401      	str	r4, [sp, #4]
    47f0:	b31e      	cbz	r6, 483a <__d2b+0x72>
    47f2:	a802      	add	r0, sp, #8
    47f4:	f840 6d08 	str.w	r6, [r0, #-8]!
    47f8:	f7ff fdc2 	bl	4380 <__lo0bits>
    47fc:	2800      	cmp	r0, #0
    47fe:	d134      	bne.n	486a <__d2b+0xa2>
    4800:	e89d 000c 	ldmia.w	sp, {r2, r3}
    4804:	f8c9 2014 	str.w	r2, [r9, #20]
    4808:	2b00      	cmp	r3, #0
    480a:	bf0c      	ite	eq
    480c:	2101      	moveq	r1, #1
    480e:	2102      	movne	r1, #2
    4810:	f8c9 3018 	str.w	r3, [r9, #24]
    4814:	f8c9 1010 	str.w	r1, [r9, #16]
    4818:	b9dd      	cbnz	r5, 4852 <__d2b+0x8a>
    481a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    481e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    4822:	f8c8 0000 	str.w	r0, [r8]
    4826:	6918      	ldr	r0, [r3, #16]
    4828:	f7ff fd8a 	bl	4340 <__hi0bits>
    482c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    4830:	6038      	str	r0, [r7, #0]
    4832:	4648      	mov	r0, r9
    4834:	b003      	add	sp, #12
    4836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    483a:	a801      	add	r0, sp, #4
    483c:	f7ff fda0 	bl	4380 <__lo0bits>
    4840:	9b01      	ldr	r3, [sp, #4]
    4842:	f8c9 3014 	str.w	r3, [r9, #20]
    4846:	2101      	movs	r1, #1
    4848:	3020      	adds	r0, #32
    484a:	f8c9 1010 	str.w	r1, [r9, #16]
    484e:	2d00      	cmp	r5, #0
    4850:	d0e3      	beq.n	481a <__d2b+0x52>
    4852:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    4856:	4405      	add	r5, r0
    4858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    485c:	f8c8 5000 	str.w	r5, [r8]
    4860:	6038      	str	r0, [r7, #0]
    4862:	4648      	mov	r0, r9
    4864:	b003      	add	sp, #12
    4866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    486a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    486e:	f1c0 0120 	rsb	r1, r0, #32
    4872:	fa03 f101 	lsl.w	r1, r3, r1
    4876:	430a      	orrs	r2, r1
    4878:	40c3      	lsrs	r3, r0
    487a:	9301      	str	r3, [sp, #4]
    487c:	f8c9 2014 	str.w	r2, [r9, #20]
    4880:	e7c2      	b.n	4808 <__d2b+0x40>
    4882:	bf00      	nop

00004884 <_vasnprintf_r>:
    4884:	b570      	push	{r4, r5, r6, lr}
    4886:	4615      	mov	r5, r2
    4888:	b09a      	sub	sp, #104	; 0x68
    488a:	6814      	ldr	r4, [r2, #0]
    488c:	b109      	cbz	r1, 4892 <_vasnprintf_r+0xe>
    488e:	2c00      	cmp	r4, #0
    4890:	d11a      	bne.n	48c8 <_vasnprintf_r+0x44>
    4892:	2400      	movs	r4, #0
    4894:	f44f 7222 	mov.w	r2, #648	; 0x288
    4898:	f8ad 200c 	strh.w	r2, [sp, #12]
    489c:	9400      	str	r4, [sp, #0]
    489e:	9404      	str	r4, [sp, #16]
    48a0:	461a      	mov	r2, r3
    48a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    48a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    48a8:	9402      	str	r4, [sp, #8]
    48aa:	4669      	mov	r1, sp
    48ac:	9405      	str	r4, [sp, #20]
    48ae:	f8ad 600e 	strh.w	r6, [sp, #14]
    48b2:	f000 ff21 	bl	56f8 <_svfprintf_r>
    48b6:	2800      	cmp	r0, #0
    48b8:	db11      	blt.n	48de <_vasnprintf_r+0x5a>
    48ba:	9b00      	ldr	r3, [sp, #0]
    48bc:	6028      	str	r0, [r5, #0]
    48be:	2200      	movs	r2, #0
    48c0:	701a      	strb	r2, [r3, #0]
    48c2:	9804      	ldr	r0, [sp, #16]
    48c4:	b01a      	add	sp, #104	; 0x68
    48c6:	bd70      	pop	{r4, r5, r6, pc}
    48c8:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    48cc:	9100      	str	r1, [sp, #0]
    48ce:	9104      	str	r1, [sp, #16]
    48d0:	f8ad 200c 	strh.w	r2, [sp, #12]
    48d4:	dae4      	bge.n	48a0 <_vasnprintf_r+0x1c>
    48d6:	238b      	movs	r3, #139	; 0x8b
    48d8:	6003      	str	r3, [r0, #0]
    48da:	2000      	movs	r0, #0
    48dc:	e7f2      	b.n	48c4 <_vasnprintf_r+0x40>
    48de:	2000      	movs	r0, #0
    48e0:	e7f0      	b.n	48c4 <_vasnprintf_r+0x40>
    48e2:	bf00      	nop

000048e4 <_calloc_r>:
    48e4:	b510      	push	{r4, lr}
    48e6:	fb02 f101 	mul.w	r1, r2, r1
    48ea:	f7fe faa1 	bl	2e30 <_malloc_r>
    48ee:	4604      	mov	r4, r0
    48f0:	b1d8      	cbz	r0, 492a <_calloc_r+0x46>
    48f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    48f6:	f022 0203 	bic.w	r2, r2, #3
    48fa:	3a04      	subs	r2, #4
    48fc:	2a24      	cmp	r2, #36	; 0x24
    48fe:	d818      	bhi.n	4932 <_calloc_r+0x4e>
    4900:	2a13      	cmp	r2, #19
    4902:	d914      	bls.n	492e <_calloc_r+0x4a>
    4904:	2300      	movs	r3, #0
    4906:	2a1b      	cmp	r2, #27
    4908:	6003      	str	r3, [r0, #0]
    490a:	6043      	str	r3, [r0, #4]
    490c:	d916      	bls.n	493c <_calloc_r+0x58>
    490e:	2a24      	cmp	r2, #36	; 0x24
    4910:	6083      	str	r3, [r0, #8]
    4912:	60c3      	str	r3, [r0, #12]
    4914:	bf11      	iteee	ne
    4916:	f100 0210 	addne.w	r2, r0, #16
    491a:	6103      	streq	r3, [r0, #16]
    491c:	6143      	streq	r3, [r0, #20]
    491e:	f100 0218 	addeq.w	r2, r0, #24
    4922:	2300      	movs	r3, #0
    4924:	6013      	str	r3, [r2, #0]
    4926:	6053      	str	r3, [r2, #4]
    4928:	6093      	str	r3, [r2, #8]
    492a:	4620      	mov	r0, r4
    492c:	bd10      	pop	{r4, pc}
    492e:	4602      	mov	r2, r0
    4930:	e7f7      	b.n	4922 <_calloc_r+0x3e>
    4932:	2100      	movs	r1, #0
    4934:	f7fe fe48 	bl	35c8 <memset>
    4938:	4620      	mov	r0, r4
    493a:	bd10      	pop	{r4, pc}
    493c:	f100 0208 	add.w	r2, r0, #8
    4940:	e7ef      	b.n	4922 <_calloc_r+0x3e>
    4942:	bf00      	nop

00004944 <quorem>:
    4944:	6902      	ldr	r2, [r0, #16]
    4946:	690b      	ldr	r3, [r1, #16]
    4948:	4293      	cmp	r3, r2
    494a:	f300 808d 	bgt.w	4a68 <quorem+0x124>
    494e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4952:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    4956:	f101 0714 	add.w	r7, r1, #20
    495a:	f100 0b14 	add.w	fp, r0, #20
    495e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    4962:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    4966:	ea4f 0488 	mov.w	r4, r8, lsl #2
    496a:	b083      	sub	sp, #12
    496c:	3201      	adds	r2, #1
    496e:	fbb3 f9f2 	udiv	r9, r3, r2
    4972:	eb0b 0304 	add.w	r3, fp, r4
    4976:	9400      	str	r4, [sp, #0]
    4978:	eb07 0a04 	add.w	sl, r7, r4
    497c:	9301      	str	r3, [sp, #4]
    497e:	f1b9 0f00 	cmp.w	r9, #0
    4982:	d039      	beq.n	49f8 <quorem+0xb4>
    4984:	2500      	movs	r5, #0
    4986:	46bc      	mov	ip, r7
    4988:	46de      	mov	lr, fp
    498a:	462b      	mov	r3, r5
    498c:	f85c 6b04 	ldr.w	r6, [ip], #4
    4990:	f8de 2000 	ldr.w	r2, [lr]
    4994:	b2b4      	uxth	r4, r6
    4996:	fb09 5504 	mla	r5, r9, r4, r5
    499a:	0c36      	lsrs	r6, r6, #16
    499c:	0c2c      	lsrs	r4, r5, #16
    499e:	fb09 4406 	mla	r4, r9, r6, r4
    49a2:	b2ad      	uxth	r5, r5
    49a4:	1b5b      	subs	r3, r3, r5
    49a6:	b2a6      	uxth	r6, r4
    49a8:	fa13 f382 	uxtah	r3, r3, r2
    49ac:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    49b0:	eb06 4623 	add.w	r6, r6, r3, asr #16
    49b4:	b29b      	uxth	r3, r3
    49b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    49ba:	45e2      	cmp	sl, ip
    49bc:	f84e 3b04 	str.w	r3, [lr], #4
    49c0:	ea4f 4514 	mov.w	r5, r4, lsr #16
    49c4:	ea4f 4326 	mov.w	r3, r6, asr #16
    49c8:	d2e0      	bcs.n	498c <quorem+0x48>
    49ca:	9b00      	ldr	r3, [sp, #0]
    49cc:	f85b 3003 	ldr.w	r3, [fp, r3]
    49d0:	b993      	cbnz	r3, 49f8 <quorem+0xb4>
    49d2:	9c01      	ldr	r4, [sp, #4]
    49d4:	1f23      	subs	r3, r4, #4
    49d6:	459b      	cmp	fp, r3
    49d8:	d20c      	bcs.n	49f4 <quorem+0xb0>
    49da:	f854 3c04 	ldr.w	r3, [r4, #-4]
    49de:	b94b      	cbnz	r3, 49f4 <quorem+0xb0>
    49e0:	f1a4 0308 	sub.w	r3, r4, #8
    49e4:	e002      	b.n	49ec <quorem+0xa8>
    49e6:	681a      	ldr	r2, [r3, #0]
    49e8:	3b04      	subs	r3, #4
    49ea:	b91a      	cbnz	r2, 49f4 <quorem+0xb0>
    49ec:	459b      	cmp	fp, r3
    49ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    49f2:	d3f8      	bcc.n	49e6 <quorem+0xa2>
    49f4:	f8c0 8010 	str.w	r8, [r0, #16]
    49f8:	4604      	mov	r4, r0
    49fa:	f7ff fe39 	bl	4670 <__mcmp>
    49fe:	2800      	cmp	r0, #0
    4a00:	db2e      	blt.n	4a60 <quorem+0x11c>
    4a02:	f109 0901 	add.w	r9, r9, #1
    4a06:	465d      	mov	r5, fp
    4a08:	2300      	movs	r3, #0
    4a0a:	f857 1b04 	ldr.w	r1, [r7], #4
    4a0e:	6828      	ldr	r0, [r5, #0]
    4a10:	b28a      	uxth	r2, r1
    4a12:	1a9a      	subs	r2, r3, r2
    4a14:	0c09      	lsrs	r1, r1, #16
    4a16:	fa12 f280 	uxtah	r2, r2, r0
    4a1a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    4a1e:	eb03 4322 	add.w	r3, r3, r2, asr #16
    4a22:	b291      	uxth	r1, r2
    4a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4a28:	45ba      	cmp	sl, r7
    4a2a:	f845 1b04 	str.w	r1, [r5], #4
    4a2e:	ea4f 4323 	mov.w	r3, r3, asr #16
    4a32:	d2ea      	bcs.n	4a0a <quorem+0xc6>
    4a34:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    4a38:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    4a3c:	b982      	cbnz	r2, 4a60 <quorem+0x11c>
    4a3e:	1f1a      	subs	r2, r3, #4
    4a40:	4593      	cmp	fp, r2
    4a42:	d20b      	bcs.n	4a5c <quorem+0x118>
    4a44:	f853 2c04 	ldr.w	r2, [r3, #-4]
    4a48:	b942      	cbnz	r2, 4a5c <quorem+0x118>
    4a4a:	3b08      	subs	r3, #8
    4a4c:	e002      	b.n	4a54 <quorem+0x110>
    4a4e:	681a      	ldr	r2, [r3, #0]
    4a50:	3b04      	subs	r3, #4
    4a52:	b91a      	cbnz	r2, 4a5c <quorem+0x118>
    4a54:	459b      	cmp	fp, r3
    4a56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4a5a:	d3f8      	bcc.n	4a4e <quorem+0x10a>
    4a5c:	f8c4 8010 	str.w	r8, [r4, #16]
    4a60:	4648      	mov	r0, r9
    4a62:	b003      	add	sp, #12
    4a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a68:	2000      	movs	r0, #0
    4a6a:	4770      	bx	lr
    4a6c:	0000      	movs	r0, r0
	...

00004a70 <_dtoa_r>:
    4a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a74:	ec57 6b10 	vmov	r6, r7, d0
    4a78:	b093      	sub	sp, #76	; 0x4c
    4a7a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    4a7c:	9101      	str	r1, [sp, #4]
    4a7e:	4604      	mov	r4, r0
    4a80:	4690      	mov	r8, r2
    4a82:	9304      	str	r3, [sp, #16]
    4a84:	ee10 aa10 	vmov	sl, s0
    4a88:	46bb      	mov	fp, r7
    4a8a:	b14d      	cbz	r5, 4aa0 <_dtoa_r+0x30>
    4a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    4a8e:	606a      	str	r2, [r5, #4]
    4a90:	2301      	movs	r3, #1
    4a92:	4093      	lsls	r3, r2
    4a94:	60ab      	str	r3, [r5, #8]
    4a96:	4629      	mov	r1, r5
    4a98:	f7ff fc08 	bl	42ac <_Bfree>
    4a9c:	2300      	movs	r3, #0
    4a9e:	6423      	str	r3, [r4, #64]	; 0x40
    4aa0:	f1bb 0f00 	cmp.w	fp, #0
    4aa4:	465e      	mov	r6, fp
    4aa6:	db34      	blt.n	4b12 <_dtoa_r+0xa2>
    4aa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4aaa:	2300      	movs	r3, #0
    4aac:	6013      	str	r3, [r2, #0]
    4aae:	4bc4      	ldr	r3, [pc, #784]	; (4dc0 <_dtoa_r+0x350>)
    4ab0:	461a      	mov	r2, r3
    4ab2:	4033      	ands	r3, r6
    4ab4:	4293      	cmp	r3, r2
    4ab6:	d015      	beq.n	4ae4 <_dtoa_r+0x74>
    4ab8:	ec4b ab17 	vmov	d7, sl, fp
    4abc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ac4:	e9cd ab02 	strd	sl, fp, [sp, #8]
    4ac8:	d12a      	bne.n	4b20 <_dtoa_r+0xb0>
    4aca:	9a04      	ldr	r2, [sp, #16]
    4acc:	2301      	movs	r3, #1
    4ace:	6013      	str	r3, [r2, #0]
    4ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	f000 80b7 	beq.w	4c46 <_dtoa_r+0x1d6>
    4ad8:	48ba      	ldr	r0, [pc, #744]	; (4dc4 <_dtoa_r+0x354>)
    4ada:	6018      	str	r0, [r3, #0]
    4adc:	3801      	subs	r0, #1
    4ade:	b013      	add	sp, #76	; 0x4c
    4ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ae4:	9a04      	ldr	r2, [sp, #16]
    4ae6:	f242 730f 	movw	r3, #9999	; 0x270f
    4aea:	6013      	str	r3, [r2, #0]
    4aec:	f1ba 0f00 	cmp.w	sl, #0
    4af0:	f000 8092 	beq.w	4c18 <_dtoa_r+0x1a8>
    4af4:	48b4      	ldr	r0, [pc, #720]	; (4dc8 <_dtoa_r+0x358>)
    4af6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4af8:	2b00      	cmp	r3, #0
    4afa:	d0f0      	beq.n	4ade <_dtoa_r+0x6e>
    4afc:	78c3      	ldrb	r3, [r0, #3]
    4afe:	2b00      	cmp	r3, #0
    4b00:	f000 80a3 	beq.w	4c4a <_dtoa_r+0x1da>
    4b04:	f100 0308 	add.w	r3, r0, #8
    4b08:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4b0a:	6013      	str	r3, [r2, #0]
    4b0c:	b013      	add	sp, #76	; 0x4c
    4b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4b14:	2301      	movs	r3, #1
    4b16:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    4b1a:	6013      	str	r3, [r2, #0]
    4b1c:	46b3      	mov	fp, r6
    4b1e:	e7c6      	b.n	4aae <_dtoa_r+0x3e>
    4b20:	a911      	add	r1, sp, #68	; 0x44
    4b22:	aa10      	add	r2, sp, #64	; 0x40
    4b24:	ed9d 0b02 	vldr	d0, [sp, #8]
    4b28:	4620      	mov	r0, r4
    4b2a:	f7ff fe4d 	bl	47c8 <__d2b>
    4b2e:	0d31      	lsrs	r1, r6, #20
    4b30:	9007      	str	r0, [sp, #28]
    4b32:	d17a      	bne.n	4c2a <_dtoa_r+0x1ba>
    4b34:	9810      	ldr	r0, [sp, #64]	; 0x40
    4b36:	9911      	ldr	r1, [sp, #68]	; 0x44
    4b38:	4401      	add	r1, r0
    4b3a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    4b3e:	2b20      	cmp	r3, #32
    4b40:	f340 8241 	ble.w	4fc6 <_dtoa_r+0x556>
    4b44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    4b48:	f201 4212 	addw	r2, r1, #1042	; 0x412
    4b4c:	409e      	lsls	r6, r3
    4b4e:	fa2a f302 	lsr.w	r3, sl, r2
    4b52:	4333      	orrs	r3, r6
    4b54:	ee07 3a90 	vmov	s15, r3
    4b58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    4b5c:	2501      	movs	r5, #1
    4b5e:	ec53 2b17 	vmov	r2, r3, d7
    4b62:	3901      	subs	r1, #1
    4b64:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    4b68:	950a      	str	r5, [sp, #40]	; 0x28
    4b6a:	ec43 2b17 	vmov	d7, r2, r3
    4b6e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    4b72:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 4da8 <_dtoa_r+0x338>
    4b76:	ee37 6b46 	vsub.f64	d6, d7, d6
    4b7a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 4db0 <_dtoa_r+0x340>
    4b7e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 4db8 <_dtoa_r+0x348>
    4b82:	eea6 7b04 	vfma.f64	d7, d6, d4
    4b86:	ee06 1a90 	vmov	s13, r1
    4b8a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4b8e:	eea6 7b05 	vfma.f64	d7, d6, d5
    4b92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    4b96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    4b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4b9e:	edcd 6a02 	vstr	s13, [sp, #8]
    4ba2:	f100 811c 	bmi.w	4dde <_dtoa_r+0x36e>
    4ba6:	9d02      	ldr	r5, [sp, #8]
    4ba8:	2d16      	cmp	r5, #22
    4baa:	f200 8115 	bhi.w	4dd8 <_dtoa_r+0x368>
    4bae:	4b87      	ldr	r3, [pc, #540]	; (4dcc <_dtoa_r+0x35c>)
    4bb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4bb4:	ed93 7b00 	vldr	d7, [r3]
    4bb8:	ec4b ab16 	vmov	d6, sl, fp
    4bbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bc4:	f340 8206 	ble.w	4fd4 <_dtoa_r+0x564>
    4bc8:	1e6b      	subs	r3, r5, #1
    4bca:	9302      	str	r3, [sp, #8]
    4bcc:	2300      	movs	r3, #0
    4bce:	930c      	str	r3, [sp, #48]	; 0x30
    4bd0:	1a41      	subs	r1, r0, r1
    4bd2:	f1b1 0901 	subs.w	r9, r1, #1
    4bd6:	f100 8117 	bmi.w	4e08 <_dtoa_r+0x398>
    4bda:	2300      	movs	r3, #0
    4bdc:	9306      	str	r3, [sp, #24]
    4bde:	9b02      	ldr	r3, [sp, #8]
    4be0:	2b00      	cmp	r3, #0
    4be2:	f2c0 8108 	blt.w	4df6 <_dtoa_r+0x386>
    4be6:	4499      	add	r9, r3
    4be8:	930b      	str	r3, [sp, #44]	; 0x2c
    4bea:	2300      	movs	r3, #0
    4bec:	9305      	str	r3, [sp, #20]
    4bee:	9b01      	ldr	r3, [sp, #4]
    4bf0:	2b09      	cmp	r3, #9
    4bf2:	d82c      	bhi.n	4c4e <_dtoa_r+0x1de>
    4bf4:	2b05      	cmp	r3, #5
    4bf6:	f340 855f 	ble.w	56b8 <_dtoa_r+0xc48>
    4bfa:	3b04      	subs	r3, #4
    4bfc:	9301      	str	r3, [sp, #4]
    4bfe:	2300      	movs	r3, #0
    4c00:	930e      	str	r3, [sp, #56]	; 0x38
    4c02:	9b01      	ldr	r3, [sp, #4]
    4c04:	3b02      	subs	r3, #2
    4c06:	2b03      	cmp	r3, #3
    4c08:	f200 855f 	bhi.w	56ca <_dtoa_r+0xc5a>
    4c0c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4c10:	01e502a9 	.word	0x01e502a9
    4c14:	03c802b5 	.word	0x03c802b5
    4c18:	4b6b      	ldr	r3, [pc, #428]	; (4dc8 <_dtoa_r+0x358>)
    4c1a:	4a6d      	ldr	r2, [pc, #436]	; (4dd0 <_dtoa_r+0x360>)
    4c1c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    4c20:	2800      	cmp	r0, #0
    4c22:	bf14      	ite	ne
    4c24:	4618      	movne	r0, r3
    4c26:	4610      	moveq	r0, r2
    4c28:	e765      	b.n	4af6 <_dtoa_r+0x86>
    4c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4c2e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    4c32:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    4c36:	2500      	movs	r5, #0
    4c38:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    4c3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    4c40:	9810      	ldr	r0, [sp, #64]	; 0x40
    4c42:	950a      	str	r5, [sp, #40]	; 0x28
    4c44:	e791      	b.n	4b6a <_dtoa_r+0xfa>
    4c46:	4863      	ldr	r0, [pc, #396]	; (4dd4 <_dtoa_r+0x364>)
    4c48:	e749      	b.n	4ade <_dtoa_r+0x6e>
    4c4a:	1cc3      	adds	r3, r0, #3
    4c4c:	e75c      	b.n	4b08 <_dtoa_r+0x98>
    4c4e:	2100      	movs	r1, #0
    4c50:	6461      	str	r1, [r4, #68]	; 0x44
    4c52:	4620      	mov	r0, r4
    4c54:	4688      	mov	r8, r1
    4c56:	9101      	str	r1, [sp, #4]
    4c58:	f7ff fb02 	bl	4260 <_Balloc>
    4c5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4c60:	2301      	movs	r3, #1
    4c62:	9008      	str	r0, [sp, #32]
    4c64:	6420      	str	r0, [r4, #64]	; 0x40
    4c66:	970d      	str	r7, [sp, #52]	; 0x34
    4c68:	9309      	str	r3, [sp, #36]	; 0x24
    4c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	db7a      	blt.n	4d66 <_dtoa_r+0x2f6>
    4c70:	9a02      	ldr	r2, [sp, #8]
    4c72:	2a0e      	cmp	r2, #14
    4c74:	dc77      	bgt.n	4d66 <_dtoa_r+0x2f6>
    4c76:	4b55      	ldr	r3, [pc, #340]	; (4dcc <_dtoa_r+0x35c>)
    4c78:	f1b8 0f00 	cmp.w	r8, #0
    4c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4c80:	ed93 4b00 	vldr	d4, [r3]
    4c84:	f2c0 8284 	blt.w	5190 <_dtoa_r+0x720>
    4c88:	eeb1 2b44 	vneg.f64	d2, d4
    4c8c:	ec4b ab17 	vmov	d7, sl, fp
    4c90:	ee87 6b04 	vdiv.f64	d6, d7, d4
    4c94:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4c98:	9a08      	ldr	r2, [sp, #32]
    4c9a:	ee16 3a10 	vmov	r3, s12
    4c9e:	2f01      	cmp	r7, #1
    4ca0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4ca4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4ca8:	f102 0b01 	add.w	fp, r2, #1
    4cac:	7013      	strb	r3, [r2, #0]
    4cae:	eea2 7b05 	vfma.f64	d7, d2, d5
    4cb2:	d022      	beq.n	4cfa <_dtoa_r+0x28a>
    4cb4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    4cb8:	ee27 7b03 	vmul.f64	d7, d7, d3
    4cbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4cc4:	d03a      	beq.n	4d3c <_dtoa_r+0x2cc>
    4cc6:	9a08      	ldr	r2, [sp, #32]
    4cc8:	e006      	b.n	4cd8 <_dtoa_r+0x268>
    4cca:	ee27 7b03 	vmul.f64	d7, d7, d3
    4cce:	eeb5 7b40 	vcmp.f64	d7, #0.0
    4cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4cd6:	d031      	beq.n	4d3c <_dtoa_r+0x2cc>
    4cd8:	ee87 6b04 	vdiv.f64	d6, d7, d4
    4cdc:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4ce0:	ee16 3a10 	vmov	r3, s12
    4ce4:	3330      	adds	r3, #48	; 0x30
    4ce6:	f80b 3b01 	strb.w	r3, [fp], #1
    4cea:	ebc2 030b 	rsb	r3, r2, fp
    4cee:	42bb      	cmp	r3, r7
    4cf0:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    4cf4:	eea2 7b05 	vfma.f64	d7, d2, d5
    4cf8:	d1e7      	bne.n	4cca <_dtoa_r+0x25a>
    4cfa:	ee37 7b07 	vadd.f64	d7, d7, d7
    4cfe:	eeb4 4bc7 	vcmpe.f64	d4, d7
    4d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d06:	d408      	bmi.n	4d1a <_dtoa_r+0x2aa>
    4d08:	eeb4 4b47 	vcmp.f64	d4, d7
    4d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d10:	d114      	bne.n	4d3c <_dtoa_r+0x2cc>
    4d12:	ee16 3a10 	vmov	r3, s12
    4d16:	07db      	lsls	r3, r3, #31
    4d18:	d510      	bpl.n	4d3c <_dtoa_r+0x2cc>
    4d1a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    4d1e:	9a08      	ldr	r2, [sp, #32]
    4d20:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    4d24:	e004      	b.n	4d30 <_dtoa_r+0x2c0>
    4d26:	429a      	cmp	r2, r3
    4d28:	f000 83e5 	beq.w	54f6 <_dtoa_r+0xa86>
    4d2c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    4d30:	2839      	cmp	r0, #57	; 0x39
    4d32:	f103 0b01 	add.w	fp, r3, #1
    4d36:	d0f6      	beq.n	4d26 <_dtoa_r+0x2b6>
    4d38:	3001      	adds	r0, #1
    4d3a:	7018      	strb	r0, [r3, #0]
    4d3c:	9907      	ldr	r1, [sp, #28]
    4d3e:	4620      	mov	r0, r4
    4d40:	f7ff fab4 	bl	42ac <_Bfree>
    4d44:	2200      	movs	r2, #0
    4d46:	9b02      	ldr	r3, [sp, #8]
    4d48:	f88b 2000 	strb.w	r2, [fp]
    4d4c:	9a04      	ldr	r2, [sp, #16]
    4d4e:	3301      	adds	r3, #1
    4d50:	6013      	str	r3, [r2, #0]
    4d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4d54:	2b00      	cmp	r3, #0
    4d56:	f000 8366 	beq.w	5426 <_dtoa_r+0x9b6>
    4d5a:	9808      	ldr	r0, [sp, #32]
    4d5c:	f8c3 b000 	str.w	fp, [r3]
    4d60:	b013      	add	sp, #76	; 0x4c
    4d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d68:	2a00      	cmp	r2, #0
    4d6a:	d053      	beq.n	4e14 <_dtoa_r+0x3a4>
    4d6c:	9a01      	ldr	r2, [sp, #4]
    4d6e:	2a01      	cmp	r2, #1
    4d70:	f340 822e 	ble.w	51d0 <_dtoa_r+0x760>
    4d74:	9905      	ldr	r1, [sp, #20]
    4d76:	1e7a      	subs	r2, r7, #1
    4d78:	4291      	cmp	r1, r2
    4d7a:	f2c0 8357 	blt.w	542c <_dtoa_r+0x9bc>
    4d7e:	1a8b      	subs	r3, r1, r2
    4d80:	930e      	str	r3, [sp, #56]	; 0x38
    4d82:	2f00      	cmp	r7, #0
    4d84:	9b06      	ldr	r3, [sp, #24]
    4d86:	f2c0 8424 	blt.w	55d2 <_dtoa_r+0xb62>
    4d8a:	930a      	str	r3, [sp, #40]	; 0x28
    4d8c:	463b      	mov	r3, r7
    4d8e:	9a06      	ldr	r2, [sp, #24]
    4d90:	2101      	movs	r1, #1
    4d92:	441a      	add	r2, r3
    4d94:	4620      	mov	r0, r4
    4d96:	9206      	str	r2, [sp, #24]
    4d98:	4499      	add	r9, r3
    4d9a:	f7ff fb1f 	bl	43dc <__i2b>
    4d9e:	4606      	mov	r6, r0
    4da0:	e03d      	b.n	4e1e <_dtoa_r+0x3ae>
    4da2:	bf00      	nop
    4da4:	f3af 8000 	nop.w
    4da8:	636f4361 	.word	0x636f4361
    4dac:	3fd287a7 	.word	0x3fd287a7
    4db0:	8b60c8b3 	.word	0x8b60c8b3
    4db4:	3fc68a28 	.word	0x3fc68a28
    4db8:	509f79fb 	.word	0x509f79fb
    4dbc:	3fd34413 	.word	0x3fd34413
    4dc0:	7ff00000 	.word	0x7ff00000
    4dc4:	20000aa1 	.word	0x20000aa1
    4dc8:	20000a9c 	.word	0x20000a9c
    4dcc:	200002a8 	.word	0x200002a8
    4dd0:	20000a90 	.word	0x20000a90
    4dd4:	20000aa0 	.word	0x20000aa0
    4dd8:	2301      	movs	r3, #1
    4dda:	930c      	str	r3, [sp, #48]	; 0x30
    4ddc:	e6f8      	b.n	4bd0 <_dtoa_r+0x160>
    4dde:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    4de2:	eeb4 7b46 	vcmp.f64	d7, d6
    4de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dea:	f43f aedc 	beq.w	4ba6 <_dtoa_r+0x136>
    4dee:	9b02      	ldr	r3, [sp, #8]
    4df0:	3b01      	subs	r3, #1
    4df2:	9302      	str	r3, [sp, #8]
    4df4:	e6d7      	b.n	4ba6 <_dtoa_r+0x136>
    4df6:	9a06      	ldr	r2, [sp, #24]
    4df8:	9b02      	ldr	r3, [sp, #8]
    4dfa:	1ad2      	subs	r2, r2, r3
    4dfc:	425b      	negs	r3, r3
    4dfe:	9305      	str	r3, [sp, #20]
    4e00:	2300      	movs	r3, #0
    4e02:	9206      	str	r2, [sp, #24]
    4e04:	930b      	str	r3, [sp, #44]	; 0x2c
    4e06:	e6f2      	b.n	4bee <_dtoa_r+0x17e>
    4e08:	f1c9 0300 	rsb	r3, r9, #0
    4e0c:	9306      	str	r3, [sp, #24]
    4e0e:	f04f 0900 	mov.w	r9, #0
    4e12:	e6e4      	b.n	4bde <_dtoa_r+0x16e>
    4e14:	9b05      	ldr	r3, [sp, #20]
    4e16:	930e      	str	r3, [sp, #56]	; 0x38
    4e18:	9e09      	ldr	r6, [sp, #36]	; 0x24
    4e1a:	9b06      	ldr	r3, [sp, #24]
    4e1c:	930a      	str	r3, [sp, #40]	; 0x28
    4e1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4e20:	460b      	mov	r3, r1
    4e22:	b161      	cbz	r1, 4e3e <_dtoa_r+0x3ce>
    4e24:	f1b9 0f00 	cmp.w	r9, #0
    4e28:	dd09      	ble.n	4e3e <_dtoa_r+0x3ce>
    4e2a:	4549      	cmp	r1, r9
    4e2c:	9a06      	ldr	r2, [sp, #24]
    4e2e:	bfa8      	it	ge
    4e30:	464b      	movge	r3, r9
    4e32:	1ad2      	subs	r2, r2, r3
    4e34:	9206      	str	r2, [sp, #24]
    4e36:	1aca      	subs	r2, r1, r3
    4e38:	920a      	str	r2, [sp, #40]	; 0x28
    4e3a:	ebc3 0909 	rsb	r9, r3, r9
    4e3e:	9b05      	ldr	r3, [sp, #20]
    4e40:	2b00      	cmp	r3, #0
    4e42:	f340 8280 	ble.w	5346 <_dtoa_r+0x8d6>
    4e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4e48:	2a00      	cmp	r2, #0
    4e4a:	f000 819a 	beq.w	5182 <_dtoa_r+0x712>
    4e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e50:	2a00      	cmp	r2, #0
    4e52:	f000 8196 	beq.w	5182 <_dtoa_r+0x712>
    4e56:	4631      	mov	r1, r6
    4e58:	4620      	mov	r0, r4
    4e5a:	f7ff fb61 	bl	4520 <__pow5mult>
    4e5e:	9a07      	ldr	r2, [sp, #28]
    4e60:	4601      	mov	r1, r0
    4e62:	4606      	mov	r6, r0
    4e64:	4620      	mov	r0, r4
    4e66:	f7ff fac3 	bl	43f0 <__multiply>
    4e6a:	9907      	ldr	r1, [sp, #28]
    4e6c:	4605      	mov	r5, r0
    4e6e:	4620      	mov	r0, r4
    4e70:	f7ff fa1c 	bl	42ac <_Bfree>
    4e74:	9b05      	ldr	r3, [sp, #20]
    4e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e78:	1a9b      	subs	r3, r3, r2
    4e7a:	9305      	str	r3, [sp, #20]
    4e7c:	f040 8180 	bne.w	5180 <_dtoa_r+0x710>
    4e80:	2101      	movs	r1, #1
    4e82:	4620      	mov	r0, r4
    4e84:	f7ff faaa 	bl	43dc <__i2b>
    4e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e8a:	9005      	str	r0, [sp, #20]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	f000 81ac 	beq.w	51ea <_dtoa_r+0x77a>
    4e92:	4601      	mov	r1, r0
    4e94:	461a      	mov	r2, r3
    4e96:	4620      	mov	r0, r4
    4e98:	f7ff fb42 	bl	4520 <__pow5mult>
    4e9c:	9b01      	ldr	r3, [sp, #4]
    4e9e:	9005      	str	r0, [sp, #20]
    4ea0:	2b01      	cmp	r3, #1
    4ea2:	f340 8280 	ble.w	53a6 <_dtoa_r+0x936>
    4ea6:	2300      	movs	r3, #0
    4ea8:	9307      	str	r3, [sp, #28]
    4eaa:	9a05      	ldr	r2, [sp, #20]
    4eac:	6913      	ldr	r3, [r2, #16]
    4eae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4eb2:	6918      	ldr	r0, [r3, #16]
    4eb4:	f7ff fa44 	bl	4340 <__hi0bits>
    4eb8:	f1c0 0020 	rsb	r0, r0, #32
    4ebc:	4448      	add	r0, r9
    4ebe:	f010 001f 	ands.w	r0, r0, #31
    4ec2:	f000 8190 	beq.w	51e6 <_dtoa_r+0x776>
    4ec6:	f1c0 0320 	rsb	r3, r0, #32
    4eca:	2b04      	cmp	r3, #4
    4ecc:	f340 83f8 	ble.w	56c0 <_dtoa_r+0xc50>
    4ed0:	f1c0 001c 	rsb	r0, r0, #28
    4ed4:	9b06      	ldr	r3, [sp, #24]
    4ed6:	4403      	add	r3, r0
    4ed8:	9306      	str	r3, [sp, #24]
    4eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4edc:	4403      	add	r3, r0
    4ede:	930a      	str	r3, [sp, #40]	; 0x28
    4ee0:	4481      	add	r9, r0
    4ee2:	9b06      	ldr	r3, [sp, #24]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	dd05      	ble.n	4ef4 <_dtoa_r+0x484>
    4ee8:	4629      	mov	r1, r5
    4eea:	461a      	mov	r2, r3
    4eec:	4620      	mov	r0, r4
    4eee:	f7ff fb67 	bl	45c0 <__lshift>
    4ef2:	4605      	mov	r5, r0
    4ef4:	f1b9 0f00 	cmp.w	r9, #0
    4ef8:	dd05      	ble.n	4f06 <_dtoa_r+0x496>
    4efa:	464a      	mov	r2, r9
    4efc:	9905      	ldr	r1, [sp, #20]
    4efe:	4620      	mov	r0, r4
    4f00:	f7ff fb5e 	bl	45c0 <__lshift>
    4f04:	9005      	str	r0, [sp, #20]
    4f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4f08:	2b00      	cmp	r3, #0
    4f0a:	f040 8201 	bne.w	5310 <_dtoa_r+0x8a0>
    4f0e:	2f00      	cmp	r7, #0
    4f10:	f340 8220 	ble.w	5354 <_dtoa_r+0x8e4>
    4f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f16:	2b00      	cmp	r3, #0
    4f18:	f040 817b 	bne.w	5212 <_dtoa_r+0x7a2>
    4f1c:	f8dd b020 	ldr.w	fp, [sp, #32]
    4f20:	f8dd a014 	ldr.w	sl, [sp, #20]
    4f24:	46d8      	mov	r8, fp
    4f26:	e002      	b.n	4f2e <_dtoa_r+0x4be>
    4f28:	f7ff f9ca 	bl	42c0 <__multadd>
    4f2c:	4605      	mov	r5, r0
    4f2e:	4651      	mov	r1, sl
    4f30:	4628      	mov	r0, r5
    4f32:	f7ff fd07 	bl	4944 <quorem>
    4f36:	f100 0930 	add.w	r9, r0, #48	; 0x30
    4f3a:	f808 9b01 	strb.w	r9, [r8], #1
    4f3e:	ebcb 0308 	rsb	r3, fp, r8
    4f42:	42bb      	cmp	r3, r7
    4f44:	f04f 020a 	mov.w	r2, #10
    4f48:	f04f 0300 	mov.w	r3, #0
    4f4c:	4629      	mov	r1, r5
    4f4e:	4620      	mov	r0, r4
    4f50:	dbea      	blt.n	4f28 <_dtoa_r+0x4b8>
    4f52:	9b08      	ldr	r3, [sp, #32]
    4f54:	2f01      	cmp	r7, #1
    4f56:	bfac      	ite	ge
    4f58:	19db      	addge	r3, r3, r7
    4f5a:	3301      	addlt	r3, #1
    4f5c:	469b      	mov	fp, r3
    4f5e:	f04f 0a00 	mov.w	sl, #0
    4f62:	4629      	mov	r1, r5
    4f64:	2201      	movs	r2, #1
    4f66:	4620      	mov	r0, r4
    4f68:	f7ff fb2a 	bl	45c0 <__lshift>
    4f6c:	9905      	ldr	r1, [sp, #20]
    4f6e:	9007      	str	r0, [sp, #28]
    4f70:	f7ff fb7e 	bl	4670 <__mcmp>
    4f74:	2800      	cmp	r0, #0
    4f76:	f340 828c 	ble.w	5492 <_dtoa_r+0xa22>
    4f7a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    4f7e:	9908      	ldr	r1, [sp, #32]
    4f80:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    4f84:	e004      	b.n	4f90 <_dtoa_r+0x520>
    4f86:	428b      	cmp	r3, r1
    4f88:	f000 8203 	beq.w	5392 <_dtoa_r+0x922>
    4f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    4f90:	2a39      	cmp	r2, #57	; 0x39
    4f92:	f103 0b01 	add.w	fp, r3, #1
    4f96:	d0f6      	beq.n	4f86 <_dtoa_r+0x516>
    4f98:	3201      	adds	r2, #1
    4f9a:	701a      	strb	r2, [r3, #0]
    4f9c:	9905      	ldr	r1, [sp, #20]
    4f9e:	4620      	mov	r0, r4
    4fa0:	f7ff f984 	bl	42ac <_Bfree>
    4fa4:	2e00      	cmp	r6, #0
    4fa6:	f43f aec9 	beq.w	4d3c <_dtoa_r+0x2cc>
    4faa:	f1ba 0f00 	cmp.w	sl, #0
    4fae:	d005      	beq.n	4fbc <_dtoa_r+0x54c>
    4fb0:	45b2      	cmp	sl, r6
    4fb2:	d003      	beq.n	4fbc <_dtoa_r+0x54c>
    4fb4:	4651      	mov	r1, sl
    4fb6:	4620      	mov	r0, r4
    4fb8:	f7ff f978 	bl	42ac <_Bfree>
    4fbc:	4631      	mov	r1, r6
    4fbe:	4620      	mov	r0, r4
    4fc0:	f7ff f974 	bl	42ac <_Bfree>
    4fc4:	e6ba      	b.n	4d3c <_dtoa_r+0x2cc>
    4fc6:	f1c3 0320 	rsb	r3, r3, #32
    4fca:	fa0a f303 	lsl.w	r3, sl, r3
    4fce:	ee07 3a90 	vmov	s15, r3
    4fd2:	e5c1      	b.n	4b58 <_dtoa_r+0xe8>
    4fd4:	2300      	movs	r3, #0
    4fd6:	930c      	str	r3, [sp, #48]	; 0x30
    4fd8:	e5fa      	b.n	4bd0 <_dtoa_r+0x160>
    4fda:	2300      	movs	r3, #0
    4fdc:	9309      	str	r3, [sp, #36]	; 0x24
    4fde:	9b02      	ldr	r3, [sp, #8]
    4fe0:	4443      	add	r3, r8
    4fe2:	1c5f      	adds	r7, r3, #1
    4fe4:	2f00      	cmp	r7, #0
    4fe6:	930d      	str	r3, [sp, #52]	; 0x34
    4fe8:	f340 822d 	ble.w	5446 <_dtoa_r+0x9d6>
    4fec:	463e      	mov	r6, r7
    4fee:	463d      	mov	r5, r7
    4ff0:	2100      	movs	r1, #0
    4ff2:	2e17      	cmp	r6, #23
    4ff4:	6461      	str	r1, [r4, #68]	; 0x44
    4ff6:	d90a      	bls.n	500e <_dtoa_r+0x59e>
    4ff8:	2201      	movs	r2, #1
    4ffa:	2304      	movs	r3, #4
    4ffc:	005b      	lsls	r3, r3, #1
    4ffe:	f103 0014 	add.w	r0, r3, #20
    5002:	42b0      	cmp	r0, r6
    5004:	4611      	mov	r1, r2
    5006:	f102 0201 	add.w	r2, r2, #1
    500a:	d9f7      	bls.n	4ffc <_dtoa_r+0x58c>
    500c:	6461      	str	r1, [r4, #68]	; 0x44
    500e:	4620      	mov	r0, r4
    5010:	f7ff f926 	bl	4260 <_Balloc>
    5014:	2d0e      	cmp	r5, #14
    5016:	9008      	str	r0, [sp, #32]
    5018:	6420      	str	r0, [r4, #64]	; 0x40
    501a:	f63f ae26 	bhi.w	4c6a <_dtoa_r+0x1fa>
    501e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5020:	2b00      	cmp	r3, #0
    5022:	f43f ae22 	beq.w	4c6a <_dtoa_r+0x1fa>
    5026:	9902      	ldr	r1, [sp, #8]
    5028:	2900      	cmp	r1, #0
    502a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    502e:	f340 8241 	ble.w	54b4 <_dtoa_r+0xa44>
    5032:	4bc6      	ldr	r3, [pc, #792]	; (534c <_dtoa_r+0x8dc>)
    5034:	f001 020f 	and.w	r2, r1, #15
    5038:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    503c:	110b      	asrs	r3, r1, #4
    503e:	06de      	lsls	r6, r3, #27
    5040:	ed92 6b00 	vldr	d6, [r2]
    5044:	f140 81fb 	bpl.w	543e <_dtoa_r+0x9ce>
    5048:	4ac1      	ldr	r2, [pc, #772]	; (5350 <_dtoa_r+0x8e0>)
    504a:	ed92 7b08 	vldr	d7, [r2, #32]
    504e:	ec4b ab14 	vmov	d4, sl, fp
    5052:	f003 030f 	and.w	r3, r3, #15
    5056:	2103      	movs	r1, #3
    5058:	ee84 5b07 	vdiv.f64	d5, d4, d7
    505c:	b15b      	cbz	r3, 5076 <_dtoa_r+0x606>
    505e:	4abc      	ldr	r2, [pc, #752]	; (5350 <_dtoa_r+0x8e0>)
    5060:	07dd      	lsls	r5, r3, #31
    5062:	d504      	bpl.n	506e <_dtoa_r+0x5fe>
    5064:	ed92 7b00 	vldr	d7, [r2]
    5068:	3101      	adds	r1, #1
    506a:	ee26 6b07 	vmul.f64	d6, d6, d7
    506e:	105b      	asrs	r3, r3, #1
    5070:	f102 0208 	add.w	r2, r2, #8
    5074:	d1f4      	bne.n	5060 <_dtoa_r+0x5f0>
    5076:	ee85 4b06 	vdiv.f64	d4, d5, d6
    507a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    507c:	b13b      	cbz	r3, 508e <_dtoa_r+0x61e>
    507e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    5082:	eeb4 4bc7 	vcmpe.f64	d4, d7
    5086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    508a:	f100 82b7 	bmi.w	55fc <_dtoa_r+0xb8c>
    508e:	ee07 1a90 	vmov	s15, r1
    5092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    5096:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    509a:	eea6 7b04 	vfma.f64	d7, d6, d4
    509e:	ec53 2b17 	vmov	r2, r3, d7
    50a2:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    50a6:	2f00      	cmp	r7, #0
    50a8:	f000 81a6 	beq.w	53f8 <_dtoa_r+0x988>
    50ac:	9e02      	ldr	r6, [sp, #8]
    50ae:	4639      	mov	r1, r7
    50b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    50b2:	2800      	cmp	r0, #0
    50b4:	f000 824d 	beq.w	5552 <_dtoa_r+0xae2>
    50b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    50bc:	48a3      	ldr	r0, [pc, #652]	; (534c <_dtoa_r+0x8dc>)
    50be:	9d08      	ldr	r5, [sp, #32]
    50c0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    50c4:	ed10 6b02 	vldr	d6, [r0, #-8]
    50c8:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    50cc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    50d0:	ee17 0a10 	vmov	r0, s14
    50d4:	ec43 2b16 	vmov	d6, r2, r3
    50d8:	3030      	adds	r0, #48	; 0x30
    50da:	b2c0      	uxtb	r0, r0
    50dc:	ee35 5b46 	vsub.f64	d5, d5, d6
    50e0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    50e4:	ee34 7b47 	vsub.f64	d7, d4, d7
    50e8:	eeb4 5bc7 	vcmpe.f64	d5, d7
    50ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50f0:	7028      	strb	r0, [r5, #0]
    50f2:	f105 0b01 	add.w	fp, r5, #1
    50f6:	dc32      	bgt.n	515e <_dtoa_r+0x6ee>
    50f8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    50fc:	ee33 6b47 	vsub.f64	d6, d3, d7
    5100:	eeb4 5bc6 	vcmpe.f64	d5, d6
    5104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5108:	f300 82ae 	bgt.w	5668 <_dtoa_r+0xbf8>
    510c:	2901      	cmp	r1, #1
    510e:	f340 81cd 	ble.w	54ac <_dtoa_r+0xa3c>
    5112:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    5116:	9b08      	ldr	r3, [sp, #32]
    5118:	4419      	add	r1, r3
    511a:	e00a      	b.n	5132 <_dtoa_r+0x6c2>
    511c:	ee33 6b47 	vsub.f64	d6, d3, d7
    5120:	eeb4 6bc5 	vcmpe.f64	d6, d5
    5124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5128:	f100 829e 	bmi.w	5668 <_dtoa_r+0xbf8>
    512c:	458b      	cmp	fp, r1
    512e:	f000 81bd 	beq.w	54ac <_dtoa_r+0xa3c>
    5132:	ee27 7b04 	vmul.f64	d7, d7, d4
    5136:	ee25 5b04 	vmul.f64	d5, d5, d4
    513a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    513e:	ee16 3a10 	vmov	r3, s12
    5142:	f103 0030 	add.w	r0, r3, #48	; 0x30
    5146:	b2c0      	uxtb	r0, r0
    5148:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    514c:	ee37 7b46 	vsub.f64	d7, d7, d6
    5150:	eeb4 7bc5 	vcmpe.f64	d7, d5
    5154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5158:	f80b 0b01 	strb.w	r0, [fp], #1
    515c:	d5de      	bpl.n	511c <_dtoa_r+0x6ac>
    515e:	9602      	str	r6, [sp, #8]
    5160:	e5ec      	b.n	4d3c <_dtoa_r+0x2cc>
    5162:	2300      	movs	r3, #0
    5164:	9309      	str	r3, [sp, #36]	; 0x24
    5166:	f1b8 0f00 	cmp.w	r8, #0
    516a:	f340 8170 	ble.w	544e <_dtoa_r+0x9de>
    516e:	4646      	mov	r6, r8
    5170:	4645      	mov	r5, r8
    5172:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5176:	4647      	mov	r7, r8
    5178:	e73a      	b.n	4ff0 <_dtoa_r+0x580>
    517a:	2301      	movs	r3, #1
    517c:	9309      	str	r3, [sp, #36]	; 0x24
    517e:	e7f2      	b.n	5166 <_dtoa_r+0x6f6>
    5180:	9507      	str	r5, [sp, #28]
    5182:	9a05      	ldr	r2, [sp, #20]
    5184:	9907      	ldr	r1, [sp, #28]
    5186:	4620      	mov	r0, r4
    5188:	f7ff f9ca 	bl	4520 <__pow5mult>
    518c:	4605      	mov	r5, r0
    518e:	e677      	b.n	4e80 <_dtoa_r+0x410>
    5190:	2f00      	cmp	r7, #0
    5192:	f73f ad79 	bgt.w	4c88 <_dtoa_r+0x218>
    5196:	f040 8142 	bne.w	541e <_dtoa_r+0x9ae>
    519a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    519e:	ee24 4b07 	vmul.f64	d4, d4, d7
    51a2:	ec4b ab17 	vmov	d7, sl, fp
    51a6:	eeb4 4bc7 	vcmpe.f64	d4, d7
    51aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51ae:	463e      	mov	r6, r7
    51b0:	9705      	str	r7, [sp, #20]
    51b2:	f2c0 80e5 	blt.w	5380 <_dtoa_r+0x910>
    51b6:	ea6f 0308 	mvn.w	r3, r8
    51ba:	f8dd b020 	ldr.w	fp, [sp, #32]
    51be:	9302      	str	r3, [sp, #8]
    51c0:	9905      	ldr	r1, [sp, #20]
    51c2:	4620      	mov	r0, r4
    51c4:	f7ff f872 	bl	42ac <_Bfree>
    51c8:	2e00      	cmp	r6, #0
    51ca:	f43f adb7 	beq.w	4d3c <_dtoa_r+0x2cc>
    51ce:	e6f5      	b.n	4fbc <_dtoa_r+0x54c>
    51d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    51d2:	2a00      	cmp	r2, #0
    51d4:	f000 8202 	beq.w	55dc <_dtoa_r+0xb6c>
    51d8:	9a05      	ldr	r2, [sp, #20]
    51da:	920e      	str	r2, [sp, #56]	; 0x38
    51dc:	9a06      	ldr	r2, [sp, #24]
    51de:	920a      	str	r2, [sp, #40]	; 0x28
    51e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    51e4:	e5d3      	b.n	4d8e <_dtoa_r+0x31e>
    51e6:	201c      	movs	r0, #28
    51e8:	e674      	b.n	4ed4 <_dtoa_r+0x464>
    51ea:	9b01      	ldr	r3, [sp, #4]
    51ec:	2b01      	cmp	r3, #1
    51ee:	f340 8240 	ble.w	5672 <_dtoa_r+0xc02>
    51f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    51f4:	9307      	str	r3, [sp, #28]
    51f6:	2001      	movs	r0, #1
    51f8:	e660      	b.n	4ebc <_dtoa_r+0x44c>
    51fa:	4631      	mov	r1, r6
    51fc:	2300      	movs	r3, #0
    51fe:	220a      	movs	r2, #10
    5200:	4620      	mov	r0, r4
    5202:	f7ff f85d 	bl	42c0 <__multadd>
    5206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5208:	2b00      	cmp	r3, #0
    520a:	4606      	mov	r6, r0
    520c:	f340 824d 	ble.w	56aa <_dtoa_r+0xc3a>
    5210:	461f      	mov	r7, r3
    5212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5214:	2b00      	cmp	r3, #0
    5216:	dd05      	ble.n	5224 <_dtoa_r+0x7b4>
    5218:	4631      	mov	r1, r6
    521a:	461a      	mov	r2, r3
    521c:	4620      	mov	r0, r4
    521e:	f7ff f9cf 	bl	45c0 <__lshift>
    5222:	4606      	mov	r6, r0
    5224:	9b07      	ldr	r3, [sp, #28]
    5226:	2b00      	cmp	r3, #0
    5228:	f040 816e 	bne.w	5508 <_dtoa_r+0xa98>
    522c:	46b0      	mov	r8, r6
    522e:	9b08      	ldr	r3, [sp, #32]
    5230:	3f01      	subs	r7, #1
    5232:	19da      	adds	r2, r3, r7
    5234:	9209      	str	r2, [sp, #36]	; 0x24
    5236:	f00a 0201 	and.w	r2, sl, #1
    523a:	920a      	str	r2, [sp, #40]	; 0x28
    523c:	461f      	mov	r7, r3
    523e:	f8dd b014 	ldr.w	fp, [sp, #20]
    5242:	4628      	mov	r0, r5
    5244:	4659      	mov	r1, fp
    5246:	f7ff fb7d 	bl	4944 <quorem>
    524a:	4631      	mov	r1, r6
    524c:	4682      	mov	sl, r0
    524e:	4628      	mov	r0, r5
    5250:	f7ff fa0e 	bl	4670 <__mcmp>
    5254:	4642      	mov	r2, r8
    5256:	4659      	mov	r1, fp
    5258:	4681      	mov	r9, r0
    525a:	4620      	mov	r0, r4
    525c:	f7ff fa2a 	bl	46b4 <__mdiff>
    5260:	68c3      	ldr	r3, [r0, #12]
    5262:	4683      	mov	fp, r0
    5264:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    5268:	2b00      	cmp	r3, #0
    526a:	d149      	bne.n	5300 <_dtoa_r+0x890>
    526c:	4601      	mov	r1, r0
    526e:	4628      	mov	r0, r5
    5270:	9207      	str	r2, [sp, #28]
    5272:	f7ff f9fd 	bl	4670 <__mcmp>
    5276:	4659      	mov	r1, fp
    5278:	9006      	str	r0, [sp, #24]
    527a:	4620      	mov	r0, r4
    527c:	f7ff f816 	bl	42ac <_Bfree>
    5280:	9b06      	ldr	r3, [sp, #24]
    5282:	9a07      	ldr	r2, [sp, #28]
    5284:	b92b      	cbnz	r3, 5292 <_dtoa_r+0x822>
    5286:	9901      	ldr	r1, [sp, #4]
    5288:	b919      	cbnz	r1, 5292 <_dtoa_r+0x822>
    528a:	990a      	ldr	r1, [sp, #40]	; 0x28
    528c:	2900      	cmp	r1, #0
    528e:	f000 81f5 	beq.w	567c <_dtoa_r+0xc0c>
    5292:	f1b9 0f00 	cmp.w	r9, #0
    5296:	f2c0 80df 	blt.w	5458 <_dtoa_r+0x9e8>
    529a:	d105      	bne.n	52a8 <_dtoa_r+0x838>
    529c:	9901      	ldr	r1, [sp, #4]
    529e:	b919      	cbnz	r1, 52a8 <_dtoa_r+0x838>
    52a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    52a2:	2900      	cmp	r1, #0
    52a4:	f000 80d8 	beq.w	5458 <_dtoa_r+0x9e8>
    52a8:	2b00      	cmp	r3, #0
    52aa:	f300 8141 	bgt.w	5530 <_dtoa_r+0xac0>
    52ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    52b0:	703a      	strb	r2, [r7, #0]
    52b2:	f107 0901 	add.w	r9, r7, #1
    52b6:	429f      	cmp	r7, r3
    52b8:	46cb      	mov	fp, r9
    52ba:	f000 8146 	beq.w	554a <_dtoa_r+0xada>
    52be:	4629      	mov	r1, r5
    52c0:	2300      	movs	r3, #0
    52c2:	220a      	movs	r2, #10
    52c4:	4620      	mov	r0, r4
    52c6:	f7fe fffb 	bl	42c0 <__multadd>
    52ca:	4546      	cmp	r6, r8
    52cc:	4605      	mov	r5, r0
    52ce:	4631      	mov	r1, r6
    52d0:	f04f 0300 	mov.w	r3, #0
    52d4:	f04f 020a 	mov.w	r2, #10
    52d8:	4620      	mov	r0, r4
    52da:	d00b      	beq.n	52f4 <_dtoa_r+0x884>
    52dc:	f7fe fff0 	bl	42c0 <__multadd>
    52e0:	4641      	mov	r1, r8
    52e2:	4606      	mov	r6, r0
    52e4:	2300      	movs	r3, #0
    52e6:	220a      	movs	r2, #10
    52e8:	4620      	mov	r0, r4
    52ea:	f7fe ffe9 	bl	42c0 <__multadd>
    52ee:	464f      	mov	r7, r9
    52f0:	4680      	mov	r8, r0
    52f2:	e7a4      	b.n	523e <_dtoa_r+0x7ce>
    52f4:	f7fe ffe4 	bl	42c0 <__multadd>
    52f8:	464f      	mov	r7, r9
    52fa:	4606      	mov	r6, r0
    52fc:	4680      	mov	r8, r0
    52fe:	e79e      	b.n	523e <_dtoa_r+0x7ce>
    5300:	4601      	mov	r1, r0
    5302:	4620      	mov	r0, r4
    5304:	9206      	str	r2, [sp, #24]
    5306:	f7fe ffd1 	bl	42ac <_Bfree>
    530a:	2301      	movs	r3, #1
    530c:	9a06      	ldr	r2, [sp, #24]
    530e:	e7c0      	b.n	5292 <_dtoa_r+0x822>
    5310:	9905      	ldr	r1, [sp, #20]
    5312:	4628      	mov	r0, r5
    5314:	f7ff f9ac 	bl	4670 <__mcmp>
    5318:	2800      	cmp	r0, #0
    531a:	f6bf adf8 	bge.w	4f0e <_dtoa_r+0x49e>
    531e:	4629      	mov	r1, r5
    5320:	9d02      	ldr	r5, [sp, #8]
    5322:	2300      	movs	r3, #0
    5324:	3d01      	subs	r5, #1
    5326:	220a      	movs	r2, #10
    5328:	4620      	mov	r0, r4
    532a:	9502      	str	r5, [sp, #8]
    532c:	f7fe ffc8 	bl	42c0 <__multadd>
    5330:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5332:	4605      	mov	r5, r0
    5334:	2b00      	cmp	r3, #0
    5336:	f47f af60 	bne.w	51fa <_dtoa_r+0x78a>
    533a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    533c:	2b00      	cmp	r3, #0
    533e:	f340 81ad 	ble.w	569c <_dtoa_r+0xc2c>
    5342:	461f      	mov	r7, r3
    5344:	e5ea      	b.n	4f1c <_dtoa_r+0x4ac>
    5346:	9d07      	ldr	r5, [sp, #28]
    5348:	e59a      	b.n	4e80 <_dtoa_r+0x410>
    534a:	bf00      	nop
    534c:	200002a8 	.word	0x200002a8
    5350:	20000280 	.word	0x20000280
    5354:	9b01      	ldr	r3, [sp, #4]
    5356:	2b02      	cmp	r3, #2
    5358:	f77f addc 	ble.w	4f14 <_dtoa_r+0x4a4>
    535c:	2f00      	cmp	r7, #0
    535e:	f040 8169 	bne.w	5634 <_dtoa_r+0xbc4>
    5362:	463b      	mov	r3, r7
    5364:	9905      	ldr	r1, [sp, #20]
    5366:	2205      	movs	r2, #5
    5368:	4620      	mov	r0, r4
    536a:	f7fe ffa9 	bl	42c0 <__multadd>
    536e:	4601      	mov	r1, r0
    5370:	9005      	str	r0, [sp, #20]
    5372:	4628      	mov	r0, r5
    5374:	f7ff f97c 	bl	4670 <__mcmp>
    5378:	2800      	cmp	r0, #0
    537a:	9507      	str	r5, [sp, #28]
    537c:	f77f af1b 	ble.w	51b6 <_dtoa_r+0x746>
    5380:	9a02      	ldr	r2, [sp, #8]
    5382:	9908      	ldr	r1, [sp, #32]
    5384:	2331      	movs	r3, #49	; 0x31
    5386:	3201      	adds	r2, #1
    5388:	9202      	str	r2, [sp, #8]
    538a:	700b      	strb	r3, [r1, #0]
    538c:	f101 0b01 	add.w	fp, r1, #1
    5390:	e716      	b.n	51c0 <_dtoa_r+0x750>
    5392:	9a02      	ldr	r2, [sp, #8]
    5394:	3201      	adds	r2, #1
    5396:	9202      	str	r2, [sp, #8]
    5398:	9a08      	ldr	r2, [sp, #32]
    539a:	2331      	movs	r3, #49	; 0x31
    539c:	7013      	strb	r3, [r2, #0]
    539e:	e5fd      	b.n	4f9c <_dtoa_r+0x52c>
    53a0:	2301      	movs	r3, #1
    53a2:	9309      	str	r3, [sp, #36]	; 0x24
    53a4:	e61b      	b.n	4fde <_dtoa_r+0x56e>
    53a6:	f1ba 0f00 	cmp.w	sl, #0
    53aa:	f47f ad7c 	bne.w	4ea6 <_dtoa_r+0x436>
    53ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
    53b2:	2b00      	cmp	r3, #0
    53b4:	f040 811b 	bne.w	55ee <_dtoa_r+0xb7e>
    53b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    53bc:	0d1b      	lsrs	r3, r3, #20
    53be:	051b      	lsls	r3, r3, #20
    53c0:	2b00      	cmp	r3, #0
    53c2:	f000 8154 	beq.w	566e <_dtoa_r+0xbfe>
    53c6:	9b06      	ldr	r3, [sp, #24]
    53c8:	3301      	adds	r3, #1
    53ca:	9306      	str	r3, [sp, #24]
    53cc:	2301      	movs	r3, #1
    53ce:	f109 0901 	add.w	r9, r9, #1
    53d2:	9307      	str	r3, [sp, #28]
    53d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    53d6:	2001      	movs	r0, #1
    53d8:	2b00      	cmp	r3, #0
    53da:	f43f ad6f 	beq.w	4ebc <_dtoa_r+0x44c>
    53de:	e564      	b.n	4eaa <_dtoa_r+0x43a>
    53e0:	ee07 1a90 	vmov	s15, r1
    53e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    53e8:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    53ec:	eea4 7b06 	vfma.f64	d7, d4, d6
    53f0:	ec53 2b17 	vmov	r2, r3, d7
    53f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    53f8:	ec43 2b16 	vmov	d6, r2, r3
    53fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    5400:	ee34 7b47 	vsub.f64	d7, d4, d7
    5404:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    540c:	f300 80dd 	bgt.w	55ca <_dtoa_r+0xb5a>
    5410:	eeb1 6b46 	vneg.f64	d6, d6
    5414:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    541c:	d546      	bpl.n	54ac <_dtoa_r+0xa3c>
    541e:	2300      	movs	r3, #0
    5420:	9305      	str	r3, [sp, #20]
    5422:	461e      	mov	r6, r3
    5424:	e6c7      	b.n	51b6 <_dtoa_r+0x746>
    5426:	9808      	ldr	r0, [sp, #32]
    5428:	f7ff bb59 	b.w	4ade <_dtoa_r+0x6e>
    542c:	9b05      	ldr	r3, [sp, #20]
    542e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5430:	9205      	str	r2, [sp, #20]
    5432:	1ad3      	subs	r3, r2, r3
    5434:	4419      	add	r1, r3
    5436:	2300      	movs	r3, #0
    5438:	910b      	str	r1, [sp, #44]	; 0x2c
    543a:	930e      	str	r3, [sp, #56]	; 0x38
    543c:	e4a1      	b.n	4d82 <_dtoa_r+0x312>
    543e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    5442:	2102      	movs	r1, #2
    5444:	e60a      	b.n	505c <_dtoa_r+0x5ec>
    5446:	463d      	mov	r5, r7
    5448:	2100      	movs	r1, #0
    544a:	6461      	str	r1, [r4, #68]	; 0x44
    544c:	e5df      	b.n	500e <_dtoa_r+0x59e>
    544e:	2501      	movs	r5, #1
    5450:	950d      	str	r5, [sp, #52]	; 0x34
    5452:	462f      	mov	r7, r5
    5454:	46a8      	mov	r8, r5
    5456:	e7f7      	b.n	5448 <_dtoa_r+0x9d8>
    5458:	2b00      	cmp	r3, #0
    545a:	4691      	mov	r9, r2
    545c:	dd11      	ble.n	5482 <_dtoa_r+0xa12>
    545e:	4629      	mov	r1, r5
    5460:	2201      	movs	r2, #1
    5462:	4620      	mov	r0, r4
    5464:	f7ff f8ac 	bl	45c0 <__lshift>
    5468:	9905      	ldr	r1, [sp, #20]
    546a:	4605      	mov	r5, r0
    546c:	f7ff f900 	bl	4670 <__mcmp>
    5470:	2800      	cmp	r0, #0
    5472:	f340 810c 	ble.w	568e <_dtoa_r+0xc1e>
    5476:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    547a:	f000 80dd 	beq.w	5638 <_dtoa_r+0xbc8>
    547e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    5482:	46b2      	mov	sl, r6
    5484:	f887 9000 	strb.w	r9, [r7]
    5488:	f107 0b01 	add.w	fp, r7, #1
    548c:	4646      	mov	r6, r8
    548e:	9507      	str	r5, [sp, #28]
    5490:	e584      	b.n	4f9c <_dtoa_r+0x52c>
    5492:	d104      	bne.n	549e <_dtoa_r+0xa2e>
    5494:	f019 0f01 	tst.w	r9, #1
    5498:	d001      	beq.n	549e <_dtoa_r+0xa2e>
    549a:	e56e      	b.n	4f7a <_dtoa_r+0x50a>
    549c:	4693      	mov	fp, r2
    549e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    54a2:	2b30      	cmp	r3, #48	; 0x30
    54a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    54a8:	d0f8      	beq.n	549c <_dtoa_r+0xa2c>
    54aa:	e577      	b.n	4f9c <_dtoa_r+0x52c>
    54ac:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    54b0:	f7ff bbdb 	b.w	4c6a <_dtoa_r+0x1fa>
    54b4:	9b02      	ldr	r3, [sp, #8]
    54b6:	425b      	negs	r3, r3
    54b8:	2b00      	cmp	r3, #0
    54ba:	f000 809b 	beq.w	55f4 <_dtoa_r+0xb84>
    54be:	4a8b      	ldr	r2, [pc, #556]	; (56ec <_dtoa_r+0xc7c>)
    54c0:	f003 010f 	and.w	r1, r3, #15
    54c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    54c8:	ed92 7b00 	vldr	d7, [r2]
    54cc:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    54d0:	111b      	asrs	r3, r3, #4
    54d2:	ee26 4b07 	vmul.f64	d4, d6, d7
    54d6:	f000 80e6 	beq.w	56a6 <_dtoa_r+0xc36>
    54da:	4a85      	ldr	r2, [pc, #532]	; (56f0 <_dtoa_r+0xc80>)
    54dc:	2102      	movs	r1, #2
    54de:	07d8      	lsls	r0, r3, #31
    54e0:	d504      	bpl.n	54ec <_dtoa_r+0xa7c>
    54e2:	ed92 7b00 	vldr	d7, [r2]
    54e6:	3101      	adds	r1, #1
    54e8:	ee24 4b07 	vmul.f64	d4, d4, d7
    54ec:	105b      	asrs	r3, r3, #1
    54ee:	f102 0208 	add.w	r2, r2, #8
    54f2:	d1f4      	bne.n	54de <_dtoa_r+0xa6e>
    54f4:	e5c1      	b.n	507a <_dtoa_r+0x60a>
    54f6:	9908      	ldr	r1, [sp, #32]
    54f8:	2230      	movs	r2, #48	; 0x30
    54fa:	700a      	strb	r2, [r1, #0]
    54fc:	9a02      	ldr	r2, [sp, #8]
    54fe:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    5502:	3201      	adds	r2, #1
    5504:	9202      	str	r2, [sp, #8]
    5506:	e417      	b.n	4d38 <_dtoa_r+0x2c8>
    5508:	6871      	ldr	r1, [r6, #4]
    550a:	4620      	mov	r0, r4
    550c:	f7fe fea8 	bl	4260 <_Balloc>
    5510:	6933      	ldr	r3, [r6, #16]
    5512:	1c9a      	adds	r2, r3, #2
    5514:	4680      	mov	r8, r0
    5516:	0092      	lsls	r2, r2, #2
    5518:	f106 010c 	add.w	r1, r6, #12
    551c:	300c      	adds	r0, #12
    551e:	f7fd ff55 	bl	33cc <memcpy>
    5522:	4641      	mov	r1, r8
    5524:	2201      	movs	r2, #1
    5526:	4620      	mov	r0, r4
    5528:	f7ff f84a 	bl	45c0 <__lshift>
    552c:	4680      	mov	r8, r0
    552e:	e67e      	b.n	522e <_dtoa_r+0x7be>
    5530:	2a39      	cmp	r2, #57	; 0x39
    5532:	f000 8081 	beq.w	5638 <_dtoa_r+0xbc8>
    5536:	f102 0901 	add.w	r9, r2, #1
    553a:	46b2      	mov	sl, r6
    553c:	f887 9000 	strb.w	r9, [r7]
    5540:	f107 0b01 	add.w	fp, r7, #1
    5544:	4646      	mov	r6, r8
    5546:	9507      	str	r5, [sp, #28]
    5548:	e528      	b.n	4f9c <_dtoa_r+0x52c>
    554a:	46b2      	mov	sl, r6
    554c:	4691      	mov	r9, r2
    554e:	4646      	mov	r6, r8
    5550:	e507      	b.n	4f62 <_dtoa_r+0x4f2>
    5552:	4866      	ldr	r0, [pc, #408]	; (56ec <_dtoa_r+0xc7c>)
    5554:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    5558:	1e4d      	subs	r5, r1, #1
    555a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    555e:	ec43 2b17 	vmov	d7, r2, r3
    5562:	ed90 3b00 	vldr	d3, [r0]
    5566:	ee16 3a10 	vmov	r3, s12
    556a:	ee23 3b07 	vmul.f64	d3, d3, d7
    556e:	9808      	ldr	r0, [sp, #32]
    5570:	3330      	adds	r3, #48	; 0x30
    5572:	2901      	cmp	r1, #1
    5574:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    5578:	7003      	strb	r3, [r0, #0]
    557a:	f100 0b01 	add.w	fp, r0, #1
    557e:	ee34 7b46 	vsub.f64	d7, d4, d6
    5582:	d014      	beq.n	55ae <_dtoa_r+0xb3e>
    5584:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    5588:	9b08      	ldr	r3, [sp, #32]
    558a:	4419      	add	r1, r3
    558c:	465b      	mov	r3, fp
    558e:	ee27 7b05 	vmul.f64	d7, d7, d5
    5592:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    5596:	ee16 2a10 	vmov	r2, s12
    559a:	3230      	adds	r2, #48	; 0x30
    559c:	f803 2b01 	strb.w	r2, [r3], #1
    55a0:	4299      	cmp	r1, r3
    55a2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    55a6:	ee37 7b46 	vsub.f64	d7, d7, d6
    55aa:	d1f0      	bne.n	558e <_dtoa_r+0xb1e>
    55ac:	44ab      	add	fp, r5
    55ae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    55b2:	ee33 5b06 	vadd.f64	d5, d3, d6
    55b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    55ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55be:	d543      	bpl.n	5648 <_dtoa_r+0xbd8>
    55c0:	9602      	str	r6, [sp, #8]
    55c2:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    55c6:	f7ff bbaa 	b.w	4d1e <_dtoa_r+0x2ae>
    55ca:	2300      	movs	r3, #0
    55cc:	9305      	str	r3, [sp, #20]
    55ce:	461e      	mov	r6, r3
    55d0:	e6d6      	b.n	5380 <_dtoa_r+0x910>
    55d2:	1bdb      	subs	r3, r3, r7
    55d4:	930a      	str	r3, [sp, #40]	; 0x28
    55d6:	2300      	movs	r3, #0
    55d8:	f7ff bbd9 	b.w	4d8e <_dtoa_r+0x31e>
    55dc:	9a05      	ldr	r2, [sp, #20]
    55de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    55e0:	920e      	str	r2, [sp, #56]	; 0x38
    55e2:	9a06      	ldr	r2, [sp, #24]
    55e4:	920a      	str	r2, [sp, #40]	; 0x28
    55e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    55ea:	f7ff bbd0 	b.w	4d8e <_dtoa_r+0x31e>
    55ee:	2300      	movs	r3, #0
    55f0:	9307      	str	r3, [sp, #28]
    55f2:	e6ef      	b.n	53d4 <_dtoa_r+0x964>
    55f4:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    55f8:	2102      	movs	r1, #2
    55fa:	e53e      	b.n	507a <_dtoa_r+0x60a>
    55fc:	2f00      	cmp	r7, #0
    55fe:	f43f aeef 	beq.w	53e0 <_dtoa_r+0x970>
    5602:	980d      	ldr	r0, [sp, #52]	; 0x34
    5604:	2800      	cmp	r0, #0
    5606:	f77f af51 	ble.w	54ac <_dtoa_r+0xa3c>
    560a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    560e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    5612:	3101      	adds	r1, #1
    5614:	ee06 1a90 	vmov	s13, r1
    5618:	ee24 4b05 	vmul.f64	d4, d4, d5
    561c:	9b02      	ldr	r3, [sp, #8]
    561e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    5622:	1e5e      	subs	r6, r3, #1
    5624:	eea4 7b06 	vfma.f64	d7, d4, d6
    5628:	ec53 2b17 	vmov	r2, r3, d7
    562c:	4601      	mov	r1, r0
    562e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    5632:	e53d      	b.n	50b0 <_dtoa_r+0x640>
    5634:	9507      	str	r5, [sp, #28]
    5636:	e5be      	b.n	51b6 <_dtoa_r+0x746>
    5638:	2239      	movs	r2, #57	; 0x39
    563a:	46b2      	mov	sl, r6
    563c:	9507      	str	r5, [sp, #28]
    563e:	4646      	mov	r6, r8
    5640:	703a      	strb	r2, [r7, #0]
    5642:	f107 0b01 	add.w	fp, r7, #1
    5646:	e49a      	b.n	4f7e <_dtoa_r+0x50e>
    5648:	ee36 6b43 	vsub.f64	d6, d6, d3
    564c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    5650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5654:	dc01      	bgt.n	565a <_dtoa_r+0xbea>
    5656:	e729      	b.n	54ac <_dtoa_r+0xa3c>
    5658:	4693      	mov	fp, r2
    565a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    565e:	2b30      	cmp	r3, #48	; 0x30
    5660:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    5664:	d0f8      	beq.n	5658 <_dtoa_r+0xbe8>
    5666:	e57a      	b.n	515e <_dtoa_r+0x6ee>
    5668:	9602      	str	r6, [sp, #8]
    566a:	f7ff bb58 	b.w	4d1e <_dtoa_r+0x2ae>
    566e:	9307      	str	r3, [sp, #28]
    5670:	e6b0      	b.n	53d4 <_dtoa_r+0x964>
    5672:	f1ba 0f00 	cmp.w	sl, #0
    5676:	f47f adbc 	bne.w	51f2 <_dtoa_r+0x782>
    567a:	e698      	b.n	53ae <_dtoa_r+0x93e>
    567c:	2a39      	cmp	r2, #57	; 0x39
    567e:	46cb      	mov	fp, r9
    5680:	4691      	mov	r9, r2
    5682:	d0d9      	beq.n	5638 <_dtoa_r+0xbc8>
    5684:	f1bb 0f00 	cmp.w	fp, #0
    5688:	f73f aef9 	bgt.w	547e <_dtoa_r+0xa0e>
    568c:	e6f9      	b.n	5482 <_dtoa_r+0xa12>
    568e:	f47f aef8 	bne.w	5482 <_dtoa_r+0xa12>
    5692:	f019 0f01 	tst.w	r9, #1
    5696:	f43f aef4 	beq.w	5482 <_dtoa_r+0xa12>
    569a:	e6ec      	b.n	5476 <_dtoa_r+0xa06>
    569c:	9b01      	ldr	r3, [sp, #4]
    569e:	2b02      	cmp	r3, #2
    56a0:	dc08      	bgt.n	56b4 <_dtoa_r+0xc44>
    56a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    56a4:	e43a      	b.n	4f1c <_dtoa_r+0x4ac>
    56a6:	2102      	movs	r1, #2
    56a8:	e4e7      	b.n	507a <_dtoa_r+0x60a>
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	2b02      	cmp	r3, #2
    56ae:	dc01      	bgt.n	56b4 <_dtoa_r+0xc44>
    56b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    56b2:	e5ae      	b.n	5212 <_dtoa_r+0x7a2>
    56b4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    56b6:	e651      	b.n	535c <_dtoa_r+0x8ec>
    56b8:	2301      	movs	r3, #1
    56ba:	930e      	str	r3, [sp, #56]	; 0x38
    56bc:	f7ff baa1 	b.w	4c02 <_dtoa_r+0x192>
    56c0:	f43f ac0f 	beq.w	4ee2 <_dtoa_r+0x472>
    56c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    56c8:	e404      	b.n	4ed4 <_dtoa_r+0x464>
    56ca:	2500      	movs	r5, #0
    56cc:	6465      	str	r5, [r4, #68]	; 0x44
    56ce:	4629      	mov	r1, r5
    56d0:	4620      	mov	r0, r4
    56d2:	f7fe fdc5 	bl	4260 <_Balloc>
    56d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    56da:	2301      	movs	r3, #1
    56dc:	9008      	str	r0, [sp, #32]
    56de:	46a8      	mov	r8, r5
    56e0:	6420      	str	r0, [r4, #64]	; 0x40
    56e2:	970d      	str	r7, [sp, #52]	; 0x34
    56e4:	9309      	str	r3, [sp, #36]	; 0x24
    56e6:	f7ff bac0 	b.w	4c6a <_dtoa_r+0x1fa>
    56ea:	bf00      	nop
    56ec:	200002a8 	.word	0x200002a8
    56f0:	20000280 	.word	0x20000280
    56f4:	00000000 	.word	0x00000000

000056f8 <_svfprintf_r>:
    56f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56fc:	ed2d 8b06 	vpush	{d8-d10}
    5700:	b0b9      	sub	sp, #228	; 0xe4
    5702:	460c      	mov	r4, r1
    5704:	9103      	str	r1, [sp, #12]
    5706:	4692      	mov	sl, r2
    5708:	9309      	str	r3, [sp, #36]	; 0x24
    570a:	9005      	str	r0, [sp, #20]
    570c:	f7fe fd44 	bl	4198 <_localeconv_r>
    5710:	6803      	ldr	r3, [r0, #0]
    5712:	9310      	str	r3, [sp, #64]	; 0x40
    5714:	4618      	mov	r0, r3
    5716:	f7fe fa13 	bl	3b40 <strlen>
    571a:	89a3      	ldrh	r3, [r4, #12]
    571c:	900f      	str	r0, [sp, #60]	; 0x3c
    571e:	0619      	lsls	r1, r3, #24
    5720:	d503      	bpl.n	572a <_svfprintf_r+0x32>
    5722:	6923      	ldr	r3, [r4, #16]
    5724:	2b00      	cmp	r3, #0
    5726:	f001 807d 	beq.w	6824 <_svfprintf_r+0x112c>
    572a:	2300      	movs	r3, #0
    572c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 59c0 <_svfprintf_r+0x2c8>
    5730:	ed9f 9ba5 	vldr	d9, [pc, #660]	; 59c8 <_svfprintf_r+0x2d0>
    5734:	930d      	str	r3, [sp, #52]	; 0x34
    5736:	931d      	str	r3, [sp, #116]	; 0x74
    5738:	931c      	str	r3, [sp, #112]	; 0x70
    573a:	9311      	str	r3, [sp, #68]	; 0x44
    573c:	9306      	str	r3, [sp, #24]
    573e:	ab28      	add	r3, sp, #160	; 0xa0
    5740:	931b      	str	r3, [sp, #108]	; 0x6c
    5742:	4699      	mov	r9, r3
    5744:	f89a 3000 	ldrb.w	r3, [sl]
    5748:	4654      	mov	r4, sl
    574a:	b1eb      	cbz	r3, 5788 <_svfprintf_r+0x90>
    574c:	2b25      	cmp	r3, #37	; 0x25
    574e:	d102      	bne.n	5756 <_svfprintf_r+0x5e>
    5750:	e01a      	b.n	5788 <_svfprintf_r+0x90>
    5752:	2b25      	cmp	r3, #37	; 0x25
    5754:	d003      	beq.n	575e <_svfprintf_r+0x66>
    5756:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    575a:	2b00      	cmp	r3, #0
    575c:	d1f9      	bne.n	5752 <_svfprintf_r+0x5a>
    575e:	ebca 0504 	rsb	r5, sl, r4
    5762:	b18d      	cbz	r5, 5788 <_svfprintf_r+0x90>
    5764:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    5766:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    5768:	f8c9 a000 	str.w	sl, [r9]
    576c:	3301      	adds	r3, #1
    576e:	442a      	add	r2, r5
    5770:	2b07      	cmp	r3, #7
    5772:	f8c9 5004 	str.w	r5, [r9, #4]
    5776:	921d      	str	r2, [sp, #116]	; 0x74
    5778:	931c      	str	r3, [sp, #112]	; 0x70
    577a:	f300 80a3 	bgt.w	58c4 <_svfprintf_r+0x1cc>
    577e:	f109 0908 	add.w	r9, r9, #8
    5782:	9b06      	ldr	r3, [sp, #24]
    5784:	442b      	add	r3, r5
    5786:	9306      	str	r3, [sp, #24]
    5788:	7823      	ldrb	r3, [r4, #0]
    578a:	2b00      	cmp	r3, #0
    578c:	f000 80a3 	beq.w	58d6 <_svfprintf_r+0x1de>
    5790:	2300      	movs	r3, #0
    5792:	461a      	mov	r2, r3
    5794:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5798:	4619      	mov	r1, r3
    579a:	9307      	str	r3, [sp, #28]
    579c:	469b      	mov	fp, r3
    579e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    57a2:	7863      	ldrb	r3, [r4, #1]
    57a4:	f104 0a01 	add.w	sl, r4, #1
    57a8:	4645      	mov	r5, r8
    57aa:	f10a 0a01 	add.w	sl, sl, #1
    57ae:	f1a3 0020 	sub.w	r0, r3, #32
    57b2:	2858      	cmp	r0, #88	; 0x58
    57b4:	f200 83f8 	bhi.w	5fa8 <_svfprintf_r+0x8b0>
    57b8:	e8df f010 	tbh	[pc, r0, lsl #1]
    57bc:	03f60363 	.word	0x03f60363
    57c0:	036b03f6 	.word	0x036b03f6
    57c4:	03f603f6 	.word	0x03f603f6
    57c8:	03f603f6 	.word	0x03f603f6
    57cc:	03f603f6 	.word	0x03f603f6
    57d0:	037e0370 	.word	0x037e0370
    57d4:	005d03f6 	.word	0x005d03f6
    57d8:	03f600df 	.word	0x03f600df
    57dc:	010c00fb 	.word	0x010c00fb
    57e0:	010c010c 	.word	0x010c010c
    57e4:	010c010c 	.word	0x010c010c
    57e8:	010c010c 	.word	0x010c010c
    57ec:	010c010c 	.word	0x010c010c
    57f0:	03f603f6 	.word	0x03f603f6
    57f4:	03f603f6 	.word	0x03f603f6
    57f8:	03f603f6 	.word	0x03f603f6
    57fc:	03f603f6 	.word	0x03f603f6
    5800:	03f603f6 	.word	0x03f603f6
    5804:	015e011c 	.word	0x015e011c
    5808:	015e03f6 	.word	0x015e03f6
    580c:	03f603f6 	.word	0x03f603f6
    5810:	03f603f6 	.word	0x03f603f6
    5814:	03f602a1 	.word	0x03f602a1
    5818:	02a603f6 	.word	0x02a603f6
    581c:	03f603f6 	.word	0x03f603f6
    5820:	03f603f6 	.word	0x03f603f6
    5824:	02d803f6 	.word	0x02d803f6
    5828:	03f603f6 	.word	0x03f603f6
    582c:	03f60305 	.word	0x03f60305
    5830:	03f603f6 	.word	0x03f603f6
    5834:	03f603f6 	.word	0x03f603f6
    5838:	03f603f6 	.word	0x03f603f6
    583c:	03f603f6 	.word	0x03f603f6
    5840:	034303f6 	.word	0x034303f6
    5844:	015e0356 	.word	0x015e0356
    5848:	015e015e 	.word	0x015e015e
    584c:	0356035e 	.word	0x0356035e
    5850:	03f603f6 	.word	0x03f603f6
    5854:	03f603a4 	.word	0x03f603a4
    5858:	00a203b1 	.word	0x00a203b1
    585c:	03c30062 	.word	0x03c30062
    5860:	03c803f6 	.word	0x03c803f6
    5864:	038303f6 	.word	0x038303f6
    5868:	03f603f6 	.word	0x03f603f6
    586c:	038b      	.short	0x038b
    586e:	9807      	ldr	r0, [sp, #28]
    5870:	9309      	str	r3, [sp, #36]	; 0x24
    5872:	4240      	negs	r0, r0
    5874:	9007      	str	r0, [sp, #28]
    5876:	f04b 0b04 	orr.w	fp, fp, #4
    587a:	f89a 3000 	ldrb.w	r3, [sl]
    587e:	e794      	b.n	57aa <_svfprintf_r+0xb2>
    5880:	46a8      	mov	r8, r5
    5882:	9809      	ldr	r0, [sp, #36]	; 0x24
    5884:	2100      	movs	r1, #0
    5886:	2330      	movs	r3, #48	; 0x30
    5888:	2278      	movs	r2, #120	; 0x78
    588a:	4588      	cmp	r8, r1
    588c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    5890:	6804      	ldr	r4, [r0, #0]
    5892:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    5896:	f100 0704 	add.w	r7, r0, #4
    589a:	f04f 0500 	mov.w	r5, #0
    589e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    58a2:	f04b 0302 	orr.w	r3, fp, #2
    58a6:	f2c0 839c 	blt.w	5fe2 <_svfprintf_r+0x8ea>
    58aa:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    58ae:	f043 0b02 	orr.w	fp, r3, #2
    58b2:	ea54 0305 	orrs.w	r3, r4, r5
    58b6:	9709      	str	r7, [sp, #36]	; 0x24
    58b8:	f000 8369 	beq.w	5f8e <_svfprintf_r+0x896>
    58bc:	460f      	mov	r7, r1
    58be:	920c      	str	r2, [sp, #48]	; 0x30
    58c0:	4843      	ldr	r0, [pc, #268]	; (59d0 <_svfprintf_r+0x2d8>)
    58c2:	e2ae      	b.n	5e22 <_svfprintf_r+0x72a>
    58c4:	aa1b      	add	r2, sp, #108	; 0x6c
    58c6:	9903      	ldr	r1, [sp, #12]
    58c8:	9805      	ldr	r0, [sp, #20]
    58ca:	f001 f9cd 	bl	6c68 <__ssprint_r>
    58ce:	b948      	cbnz	r0, 58e4 <_svfprintf_r+0x1ec>
    58d0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    58d4:	e755      	b.n	5782 <_svfprintf_r+0x8a>
    58d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    58d8:	b123      	cbz	r3, 58e4 <_svfprintf_r+0x1ec>
    58da:	9805      	ldr	r0, [sp, #20]
    58dc:	9903      	ldr	r1, [sp, #12]
    58de:	aa1b      	add	r2, sp, #108	; 0x6c
    58e0:	f001 f9c2 	bl	6c68 <__ssprint_r>
    58e4:	9b03      	ldr	r3, [sp, #12]
    58e6:	899b      	ldrh	r3, [r3, #12]
    58e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    58ec:	9b06      	ldr	r3, [sp, #24]
    58ee:	bf18      	it	ne
    58f0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    58f4:	4618      	mov	r0, r3
    58f6:	b039      	add	sp, #228	; 0xe4
    58f8:	ecbd 8b06 	vpop	{d8-d10}
    58fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5900:	930c      	str	r3, [sp, #48]	; 0x30
    5902:	46a8      	mov	r8, r5
    5904:	2a00      	cmp	r2, #0
    5906:	f041 819a 	bne.w	6c3e <_svfprintf_r+0x1546>
    590a:	f01b 0320 	ands.w	r3, fp, #32
    590e:	f000 8206 	beq.w	5d1e <_svfprintf_r+0x626>
    5912:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5914:	3707      	adds	r7, #7
    5916:	f027 0307 	bic.w	r3, r7, #7
    591a:	2700      	movs	r7, #0
    591c:	f103 0208 	add.w	r2, r3, #8
    5920:	45b8      	cmp	r8, r7
    5922:	9209      	str	r2, [sp, #36]	; 0x24
    5924:	e9d3 4500 	ldrd	r4, r5, [r3]
    5928:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    592c:	f2c0 865e 	blt.w	65ec <_svfprintf_r+0xef4>
    5930:	ea54 0305 	orrs.w	r3, r4, r5
    5934:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5938:	f000 834b 	beq.w	5fd2 <_svfprintf_r+0x8da>
    593c:	ae28      	add	r6, sp, #160	; 0xa0
    593e:	08e2      	lsrs	r2, r4, #3
    5940:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    5944:	08e9      	lsrs	r1, r5, #3
    5946:	f004 0307 	and.w	r3, r4, #7
    594a:	460d      	mov	r5, r1
    594c:	4614      	mov	r4, r2
    594e:	3330      	adds	r3, #48	; 0x30
    5950:	ea54 0205 	orrs.w	r2, r4, r5
    5954:	f806 3d01 	strb.w	r3, [r6, #-1]!
    5958:	d1f1      	bne.n	593e <_svfprintf_r+0x246>
    595a:	f01b 0f01 	tst.w	fp, #1
    595e:	f000 8227 	beq.w	5db0 <_svfprintf_r+0x6b8>
    5962:	2b30      	cmp	r3, #48	; 0x30
    5964:	f000 8224 	beq.w	5db0 <_svfprintf_r+0x6b8>
    5968:	2230      	movs	r2, #48	; 0x30
    596a:	1e73      	subs	r3, r6, #1
    596c:	f806 2c01 	strb.w	r2, [r6, #-1]
    5970:	aa28      	add	r2, sp, #160	; 0xa0
    5972:	1ad2      	subs	r2, r2, r3
    5974:	9208      	str	r2, [sp, #32]
    5976:	461e      	mov	r6, r3
    5978:	e21d      	b.n	5db6 <_svfprintf_r+0x6be>
    597a:	f89a 3000 	ldrb.w	r3, [sl]
    597e:	2b2a      	cmp	r3, #42	; 0x2a
    5980:	f10a 0401 	add.w	r4, sl, #1
    5984:	f001 812f 	beq.w	6be6 <_svfprintf_r+0x14ee>
    5988:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    598c:	2809      	cmp	r0, #9
    598e:	bf98      	it	ls
    5990:	2500      	movls	r5, #0
    5992:	f201 80d5 	bhi.w	6b40 <_svfprintf_r+0x1448>
    5996:	f814 3b01 	ldrb.w	r3, [r4], #1
    599a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    599e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    59a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    59a6:	2809      	cmp	r0, #9
    59a8:	d9f5      	bls.n	5996 <_svfprintf_r+0x29e>
    59aa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    59ae:	46a2      	mov	sl, r4
    59b0:	e6fd      	b.n	57ae <_svfprintf_r+0xb6>
    59b2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    59b6:	f89a 3000 	ldrb.w	r3, [sl]
    59ba:	e6f6      	b.n	57aa <_svfprintf_r+0xb2>
    59bc:	f3af 8000 	nop.w
	...
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	7fefffff 	.word	0x7fefffff
    59d0:	20000ac8 	.word	0x20000ac8
    59d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    59d8:	2300      	movs	r3, #0
    59da:	461c      	mov	r4, r3
    59dc:	f81a 3b01 	ldrb.w	r3, [sl], #1
    59e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    59e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    59e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    59ec:	2809      	cmp	r0, #9
    59ee:	d9f5      	bls.n	59dc <_svfprintf_r+0x2e4>
    59f0:	9407      	str	r4, [sp, #28]
    59f2:	e6dc      	b.n	57ae <_svfprintf_r+0xb6>
    59f4:	930c      	str	r3, [sp, #48]	; 0x30
    59f6:	46a8      	mov	r8, r5
    59f8:	2a00      	cmp	r2, #0
    59fa:	f041 812c 	bne.w	6c56 <_svfprintf_r+0x155e>
    59fe:	f04b 0b10 	orr.w	fp, fp, #16
    5a02:	f01b 0f20 	tst.w	fp, #32
    5a06:	f000 8503 	beq.w	6410 <_svfprintf_r+0xd18>
    5a0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5a0c:	3707      	adds	r7, #7
    5a0e:	f027 0707 	bic.w	r7, r7, #7
    5a12:	e9d7 2300 	ldrd	r2, r3, [r7]
    5a16:	f107 0108 	add.w	r1, r7, #8
    5a1a:	9109      	str	r1, [sp, #36]	; 0x24
    5a1c:	4614      	mov	r4, r2
    5a1e:	461d      	mov	r5, r3
    5a20:	2a00      	cmp	r2, #0
    5a22:	f173 0300 	sbcs.w	r3, r3, #0
    5a26:	f2c0 8537 	blt.w	6498 <_svfprintf_r+0xda0>
    5a2a:	f1b8 0f00 	cmp.w	r8, #0
    5a2e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5a32:	f2c0 81b5 	blt.w	5da0 <_svfprintf_r+0x6a8>
    5a36:	ea54 0305 	orrs.w	r3, r4, r5
    5a3a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5a3e:	f000 83f6 	beq.w	622e <_svfprintf_r+0xb36>
    5a42:	2d00      	cmp	r5, #0
    5a44:	bf08      	it	eq
    5a46:	2c0a      	cmpeq	r4, #10
    5a48:	f0c0 81ae 	bcc.w	5da8 <_svfprintf_r+0x6b0>
    5a4c:	ae28      	add	r6, sp, #160	; 0xa0
    5a4e:	4620      	mov	r0, r4
    5a50:	4629      	mov	r1, r5
    5a52:	220a      	movs	r2, #10
    5a54:	2300      	movs	r3, #0
    5a56:	f7fc fff1 	bl	2a3c <__aeabi_uldivmod>
    5a5a:	3230      	adds	r2, #48	; 0x30
    5a5c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    5a60:	4620      	mov	r0, r4
    5a62:	4629      	mov	r1, r5
    5a64:	2300      	movs	r3, #0
    5a66:	220a      	movs	r2, #10
    5a68:	f7fc ffe8 	bl	2a3c <__aeabi_uldivmod>
    5a6c:	4604      	mov	r4, r0
    5a6e:	460d      	mov	r5, r1
    5a70:	ea54 0305 	orrs.w	r3, r4, r5
    5a74:	d1eb      	bne.n	5a4e <_svfprintf_r+0x356>
    5a76:	e19b      	b.n	5db0 <_svfprintf_r+0x6b8>
    5a78:	930c      	str	r3, [sp, #48]	; 0x30
    5a7a:	46a8      	mov	r8, r5
    5a7c:	2a00      	cmp	r2, #0
    5a7e:	f041 80e6 	bne.w	6c4e <_svfprintf_r+0x1556>
    5a82:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5a84:	f01b 0f08 	tst.w	fp, #8
    5a88:	f107 0707 	add.w	r7, r7, #7
    5a8c:	f000 8640 	beq.w	6710 <_svfprintf_r+0x1018>
    5a90:	f027 0307 	bic.w	r3, r7, #7
    5a94:	ed93 8b00 	vldr	d8, [r3]
    5a98:	f103 0208 	add.w	r2, r3, #8
    5a9c:	9209      	str	r2, [sp, #36]	; 0x24
    5a9e:	eeb0 7bc8 	vabs.f64	d7, d8
    5aa2:	eeb4 7b49 	vcmp.f64	d7, d9
    5aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aaa:	f340 85bc 	ble.w	6626 <_svfprintf_r+0xf2e>
    5aae:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ab6:	f100 87ca 	bmi.w	6a4e <_svfprintf_r+0x1356>
    5aba:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5abe:	4ea7      	ldr	r6, [pc, #668]	; (5d5c <_svfprintf_r+0x664>)
    5ac0:	4ba7      	ldr	r3, [pc, #668]	; (5d60 <_svfprintf_r+0x668>)
    5ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
    5ac4:	2203      	movs	r2, #3
    5ac6:	f04f 0800 	mov.w	r8, #0
    5aca:	9204      	str	r2, [sp, #16]
    5acc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5ad0:	2947      	cmp	r1, #71	; 0x47
    5ad2:	bfd8      	it	le
    5ad4:	461e      	movle	r6, r3
    5ad6:	9208      	str	r2, [sp, #32]
    5ad8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    5adc:	b117      	cbz	r7, 5ae4 <_svfprintf_r+0x3ec>
    5ade:	9b04      	ldr	r3, [sp, #16]
    5ae0:	3301      	adds	r3, #1
    5ae2:	9304      	str	r3, [sp, #16]
    5ae4:	f01b 0302 	ands.w	r3, fp, #2
    5ae8:	930a      	str	r3, [sp, #40]	; 0x28
    5aea:	d002      	beq.n	5af2 <_svfprintf_r+0x3fa>
    5aec:	9b04      	ldr	r3, [sp, #16]
    5aee:	3302      	adds	r3, #2
    5af0:	9304      	str	r3, [sp, #16]
    5af2:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    5af6:	930b      	str	r3, [sp, #44]	; 0x2c
    5af8:	f040 8280 	bne.w	5ffc <_svfprintf_r+0x904>
    5afc:	9b07      	ldr	r3, [sp, #28]
    5afe:	9a04      	ldr	r2, [sp, #16]
    5b00:	1a9c      	subs	r4, r3, r2
    5b02:	2c00      	cmp	r4, #0
    5b04:	f340 827a 	ble.w	5ffc <_svfprintf_r+0x904>
    5b08:	2c10      	cmp	r4, #16
    5b0a:	991d      	ldr	r1, [sp, #116]	; 0x74
    5b0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b0e:	4f95      	ldr	r7, [pc, #596]	; (5d64 <_svfprintf_r+0x66c>)
    5b10:	dd23      	ble.n	5b5a <_svfprintf_r+0x462>
    5b12:	4648      	mov	r0, r9
    5b14:	2510      	movs	r5, #16
    5b16:	46c1      	mov	r9, r8
    5b18:	46b0      	mov	r8, r6
    5b1a:	9e05      	ldr	r6, [sp, #20]
    5b1c:	e004      	b.n	5b28 <_svfprintf_r+0x430>
    5b1e:	3c10      	subs	r4, #16
    5b20:	2c10      	cmp	r4, #16
    5b22:	f100 0008 	add.w	r0, r0, #8
    5b26:	dd15      	ble.n	5b54 <_svfprintf_r+0x45c>
    5b28:	3201      	adds	r2, #1
    5b2a:	3110      	adds	r1, #16
    5b2c:	2a07      	cmp	r2, #7
    5b2e:	911d      	str	r1, [sp, #116]	; 0x74
    5b30:	921c      	str	r2, [sp, #112]	; 0x70
    5b32:	6007      	str	r7, [r0, #0]
    5b34:	6045      	str	r5, [r0, #4]
    5b36:	ddf2      	ble.n	5b1e <_svfprintf_r+0x426>
    5b38:	aa1b      	add	r2, sp, #108	; 0x6c
    5b3a:	9903      	ldr	r1, [sp, #12]
    5b3c:	4630      	mov	r0, r6
    5b3e:	f001 f893 	bl	6c68 <__ssprint_r>
    5b42:	2800      	cmp	r0, #0
    5b44:	f47f aece 	bne.w	58e4 <_svfprintf_r+0x1ec>
    5b48:	3c10      	subs	r4, #16
    5b4a:	2c10      	cmp	r4, #16
    5b4c:	991d      	ldr	r1, [sp, #116]	; 0x74
    5b4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b50:	a828      	add	r0, sp, #160	; 0xa0
    5b52:	dce9      	bgt.n	5b28 <_svfprintf_r+0x430>
    5b54:	4646      	mov	r6, r8
    5b56:	46c8      	mov	r8, r9
    5b58:	4681      	mov	r9, r0
    5b5a:	3201      	adds	r2, #1
    5b5c:	1863      	adds	r3, r4, r1
    5b5e:	2a07      	cmp	r2, #7
    5b60:	931d      	str	r3, [sp, #116]	; 0x74
    5b62:	921c      	str	r2, [sp, #112]	; 0x70
    5b64:	f8c9 7000 	str.w	r7, [r9]
    5b68:	f8c9 4004 	str.w	r4, [r9, #4]
    5b6c:	f300 83e2 	bgt.w	6334 <_svfprintf_r+0xc3c>
    5b70:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5b74:	f109 0908 	add.w	r9, r9, #8
    5b78:	b177      	cbz	r7, 5b98 <_svfprintf_r+0x4a0>
    5b7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b7c:	3201      	adds	r2, #1
    5b7e:	3301      	adds	r3, #1
    5b80:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    5b84:	2101      	movs	r1, #1
    5b86:	2a07      	cmp	r2, #7
    5b88:	931d      	str	r3, [sp, #116]	; 0x74
    5b8a:	921c      	str	r2, [sp, #112]	; 0x70
    5b8c:	e889 0003 	stmia.w	r9, {r0, r1}
    5b90:	f300 835f 	bgt.w	6252 <_svfprintf_r+0xb5a>
    5b94:	f109 0908 	add.w	r9, r9, #8
    5b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b9a:	b16a      	cbz	r2, 5bb8 <_svfprintf_r+0x4c0>
    5b9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5b9e:	3201      	adds	r2, #1
    5ba0:	3302      	adds	r3, #2
    5ba2:	a814      	add	r0, sp, #80	; 0x50
    5ba4:	2102      	movs	r1, #2
    5ba6:	2a07      	cmp	r2, #7
    5ba8:	931d      	str	r3, [sp, #116]	; 0x74
    5baa:	921c      	str	r2, [sp, #112]	; 0x70
    5bac:	e889 0003 	stmia.w	r9, {r0, r1}
    5bb0:	f300 835b 	bgt.w	626a <_svfprintf_r+0xb72>
    5bb4:	f109 0908 	add.w	r9, r9, #8
    5bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5bba:	2a80      	cmp	r2, #128	; 0x80
    5bbc:	f000 827e 	beq.w	60bc <_svfprintf_r+0x9c4>
    5bc0:	9a08      	ldr	r2, [sp, #32]
    5bc2:	ebc2 0408 	rsb	r4, r2, r8
    5bc6:	2c00      	cmp	r4, #0
    5bc8:	dd34      	ble.n	5c34 <_svfprintf_r+0x53c>
    5bca:	2c10      	cmp	r4, #16
    5bcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5bce:	4f66      	ldr	r7, [pc, #408]	; (5d68 <_svfprintf_r+0x670>)
    5bd0:	dd23      	ble.n	5c1a <_svfprintf_r+0x522>
    5bd2:	4649      	mov	r1, r9
    5bd4:	f04f 0810 	mov.w	r8, #16
    5bd8:	46b1      	mov	r9, r6
    5bda:	9d05      	ldr	r5, [sp, #20]
    5bdc:	9e03      	ldr	r6, [sp, #12]
    5bde:	e004      	b.n	5bea <_svfprintf_r+0x4f2>
    5be0:	3c10      	subs	r4, #16
    5be2:	2c10      	cmp	r4, #16
    5be4:	f101 0108 	add.w	r1, r1, #8
    5be8:	dd15      	ble.n	5c16 <_svfprintf_r+0x51e>
    5bea:	3201      	adds	r2, #1
    5bec:	3310      	adds	r3, #16
    5bee:	2a07      	cmp	r2, #7
    5bf0:	931d      	str	r3, [sp, #116]	; 0x74
    5bf2:	921c      	str	r2, [sp, #112]	; 0x70
    5bf4:	e881 0180 	stmia.w	r1, {r7, r8}
    5bf8:	ddf2      	ble.n	5be0 <_svfprintf_r+0x4e8>
    5bfa:	aa1b      	add	r2, sp, #108	; 0x6c
    5bfc:	4631      	mov	r1, r6
    5bfe:	4628      	mov	r0, r5
    5c00:	f001 f832 	bl	6c68 <__ssprint_r>
    5c04:	2800      	cmp	r0, #0
    5c06:	f47f ae6d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    5c0a:	3c10      	subs	r4, #16
    5c0c:	2c10      	cmp	r4, #16
    5c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c12:	a928      	add	r1, sp, #160	; 0xa0
    5c14:	dce9      	bgt.n	5bea <_svfprintf_r+0x4f2>
    5c16:	464e      	mov	r6, r9
    5c18:	4689      	mov	r9, r1
    5c1a:	3201      	adds	r2, #1
    5c1c:	4423      	add	r3, r4
    5c1e:	2a07      	cmp	r2, #7
    5c20:	931d      	str	r3, [sp, #116]	; 0x74
    5c22:	921c      	str	r2, [sp, #112]	; 0x70
    5c24:	f8c9 7000 	str.w	r7, [r9]
    5c28:	f8c9 4004 	str.w	r4, [r9, #4]
    5c2c:	f300 8305 	bgt.w	623a <_svfprintf_r+0xb42>
    5c30:	f109 0908 	add.w	r9, r9, #8
    5c34:	f41b 7f80 	tst.w	fp, #256	; 0x100
    5c38:	f040 81e2 	bne.w	6000 <_svfprintf_r+0x908>
    5c3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c3e:	9808      	ldr	r0, [sp, #32]
    5c40:	f8c9 6000 	str.w	r6, [r9]
    5c44:	3201      	adds	r2, #1
    5c46:	4403      	add	r3, r0
    5c48:	2a07      	cmp	r2, #7
    5c4a:	931d      	str	r3, [sp, #116]	; 0x74
    5c4c:	f8c9 0004 	str.w	r0, [r9, #4]
    5c50:	921c      	str	r2, [sp, #112]	; 0x70
    5c52:	f300 82c2 	bgt.w	61da <_svfprintf_r+0xae2>
    5c56:	f109 0908 	add.w	r9, r9, #8
    5c5a:	f01b 0f04 	tst.w	fp, #4
    5c5e:	d03e      	beq.n	5cde <_svfprintf_r+0x5e6>
    5c60:	9a07      	ldr	r2, [sp, #28]
    5c62:	9904      	ldr	r1, [sp, #16]
    5c64:	1a54      	subs	r4, r2, r1
    5c66:	2c00      	cmp	r4, #0
    5c68:	dd39      	ble.n	5cde <_svfprintf_r+0x5e6>
    5c6a:	2c10      	cmp	r4, #16
    5c6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5c6e:	4f3d      	ldr	r7, [pc, #244]	; (5d64 <_svfprintf_r+0x66c>)
    5c70:	dd22      	ble.n	5cb8 <_svfprintf_r+0x5c0>
    5c72:	2510      	movs	r5, #16
    5c74:	9e05      	ldr	r6, [sp, #20]
    5c76:	f8dd 800c 	ldr.w	r8, [sp, #12]
    5c7a:	e004      	b.n	5c86 <_svfprintf_r+0x58e>
    5c7c:	3c10      	subs	r4, #16
    5c7e:	2c10      	cmp	r4, #16
    5c80:	f109 0908 	add.w	r9, r9, #8
    5c84:	dd18      	ble.n	5cb8 <_svfprintf_r+0x5c0>
    5c86:	3201      	adds	r2, #1
    5c88:	3310      	adds	r3, #16
    5c8a:	2a07      	cmp	r2, #7
    5c8c:	931d      	str	r3, [sp, #116]	; 0x74
    5c8e:	921c      	str	r2, [sp, #112]	; 0x70
    5c90:	f8c9 7000 	str.w	r7, [r9]
    5c94:	f8c9 5004 	str.w	r5, [r9, #4]
    5c98:	ddf0      	ble.n	5c7c <_svfprintf_r+0x584>
    5c9a:	aa1b      	add	r2, sp, #108	; 0x6c
    5c9c:	4641      	mov	r1, r8
    5c9e:	4630      	mov	r0, r6
    5ca0:	f000 ffe2 	bl	6c68 <__ssprint_r>
    5ca4:	2800      	cmp	r0, #0
    5ca6:	f47f ae1d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    5caa:	3c10      	subs	r4, #16
    5cac:	2c10      	cmp	r4, #16
    5cae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5cb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5cb2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5cb6:	dce6      	bgt.n	5c86 <_svfprintf_r+0x58e>
    5cb8:	3201      	adds	r2, #1
    5cba:	4423      	add	r3, r4
    5cbc:	2a07      	cmp	r2, #7
    5cbe:	931d      	str	r3, [sp, #116]	; 0x74
    5cc0:	921c      	str	r2, [sp, #112]	; 0x70
    5cc2:	f8c9 7000 	str.w	r7, [r9]
    5cc6:	f8c9 4004 	str.w	r4, [r9, #4]
    5cca:	dd08      	ble.n	5cde <_svfprintf_r+0x5e6>
    5ccc:	aa1b      	add	r2, sp, #108	; 0x6c
    5cce:	9903      	ldr	r1, [sp, #12]
    5cd0:	9805      	ldr	r0, [sp, #20]
    5cd2:	f000 ffc9 	bl	6c68 <__ssprint_r>
    5cd6:	2800      	cmp	r0, #0
    5cd8:	f47f ae04 	bne.w	58e4 <_svfprintf_r+0x1ec>
    5cdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5cde:	9a06      	ldr	r2, [sp, #24]
    5ce0:	9907      	ldr	r1, [sp, #28]
    5ce2:	9804      	ldr	r0, [sp, #16]
    5ce4:	4281      	cmp	r1, r0
    5ce6:	bfac      	ite	ge
    5ce8:	1852      	addge	r2, r2, r1
    5cea:	1812      	addlt	r2, r2, r0
    5cec:	9206      	str	r2, [sp, #24]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	f040 827f 	bne.w	61f2 <_svfprintf_r+0xafa>
    5cf4:	2300      	movs	r3, #0
    5cf6:	931c      	str	r3, [sp, #112]	; 0x70
    5cf8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    5cfc:	e522      	b.n	5744 <_svfprintf_r+0x4c>
    5cfe:	f04b 0b08 	orr.w	fp, fp, #8
    5d02:	f89a 3000 	ldrb.w	r3, [sl]
    5d06:	e550      	b.n	57aa <_svfprintf_r+0xb2>
    5d08:	930c      	str	r3, [sp, #48]	; 0x30
    5d0a:	46a8      	mov	r8, r5
    5d0c:	2a00      	cmp	r2, #0
    5d0e:	f040 879a 	bne.w	6c46 <_svfprintf_r+0x154e>
    5d12:	f04b 0b10 	orr.w	fp, fp, #16
    5d16:	f01b 0320 	ands.w	r3, fp, #32
    5d1a:	f47f adfa 	bne.w	5912 <_svfprintf_r+0x21a>
    5d1e:	f01b 0210 	ands.w	r2, fp, #16
    5d22:	f040 8391 	bne.w	6448 <_svfprintf_r+0xd50>
    5d26:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    5d2a:	f000 838d 	beq.w	6448 <_svfprintf_r+0xd50>
    5d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    5d30:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    5d34:	460b      	mov	r3, r1
    5d36:	f1b8 0f00 	cmp.w	r8, #0
    5d3a:	f103 0304 	add.w	r3, r3, #4
    5d3e:	880c      	ldrh	r4, [r1, #0]
    5d40:	f04f 0500 	mov.w	r5, #0
    5d44:	f2c0 85ab 	blt.w	689e <_svfprintf_r+0x11a6>
    5d48:	ea54 0105 	orrs.w	r1, r4, r5
    5d4c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    5d50:	9309      	str	r3, [sp, #36]	; 0x24
    5d52:	f000 813e 	beq.w	5fd2 <_svfprintf_r+0x8da>
    5d56:	4617      	mov	r7, r2
    5d58:	e5f0      	b.n	593c <_svfprintf_r+0x244>
    5d5a:	bf00      	nop
    5d5c:	20000aa8 	.word	0x20000aa8
    5d60:	20000aa4 	.word	0x20000aa4
    5d64:	200004a0 	.word	0x200004a0
    5d68:	20000b80 	.word	0x20000b80
    5d6c:	930c      	str	r3, [sp, #48]	; 0x30
    5d6e:	46a8      	mov	r8, r5
    5d70:	2a00      	cmp	r2, #0
    5d72:	f040 8759 	bne.w	6c28 <_svfprintf_r+0x1530>
    5d76:	f04b 0b10 	orr.w	fp, fp, #16
    5d7a:	f01b 0320 	ands.w	r3, fp, #32
    5d7e:	f000 82e7 	beq.w	6350 <_svfprintf_r+0xc58>
    5d82:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5d84:	3707      	adds	r7, #7
    5d86:	f027 0307 	bic.w	r3, r7, #7
    5d8a:	2700      	movs	r7, #0
    5d8c:	f103 0208 	add.w	r2, r3, #8
    5d90:	45b8      	cmp	r8, r7
    5d92:	9209      	str	r2, [sp, #36]	; 0x24
    5d94:	e9d3 4500 	ldrd	r4, r5, [r3]
    5d98:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5d9c:	f6bf ae4b 	bge.w	5a36 <_svfprintf_r+0x33e>
    5da0:	ea54 0305 	orrs.w	r3, r4, r5
    5da4:	f47f ae4d 	bne.w	5a42 <_svfprintf_r+0x34a>
    5da8:	ae38      	add	r6, sp, #224	; 0xe0
    5daa:	3430      	adds	r4, #48	; 0x30
    5dac:	f806 4d41 	strb.w	r4, [r6, #-65]!
    5db0:	ab28      	add	r3, sp, #160	; 0xa0
    5db2:	1b9b      	subs	r3, r3, r6
    5db4:	9308      	str	r3, [sp, #32]
    5db6:	9b08      	ldr	r3, [sp, #32]
    5db8:	4543      	cmp	r3, r8
    5dba:	bfb8      	it	lt
    5dbc:	4643      	movlt	r3, r8
    5dbe:	9304      	str	r3, [sp, #16]
    5dc0:	2300      	movs	r3, #0
    5dc2:	930e      	str	r3, [sp, #56]	; 0x38
    5dc4:	e68a      	b.n	5adc <_svfprintf_r+0x3e4>
    5dc6:	930c      	str	r3, [sp, #48]	; 0x30
    5dc8:	46a8      	mov	r8, r5
    5dca:	2a00      	cmp	r2, #0
    5dcc:	f040 8728 	bne.w	6c20 <_svfprintf_r+0x1528>
    5dd0:	f01b 0f20 	tst.w	fp, #32
    5dd4:	48c2      	ldr	r0, [pc, #776]	; (60e0 <_svfprintf_r+0x9e8>)
    5dd6:	f000 8086 	beq.w	5ee6 <_svfprintf_r+0x7ee>
    5dda:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5ddc:	3707      	adds	r7, #7
    5dde:	f027 0307 	bic.w	r3, r7, #7
    5de2:	e9d3 4500 	ldrd	r4, r5, [r3]
    5de6:	f103 0208 	add.w	r2, r3, #8
    5dea:	9209      	str	r2, [sp, #36]	; 0x24
    5dec:	f01b 0701 	ands.w	r7, fp, #1
    5df0:	f000 8247 	beq.w	6282 <_svfprintf_r+0xb8a>
    5df4:	ea54 0305 	orrs.w	r3, r4, r5
    5df8:	f000 84a3 	beq.w	6742 <_svfprintf_r+0x104a>
    5dfc:	2700      	movs	r7, #0
    5dfe:	2330      	movs	r3, #48	; 0x30
    5e00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    5e04:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    5e08:	45b8      	cmp	r8, r7
    5e0a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    5e0e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    5e12:	f04b 0302 	orr.w	r3, fp, #2
    5e16:	f2c0 8617 	blt.w	6a48 <_svfprintf_r+0x1350>
    5e1a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    5e1e:	f043 0b02 	orr.w	fp, r3, #2
    5e22:	ae28      	add	r6, sp, #160	; 0xa0
    5e24:	0923      	lsrs	r3, r4, #4
    5e26:	f004 010f 	and.w	r1, r4, #15
    5e2a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    5e2e:	092a      	lsrs	r2, r5, #4
    5e30:	461c      	mov	r4, r3
    5e32:	4615      	mov	r5, r2
    5e34:	5c43      	ldrb	r3, [r0, r1]
    5e36:	f806 3d01 	strb.w	r3, [r6, #-1]!
    5e3a:	ea54 0305 	orrs.w	r3, r4, r5
    5e3e:	d1f1      	bne.n	5e24 <_svfprintf_r+0x72c>
    5e40:	e7b6      	b.n	5db0 <_svfprintf_r+0x6b8>
    5e42:	9909      	ldr	r1, [sp, #36]	; 0x24
    5e44:	930c      	str	r3, [sp, #48]	; 0x30
    5e46:	680a      	ldr	r2, [r1, #0]
    5e48:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    5e4c:	2300      	movs	r3, #0
    5e4e:	460a      	mov	r2, r1
    5e50:	461f      	mov	r7, r3
    5e52:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5e56:	3204      	adds	r2, #4
    5e58:	2301      	movs	r3, #1
    5e5a:	9304      	str	r3, [sp, #16]
    5e5c:	46b8      	mov	r8, r7
    5e5e:	970e      	str	r7, [sp, #56]	; 0x38
    5e60:	9209      	str	r2, [sp, #36]	; 0x24
    5e62:	9308      	str	r3, [sp, #32]
    5e64:	ae1e      	add	r6, sp, #120	; 0x78
    5e66:	e63d      	b.n	5ae4 <_svfprintf_r+0x3ec>
    5e68:	930c      	str	r3, [sp, #48]	; 0x30
    5e6a:	46a8      	mov	r8, r5
    5e6c:	2a00      	cmp	r2, #0
    5e6e:	f43f adc8 	beq.w	5a02 <_svfprintf_r+0x30a>
    5e72:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5e76:	e5c4      	b.n	5a02 <_svfprintf_r+0x30a>
    5e78:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    5e7c:	f89a 3000 	ldrb.w	r3, [sl]
    5e80:	e493      	b.n	57aa <_svfprintf_r+0xb2>
    5e82:	f89a 3000 	ldrb.w	r3, [sl]
    5e86:	2900      	cmp	r1, #0
    5e88:	f47f ac8f 	bne.w	57aa <_svfprintf_r+0xb2>
    5e8c:	2201      	movs	r2, #1
    5e8e:	2120      	movs	r1, #32
    5e90:	e48b      	b.n	57aa <_svfprintf_r+0xb2>
    5e92:	f04b 0b01 	orr.w	fp, fp, #1
    5e96:	f89a 3000 	ldrb.w	r3, [sl]
    5e9a:	e486      	b.n	57aa <_svfprintf_r+0xb2>
    5e9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5e9e:	6823      	ldr	r3, [r4, #0]
    5ea0:	9307      	str	r3, [sp, #28]
    5ea2:	4618      	mov	r0, r3
    5ea4:	2800      	cmp	r0, #0
    5ea6:	4623      	mov	r3, r4
    5ea8:	f103 0304 	add.w	r3, r3, #4
    5eac:	f6ff acdf 	blt.w	586e <_svfprintf_r+0x176>
    5eb0:	9309      	str	r3, [sp, #36]	; 0x24
    5eb2:	f89a 3000 	ldrb.w	r3, [sl]
    5eb6:	e478      	b.n	57aa <_svfprintf_r+0xb2>
    5eb8:	f89a 3000 	ldrb.w	r3, [sl]
    5ebc:	2201      	movs	r2, #1
    5ebe:	212b      	movs	r1, #43	; 0x2b
    5ec0:	e473      	b.n	57aa <_svfprintf_r+0xb2>
    5ec2:	930c      	str	r3, [sp, #48]	; 0x30
    5ec4:	46a8      	mov	r8, r5
    5ec6:	2a00      	cmp	r2, #0
    5ec8:	f43f af57 	beq.w	5d7a <_svfprintf_r+0x682>
    5ecc:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    5ed0:	e753      	b.n	5d7a <_svfprintf_r+0x682>
    5ed2:	930c      	str	r3, [sp, #48]	; 0x30
    5ed4:	46a8      	mov	r8, r5
    5ed6:	2a00      	cmp	r2, #0
    5ed8:	f040 86aa 	bne.w	6c30 <_svfprintf_r+0x1538>
    5edc:	f01b 0f20 	tst.w	fp, #32
    5ee0:	4880      	ldr	r0, [pc, #512]	; (60e4 <_svfprintf_r+0x9ec>)
    5ee2:	f47f af7a 	bne.w	5dda <_svfprintf_r+0x6e2>
    5ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ee8:	f01b 0f10 	tst.w	fp, #16
    5eec:	4613      	mov	r3, r2
    5eee:	f040 82c1 	bne.w	6474 <_svfprintf_r+0xd7c>
    5ef2:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5ef6:	f000 82bd 	beq.w	6474 <_svfprintf_r+0xd7c>
    5efa:	3304      	adds	r3, #4
    5efc:	8814      	ldrh	r4, [r2, #0]
    5efe:	9309      	str	r3, [sp, #36]	; 0x24
    5f00:	2500      	movs	r5, #0
    5f02:	e773      	b.n	5dec <_svfprintf_r+0x6f4>
    5f04:	f89a 3000 	ldrb.w	r3, [sl]
    5f08:	2b6c      	cmp	r3, #108	; 0x6c
    5f0a:	bf03      	ittte	eq
    5f0c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    5f10:	f04b 0b20 	orreq.w	fp, fp, #32
    5f14:	f10a 0a01 	addeq.w	sl, sl, #1
    5f18:	f04b 0b10 	orrne.w	fp, fp, #16
    5f1c:	e445      	b.n	57aa <_svfprintf_r+0xb2>
    5f1e:	2a00      	cmp	r2, #0
    5f20:	f040 866f 	bne.w	6c02 <_svfprintf_r+0x150a>
    5f24:	f01b 0f20 	tst.w	fp, #32
    5f28:	f000 8366 	beq.w	65f8 <_svfprintf_r+0xf00>
    5f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5f2e:	9906      	ldr	r1, [sp, #24]
    5f30:	6813      	ldr	r3, [r2, #0]
    5f32:	17cd      	asrs	r5, r1, #31
    5f34:	4608      	mov	r0, r1
    5f36:	3204      	adds	r2, #4
    5f38:	4629      	mov	r1, r5
    5f3a:	9209      	str	r2, [sp, #36]	; 0x24
    5f3c:	e9c3 0100 	strd	r0, r1, [r3]
    5f40:	e400      	b.n	5744 <_svfprintf_r+0x4c>
    5f42:	f04b 0b20 	orr.w	fp, fp, #32
    5f46:	f89a 3000 	ldrb.w	r3, [sl]
    5f4a:	e42e      	b.n	57aa <_svfprintf_r+0xb2>
    5f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5f4e:	930c      	str	r3, [sp, #48]	; 0x30
    5f50:	6816      	ldr	r6, [r2, #0]
    5f52:	2400      	movs	r4, #0
    5f54:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    5f58:	1d17      	adds	r7, r2, #4
    5f5a:	2e00      	cmp	r6, #0
    5f5c:	f000 8565 	beq.w	6a2a <_svfprintf_r+0x1332>
    5f60:	2d00      	cmp	r5, #0
    5f62:	f2c0 84a2 	blt.w	68aa <_svfprintf_r+0x11b2>
    5f66:	462a      	mov	r2, r5
    5f68:	4621      	mov	r1, r4
    5f6a:	4630      	mov	r0, r6
    5f6c:	f7fe f928 	bl	41c0 <memchr>
    5f70:	2800      	cmp	r0, #0
    5f72:	f000 85cc 	beq.w	6b0e <_svfprintf_r+0x1416>
    5f76:	1b83      	subs	r3, r0, r6
    5f78:	9308      	str	r3, [sp, #32]
    5f7a:	46a0      	mov	r8, r4
    5f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5f80:	9709      	str	r7, [sp, #36]	; 0x24
    5f82:	9304      	str	r3, [sp, #16]
    5f84:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    5f88:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    5f8c:	e5a6      	b.n	5adc <_svfprintf_r+0x3e4>
    5f8e:	4855      	ldr	r0, [pc, #340]	; (60e4 <_svfprintf_r+0x9ec>)
    5f90:	920c      	str	r2, [sp, #48]	; 0x30
    5f92:	f1b8 0f00 	cmp.w	r8, #0
    5f96:	f040 8184 	bne.w	62a2 <_svfprintf_r+0xbaa>
    5f9a:	4647      	mov	r7, r8
    5f9c:	f04f 0800 	mov.w	r8, #0
    5fa0:	f8cd 8020 	str.w	r8, [sp, #32]
    5fa4:	ae28      	add	r6, sp, #160	; 0xa0
    5fa6:	e706      	b.n	5db6 <_svfprintf_r+0x6be>
    5fa8:	930c      	str	r3, [sp, #48]	; 0x30
    5faa:	2a00      	cmp	r2, #0
    5fac:	f040 862d 	bne.w	6c0a <_svfprintf_r+0x1512>
    5fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5fb2:	2a00      	cmp	r2, #0
    5fb4:	f43f ac8f 	beq.w	58d6 <_svfprintf_r+0x1de>
    5fb8:	2300      	movs	r3, #0
    5fba:	2101      	movs	r1, #1
    5fbc:	461f      	mov	r7, r3
    5fbe:	9104      	str	r1, [sp, #16]
    5fc0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    5fc4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    5fc8:	4698      	mov	r8, r3
    5fca:	930e      	str	r3, [sp, #56]	; 0x38
    5fcc:	9108      	str	r1, [sp, #32]
    5fce:	ae1e      	add	r6, sp, #120	; 0x78
    5fd0:	e588      	b.n	5ae4 <_svfprintf_r+0x3ec>
    5fd2:	f1b8 0f00 	cmp.w	r8, #0
    5fd6:	f000 858b 	beq.w	6af0 <_svfprintf_r+0x13f8>
    5fda:	2700      	movs	r7, #0
    5fdc:	2400      	movs	r4, #0
    5fde:	2500      	movs	r5, #0
    5fe0:	e4ac      	b.n	593c <_svfprintf_r+0x244>
    5fe2:	4840      	ldr	r0, [pc, #256]	; (60e4 <_svfprintf_r+0x9ec>)
    5fe4:	920c      	str	r2, [sp, #48]	; 0x30
    5fe6:	469b      	mov	fp, r3
    5fe8:	ea54 0305 	orrs.w	r3, r4, r5
    5fec:	9709      	str	r7, [sp, #36]	; 0x24
    5fee:	f04f 0700 	mov.w	r7, #0
    5ff2:	f47f af16 	bne.w	5e22 <_svfprintf_r+0x72a>
    5ff6:	2400      	movs	r4, #0
    5ff8:	2500      	movs	r5, #0
    5ffa:	e712      	b.n	5e22 <_svfprintf_r+0x72a>
    5ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5ffe:	e5bb      	b.n	5b78 <_svfprintf_r+0x480>
    6000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6002:	2a65      	cmp	r2, #101	; 0x65
    6004:	f340 80a1 	ble.w	614a <_svfprintf_r+0xa52>
    6008:	eeb5 8b40 	vcmp.f64	d8, #0.0
    600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6010:	f040 8149 	bne.w	62a6 <_svfprintf_r+0xbae>
    6014:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6016:	4934      	ldr	r1, [pc, #208]	; (60e8 <_svfprintf_r+0x9f0>)
    6018:	f8c9 1000 	str.w	r1, [r9]
    601c:	3201      	adds	r2, #1
    601e:	3301      	adds	r3, #1
    6020:	2101      	movs	r1, #1
    6022:	2a07      	cmp	r2, #7
    6024:	931d      	str	r3, [sp, #116]	; 0x74
    6026:	921c      	str	r2, [sp, #112]	; 0x70
    6028:	f8c9 1004 	str.w	r1, [r9, #4]
    602c:	f300 8392 	bgt.w	6754 <_svfprintf_r+0x105c>
    6030:	f109 0908 	add.w	r9, r9, #8
    6034:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6036:	990d      	ldr	r1, [sp, #52]	; 0x34
    6038:	428a      	cmp	r2, r1
    603a:	db03      	blt.n	6044 <_svfprintf_r+0x94c>
    603c:	f01b 0f01 	tst.w	fp, #1
    6040:	f43f ae0b 	beq.w	5c5a <_svfprintf_r+0x562>
    6044:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6046:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6048:	9910      	ldr	r1, [sp, #64]	; 0x40
    604a:	f8c9 1000 	str.w	r1, [r9]
    604e:	3201      	adds	r2, #1
    6050:	4403      	add	r3, r0
    6052:	2a07      	cmp	r2, #7
    6054:	931d      	str	r3, [sp, #116]	; 0x74
    6056:	f8c9 0004 	str.w	r0, [r9, #4]
    605a:	921c      	str	r2, [sp, #112]	; 0x70
    605c:	f300 83d6 	bgt.w	680c <_svfprintf_r+0x1114>
    6060:	f109 0908 	add.w	r9, r9, #8
    6064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6066:	1e54      	subs	r4, r2, #1
    6068:	2c00      	cmp	r4, #0
    606a:	f77f adf6 	ble.w	5c5a <_svfprintf_r+0x562>
    606e:	2c10      	cmp	r4, #16
    6070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6072:	4f1e      	ldr	r7, [pc, #120]	; (60ec <_svfprintf_r+0x9f4>)
    6074:	f340 81dc 	ble.w	6430 <_svfprintf_r+0xd38>
    6078:	2510      	movs	r5, #16
    607a:	9e05      	ldr	r6, [sp, #20]
    607c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    6080:	e005      	b.n	608e <_svfprintf_r+0x996>
    6082:	f109 0908 	add.w	r9, r9, #8
    6086:	3c10      	subs	r4, #16
    6088:	2c10      	cmp	r4, #16
    608a:	f340 81d1 	ble.w	6430 <_svfprintf_r+0xd38>
    608e:	3201      	adds	r2, #1
    6090:	3310      	adds	r3, #16
    6092:	2a07      	cmp	r2, #7
    6094:	931d      	str	r3, [sp, #116]	; 0x74
    6096:	921c      	str	r2, [sp, #112]	; 0x70
    6098:	f8c9 7000 	str.w	r7, [r9]
    609c:	f8c9 5004 	str.w	r5, [r9, #4]
    60a0:	ddef      	ble.n	6082 <_svfprintf_r+0x98a>
    60a2:	aa1b      	add	r2, sp, #108	; 0x6c
    60a4:	4641      	mov	r1, r8
    60a6:	4630      	mov	r0, r6
    60a8:	f000 fdde 	bl	6c68 <__ssprint_r>
    60ac:	2800      	cmp	r0, #0
    60ae:	f47f ac19 	bne.w	58e4 <_svfprintf_r+0x1ec>
    60b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    60b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    60b6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    60ba:	e7e4      	b.n	6086 <_svfprintf_r+0x98e>
    60bc:	9a07      	ldr	r2, [sp, #28]
    60be:	9904      	ldr	r1, [sp, #16]
    60c0:	1a54      	subs	r4, r2, r1
    60c2:	2c00      	cmp	r4, #0
    60c4:	f77f ad7c 	ble.w	5bc0 <_svfprintf_r+0x4c8>
    60c8:	2c10      	cmp	r4, #16
    60ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    60cc:	4f07      	ldr	r7, [pc, #28]	; (60ec <_svfprintf_r+0x9f4>)
    60ce:	dd2e      	ble.n	612e <_svfprintf_r+0xa36>
    60d0:	4649      	mov	r1, r9
    60d2:	2510      	movs	r5, #16
    60d4:	46c1      	mov	r9, r8
    60d6:	4618      	mov	r0, r3
    60d8:	46b0      	mov	r8, r6
    60da:	9e05      	ldr	r6, [sp, #20]
    60dc:	e00d      	b.n	60fa <_svfprintf_r+0xa02>
    60de:	bf00      	nop
    60e0:	20000ab4 	.word	0x20000ab4
    60e4:	20000ac8 	.word	0x20000ac8
    60e8:	20000aa0 	.word	0x20000aa0
    60ec:	20000b80 	.word	0x20000b80
    60f0:	3c10      	subs	r4, #16
    60f2:	2c10      	cmp	r4, #16
    60f4:	f101 0108 	add.w	r1, r1, #8
    60f8:	dd15      	ble.n	6126 <_svfprintf_r+0xa2e>
    60fa:	3201      	adds	r2, #1
    60fc:	3010      	adds	r0, #16
    60fe:	2a07      	cmp	r2, #7
    6100:	901d      	str	r0, [sp, #116]	; 0x74
    6102:	921c      	str	r2, [sp, #112]	; 0x70
    6104:	600f      	str	r7, [r1, #0]
    6106:	604d      	str	r5, [r1, #4]
    6108:	ddf2      	ble.n	60f0 <_svfprintf_r+0x9f8>
    610a:	aa1b      	add	r2, sp, #108	; 0x6c
    610c:	9903      	ldr	r1, [sp, #12]
    610e:	4630      	mov	r0, r6
    6110:	f000 fdaa 	bl	6c68 <__ssprint_r>
    6114:	2800      	cmp	r0, #0
    6116:	f47f abe5 	bne.w	58e4 <_svfprintf_r+0x1ec>
    611a:	3c10      	subs	r4, #16
    611c:	2c10      	cmp	r4, #16
    611e:	981d      	ldr	r0, [sp, #116]	; 0x74
    6120:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6122:	a928      	add	r1, sp, #160	; 0xa0
    6124:	dce9      	bgt.n	60fa <_svfprintf_r+0xa02>
    6126:	4646      	mov	r6, r8
    6128:	4603      	mov	r3, r0
    612a:	46c8      	mov	r8, r9
    612c:	4689      	mov	r9, r1
    612e:	3201      	adds	r2, #1
    6130:	4423      	add	r3, r4
    6132:	2a07      	cmp	r2, #7
    6134:	931d      	str	r3, [sp, #116]	; 0x74
    6136:	921c      	str	r2, [sp, #112]	; 0x70
    6138:	f8c9 7000 	str.w	r7, [r9]
    613c:	f8c9 4004 	str.w	r4, [r9, #4]
    6140:	f300 8246 	bgt.w	65d0 <_svfprintf_r+0xed8>
    6144:	f109 0908 	add.w	r9, r9, #8
    6148:	e53a      	b.n	5bc0 <_svfprintf_r+0x4c8>
    614a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    614c:	f8c9 6000 	str.w	r6, [r9]
    6150:	2a01      	cmp	r2, #1
    6152:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6154:	f103 0301 	add.w	r3, r3, #1
    6158:	f102 0201 	add.w	r2, r2, #1
    615c:	f04f 0101 	mov.w	r1, #1
    6160:	931d      	str	r3, [sp, #116]	; 0x74
    6162:	921c      	str	r2, [sp, #112]	; 0x70
    6164:	f8c9 1004 	str.w	r1, [r9, #4]
    6168:	f340 8210 	ble.w	658c <_svfprintf_r+0xe94>
    616c:	2a07      	cmp	r2, #7
    616e:	f300 8215 	bgt.w	659c <_svfprintf_r+0xea4>
    6172:	f109 0908 	add.w	r9, r9, #8
    6176:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6178:	9910      	ldr	r1, [sp, #64]	; 0x40
    617a:	f8c9 1000 	str.w	r1, [r9]
    617e:	3201      	adds	r2, #1
    6180:	4403      	add	r3, r0
    6182:	2a07      	cmp	r2, #7
    6184:	931d      	str	r3, [sp, #116]	; 0x74
    6186:	921c      	str	r2, [sp, #112]	; 0x70
    6188:	f8c9 0004 	str.w	r0, [r9, #4]
    618c:	f300 8213 	bgt.w	65b6 <_svfprintf_r+0xebe>
    6190:	f109 0908 	add.w	r9, r9, #8
    6194:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    619c:	990d      	ldr	r1, [sp, #52]	; 0x34
    619e:	f000 80f5 	beq.w	638c <_svfprintf_r+0xc94>
    61a2:	3901      	subs	r1, #1
    61a4:	3201      	adds	r2, #1
    61a6:	3601      	adds	r6, #1
    61a8:	440b      	add	r3, r1
    61aa:	2a07      	cmp	r2, #7
    61ac:	f8c9 6000 	str.w	r6, [r9]
    61b0:	921c      	str	r2, [sp, #112]	; 0x70
    61b2:	931d      	str	r3, [sp, #116]	; 0x74
    61b4:	f8c9 1004 	str.w	r1, [r9, #4]
    61b8:	f300 811d 	bgt.w	63f6 <_svfprintf_r+0xcfe>
    61bc:	f109 0908 	add.w	r9, r9, #8
    61c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    61c2:	f8c9 0004 	str.w	r0, [r9, #4]
    61c6:	3201      	adds	r2, #1
    61c8:	4403      	add	r3, r0
    61ca:	a917      	add	r1, sp, #92	; 0x5c
    61cc:	2a07      	cmp	r2, #7
    61ce:	931d      	str	r3, [sp, #116]	; 0x74
    61d0:	921c      	str	r2, [sp, #112]	; 0x70
    61d2:	f8c9 1000 	str.w	r1, [r9]
    61d6:	f77f ad3e 	ble.w	5c56 <_svfprintf_r+0x55e>
    61da:	aa1b      	add	r2, sp, #108	; 0x6c
    61dc:	9903      	ldr	r1, [sp, #12]
    61de:	9805      	ldr	r0, [sp, #20]
    61e0:	f000 fd42 	bl	6c68 <__ssprint_r>
    61e4:	2800      	cmp	r0, #0
    61e6:	f47f ab7d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    61ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    61ec:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    61f0:	e533      	b.n	5c5a <_svfprintf_r+0x562>
    61f2:	aa1b      	add	r2, sp, #108	; 0x6c
    61f4:	9903      	ldr	r1, [sp, #12]
    61f6:	9805      	ldr	r0, [sp, #20]
    61f8:	f000 fd36 	bl	6c68 <__ssprint_r>
    61fc:	2800      	cmp	r0, #0
    61fe:	f43f ad79 	beq.w	5cf4 <_svfprintf_r+0x5fc>
    6202:	f7ff bb6f 	b.w	58e4 <_svfprintf_r+0x1ec>
    6206:	9909      	ldr	r1, [sp, #36]	; 0x24
    6208:	f1b8 0f00 	cmp.w	r8, #0
    620c:	680c      	ldr	r4, [r1, #0]
    620e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    6212:	f101 0704 	add.w	r7, r1, #4
    6216:	f04f 0500 	mov.w	r5, #0
    621a:	f2c0 8371 	blt.w	6900 <_svfprintf_r+0x1208>
    621e:	ea54 0205 	orrs.w	r2, r4, r5
    6222:	9709      	str	r7, [sp, #36]	; 0x24
    6224:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    6228:	461f      	mov	r7, r3
    622a:	f47f ac0a 	bne.w	5a42 <_svfprintf_r+0x34a>
    622e:	f1b8 0f00 	cmp.w	r8, #0
    6232:	f43f aeb3 	beq.w	5f9c <_svfprintf_r+0x8a4>
    6236:	2400      	movs	r4, #0
    6238:	e5b6      	b.n	5da8 <_svfprintf_r+0x6b0>
    623a:	aa1b      	add	r2, sp, #108	; 0x6c
    623c:	9903      	ldr	r1, [sp, #12]
    623e:	9805      	ldr	r0, [sp, #20]
    6240:	f000 fd12 	bl	6c68 <__ssprint_r>
    6244:	2800      	cmp	r0, #0
    6246:	f47f ab4d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    624a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    624c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6250:	e4f0      	b.n	5c34 <_svfprintf_r+0x53c>
    6252:	aa1b      	add	r2, sp, #108	; 0x6c
    6254:	9903      	ldr	r1, [sp, #12]
    6256:	9805      	ldr	r0, [sp, #20]
    6258:	f000 fd06 	bl	6c68 <__ssprint_r>
    625c:	2800      	cmp	r0, #0
    625e:	f47f ab41 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6264:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6268:	e496      	b.n	5b98 <_svfprintf_r+0x4a0>
    626a:	aa1b      	add	r2, sp, #108	; 0x6c
    626c:	9903      	ldr	r1, [sp, #12]
    626e:	9805      	ldr	r0, [sp, #20]
    6270:	f000 fcfa 	bl	6c68 <__ssprint_r>
    6274:	2800      	cmp	r0, #0
    6276:	f47f ab35 	bne.w	58e4 <_svfprintf_r+0x1ec>
    627a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    627c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6280:	e49a      	b.n	5bb8 <_svfprintf_r+0x4c0>
    6282:	f1b8 0f00 	cmp.w	r8, #0
    6286:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    628a:	f2c0 826f 	blt.w	676c <_svfprintf_r+0x1074>
    628e:	ea54 0305 	orrs.w	r3, r4, r5
    6292:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    6296:	f47f adc4 	bne.w	5e22 <_svfprintf_r+0x72a>
    629a:	f1b8 0f00 	cmp.w	r8, #0
    629e:	f43f ae7c 	beq.w	5f9a <_svfprintf_r+0x8a2>
    62a2:	2700      	movs	r7, #0
    62a4:	e6a7      	b.n	5ff6 <_svfprintf_r+0x8fe>
    62a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    62a8:	2c00      	cmp	r4, #0
    62aa:	f340 8261 	ble.w	6770 <_svfprintf_r+0x1078>
    62ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    62b0:	990d      	ldr	r1, [sp, #52]	; 0x34
    62b2:	428a      	cmp	r2, r1
    62b4:	bfa8      	it	ge
    62b6:	460a      	movge	r2, r1
    62b8:	2a00      	cmp	r2, #0
    62ba:	4614      	mov	r4, r2
    62bc:	dd0d      	ble.n	62da <_svfprintf_r+0xbe2>
    62be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    62c0:	f8c9 6000 	str.w	r6, [r9]
    62c4:	3201      	adds	r2, #1
    62c6:	4423      	add	r3, r4
    62c8:	2a07      	cmp	r2, #7
    62ca:	931d      	str	r3, [sp, #116]	; 0x74
    62cc:	f8c9 4004 	str.w	r4, [r9, #4]
    62d0:	921c      	str	r2, [sp, #112]	; 0x70
    62d2:	f300 8372 	bgt.w	69ba <_svfprintf_r+0x12c2>
    62d6:	f109 0908 	add.w	r9, r9, #8
    62da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    62dc:	2c00      	cmp	r4, #0
    62de:	bfa8      	it	ge
    62e0:	1b12      	subge	r2, r2, r4
    62e2:	2a00      	cmp	r2, #0
    62e4:	4614      	mov	r4, r2
    62e6:	f340 80f1 	ble.w	64cc <_svfprintf_r+0xdd4>
    62ea:	2c10      	cmp	r4, #16
    62ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    62ee:	4fc1      	ldr	r7, [pc, #772]	; (65f4 <_svfprintf_r+0xefc>)
    62f0:	f340 8219 	ble.w	6726 <_svfprintf_r+0x102e>
    62f4:	4649      	mov	r1, r9
    62f6:	2510      	movs	r5, #16
    62f8:	46b1      	mov	r9, r6
    62fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
    62fe:	9e03      	ldr	r6, [sp, #12]
    6300:	e004      	b.n	630c <_svfprintf_r+0xc14>
    6302:	3108      	adds	r1, #8
    6304:	3c10      	subs	r4, #16
    6306:	2c10      	cmp	r4, #16
    6308:	f340 820b 	ble.w	6722 <_svfprintf_r+0x102a>
    630c:	3201      	adds	r2, #1
    630e:	3310      	adds	r3, #16
    6310:	2a07      	cmp	r2, #7
    6312:	931d      	str	r3, [sp, #116]	; 0x74
    6314:	921c      	str	r2, [sp, #112]	; 0x70
    6316:	600f      	str	r7, [r1, #0]
    6318:	604d      	str	r5, [r1, #4]
    631a:	ddf2      	ble.n	6302 <_svfprintf_r+0xc0a>
    631c:	aa1b      	add	r2, sp, #108	; 0x6c
    631e:	4631      	mov	r1, r6
    6320:	4640      	mov	r0, r8
    6322:	f000 fca1 	bl	6c68 <__ssprint_r>
    6326:	2800      	cmp	r0, #0
    6328:	f47f aadc 	bne.w	58e4 <_svfprintf_r+0x1ec>
    632c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    632e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6330:	a928      	add	r1, sp, #160	; 0xa0
    6332:	e7e7      	b.n	6304 <_svfprintf_r+0xc0c>
    6334:	aa1b      	add	r2, sp, #108	; 0x6c
    6336:	9903      	ldr	r1, [sp, #12]
    6338:	9805      	ldr	r0, [sp, #20]
    633a:	f000 fc95 	bl	6c68 <__ssprint_r>
    633e:	2800      	cmp	r0, #0
    6340:	f47f aad0 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6344:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    6348:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    634a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    634e:	e413      	b.n	5b78 <_svfprintf_r+0x480>
    6350:	f01b 0210 	ands.w	r2, fp, #16
    6354:	f47f af57 	bne.w	6206 <_svfprintf_r+0xb0e>
    6358:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    635c:	f43f af53 	beq.w	6206 <_svfprintf_r+0xb0e>
    6360:	9909      	ldr	r1, [sp, #36]	; 0x24
    6362:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    6366:	460b      	mov	r3, r1
    6368:	f1b8 0f00 	cmp.w	r8, #0
    636c:	f103 0304 	add.w	r3, r3, #4
    6370:	880c      	ldrh	r4, [r1, #0]
    6372:	f04f 0500 	mov.w	r5, #0
    6376:	f2c0 8294 	blt.w	68a2 <_svfprintf_r+0x11aa>
    637a:	ea54 0105 	orrs.w	r1, r4, r5
    637e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    6382:	9309      	str	r3, [sp, #36]	; 0x24
    6384:	4617      	mov	r7, r2
    6386:	f47f ab5c 	bne.w	5a42 <_svfprintf_r+0x34a>
    638a:	e750      	b.n	622e <_svfprintf_r+0xb36>
    638c:	1e4c      	subs	r4, r1, #1
    638e:	2c00      	cmp	r4, #0
    6390:	f77f af16 	ble.w	61c0 <_svfprintf_r+0xac8>
    6394:	2c10      	cmp	r4, #16
    6396:	4f97      	ldr	r7, [pc, #604]	; (65f4 <_svfprintf_r+0xefc>)
    6398:	dd22      	ble.n	63e0 <_svfprintf_r+0xce8>
    639a:	2510      	movs	r5, #16
    639c:	9e05      	ldr	r6, [sp, #20]
    639e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    63a2:	e004      	b.n	63ae <_svfprintf_r+0xcb6>
    63a4:	3c10      	subs	r4, #16
    63a6:	2c10      	cmp	r4, #16
    63a8:	f109 0908 	add.w	r9, r9, #8
    63ac:	dd18      	ble.n	63e0 <_svfprintf_r+0xce8>
    63ae:	3201      	adds	r2, #1
    63b0:	3310      	adds	r3, #16
    63b2:	2a07      	cmp	r2, #7
    63b4:	931d      	str	r3, [sp, #116]	; 0x74
    63b6:	921c      	str	r2, [sp, #112]	; 0x70
    63b8:	f8c9 7000 	str.w	r7, [r9]
    63bc:	f8c9 5004 	str.w	r5, [r9, #4]
    63c0:	ddf0      	ble.n	63a4 <_svfprintf_r+0xcac>
    63c2:	aa1b      	add	r2, sp, #108	; 0x6c
    63c4:	4641      	mov	r1, r8
    63c6:	4630      	mov	r0, r6
    63c8:	f000 fc4e 	bl	6c68 <__ssprint_r>
    63cc:	2800      	cmp	r0, #0
    63ce:	f47f aa89 	bne.w	58e4 <_svfprintf_r+0x1ec>
    63d2:	3c10      	subs	r4, #16
    63d4:	2c10      	cmp	r4, #16
    63d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    63d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    63da:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    63de:	dce6      	bgt.n	63ae <_svfprintf_r+0xcb6>
    63e0:	3201      	adds	r2, #1
    63e2:	4423      	add	r3, r4
    63e4:	2a07      	cmp	r2, #7
    63e6:	931d      	str	r3, [sp, #116]	; 0x74
    63e8:	921c      	str	r2, [sp, #112]	; 0x70
    63ea:	f8c9 7000 	str.w	r7, [r9]
    63ee:	f8c9 4004 	str.w	r4, [r9, #4]
    63f2:	f77f aee3 	ble.w	61bc <_svfprintf_r+0xac4>
    63f6:	aa1b      	add	r2, sp, #108	; 0x6c
    63f8:	9903      	ldr	r1, [sp, #12]
    63fa:	9805      	ldr	r0, [sp, #20]
    63fc:	f000 fc34 	bl	6c68 <__ssprint_r>
    6400:	2800      	cmp	r0, #0
    6402:	f47f aa6f 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6406:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6408:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    640a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    640e:	e6d7      	b.n	61c0 <_svfprintf_r+0xac8>
    6410:	f01b 0f10 	tst.w	fp, #16
    6414:	d133      	bne.n	647e <_svfprintf_r+0xd86>
    6416:	f01b 0f40 	tst.w	fp, #64	; 0x40
    641a:	d030      	beq.n	647e <_svfprintf_r+0xd86>
    641c:	9909      	ldr	r1, [sp, #36]	; 0x24
    641e:	f9b1 4000 	ldrsh.w	r4, [r1]
    6422:	3104      	adds	r1, #4
    6424:	17e5      	asrs	r5, r4, #31
    6426:	4622      	mov	r2, r4
    6428:	462b      	mov	r3, r5
    642a:	9109      	str	r1, [sp, #36]	; 0x24
    642c:	f7ff baf8 	b.w	5a20 <_svfprintf_r+0x328>
    6430:	3201      	adds	r2, #1
    6432:	4423      	add	r3, r4
    6434:	2a07      	cmp	r2, #7
    6436:	931d      	str	r3, [sp, #116]	; 0x74
    6438:	921c      	str	r2, [sp, #112]	; 0x70
    643a:	f8c9 7000 	str.w	r7, [r9]
    643e:	f8c9 4004 	str.w	r4, [r9, #4]
    6442:	f77f ac08 	ble.w	5c56 <_svfprintf_r+0x55e>
    6446:	e6c8      	b.n	61da <_svfprintf_r+0xae2>
    6448:	9909      	ldr	r1, [sp, #36]	; 0x24
    644a:	f1b8 0f00 	cmp.w	r8, #0
    644e:	680c      	ldr	r4, [r1, #0]
    6450:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    6454:	f101 0704 	add.w	r7, r1, #4
    6458:	f04f 0500 	mov.w	r5, #0
    645c:	f2c0 80c5 	blt.w	65ea <_svfprintf_r+0xef2>
    6460:	ea54 0205 	orrs.w	r2, r4, r5
    6464:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    6468:	9709      	str	r7, [sp, #36]	; 0x24
    646a:	f43f adb2 	beq.w	5fd2 <_svfprintf_r+0x8da>
    646e:	461f      	mov	r7, r3
    6470:	f7ff ba64 	b.w	593c <_svfprintf_r+0x244>
    6474:	681c      	ldr	r4, [r3, #0]
    6476:	3304      	adds	r3, #4
    6478:	9309      	str	r3, [sp, #36]	; 0x24
    647a:	2500      	movs	r5, #0
    647c:	e4b6      	b.n	5dec <_svfprintf_r+0x6f4>
    647e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6480:	6814      	ldr	r4, [r2, #0]
    6482:	4613      	mov	r3, r2
    6484:	3304      	adds	r3, #4
    6486:	17e5      	asrs	r5, r4, #31
    6488:	4622      	mov	r2, r4
    648a:	9309      	str	r3, [sp, #36]	; 0x24
    648c:	2a00      	cmp	r2, #0
    648e:	462b      	mov	r3, r5
    6490:	f173 0300 	sbcs.w	r3, r3, #0
    6494:	f6bf aac9 	bge.w	5a2a <_svfprintf_r+0x332>
    6498:	4264      	negs	r4, r4
    649a:	f04f 072d 	mov.w	r7, #45	; 0x2d
    649e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    64a2:	f1b8 0f00 	cmp.w	r8, #0
    64a6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    64aa:	f6ff aaca 	blt.w	5a42 <_svfprintf_r+0x34a>
    64ae:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    64b2:	f7ff bac6 	b.w	5a42 <_svfprintf_r+0x34a>
    64b6:	aa1b      	add	r2, sp, #108	; 0x6c
    64b8:	9903      	ldr	r1, [sp, #12]
    64ba:	9805      	ldr	r0, [sp, #20]
    64bc:	f000 fbd4 	bl	6c68 <__ssprint_r>
    64c0:	2800      	cmp	r0, #0
    64c2:	f47f aa0f 	bne.w	58e4 <_svfprintf_r+0x1ec>
    64c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    64c8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    64cc:	990e      	ldr	r1, [sp, #56]	; 0x38
    64ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
    64d0:	4431      	add	r1, r6
    64d2:	460d      	mov	r5, r1
    64d4:	990d      	ldr	r1, [sp, #52]	; 0x34
    64d6:	428a      	cmp	r2, r1
    64d8:	db47      	blt.n	656a <_svfprintf_r+0xe72>
    64da:	f01b 0f01 	tst.w	fp, #1
    64de:	d144      	bne.n	656a <_svfprintf_r+0xe72>
    64e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    64e2:	4406      	add	r6, r0
    64e4:	1b74      	subs	r4, r6, r5
    64e6:	1a82      	subs	r2, r0, r2
    64e8:	4294      	cmp	r4, r2
    64ea:	bfa8      	it	ge
    64ec:	4614      	movge	r4, r2
    64ee:	2c00      	cmp	r4, #0
    64f0:	4626      	mov	r6, r4
    64f2:	dd0d      	ble.n	6510 <_svfprintf_r+0xe18>
    64f4:	991c      	ldr	r1, [sp, #112]	; 0x70
    64f6:	f8c9 5000 	str.w	r5, [r9]
    64fa:	3101      	adds	r1, #1
    64fc:	4423      	add	r3, r4
    64fe:	2907      	cmp	r1, #7
    6500:	931d      	str	r3, [sp, #116]	; 0x74
    6502:	f8c9 4004 	str.w	r4, [r9, #4]
    6506:	911c      	str	r1, [sp, #112]	; 0x70
    6508:	f300 8280 	bgt.w	6a0c <_svfprintf_r+0x1314>
    650c:	f109 0908 	add.w	r9, r9, #8
    6510:	2e00      	cmp	r6, #0
    6512:	bfac      	ite	ge
    6514:	1b94      	subge	r4, r2, r6
    6516:	4614      	movlt	r4, r2
    6518:	2c00      	cmp	r4, #0
    651a:	f77f ab9e 	ble.w	5c5a <_svfprintf_r+0x562>
    651e:	2c10      	cmp	r4, #16
    6520:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6522:	4f34      	ldr	r7, [pc, #208]	; (65f4 <_svfprintf_r+0xefc>)
    6524:	dd84      	ble.n	6430 <_svfprintf_r+0xd38>
    6526:	2510      	movs	r5, #16
    6528:	9e05      	ldr	r6, [sp, #20]
    652a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    652e:	e005      	b.n	653c <_svfprintf_r+0xe44>
    6530:	f109 0908 	add.w	r9, r9, #8
    6534:	3c10      	subs	r4, #16
    6536:	2c10      	cmp	r4, #16
    6538:	f77f af7a 	ble.w	6430 <_svfprintf_r+0xd38>
    653c:	3201      	adds	r2, #1
    653e:	3310      	adds	r3, #16
    6540:	2a07      	cmp	r2, #7
    6542:	931d      	str	r3, [sp, #116]	; 0x74
    6544:	921c      	str	r2, [sp, #112]	; 0x70
    6546:	f8c9 7000 	str.w	r7, [r9]
    654a:	f8c9 5004 	str.w	r5, [r9, #4]
    654e:	ddef      	ble.n	6530 <_svfprintf_r+0xe38>
    6550:	aa1b      	add	r2, sp, #108	; 0x6c
    6552:	4641      	mov	r1, r8
    6554:	4630      	mov	r0, r6
    6556:	f000 fb87 	bl	6c68 <__ssprint_r>
    655a:	2800      	cmp	r0, #0
    655c:	f47f a9c2 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6562:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6564:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6568:	e7e4      	b.n	6534 <_svfprintf_r+0xe3c>
    656a:	991c      	ldr	r1, [sp, #112]	; 0x70
    656c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    656e:	9810      	ldr	r0, [sp, #64]	; 0x40
    6570:	f8c9 0000 	str.w	r0, [r9]
    6574:	3101      	adds	r1, #1
    6576:	4423      	add	r3, r4
    6578:	2907      	cmp	r1, #7
    657a:	931d      	str	r3, [sp, #116]	; 0x74
    657c:	f8c9 4004 	str.w	r4, [r9, #4]
    6580:	911c      	str	r1, [sp, #112]	; 0x70
    6582:	f300 8226 	bgt.w	69d2 <_svfprintf_r+0x12da>
    6586:	f109 0908 	add.w	r9, r9, #8
    658a:	e7a9      	b.n	64e0 <_svfprintf_r+0xde8>
    658c:	f01b 0f01 	tst.w	fp, #1
    6590:	f47f adec 	bne.w	616c <_svfprintf_r+0xa74>
    6594:	2a07      	cmp	r2, #7
    6596:	f77f ae11 	ble.w	61bc <_svfprintf_r+0xac4>
    659a:	e72c      	b.n	63f6 <_svfprintf_r+0xcfe>
    659c:	aa1b      	add	r2, sp, #108	; 0x6c
    659e:	9903      	ldr	r1, [sp, #12]
    65a0:	9805      	ldr	r0, [sp, #20]
    65a2:	f000 fb61 	bl	6c68 <__ssprint_r>
    65a6:	2800      	cmp	r0, #0
    65a8:	f47f a99c 	bne.w	58e4 <_svfprintf_r+0x1ec>
    65ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    65ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    65b0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    65b4:	e5df      	b.n	6176 <_svfprintf_r+0xa7e>
    65b6:	aa1b      	add	r2, sp, #108	; 0x6c
    65b8:	9903      	ldr	r1, [sp, #12]
    65ba:	9805      	ldr	r0, [sp, #20]
    65bc:	f000 fb54 	bl	6c68 <__ssprint_r>
    65c0:	2800      	cmp	r0, #0
    65c2:	f47f a98f 	bne.w	58e4 <_svfprintf_r+0x1ec>
    65c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    65c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    65ca:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    65ce:	e5e1      	b.n	6194 <_svfprintf_r+0xa9c>
    65d0:	aa1b      	add	r2, sp, #108	; 0x6c
    65d2:	9903      	ldr	r1, [sp, #12]
    65d4:	9805      	ldr	r0, [sp, #20]
    65d6:	f000 fb47 	bl	6c68 <__ssprint_r>
    65da:	2800      	cmp	r0, #0
    65dc:	f47f a982 	bne.w	58e4 <_svfprintf_r+0x1ec>
    65e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    65e2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    65e6:	f7ff baeb 	b.w	5bc0 <_svfprintf_r+0x4c8>
    65ea:	9709      	str	r7, [sp, #36]	; 0x24
    65ec:	2700      	movs	r7, #0
    65ee:	f7ff b9a5 	b.w	593c <_svfprintf_r+0x244>
    65f2:	bf00      	nop
    65f4:	20000b80 	.word	0x20000b80
    65f8:	f01b 0f10 	tst.w	fp, #16
    65fc:	d10b      	bne.n	6616 <_svfprintf_r+0xf1e>
    65fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
    6602:	d008      	beq.n	6616 <_svfprintf_r+0xf1e>
    6604:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6606:	6813      	ldr	r3, [r2, #0]
    6608:	3204      	adds	r2, #4
    660a:	9209      	str	r2, [sp, #36]	; 0x24
    660c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    6610:	801a      	strh	r2, [r3, #0]
    6612:	f7ff b897 	b.w	5744 <_svfprintf_r+0x4c>
    6616:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6618:	6813      	ldr	r3, [r2, #0]
    661a:	3204      	adds	r2, #4
    661c:	9209      	str	r2, [sp, #36]	; 0x24
    661e:	9a06      	ldr	r2, [sp, #24]
    6620:	601a      	str	r2, [r3, #0]
    6622:	f7ff b88f 	b.w	5744 <_svfprintf_r+0x4c>
    6626:	eeb4 8b48 	vcmp.f64	d8, d8
    662a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    662e:	f180 829e 	bvs.w	6b6e <_svfprintf_r+0x1476>
    6632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6634:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    6638:	f023 0520 	bic.w	r5, r3, #32
    663c:	f000 8225 	beq.w	6a8a <_svfprintf_r+0x1392>
    6640:	2d47      	cmp	r5, #71	; 0x47
    6642:	f000 8126 	beq.w	6892 <_svfprintf_r+0x119a>
    6646:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    664a:	930a      	str	r3, [sp, #40]	; 0x28
    664c:	ee18 3a90 	vmov	r3, s17
    6650:	2b00      	cmp	r3, #0
    6652:	f2c0 821d 	blt.w	6a90 <_svfprintf_r+0x1398>
    6656:	eeb0 ab48 	vmov.f64	d10, d8
    665a:	2700      	movs	r7, #0
    665c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    665e:	2b66      	cmp	r3, #102	; 0x66
    6660:	f000 8202 	beq.w	6a68 <_svfprintf_r+0x1370>
    6664:	2b46      	cmp	r3, #70	; 0x46
    6666:	f000 80ec 	beq.w	6842 <_svfprintf_r+0x114a>
    666a:	eeb0 0b4a 	vmov.f64	d0, d10
    666e:	2d45      	cmp	r5, #69	; 0x45
    6670:	bf0c      	ite	eq
    6672:	f108 0401 	addeq.w	r4, r8, #1
    6676:	4644      	movne	r4, r8
    6678:	aa19      	add	r2, sp, #100	; 0x64
    667a:	ab16      	add	r3, sp, #88	; 0x58
    667c:	9201      	str	r2, [sp, #4]
    667e:	9300      	str	r3, [sp, #0]
    6680:	4622      	mov	r2, r4
    6682:	ab15      	add	r3, sp, #84	; 0x54
    6684:	2102      	movs	r1, #2
    6686:	9805      	ldr	r0, [sp, #20]
    6688:	f7fe f9f2 	bl	4a70 <_dtoa_r>
    668c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    668e:	2b67      	cmp	r3, #103	; 0x67
    6690:	4606      	mov	r6, r0
    6692:	f040 820e 	bne.w	6ab2 <_svfprintf_r+0x13ba>
    6696:	f01b 0f01 	tst.w	fp, #1
    669a:	f000 8266 	beq.w	6b6a <_svfprintf_r+0x1472>
    669e:	1931      	adds	r1, r6, r4
    66a0:	eeb5 ab40 	vcmp.f64	d10, #0.0
    66a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66a8:	f000 8185 	beq.w	69b6 <_svfprintf_r+0x12be>
    66ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    66ae:	4299      	cmp	r1, r3
    66b0:	d906      	bls.n	66c0 <_svfprintf_r+0xfc8>
    66b2:	2030      	movs	r0, #48	; 0x30
    66b4:	1c5a      	adds	r2, r3, #1
    66b6:	9219      	str	r2, [sp, #100]	; 0x64
    66b8:	7018      	strb	r0, [r3, #0]
    66ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    66bc:	4299      	cmp	r1, r3
    66be:	d8f9      	bhi.n	66b4 <_svfprintf_r+0xfbc>
    66c0:	1b9b      	subs	r3, r3, r6
    66c2:	2d47      	cmp	r5, #71	; 0x47
    66c4:	930d      	str	r3, [sp, #52]	; 0x34
    66c6:	f000 811f 	beq.w	6908 <_svfprintf_r+0x1210>
    66ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66cc:	2b65      	cmp	r3, #101	; 0x65
    66ce:	f340 81ff 	ble.w	6ad0 <_svfprintf_r+0x13d8>
    66d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66d4:	2b66      	cmp	r3, #102	; 0x66
    66d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    66d8:	f000 81fc 	beq.w	6ad4 <_svfprintf_r+0x13dc>
    66dc:	930e      	str	r3, [sp, #56]	; 0x38
    66de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    66e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    66e2:	428a      	cmp	r2, r1
    66e4:	f2c0 81d8 	blt.w	6a98 <_svfprintf_r+0x13a0>
    66e8:	f01b 0f01 	tst.w	fp, #1
    66ec:	f040 8234 	bne.w	6b58 <_svfprintf_r+0x1460>
    66f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    66f4:	9208      	str	r2, [sp, #32]
    66f6:	2267      	movs	r2, #103	; 0x67
    66f8:	920c      	str	r2, [sp, #48]	; 0x30
    66fa:	2f00      	cmp	r7, #0
    66fc:	f040 80f6 	bne.w	68ec <_svfprintf_r+0x11f4>
    6700:	46b8      	mov	r8, r7
    6702:	9304      	str	r3, [sp, #16]
    6704:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    6708:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    670c:	f7ff b9e6 	b.w	5adc <_svfprintf_r+0x3e4>
    6710:	f027 0707 	bic.w	r7, r7, #7
    6714:	f107 0308 	add.w	r3, r7, #8
    6718:	ed97 8b00 	vldr	d8, [r7]
    671c:	9309      	str	r3, [sp, #36]	; 0x24
    671e:	f7ff b9be 	b.w	5a9e <_svfprintf_r+0x3a6>
    6722:	464e      	mov	r6, r9
    6724:	4689      	mov	r9, r1
    6726:	3201      	adds	r2, #1
    6728:	4423      	add	r3, r4
    672a:	2a07      	cmp	r2, #7
    672c:	931d      	str	r3, [sp, #116]	; 0x74
    672e:	921c      	str	r2, [sp, #112]	; 0x70
    6730:	f8c9 7000 	str.w	r7, [r9]
    6734:	f8c9 4004 	str.w	r4, [r9, #4]
    6738:	f73f aebd 	bgt.w	64b6 <_svfprintf_r+0xdbe>
    673c:	f109 0908 	add.w	r9, r9, #8
    6740:	e6c4      	b.n	64cc <_svfprintf_r+0xdd4>
    6742:	2700      	movs	r7, #0
    6744:	45b8      	cmp	r8, r7
    6746:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    674a:	f6ff ac54 	blt.w	5ff6 <_svfprintf_r+0x8fe>
    674e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    6752:	e41e      	b.n	5f92 <_svfprintf_r+0x89a>
    6754:	aa1b      	add	r2, sp, #108	; 0x6c
    6756:	9903      	ldr	r1, [sp, #12]
    6758:	9805      	ldr	r0, [sp, #20]
    675a:	f000 fa85 	bl	6c68 <__ssprint_r>
    675e:	2800      	cmp	r0, #0
    6760:	f47f a8c0 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6766:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    676a:	e463      	b.n	6034 <_svfprintf_r+0x93c>
    676c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    676e:	e43b      	b.n	5fe8 <_svfprintf_r+0x8f0>
    6770:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6772:	49b9      	ldr	r1, [pc, #740]	; (6a58 <_svfprintf_r+0x1360>)
    6774:	f8c9 1000 	str.w	r1, [r9]
    6778:	3201      	adds	r2, #1
    677a:	3301      	adds	r3, #1
    677c:	2101      	movs	r1, #1
    677e:	2a07      	cmp	r2, #7
    6780:	931d      	str	r3, [sp, #116]	; 0x74
    6782:	921c      	str	r2, [sp, #112]	; 0x70
    6784:	f8c9 1004 	str.w	r1, [r9, #4]
    6788:	dc76      	bgt.n	6878 <_svfprintf_r+0x1180>
    678a:	f109 0908 	add.w	r9, r9, #8
    678e:	b92c      	cbnz	r4, 679c <_svfprintf_r+0x10a4>
    6790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6792:	b91a      	cbnz	r2, 679c <_svfprintf_r+0x10a4>
    6794:	f01b 0f01 	tst.w	fp, #1
    6798:	f43f aa5f 	beq.w	5c5a <_svfprintf_r+0x562>
    679c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    679e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    67a0:	9910      	ldr	r1, [sp, #64]	; 0x40
    67a2:	f8c9 1000 	str.w	r1, [r9]
    67a6:	3201      	adds	r2, #1
    67a8:	4403      	add	r3, r0
    67aa:	2a07      	cmp	r2, #7
    67ac:	931d      	str	r3, [sp, #116]	; 0x74
    67ae:	f8c9 0004 	str.w	r0, [r9, #4]
    67b2:	921c      	str	r2, [sp, #112]	; 0x70
    67b4:	f300 81b6 	bgt.w	6b24 <_svfprintf_r+0x142c>
    67b8:	f109 0908 	add.w	r9, r9, #8
    67bc:	4264      	negs	r4, r4
    67be:	2c00      	cmp	r4, #0
    67c0:	f340 8087 	ble.w	68d2 <_svfprintf_r+0x11da>
    67c4:	2c10      	cmp	r4, #16
    67c6:	4fa5      	ldr	r7, [pc, #660]	; (6a5c <_svfprintf_r+0x1364>)
    67c8:	f340 8112 	ble.w	69f0 <_svfprintf_r+0x12f8>
    67cc:	4649      	mov	r1, r9
    67ce:	2510      	movs	r5, #16
    67d0:	46b1      	mov	r9, r6
    67d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    67d6:	9e03      	ldr	r6, [sp, #12]
    67d8:	e004      	b.n	67e4 <_svfprintf_r+0x10ec>
    67da:	3108      	adds	r1, #8
    67dc:	3c10      	subs	r4, #16
    67de:	2c10      	cmp	r4, #16
    67e0:	f340 8104 	ble.w	69ec <_svfprintf_r+0x12f4>
    67e4:	3201      	adds	r2, #1
    67e6:	3310      	adds	r3, #16
    67e8:	2a07      	cmp	r2, #7
    67ea:	931d      	str	r3, [sp, #116]	; 0x74
    67ec:	921c      	str	r2, [sp, #112]	; 0x70
    67ee:	600f      	str	r7, [r1, #0]
    67f0:	604d      	str	r5, [r1, #4]
    67f2:	ddf2      	ble.n	67da <_svfprintf_r+0x10e2>
    67f4:	aa1b      	add	r2, sp, #108	; 0x6c
    67f6:	4631      	mov	r1, r6
    67f8:	4640      	mov	r0, r8
    67fa:	f000 fa35 	bl	6c68 <__ssprint_r>
    67fe:	2800      	cmp	r0, #0
    6800:	f47f a870 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6806:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6808:	a928      	add	r1, sp, #160	; 0xa0
    680a:	e7e7      	b.n	67dc <_svfprintf_r+0x10e4>
    680c:	aa1b      	add	r2, sp, #108	; 0x6c
    680e:	9903      	ldr	r1, [sp, #12]
    6810:	9805      	ldr	r0, [sp, #20]
    6812:	f000 fa29 	bl	6c68 <__ssprint_r>
    6816:	2800      	cmp	r0, #0
    6818:	f47f a864 	bne.w	58e4 <_svfprintf_r+0x1ec>
    681c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    681e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6822:	e41f      	b.n	6064 <_svfprintf_r+0x96c>
    6824:	2140      	movs	r1, #64	; 0x40
    6826:	9805      	ldr	r0, [sp, #20]
    6828:	f7fc fb02 	bl	2e30 <_malloc_r>
    682c:	9a03      	ldr	r2, [sp, #12]
    682e:	6010      	str	r0, [r2, #0]
    6830:	6110      	str	r0, [r2, #16]
    6832:	2800      	cmp	r0, #0
    6834:	f000 81ed 	beq.w	6c12 <_svfprintf_r+0x151a>
    6838:	9a03      	ldr	r2, [sp, #12]
    683a:	2340      	movs	r3, #64	; 0x40
    683c:	6153      	str	r3, [r2, #20]
    683e:	f7fe bf74 	b.w	572a <_svfprintf_r+0x32>
    6842:	aa19      	add	r2, sp, #100	; 0x64
    6844:	ab16      	add	r3, sp, #88	; 0x58
    6846:	9201      	str	r2, [sp, #4]
    6848:	9300      	str	r3, [sp, #0]
    684a:	4642      	mov	r2, r8
    684c:	ab15      	add	r3, sp, #84	; 0x54
    684e:	2103      	movs	r1, #3
    6850:	eeb0 0b4a 	vmov.f64	d0, d10
    6854:	9805      	ldr	r0, [sp, #20]
    6856:	f7fe f90b 	bl	4a70 <_dtoa_r>
    685a:	4644      	mov	r4, r8
    685c:	4606      	mov	r6, r0
    685e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6860:	2b46      	cmp	r3, #70	; 0x46
    6862:	eb06 0104 	add.w	r1, r6, r4
    6866:	f47f af1b 	bne.w	66a0 <_svfprintf_r+0xfa8>
    686a:	7833      	ldrb	r3, [r6, #0]
    686c:	2b30      	cmp	r3, #48	; 0x30
    686e:	f000 818d 	beq.w	6b8c <_svfprintf_r+0x1494>
    6872:	9c15      	ldr	r4, [sp, #84]	; 0x54
    6874:	4421      	add	r1, r4
    6876:	e713      	b.n	66a0 <_svfprintf_r+0xfa8>
    6878:	aa1b      	add	r2, sp, #108	; 0x6c
    687a:	9903      	ldr	r1, [sp, #12]
    687c:	9805      	ldr	r0, [sp, #20]
    687e:	f000 f9f3 	bl	6c68 <__ssprint_r>
    6882:	2800      	cmp	r0, #0
    6884:	f47f a82e 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6888:	9c15      	ldr	r4, [sp, #84]	; 0x54
    688a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    688c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6890:	e77d      	b.n	678e <_svfprintf_r+0x1096>
    6892:	f1b8 0f00 	cmp.w	r8, #0
    6896:	bf08      	it	eq
    6898:	f04f 0801 	moveq.w	r8, #1
    689c:	e6d3      	b.n	6646 <_svfprintf_r+0xf4e>
    689e:	9309      	str	r3, [sp, #36]	; 0x24
    68a0:	e6a4      	b.n	65ec <_svfprintf_r+0xef4>
    68a2:	9309      	str	r3, [sp, #36]	; 0x24
    68a4:	4617      	mov	r7, r2
    68a6:	f7ff ba7b 	b.w	5da0 <_svfprintf_r+0x6a8>
    68aa:	4630      	mov	r0, r6
    68ac:	f7fd f948 	bl	3b40 <strlen>
    68b0:	46a0      	mov	r8, r4
    68b2:	4603      	mov	r3, r0
    68b4:	9008      	str	r0, [sp, #32]
    68b6:	f7ff bb61 	b.w	5f7c <_svfprintf_r+0x884>
    68ba:	aa1b      	add	r2, sp, #108	; 0x6c
    68bc:	9903      	ldr	r1, [sp, #12]
    68be:	9805      	ldr	r0, [sp, #20]
    68c0:	f000 f9d2 	bl	6c68 <__ssprint_r>
    68c4:	2800      	cmp	r0, #0
    68c6:	f47f a80d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    68ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    68cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    68ce:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    68d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    68d4:	f8c9 6000 	str.w	r6, [r9]
    68d8:	3201      	adds	r2, #1
    68da:	4403      	add	r3, r0
    68dc:	2a07      	cmp	r2, #7
    68de:	931d      	str	r3, [sp, #116]	; 0x74
    68e0:	921c      	str	r2, [sp, #112]	; 0x70
    68e2:	f8c9 0004 	str.w	r0, [r9, #4]
    68e6:	f77f a9b6 	ble.w	5c56 <_svfprintf_r+0x55e>
    68ea:	e476      	b.n	61da <_svfprintf_r+0xae2>
    68ec:	272d      	movs	r7, #45	; 0x2d
    68ee:	9304      	str	r3, [sp, #16]
    68f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    68f4:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    68f8:	f04f 0800 	mov.w	r8, #0
    68fc:	f7ff b8ef 	b.w	5ade <_svfprintf_r+0x3e6>
    6900:	9709      	str	r7, [sp, #36]	; 0x24
    6902:	461f      	mov	r7, r3
    6904:	f7ff ba4c 	b.w	5da0 <_svfprintf_r+0x6a8>
    6908:	9b15      	ldr	r3, [sp, #84]	; 0x54
    690a:	1cda      	adds	r2, r3, #3
    690c:	db02      	blt.n	6914 <_svfprintf_r+0x121c>
    690e:	4598      	cmp	r8, r3
    6910:	f6bf aee4 	bge.w	66dc <_svfprintf_r+0xfe4>
    6914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6916:	3a02      	subs	r2, #2
    6918:	920c      	str	r2, [sp, #48]	; 0x30
    691a:	3b01      	subs	r3, #1
    691c:	2b00      	cmp	r3, #0
    691e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    6922:	9315      	str	r3, [sp, #84]	; 0x54
    6924:	bfb8      	it	lt
    6926:	425b      	neglt	r3, r3
    6928:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    692c:	bfb4      	ite	lt
    692e:	222d      	movlt	r2, #45	; 0x2d
    6930:	222b      	movge	r2, #43	; 0x2b
    6932:	2b09      	cmp	r3, #9
    6934:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    6938:	f340 8106 	ble.w	6b48 <_svfprintf_r+0x1450>
    693c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    6940:	4604      	mov	r4, r0
    6942:	4a47      	ldr	r2, [pc, #284]	; (6a60 <_svfprintf_r+0x1368>)
    6944:	fb82 2103 	smull	r2, r1, r2, r3
    6948:	17da      	asrs	r2, r3, #31
    694a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    694e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    6952:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    6956:	f103 0130 	add.w	r1, r3, #48	; 0x30
    695a:	2a09      	cmp	r2, #9
    695c:	4613      	mov	r3, r2
    695e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    6962:	dcee      	bgt.n	6942 <_svfprintf_r+0x124a>
    6964:	4621      	mov	r1, r4
    6966:	3330      	adds	r3, #48	; 0x30
    6968:	b2da      	uxtb	r2, r3
    696a:	f801 2d01 	strb.w	r2, [r1, #-1]!
    696e:	4288      	cmp	r0, r1
    6970:	f240 8162 	bls.w	6c38 <_svfprintf_r+0x1540>
    6974:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    6978:	4623      	mov	r3, r4
    697a:	e001      	b.n	6980 <_svfprintf_r+0x1288>
    697c:	f813 2b01 	ldrb.w	r2, [r3], #1
    6980:	f801 2b01 	strb.w	r2, [r1], #1
    6984:	4298      	cmp	r0, r3
    6986:	d1f9      	bne.n	697c <_svfprintf_r+0x1284>
    6988:	1c43      	adds	r3, r0, #1
    698a:	1b1b      	subs	r3, r3, r4
    698c:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    6990:	4413      	add	r3, r2
    6992:	aa17      	add	r2, sp, #92	; 0x5c
    6994:	1a9b      	subs	r3, r3, r2
    6996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6998:	9311      	str	r3, [sp, #68]	; 0x44
    699a:	2a01      	cmp	r2, #1
    699c:	4413      	add	r3, r2
    699e:	9308      	str	r3, [sp, #32]
    69a0:	f340 80ff 	ble.w	6ba2 <_svfprintf_r+0x14aa>
    69a4:	9b08      	ldr	r3, [sp, #32]
    69a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    69a8:	4413      	add	r3, r2
    69aa:	2200      	movs	r2, #0
    69ac:	9308      	str	r3, [sp, #32]
    69ae:	920e      	str	r2, [sp, #56]	; 0x38
    69b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    69b4:	e6a1      	b.n	66fa <_svfprintf_r+0x1002>
    69b6:	460b      	mov	r3, r1
    69b8:	e682      	b.n	66c0 <_svfprintf_r+0xfc8>
    69ba:	aa1b      	add	r2, sp, #108	; 0x6c
    69bc:	9903      	ldr	r1, [sp, #12]
    69be:	9805      	ldr	r0, [sp, #20]
    69c0:	f000 f952 	bl	6c68 <__ssprint_r>
    69c4:	2800      	cmp	r0, #0
    69c6:	f47e af8d 	bne.w	58e4 <_svfprintf_r+0x1ec>
    69ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    69cc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    69d0:	e483      	b.n	62da <_svfprintf_r+0xbe2>
    69d2:	aa1b      	add	r2, sp, #108	; 0x6c
    69d4:	9903      	ldr	r1, [sp, #12]
    69d6:	9805      	ldr	r0, [sp, #20]
    69d8:	f000 f946 	bl	6c68 <__ssprint_r>
    69dc:	2800      	cmp	r0, #0
    69de:	f47e af81 	bne.w	58e4 <_svfprintf_r+0x1ec>
    69e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    69e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    69e6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    69ea:	e579      	b.n	64e0 <_svfprintf_r+0xde8>
    69ec:	464e      	mov	r6, r9
    69ee:	4689      	mov	r9, r1
    69f0:	3201      	adds	r2, #1
    69f2:	4423      	add	r3, r4
    69f4:	2a07      	cmp	r2, #7
    69f6:	931d      	str	r3, [sp, #116]	; 0x74
    69f8:	921c      	str	r2, [sp, #112]	; 0x70
    69fa:	f8c9 7000 	str.w	r7, [r9]
    69fe:	f8c9 4004 	str.w	r4, [r9, #4]
    6a02:	f73f af5a 	bgt.w	68ba <_svfprintf_r+0x11c2>
    6a06:	f109 0908 	add.w	r9, r9, #8
    6a0a:	e762      	b.n	68d2 <_svfprintf_r+0x11da>
    6a0c:	aa1b      	add	r2, sp, #108	; 0x6c
    6a0e:	9903      	ldr	r1, [sp, #12]
    6a10:	9805      	ldr	r0, [sp, #20]
    6a12:	f000 f929 	bl	6c68 <__ssprint_r>
    6a16:	2800      	cmp	r0, #0
    6a18:	f47e af64 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6a1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6a1e:	990d      	ldr	r1, [sp, #52]	; 0x34
    6a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6a22:	1a8a      	subs	r2, r1, r2
    6a24:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6a28:	e572      	b.n	6510 <_svfprintf_r+0xe18>
    6a2a:	2d06      	cmp	r5, #6
    6a2c:	462b      	mov	r3, r5
    6a2e:	bf28      	it	cs
    6a30:	2306      	movcs	r3, #6
    6a32:	9308      	str	r3, [sp, #32]
    6a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6a38:	46b0      	mov	r8, r6
    6a3a:	9709      	str	r7, [sp, #36]	; 0x24
    6a3c:	960e      	str	r6, [sp, #56]	; 0x38
    6a3e:	4637      	mov	r7, r6
    6a40:	9304      	str	r3, [sp, #16]
    6a42:	4e08      	ldr	r6, [pc, #32]	; (6a64 <_svfprintf_r+0x136c>)
    6a44:	f7ff b84a 	b.w	5adc <_svfprintf_r+0x3e4>
    6a48:	469b      	mov	fp, r3
    6a4a:	f7ff b9ea 	b.w	5e22 <_svfprintf_r+0x72a>
    6a4e:	272d      	movs	r7, #45	; 0x2d
    6a50:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    6a54:	f7ff b833 	b.w	5abe <_svfprintf_r+0x3c6>
    6a58:	20000aa0 	.word	0x20000aa0
    6a5c:	20000b80 	.word	0x20000b80
    6a60:	66666667 	.word	0x66666667
    6a64:	20000adc 	.word	0x20000adc
    6a68:	aa19      	add	r2, sp, #100	; 0x64
    6a6a:	ab16      	add	r3, sp, #88	; 0x58
    6a6c:	9201      	str	r2, [sp, #4]
    6a6e:	9300      	str	r3, [sp, #0]
    6a70:	2103      	movs	r1, #3
    6a72:	ab15      	add	r3, sp, #84	; 0x54
    6a74:	4642      	mov	r2, r8
    6a76:	eeb0 0b4a 	vmov.f64	d0, d10
    6a7a:	9805      	ldr	r0, [sp, #20]
    6a7c:	f7fd fff8 	bl	4a70 <_dtoa_r>
    6a80:	4644      	mov	r4, r8
    6a82:	4606      	mov	r6, r0
    6a84:	eb00 0108 	add.w	r1, r0, r8
    6a88:	e6ef      	b.n	686a <_svfprintf_r+0x1172>
    6a8a:	f04f 0806 	mov.w	r8, #6
    6a8e:	e5da      	b.n	6646 <_svfprintf_r+0xf4e>
    6a90:	eeb1 ab48 	vneg.f64	d10, d8
    6a94:	272d      	movs	r7, #45	; 0x2d
    6a96:	e5e1      	b.n	665c <_svfprintf_r+0xf64>
    6a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6a9c:	4413      	add	r3, r2
    6a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6aa0:	9308      	str	r3, [sp, #32]
    6aa2:	2a00      	cmp	r2, #0
    6aa4:	f340 8086 	ble.w	6bb4 <_svfprintf_r+0x14bc>
    6aa8:	2267      	movs	r2, #103	; 0x67
    6aaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6aae:	920c      	str	r2, [sp, #48]	; 0x30
    6ab0:	e623      	b.n	66fa <_svfprintf_r+0x1002>
    6ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ab4:	2b47      	cmp	r3, #71	; 0x47
    6ab6:	f47f adf2 	bne.w	669e <_svfprintf_r+0xfa6>
    6aba:	f01b 0f01 	tst.w	fp, #1
    6abe:	f47f aece 	bne.w	685e <_svfprintf_r+0x1166>
    6ac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6ac4:	2d47      	cmp	r5, #71	; 0x47
    6ac6:	eba3 0306 	sub.w	r3, r3, r6
    6aca:	930d      	str	r3, [sp, #52]	; 0x34
    6acc:	f43f af1c 	beq.w	6908 <_svfprintf_r+0x1210>
    6ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6ad2:	e722      	b.n	691a <_svfprintf_r+0x1222>
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	461a      	mov	r2, r3
    6ad8:	930e      	str	r3, [sp, #56]	; 0x38
    6ada:	dd73      	ble.n	6bc4 <_svfprintf_r+0x14cc>
    6adc:	f1b8 0f00 	cmp.w	r8, #0
    6ae0:	d14b      	bne.n	6b7a <_svfprintf_r+0x1482>
    6ae2:	f01b 0f01 	tst.w	fp, #1
    6ae6:	d148      	bne.n	6b7a <_svfprintf_r+0x1482>
    6ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6aec:	9208      	str	r2, [sp, #32]
    6aee:	e604      	b.n	66fa <_svfprintf_r+0x1002>
    6af0:	f01b 0f01 	tst.w	fp, #1
    6af4:	4647      	mov	r7, r8
    6af6:	d005      	beq.n	6b04 <_svfprintf_r+0x140c>
    6af8:	ae38      	add	r6, sp, #224	; 0xe0
    6afa:	2330      	movs	r3, #48	; 0x30
    6afc:	f806 3d41 	strb.w	r3, [r6, #-65]!
    6b00:	f7ff b956 	b.w	5db0 <_svfprintf_r+0x6b8>
    6b04:	f8cd 8020 	str.w	r8, [sp, #32]
    6b08:	ae28      	add	r6, sp, #160	; 0xa0
    6b0a:	f7ff b954 	b.w	5db6 <_svfprintf_r+0x6be>
    6b0e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    6b12:	9709      	str	r7, [sp, #36]	; 0x24
    6b14:	9304      	str	r3, [sp, #16]
    6b16:	9508      	str	r5, [sp, #32]
    6b18:	4680      	mov	r8, r0
    6b1a:	900e      	str	r0, [sp, #56]	; 0x38
    6b1c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    6b20:	f7fe bfdc 	b.w	5adc <_svfprintf_r+0x3e4>
    6b24:	aa1b      	add	r2, sp, #108	; 0x6c
    6b26:	9903      	ldr	r1, [sp, #12]
    6b28:	9805      	ldr	r0, [sp, #20]
    6b2a:	f000 f89d 	bl	6c68 <__ssprint_r>
    6b2e:	2800      	cmp	r0, #0
    6b30:	f47e aed8 	bne.w	58e4 <_svfprintf_r+0x1ec>
    6b34:	9c15      	ldr	r4, [sp, #84]	; 0x54
    6b36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6b38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6b3a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    6b3e:	e63d      	b.n	67bc <_svfprintf_r+0x10c4>
    6b40:	46a2      	mov	sl, r4
    6b42:	2500      	movs	r5, #0
    6b44:	f7fe be33 	b.w	57ae <_svfprintf_r+0xb6>
    6b48:	3330      	adds	r3, #48	; 0x30
    6b4a:	2230      	movs	r2, #48	; 0x30
    6b4c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    6b50:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    6b54:	ab18      	add	r3, sp, #96	; 0x60
    6b56:	e71c      	b.n	6992 <_svfprintf_r+0x129a>
    6b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6b5c:	4413      	add	r3, r2
    6b5e:	2267      	movs	r2, #103	; 0x67
    6b60:	9308      	str	r3, [sp, #32]
    6b62:	920c      	str	r2, [sp, #48]	; 0x30
    6b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6b68:	e5c7      	b.n	66fa <_svfprintf_r+0x1002>
    6b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6b6c:	e5a8      	b.n	66c0 <_svfprintf_r+0xfc8>
    6b6e:	4e3c      	ldr	r6, [pc, #240]	; (6c60 <_svfprintf_r+0x1568>)
    6b70:	4b3c      	ldr	r3, [pc, #240]	; (6c64 <_svfprintf_r+0x156c>)
    6b72:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    6b76:	f7fe bfa4 	b.w	5ac2 <_svfprintf_r+0x3ca>
    6b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b7e:	189d      	adds	r5, r3, r2
    6b80:	eb05 0308 	add.w	r3, r5, r8
    6b84:	9308      	str	r3, [sp, #32]
    6b86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6b8a:	e5b6      	b.n	66fa <_svfprintf_r+0x1002>
    6b8c:	eeb5 ab40 	vcmp.f64	d10, #0.0
    6b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b94:	f43f ae6d 	beq.w	6872 <_svfprintf_r+0x117a>
    6b98:	f1c4 0401 	rsb	r4, r4, #1
    6b9c:	9415      	str	r4, [sp, #84]	; 0x54
    6b9e:	4421      	add	r1, r4
    6ba0:	e57e      	b.n	66a0 <_svfprintf_r+0xfa8>
    6ba2:	f01b 0301 	ands.w	r3, fp, #1
    6ba6:	f47f aefd 	bne.w	69a4 <_svfprintf_r+0x12ac>
    6baa:	930e      	str	r3, [sp, #56]	; 0x38
    6bac:	9b08      	ldr	r3, [sp, #32]
    6bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6bb2:	e5a2      	b.n	66fa <_svfprintf_r+0x1002>
    6bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6bb6:	9a08      	ldr	r2, [sp, #32]
    6bb8:	f1c3 0301 	rsb	r3, r3, #1
    6bbc:	441a      	add	r2, r3
    6bbe:	4613      	mov	r3, r2
    6bc0:	9208      	str	r2, [sp, #32]
    6bc2:	e771      	b.n	6aa8 <_svfprintf_r+0x13b0>
    6bc4:	f1b8 0f00 	cmp.w	r8, #0
    6bc8:	d102      	bne.n	6bd0 <_svfprintf_r+0x14d8>
    6bca:	f01b 0f01 	tst.w	fp, #1
    6bce:	d007      	beq.n	6be0 <_svfprintf_r+0x14e8>
    6bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6bd2:	1c5d      	adds	r5, r3, #1
    6bd4:	eb05 0308 	add.w	r3, r5, r8
    6bd8:	9308      	str	r3, [sp, #32]
    6bda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6bde:	e58c      	b.n	66fa <_svfprintf_r+0x1002>
    6be0:	2301      	movs	r3, #1
    6be2:	9308      	str	r3, [sp, #32]
    6be4:	e589      	b.n	66fa <_svfprintf_r+0x1002>
    6be6:	9809      	ldr	r0, [sp, #36]	; 0x24
    6be8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    6bec:	6805      	ldr	r5, [r0, #0]
    6bee:	3004      	adds	r0, #4
    6bf0:	2d00      	cmp	r5, #0
    6bf2:	9009      	str	r0, [sp, #36]	; 0x24
    6bf4:	46a2      	mov	sl, r4
    6bf6:	f6be add8 	bge.w	57aa <_svfprintf_r+0xb2>
    6bfa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6bfe:	f7fe bdd4 	b.w	57aa <_svfprintf_r+0xb2>
    6c02:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c06:	f7ff b98d 	b.w	5f24 <_svfprintf_r+0x82c>
    6c0a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c0e:	f7ff b9cf 	b.w	5fb0 <_svfprintf_r+0x8b8>
    6c12:	9a05      	ldr	r2, [sp, #20]
    6c14:	230c      	movs	r3, #12
    6c16:	6013      	str	r3, [r2, #0]
    6c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6c1c:	f7fe be6b 	b.w	58f6 <_svfprintf_r+0x1fe>
    6c20:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c24:	f7ff b8d4 	b.w	5dd0 <_svfprintf_r+0x6d8>
    6c28:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c2c:	f7ff b8a3 	b.w	5d76 <_svfprintf_r+0x67e>
    6c30:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c34:	f7ff b952 	b.w	5edc <_svfprintf_r+0x7e4>
    6c38:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    6c3c:	e6a9      	b.n	6992 <_svfprintf_r+0x129a>
    6c3e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c42:	f7fe be62 	b.w	590a <_svfprintf_r+0x212>
    6c46:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c4a:	f7ff b862 	b.w	5d12 <_svfprintf_r+0x61a>
    6c4e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c52:	f7fe bf16 	b.w	5a82 <_svfprintf_r+0x38a>
    6c56:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    6c5a:	f7fe bed0 	b.w	59fe <_svfprintf_r+0x306>
    6c5e:	bf00      	nop
    6c60:	20000ab0 	.word	0x20000ab0
    6c64:	20000aac 	.word	0x20000aac

00006c68 <__ssprint_r>:
    6c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c6c:	6893      	ldr	r3, [r2, #8]
    6c6e:	b083      	sub	sp, #12
    6c70:	4690      	mov	r8, r2
    6c72:	2b00      	cmp	r3, #0
    6c74:	d072      	beq.n	6d5c <__ssprint_r+0xf4>
    6c76:	4683      	mov	fp, r0
    6c78:	f04f 0900 	mov.w	r9, #0
    6c7c:	6816      	ldr	r6, [r2, #0]
    6c7e:	6808      	ldr	r0, [r1, #0]
    6c80:	688b      	ldr	r3, [r1, #8]
    6c82:	460d      	mov	r5, r1
    6c84:	464c      	mov	r4, r9
    6c86:	2c00      	cmp	r4, #0
    6c88:	d045      	beq.n	6d16 <__ssprint_r+0xae>
    6c8a:	429c      	cmp	r4, r3
    6c8c:	461f      	mov	r7, r3
    6c8e:	469a      	mov	sl, r3
    6c90:	d346      	bcc.n	6d20 <__ssprint_r+0xb8>
    6c92:	89ab      	ldrh	r3, [r5, #12]
    6c94:	f413 6f90 	tst.w	r3, #1152	; 0x480
    6c98:	d02d      	beq.n	6cf6 <__ssprint_r+0x8e>
    6c9a:	696f      	ldr	r7, [r5, #20]
    6c9c:	6929      	ldr	r1, [r5, #16]
    6c9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    6ca2:	ebc1 0a00 	rsb	sl, r1, r0
    6ca6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    6caa:	1c60      	adds	r0, r4, #1
    6cac:	107f      	asrs	r7, r7, #1
    6cae:	4450      	add	r0, sl
    6cb0:	42b8      	cmp	r0, r7
    6cb2:	463a      	mov	r2, r7
    6cb4:	bf84      	itt	hi
    6cb6:	4607      	movhi	r7, r0
    6cb8:	463a      	movhi	r2, r7
    6cba:	055b      	lsls	r3, r3, #21
    6cbc:	d533      	bpl.n	6d26 <__ssprint_r+0xbe>
    6cbe:	4611      	mov	r1, r2
    6cc0:	4658      	mov	r0, fp
    6cc2:	f7fc f8b5 	bl	2e30 <_malloc_r>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d037      	beq.n	6d3a <__ssprint_r+0xd2>
    6cca:	4652      	mov	r2, sl
    6ccc:	6929      	ldr	r1, [r5, #16]
    6cce:	9001      	str	r0, [sp, #4]
    6cd0:	f7fc fb7c 	bl	33cc <memcpy>
    6cd4:	89aa      	ldrh	r2, [r5, #12]
    6cd6:	9b01      	ldr	r3, [sp, #4]
    6cd8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    6cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6ce0:	81aa      	strh	r2, [r5, #12]
    6ce2:	ebca 0207 	rsb	r2, sl, r7
    6ce6:	eb03 000a 	add.w	r0, r3, sl
    6cea:	616f      	str	r7, [r5, #20]
    6cec:	612b      	str	r3, [r5, #16]
    6cee:	6028      	str	r0, [r5, #0]
    6cf0:	60aa      	str	r2, [r5, #8]
    6cf2:	4627      	mov	r7, r4
    6cf4:	46a2      	mov	sl, r4
    6cf6:	4652      	mov	r2, sl
    6cf8:	4649      	mov	r1, r9
    6cfa:	f7fc fc01 	bl	3500 <memmove>
    6cfe:	f8d8 2008 	ldr.w	r2, [r8, #8]
    6d02:	68ab      	ldr	r3, [r5, #8]
    6d04:	6828      	ldr	r0, [r5, #0]
    6d06:	1bdb      	subs	r3, r3, r7
    6d08:	4450      	add	r0, sl
    6d0a:	1b14      	subs	r4, r2, r4
    6d0c:	60ab      	str	r3, [r5, #8]
    6d0e:	6028      	str	r0, [r5, #0]
    6d10:	f8c8 4008 	str.w	r4, [r8, #8]
    6d14:	b314      	cbz	r4, 6d5c <__ssprint_r+0xf4>
    6d16:	f8d6 9000 	ldr.w	r9, [r6]
    6d1a:	6874      	ldr	r4, [r6, #4]
    6d1c:	3608      	adds	r6, #8
    6d1e:	e7b2      	b.n	6c86 <__ssprint_r+0x1e>
    6d20:	4627      	mov	r7, r4
    6d22:	46a2      	mov	sl, r4
    6d24:	e7e7      	b.n	6cf6 <__ssprint_r+0x8e>
    6d26:	4658      	mov	r0, fp
    6d28:	f7fc fca8 	bl	367c <_realloc_r>
    6d2c:	4603      	mov	r3, r0
    6d2e:	2800      	cmp	r0, #0
    6d30:	d1d7      	bne.n	6ce2 <__ssprint_r+0x7a>
    6d32:	6929      	ldr	r1, [r5, #16]
    6d34:	4658      	mov	r0, fp
    6d36:	f7fd f947 	bl	3fc8 <_free_r>
    6d3a:	230c      	movs	r3, #12
    6d3c:	f8cb 3000 	str.w	r3, [fp]
    6d40:	89ab      	ldrh	r3, [r5, #12]
    6d42:	2200      	movs	r2, #0
    6d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d4c:	81ab      	strh	r3, [r5, #12]
    6d4e:	f8c8 2008 	str.w	r2, [r8, #8]
    6d52:	f8c8 2004 	str.w	r2, [r8, #4]
    6d56:	b003      	add	sp, #12
    6d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d5c:	2000      	movs	r0, #0
    6d5e:	f8c8 0004 	str.w	r0, [r8, #4]
    6d62:	b003      	add	sp, #12
    6d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006d68 <___reboot_Teensyduino__veneer>:
    6d68:	f85f f000 	ldr.w	pc, [pc]	; 6d6c <___reboot_Teensyduino__veneer+0x4>
    6d6c:	60001dc5 	.word	0x60001dc5

00006d70 <___init_veneer>:
    6d70:	f85f f000 	ldr.w	pc, [pc]	; 6d74 <___init_veneer+0x4>
    6d74:	60001e19 	.word	0x60001e19
	...

Disassembly of section .fini:

00006d80 <_fini>:
    6d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d82:	bf00      	nop

Disassembly of section .text.csf:

6000a7a4 <_heap_end+0x3fd8a7a4>:
6000a7a4:	ffffffff 	.word	0xffffffff
6000a7a8:	ffffffff 	.word	0xffffffff
6000a7ac:	ffffffff 	.word	0xffffffff
6000a7b0:	ffffffff 	.word	0xffffffff
6000a7b4:	ffffffff 	.word	0xffffffff
6000a7b8:	ffffffff 	.word	0xffffffff
6000a7bc:	ffffffff 	.word	0xffffffff
6000a7c0:	ffffffff 	.word	0xffffffff
6000a7c4:	ffffffff 	.word	0xffffffff
6000a7c8:	ffffffff 	.word	0xffffffff
6000a7cc:	ffffffff 	.word	0xffffffff
6000a7d0:	ffffffff 	.word	0xffffffff
6000a7d4:	ffffffff 	.word	0xffffffff
6000a7d8:	ffffffff 	.word	0xffffffff
6000a7dc:	ffffffff 	.word	0xffffffff
6000a7e0:	ffffffff 	.word	0xffffffff
6000a7e4:	ffffffff 	.word	0xffffffff
6000a7e8:	ffffffff 	.word	0xffffffff
6000a7ec:	ffffffff 	.word	0xffffffff
6000a7f0:	ffffffff 	.word	0xffffffff
6000a7f4:	ffffffff 	.word	0xffffffff
6000a7f8:	ffffffff 	.word	0xffffffff
6000a7fc:	ffffffff 	.word	0xffffffff

6000a800 <hab_csf>:
	...
