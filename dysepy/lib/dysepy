#! /usr/bin/python3

"""
	Project: DysePy
	Author: Mitchell D Scott
	Description:
"""

import os
import sys
import yaml
import glob
import shutil
import argparse
import subprocess


def clear_directory(path):
	"""
		Used for cleaning. Clears a directory and or replaces it.
		The cleared directory will be empty after.
		PARAMS:
			path: string or path object, specifies the directory to clear
	"""

	# 		Idoit Security
	#  this function could wipe the entire disk
	# if not used with caution. It's probably not safe because if
	# PROJECT_ROOT changes there could be catastrophic effects.
	if len(path.split('/')) < 3:
		print(f'Illegal Directory: cannot remove {path}')
		return

	# Delete dir if it exists
	if os.path.exists(path):
		shutil.rmtree(path)
	
	# Recreate empty directory
	os.mkdir(path)
	
def load_build_config(build):

	base_config = f'{build}.yaml'
	project_root = os.getenv('PROJECT_ROOT')
	config_path = os.path.join(project_root, 'dysepy', 'build')
	target_build_config = os.path.join(config_path, base_config)
	
	if not os.path.exists(target_build_config):
		print(f'Could not find {base_config}, exiting...')

	builds = []
	includes = [base_config]
			
	for file in includes:
		config = os.path.join(config_path, file)
		with open(config, 'r') as fc:
			builds.append(yaml.safe_load(fc))
			if 'include' in builds[-1]:
				includes += builds[-1]['include']

	return builds

def reset_directory(directory):
	if os.path.exists(directory):
		shutil.rmtree(directory)

def assert_directory(directory):
	if not os.path.exists(directory):
		os.mkdir(directory)

def copy_file_from_path(src, target_path):
	target_file = src.split('/')[-1]
	shutil.copyfile(src, os.path.join(target_path, target_file))

def copy_dir_from_path(src, target_path):
	target_dir = src.split('/')[-1]
	target = os.path.join(target_path, target_dir)
	reset_directory(target)
	shutil.copytree(src, target)

def copy_packages(packages, src_path, target_path):
	os.chdir(src_path)
	for file in packages:
		src = os.path.join(src_path, file)
		if os.path.isdir(file):
			copy_dir_from_path(src, target_path)
		elif os.path.isfile(file):
			copy_file_from_path(src, target_path)

def build_dysepy_project(build, v):
	project_root = os.getenv('PROJECT_ROOT')
	lib_path = os.path.join(project_root, 'dysepy', 'lib')
	bin_path = os.path.join(project_root, 'dysepy', 'bin')
	doc_path = os.path.join(project_root, 'docs')

	assert_directory(lib_path)
	assert_directory(bin_path)
	assert_directory(doc_path)
	
	builds = load_build_config(build)

	for build in builds:
		if 'project' in build:
			src_path = os.path.join(project_root, 'src', build['project'])	
			doc_dir = os.path.join(doc_path, build['project'])


			if 'build' in build:
				build_cmd = f"cd {src_path} && {build['build']}"
				result = subprocess.run(build_cmd, shell=True)

	# for file in glob.glob(os.path.join(lib_path, '*')):
	# 	result = subprocess.run(f'chmod +x {file}', shell=True)

def get_devices():
	"""
		Load all registered devices from
		robots.yaml
	"""
	robots = os.path.join(os.getenv('PROJECT_ROOT'), 'buffpy', 'data', 'robots', 'robots.yaml')
	if os.path.exists(robots):
		with open(robots, 'r') as f:
			return yaml.safe_load(f)


# def install_ssh_keys():
# 	"""
# 		Generate and push ed25519 keys to
# 		registered devices. This may be a huge 
# 		security risk. But it makes installing
# 		and sshing really nice.
# 		requires password (per device)
# 			2 - without installed keys
# 			0 - with installed keys
# 	"""

# 	devices = get_devices()
# 	home = os.getenv('HOME')

# 	# only generate keys if they do not exist already
# 	if not os.path.exists(f'{home}/.ssh/id_ed25519.pub'):
# 		result = subprocess.run(['ssh-keygen', '-t', 'ed25519'])

# 	for robot in devices:
# 		robot_address = f'cu-robotics@{robot}'
# 		try:
# 			result = subprocess.run(['ssh', robot_address, f'if [[ ! -f /home/cu-robotics/.ssh/id_ed25519.pub ]]; then ssh-keygen -t ed25519; fi'], timeout=30)
# 			if result.returncode == 0:
# 				result = subprocess.run(['ssh-copy-id', '-i', f'{home}/.ssh/id_ed25519.pub', robot_address])
# 				if result.returncode == 0:
# 					print(f'{robot} Success')

# 		except subprocess.TimeoutExpired:
# 			print(f'{robot} Timed out')


def deploy_directory(robot_address, source, target):
	""" 
		Send dysepy directory to a robot with scp.
		PARAMS:
			robot_address: string, USERNAME@<IP/HOSTNAME>
			source: string or path like object, the target directory to copy
			target: string or path like object, the target directory to copy into
		RETURNS:
			None
	"""
	clean_dir_result = subprocess.run(['ssh', robot_address, f'if [[ ! -d {target} ]]; then mkdir -p {target}; fi;'], timeout=60)
	if clean_dir_result.returncode != 0:
		return clean_dir_result.returncode

	try:	
		install_result = subprocess.run(['scp', '-r', source, f'{robot_address}:{target}'])
		print(install_result)
		return install_result.returncode
				
	except subprocess.TimeoutExpired:
		print(f'{robot_address} Timed out')

	return 13

def load_install_params():
	"""
		Get installation definition
		RETURNS:
			source: string or path like object, the target directory to copy
			target: string or path like object, the target directory to copy to
			ID: string or path like object, the identify file of the install (self.yaml)
	"""

	# Setup Parameters for install
	project_root = os.getenv('PROJECT_ROOT')
	source = os.path.join(project_root, 'buffpy')
	target = os.path.join('/home', 'cu-robotics', 'buff-code')
	ID = os.path.join(project_root, 'buffpy', 'data', 'robots', 'self.txt')

	if len(os.listdir(os.path.join(source, 'lib'))) == 0:
		print("Workspace not built, run:\n\t \'buffpy --build <profile>\'")
		return

	# Don't install from edge devices (robot)
	if 'edge' in os.getenv('HOSTNAME'):
		print(f'Can\'t install from device: {os.getenv("HOSTNAME")}')
		return

	devices = get_devices()

	return source, target, ID, devices

def initialize_devices():
	"""
		Deploy buffpy and run installation on
		each registered device.
	"""

	# define the installation
	source, target, ID, devices = load_install_params()

	data_target = os.path.join(target, 'buffpy', 'data')
	src_target = os.path.join(target, 'buffpy')
	data_source = os.path.join(source, 'data', 'install')
	src_source = os.path.join(source, 'scripts')

	print(f'Running install as\n\tSource: {source}\n\tTarget: {target}\n\tID: {ID}\n\tDevices: {devices}')

	for robot in devices:
		# set target destination
		robot_address = f'cu-robotics@{robot}'
		# deploy buffpy and source the install scripts
		clean_dir_result = subprocess.run(['ssh', robot_address, f'if [[ -d {target} ]]; then rm -rf {target}/; fi; mkdir -p {target}'], timeout=30)

		if clean_dir_result.returncode != 0:
			print(f'Failed to clean {robot}')
			continue
		elif deploy_directory(robot_address, data_source, data_target) != 0:
			print(f'Failed to install data to {robot}')
			continue
		elif deploy_directory(robot_address, src_source, src_target) != 0:
			print(f'Failed to install code to {robot}')
			continue

		try:
			setup_result = subprocess.run(['ssh', 
					'-t',
					robot_address, 
					f'cd /home/cu-robotics/buff-code && source buffpy/scripts/install.bash'])

		except subprocess.TimeoutExpired:
			print(f'{robot_address} Timed out')

def deploy_all_devices():
	"""
		Install built code to all robots
		regestered in robots.yaml
		requires password
			1 - without installed keys
			0 - with installed keys
	"""

	# define the installation
	source, target, ID, devices = load_install_params()

	print(f'Deploying with\n\tSource: {source}\n\tTarget: {target}\n\tID: {ID}\n\tDevices: {devices}')

	for robot in devices:

		# get robot type
		robot_type = devices[robot]
		# set target destination
		robot_address = f'cu-robotics@{robot}'
		# set default robot
		with open(ID, 'w+') as f:
			f.write(f"{robot_type}")
	
		# if root does exist remove it
		try:	
			clean_dir_result = subprocess.run(['ssh', robot_address, f'if [[ -d {target}/buffpy ]]; then rm -rf {target}/buffpy; fi; mkdir -p {target}'], timeout=30)
			if clean_dir_result.returncode == 0:
				deploy_directory(robot_address, source, target)

		except subprocess.TimeoutExpired:
			print(f'{robot_address} Timed out')

def docker_build_and_push(path, image):
	subprocess.run(f'cd {path} && \
				docker compose build {image} && \
				docker compose push {image}', shell=True)

def dig(path):
	compose_file = os.path.join(path, 'docker-compose.yaml')
	with open(compose_file, 'r')  as f:
		compose_data = yaml.safe_load(f)

	for build in compose_data['services']:
		if 'base' in build:
			docker_build_and_push(path, build)

	for build in compose_data['services']:
		if 'dev' in build:
			docker_build_and_push(path, build)
		
			
def parse_arguments():
	"""
		Handles parsing all inputs to buff
		PARAMS
			None
		RETURNS
			parsedargs: argparse args object
	"""
	parser = argparse.ArgumentParser(prog=sys.argv[0],
	description='CU-Robotics Multi-Agent Deployment Manager')
	parser.add_argument('--installKeys',
		action='store_true',
		help='Push local sshkeys to the robots')
	parser.add_argument('--botPull', 
		action='store_true',
		help='Pull data from the robot at ROBOT_IP')
	parser.add_argument('-b', '--build', 
		nargs='?',
		metavar='PROFILE',
		const='',
		help='Builds the workspace locally')
	parser.add_argument('--train', 
		metavar='MODEL',
		default='',
		help='Trains a Yolov5 model locally')
	parser.add_argument('-d', '--deploy', 
		action='store_true',
		help='Deploys build to the registered robots')
	parser.add_argument('--diagnostic', 
		action='store_true',
		help='Tests a workspace installation and tools')
	parser.add_argument('-i', '--initialize', 
		action='store_true',
		help='Initializes registered devices')
	parser.add_argument('-u', '--upload', 
		nargs='?',
		const='main',
		help='Uploads firmware with PIO')
	parser.add_argument('--dig', 
		action='store_true',
		help='Builds the docker images')
	parser.add_argument('-c', '--clean',
		metavar='MODE',
		default='',
		help='Clean the current bin and data, NOT recoverable; only run this if you are sure you want to')
	parser.add_argument('-v', '--verbose',
		metavar='Verbosity',
		nargs='?',
		const='0',
		help='kinda like a volume')

	return parser.parse_args(sys.argv[1:])
						
def main(ap):

	if ap.clean:
		clean_buffpy(ap.clean)

	if ap.diagnostic:
		diagnostic()

	if ap.installKeys:
		install_ssh_keys()

	if ap.initialize:
		initialize_devices()

	if ap.build:
		build_buffpy(ap.build, ap.verbose)

	if ap.train:
		train_model(ap.train)

	if ap.deploy:
		deploy_all_devices()

	if ap.dig:
		path = os.path.join(os.getenv('PROJECT_ROOT'), 'containers')
		dig(path)

	if ap.upload:
		cmd = generate_pio_command(ap.upload, ap.verbose)
		result = subprocess.run(cmd, shell=True)
		

	if ap.botPull:
		result = subprocess.run(['scp', f'{os.getenv("ROBOT_ADDRESS")}:{os.getenv("ROBOT_ROOT")}/data', f'{os.getenv("PROJECT_ROOT")}/data'])

if __name__ == '__main__':
	ap = parse_arguments()
	main(ap)

